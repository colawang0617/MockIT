"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/asn1.js-rfc5280";
exports.ids = ["vendor-chunks/asn1.js-rfc5280"];
exports.modules = {

/***/ "(rsc)/./node_modules/asn1.js-rfc5280/index.js":
/*!***********************************************!*\
  !*** ./node_modules/asn1.js-rfc5280/index.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nconst asn1 = __webpack_require__(/*! asn1.js */ \"(rsc)/./node_modules/asn1.js/lib/asn1.js\");\n\n/**\n * RFC5280 X509 and Extension Definitions\n */\n\nconst rfc5280 = exports;\n\n// OIDs\nconst x509OIDs = {\n  '2 5 29 9': 'subjectDirectoryAttributes',\n  '2 5 29 14': 'subjectKeyIdentifier',\n  '2 5 29 15': 'keyUsage',\n  '2 5 29 17': 'subjectAlternativeName',\n  '2 5 29 18': 'issuerAlternativeName',\n  '2 5 29 19': 'basicConstraints',\n  '2 5 29 20': 'cRLNumber',\n  '2 5 29 21': 'reasonCode',\n  '2 5 29 24': 'invalidityDate',\n  '2 5 29 27': 'deltaCRLIndicator',\n  '2 5 29 28': 'issuingDistributionPoint',\n  '2 5 29 29': 'certificateIssuer',\n  '2 5 29 30': 'nameConstraints',\n  '2 5 29 31': 'cRLDistributionPoints',\n  '2 5 29 32': 'certificatePolicies',\n  '2 5 29 33': 'policyMappings',\n  '2 5 29 35': 'authorityKeyIdentifier',\n  '2 5 29 36': 'policyConstraints',\n  '2 5 29 37': 'extendedKeyUsage',\n  '2 5 29 46': 'freshestCRL',\n  '2 5 29 54': 'inhibitAnyPolicy',\n  '1 3 6 1 5 5 7 1 1': 'authorityInformationAccess',\n  '1 3 6 1 5 5 7 11': 'subjectInformationAccess'\n};\n\n// CertificateList  ::=  SEQUENCE  {\n//      tbsCertList          TBSCertList,\n//      signatureAlgorithm   AlgorithmIdentifier,\n//      signature            BIT STRING  }\nconst CertificateList = asn1.define('CertificateList', function() {\n  this.seq().obj(\n    this.key('tbsCertList').use(TBSCertList),\n    this.key('signatureAlgorithm').use(AlgorithmIdentifier),\n    this.key('signature').bitstr()\n  );\n});\nrfc5280.CertificateList = CertificateList;\n\n// AlgorithmIdentifier  ::=  SEQUENCE  {\n//      algorithm               OBJECT IDENTIFIER,\n//      parameters              ANY DEFINED BY algorithm OPTIONAL  }\nconst AlgorithmIdentifier = asn1.define('AlgorithmIdentifier', function() {\n  this.seq().obj(\n    this.key('algorithm').objid(),\n    this.key('parameters').optional().any()\n  );\n});\nrfc5280.AlgorithmIdentifier = AlgorithmIdentifier;\n\n// Certificate  ::=  SEQUENCE  {\n//      tbsCertificate       TBSCertificate,\n//      signatureAlgorithm   AlgorithmIdentifier,\n//      signature            BIT STRING  }\nconst Certificate = asn1.define('Certificate', function() {\n  this.seq().obj(\n    this.key('tbsCertificate').use(TBSCertificate),\n    this.key('signatureAlgorithm').use(AlgorithmIdentifier),\n    this.key('signature').bitstr()\n  );\n});\nrfc5280.Certificate = Certificate;\n\n// TBSCertificate  ::=  SEQUENCE  {\n//      version         [0]  Version DEFAULT v1,\n//      serialNumber         CertificateSerialNumber,\n//      signature            AlgorithmIdentifier,\n//      issuer               Name,\n//      validity             Validity,\n//      subject              Name,\n//      subjectPublicKeyInfo SubjectPublicKeyInfo,\n//      issuerUniqueID  [1]  IMPLICIT UniqueIdentifier OPTIONAL,\n//      subjectUniqueID [2]  IMPLICIT UniqueIdentifier OPTIONAL,\n//      extensions      [3]  Extensions OPTIONAL\nconst TBSCertificate = asn1.define('TBSCertificate', function() {\n  this.seq().obj(\n    this.key('version').def('v1').explicit(0).use(Version),\n    this.key('serialNumber').int(),\n    this.key('signature').use(AlgorithmIdentifier),\n    this.key('issuer').use(Name),\n    this.key('validity').use(Validity),\n    this.key('subject').use(Name),\n    this.key('subjectPublicKeyInfo').use(SubjectPublicKeyInfo),\n    this.key('issuerUniqueID').optional().implicit(1).bitstr(),\n    this.key('subjectUniqueID').optional().implicit(2).bitstr(),\n    this.key('extensions').optional().explicit(3).seqof(Extension)\n  );\n});\nrfc5280.TBSCertificate = TBSCertificate;\n\n// Version  ::=  INTEGER  {  v1(0), v2(1), v3(2)  }\nconst Version = asn1.define('Version', function() {\n  this.int({\n    0: 'v1',\n    1: 'v2',\n    2: 'v3'\n  });\n});\nrfc5280.Version = Version;\n\n// Validity ::= SEQUENCE {\n//      notBefore      Time,\n//      notAfter       Time  }\nconst Validity = asn1.define('Validity', function() {\n  this.seq().obj(\n    this.key('notBefore').use(Time),\n    this.key('notAfter').use(Time)\n  );\n});\nrfc5280.Validity = Validity;\n\n// Time ::= CHOICE {\n//      utcTime        UTCTime,\n//      generalTime    GeneralizedTime }\nconst Time = asn1.define('Time', function() {\n  this.choice({\n    utcTime: this.utctime(),\n    genTime: this.gentime()\n  });\n});\nrfc5280.Time = Time;\n\n// SubjectPublicKeyInfo  ::=  SEQUENCE  {\n//      algorithm            AlgorithmIdentifier,\n//      subjectPublicKey     BIT STRING  }\nconst SubjectPublicKeyInfo = asn1.define('SubjectPublicKeyInfo', function() {\n  this.seq().obj(\n    this.key('algorithm').use(AlgorithmIdentifier),\n    this.key('subjectPublicKey').bitstr()\n  );\n});\nrfc5280.SubjectPublicKeyInfo = SubjectPublicKeyInfo;\n\n// TBSCertList  ::=  SEQUENCE  {\n//      version                 Version OPTIONAL,\n//      signature               AlgorithmIdentifier,\n//      issuer                  Name,\n//      thisUpdate              Time,\n//      nextUpdate              Time OPTIONAL,\n//      revokedCertificates     SEQUENCE OF SEQUENCE  {\n//           userCertificate         CertificateSerialNumber,\n//           revocationDate          Time,\n//           crlEntryExtensions      Extensions OPTIONAL\n//      }  OPTIONAL,\n//      crlExtensions           [0] Extensions OPTIONAL }\nconst TBSCertList = asn1.define('TBSCertList', function() {\n  this.seq().obj(\n    this.key('version').optional().int(),\n    this.key('signature').use(AlgorithmIdentifier),\n    this.key('issuer').use(Name),\n    this.key('thisUpdate').use(Time),\n    this.key('nextUpdate').use(Time),\n    this.key('revokedCertificates').optional().seqof(RevokedCertificate),\n    this.key('crlExtensions').explicit(0).optional().seqof(Extension)\n  );\n});\nrfc5280.TBSCertList = TBSCertList;\n\nconst RevokedCertificate = asn1.define('RevokedCertificate', function() {\n  this.seq().obj(\n    this.key('userCertificate').use(CertificateSerialNumber),\n    this.key('revocationDate').use(Time),\n    this.key('crlEntryExtensions').optional().seqof(Extension)\n  );\n});\n\n// Extension  ::=  SEQUENCE  {\n//      extnID      OBJECT IDENTIFIER,\n//      critical    BOOLEAN DEFAULT FALSE,\n//      extnValue   OCTET STRING }\nconst Extension = asn1.define('Extension', function() {\n  this.seq().obj(\n    this.key('extnID').objid(x509OIDs),\n    this.key('critical').bool().def(false),\n    this.key('extnValue').octstr().contains(function(obj) {\n      const out = x509Extensions[obj.extnID];\n      // Cope with unknown extensions\n      return out ? out : asn1.define('OctString', function() { this.any(); });\n    })\n  );\n});\nrfc5280.Extension = Extension;\n\n// Name ::= CHOICE { -- only one possibility for now --\n//      rdnSequence  RDNSequence }\nconst Name = asn1.define('Name', function() {\n  this.choice({\n    rdnSequence: this.use(RDNSequence)\n  });\n});\nrfc5280.Name = Name;\n\n// GeneralName ::= CHOICE {\n//      otherName                 [0]  AnotherName,\n//      rfc822Name                [1]  IA5String,\n//      dNSName                   [2]  IA5String,\n//      x400Address               [3]  ORAddress,\n//      directoryName             [4]  Name,\n//      ediPartyName              [5]  EDIPartyName,\n//      uniformResourceIdentifier [6]  IA5String,\n//      iPAddress                 [7]  OCTET STRING,\n//      registeredID              [8]  OBJECT IDENTIFIER }\nconst GeneralName = asn1.define('GeneralName', function() {\n  this.choice({\n    otherName: this.implicit(0).use(AnotherName),\n    rfc822Name: this.implicit(1).ia5str(),\n    dNSName: this.implicit(2).ia5str(),\n    directoryName: this.explicit(4).use(Name),\n    ediPartyName: this.implicit(5).use(EDIPartyName),\n    uniformResourceIdentifier: this.implicit(6).ia5str(),\n    iPAddress: this.implicit(7).octstr(),\n    registeredID: this.implicit(8).objid()\n  });\n});\nrfc5280.GeneralName = GeneralName;\n\n// GeneralNames ::= SEQUENCE SIZE (1..MAX) OF GeneralName\nconst GeneralNames = asn1.define('GeneralNames', function() {\n  this.seqof(GeneralName);\n});\nrfc5280.GeneralNames = GeneralNames;\n\n// AnotherName ::= SEQUENCE {\n//      type-id    OBJECT IDENTIFIER,\n//      value      [0] EXPLICIT ANY DEFINED BY type-id }\nconst AnotherName = asn1.define('AnotherName', function() {\n  this.seq().obj(\n    this.key('type-id').objid(),\n    this.key('value').explicit(0).any()\n  );\n});\nrfc5280.AnotherName = AnotherName;\n\n// EDIPartyName ::= SEQUENCE {\n//      nameAssigner              [0]  DirectoryString OPTIONAL,\n//      partyName                 [1]  DirectoryString }\nconst EDIPartyName = asn1.define('EDIPartyName', function() {\n  this.seq().obj(\n    this.key('nameAssigner').implicit(0).optional().use(DirectoryString),\n    this.key('partyName').implicit(1).use(DirectoryString)\n  );\n});\nrfc5280.EDIPartyName = EDIPartyName;\n\n// RDNSequence ::= SEQUENCE OF RelativeDistinguishedName\nconst RDNSequence = asn1.define('RDNSequence', function() {\n  this.seqof(RelativeDistinguishedName);\n});\nrfc5280.RDNSequence = RDNSequence;\n\n// RelativeDistinguishedName ::=\n//      SET SIZE (1..MAX) OF AttributeTypeAndValue\nconst RelativeDistinguishedName = asn1.define('RelativeDistinguishedName',\n  function() {\n    this.setof(AttributeTypeAndValue);\n  });\nrfc5280.RelativeDistinguishedName = RelativeDistinguishedName;\n\n// AttributeTypeAndValue ::= SEQUENCE {\n//      type     AttributeType,\n//      value    AttributeValue }\nconst AttributeTypeAndValue = asn1.define('AttributeTypeAndValue', function() {\n  this.seq().obj(\n    this.key('type').use(AttributeType),\n    this.key('value').use(AttributeValue)\n  );\n});\nrfc5280.AttributeTypeAndValue = AttributeTypeAndValue;\n\n// Attribute               ::= SEQUENCE {\n//       type             AttributeType,\n//       values    SET OF AttributeValue }\nconst Attribute = asn1.define('Attribute', function() {\n  this.seq().obj(\n    this.key('type').use(AttributeType),\n    this.key('values').setof(AttributeValue)\n  );\n});\nrfc5280.Attribute = Attribute;\n\n// AttributeType ::= OBJECT IDENTIFIER\nconst AttributeType = asn1.define('AttributeType', function() {\n  this.objid();\n});\nrfc5280.AttributeType = AttributeType;\n\n// AttributeValue ::= ANY -- DEFINED BY AttributeType\nconst AttributeValue = asn1.define('AttributeValue', function() {\n  this.any();\n});\nrfc5280.AttributeValue = AttributeValue;\n\n// DirectoryString ::= CHOICE {\n//       teletexString           TeletexString (SIZE (1..MAX)),\n//       printableString         PrintableString (SIZE (1..MAX)),\n//       universalString         UniversalString (SIZE (1..MAX)),\n//       utf8String              UTF8String (SIZE (1..MAX)),\n//       bmpString               BMPString (SIZE (1..MAX)) }\nconst DirectoryString = asn1.define('DirectoryString', function() {\n  this.choice({\n    teletexString: this.t61str(),\n    printableString: this.printstr(),\n    universalString: this.unistr(),\n    utf8String: this.utf8str(),\n    bmpString: this.bmpstr()\n  });\n});\nrfc5280.DirectoryString = DirectoryString;\n\n// AuthorityKeyIdentifier ::= SEQUENCE {\n//     keyIdentifier             [0] KeyIdentifier            OPTIONAL,\n//     authorityCertIssuer       [1] GeneralNames             OPTIONAL,\n//     authorityCertSerialNumber [2] CertificateSerialNumber  OPTIONAL }\nconst AuthorityKeyIdentifier = asn1.define('AuthorityKeyIdentifier', function() {\n  this.seq().obj(\n    this.key('keyIdentifier').implicit(0).optional().use(KeyIdentifier),\n    this.key('authorityCertIssuer').implicit(1).optional().use(GeneralNames),\n    this.key('authorityCertSerialNumber').implicit(2).optional()\n      .use(CertificateSerialNumber)\n  );\n});\nrfc5280.AuthorityKeyIdentifier = AuthorityKeyIdentifier;\n\n// KeyIdentifier ::= OCTET STRING\nconst KeyIdentifier = asn1.define('KeyIdentifier', function() {\n  this.octstr();\n});\nrfc5280.KeyIdentifier = KeyIdentifier;\n\n// CertificateSerialNumber  ::=  INTEGER\nconst CertificateSerialNumber = asn1.define('CertificateSerialNumber',\n  function() {\n    this.int();\n  });\nrfc5280.CertificateSerialNumber = CertificateSerialNumber;\n\n// ORAddress ::= SEQUENCE {\n//    built-in-standard-attributes BuiltInStandardAttributes,\n//    built-in-domain-defined-attributes    BuiltInDomainDefinedAttributes\n//                                            OPTIONAL,\n//    extension-attributes ExtensionAttributes OPTIONAL }\nconst ORAddress = asn1.define('ORAddress', function() {\n  this.seq().obj(\n    this.key('builtInStandardAttributes').use(BuiltInStandardAttributes),\n    this.key('builtInDomainDefinedAttributes').optional()\n      .use(BuiltInDomainDefinedAttributes),\n    this.key('extensionAttributes').optional().use(ExtensionAttributes)\n  );\n});\nrfc5280.ORAddress = ORAddress;\n\n// BuiltInStandardAttributes ::= SEQUENCE {\n//    country-name                  CountryName OPTIONAL,\n//    administration-domain-name    AdministrationDomainName OPTIONAL,\n//    network-address           [0] IMPLICIT NetworkAddress OPTIONAL,\n//    terminal-identifier       [1] IMPLICIT TerminalIdentifier OPTIONAL,\n//    private-domain-name       [2] PrivateDomainName OPTIONAL,\n//    organization-name         [3] IMPLICIT OrganizationName OPTIONAL,\n//    numeric-user-identifier   [4] IMPLICIT NumericUserIdentifier OPTIONAL,\n//    personal-name             [5] IMPLICIT PersonalName OPTIONAL,\n//    organizational-unit-names [6] IMPLICIT OrganizationalUnitNames OPTIONAL }\nconst BuiltInStandardAttributes = asn1.define('BuiltInStandardAttributes',\n  function() {\n    this.seq().obj(\n      this.key('countryName').optional().use(CountryName),\n      this.key('administrationDomainName').optional()\n        .use(AdministrationDomainName),\n      this.key('networkAddress').implicit(0).optional().use(NetworkAddress),\n      this.key('terminalIdentifier').implicit(1).optional()\n        .use(TerminalIdentifier),\n      this.key('privateDomainName').explicit(2).optional().use(PrivateDomainName),\n      this.key('organizationName').implicit(3).optional().use(OrganizationName),\n      this.key('numericUserIdentifier').implicit(4).optional()\n        .use(NumericUserIdentifier),\n      this.key('personalName').implicit(5).optional().use(PersonalName),\n      this.key('organizationalUnitNames').implicit(6).optional()\n        .use(OrganizationalUnitNames)\n    );\n  });\nrfc5280.BuiltInStandardAttributes = BuiltInStandardAttributes;\n\n// CountryName ::= CHOICE {\n//    x121-dcc-code         NumericString,\n//    iso-3166-alpha2-code  PrintableString }\nconst CountryName = asn1.define('CountryName', function() {\n  this.choice({\n    x121DccCode: this.numstr(),\n    iso3166Alpha2Code: this.printstr()\n  });\n});\nrfc5280.CountryName = CountryName;\n\n\n// AdministrationDomainName ::= CHOICE {\n//    numeric   NumericString,\n//    printable PrintableString }\nconst AdministrationDomainName = asn1.define('AdministrationDomainName',\n  function() {\n    this.choice({\n      numeric: this.numstr(),\n      printable: this.printstr()\n    });\n  });\nrfc5280.AdministrationDomainName = AdministrationDomainName;\n\n// NetworkAddress ::= X121Address\nconst NetworkAddress = asn1.define('NetworkAddress', function() {\n  this.use(X121Address);\n});\nrfc5280.NetworkAddress = NetworkAddress;\n\n// X121Address ::= NumericString\nconst X121Address = asn1.define('X121Address', function() {\n  this.numstr();\n});\nrfc5280.X121Address = X121Address;\n\n// TerminalIdentifier ::= PrintableString\nconst TerminalIdentifier = asn1.define('TerminalIdentifier', function() {\n  this.printstr();\n});\nrfc5280.TerminalIdentifier = TerminalIdentifier;\n\n// PrivateDomainName ::= CHOICE {\n//    numeric   NumericString,\n//    printable PrintableString }\nconst PrivateDomainName = asn1.define('PrivateDomainName', function() {\n  this.choice({\n    numeric: this.numstr(),\n    printable: this.printstr()\n  });\n});\nrfc5280.PrivateDomainName = PrivateDomainName;\n\n// OrganizationName ::= PrintableString\nconst OrganizationName = asn1.define('OrganizationName', function() {\n  this.printstr();\n});\nrfc5280.OrganizationName = OrganizationName;\n\n// NumericUserIdentifier ::= NumericString\nconst NumericUserIdentifier = asn1.define('NumericUserIdentifier', function() {\n  this.numstr();\n});\nrfc5280.NumericUserIdentifier = NumericUserIdentifier;\n\n// PersonalName ::= SET {\n//    surname     [0] IMPLICIT PrintableString,\n//    given-name  [1] IMPLICIT PrintableString OPTIONAL,\n//    initials    [2] IMPLICIT PrintableString OPTIONAL,\n//    generation-qualifier [3] IMPLICIT PrintableString OPTIONAL }\nconst PersonalName = asn1.define('PersonalName', function() {\n  this.set().obj(\n    this.key('surname').implicit(0).printstr(),\n    this.key('givenName').implicit(1).printstr(),\n    this.key('initials').implicit(2).printstr(),\n    this.key('generationQualifier').implicit(3).printstr()\n  );\n});\nrfc5280.PersonalName = PersonalName;\n\n// OrganizationalUnitNames ::= SEQUENCE SIZE (1..ub-organizational-units)\n//                              OF OrganizationalUnitName\nconst OrganizationalUnitNames = asn1.define('OrganizationalUnitNames',\n  function() {\n    this.seqof(OrganizationalUnitName);\n  });\nrfc5280.OrganizationalUnitNames = OrganizationalUnitNames;\n\n// OrganizationalUnitName ::= PrintableString (SIZE\n//                     (1..ub-organizational-unit-name-length))\nconst OrganizationalUnitName = asn1.define('OrganizationalUnitName', function() {\n  this.printstr();\n});\nrfc5280.OrganizationalUnitName = OrganizationalUnitName;\n\n// uiltInDomainDefinedAttributes ::= SEQUENCE SIZE\n//                     (1..ub-domain-defined-attributes)\n//                       OF BuiltInDomainDefinedAttribute\nconst BuiltInDomainDefinedAttributes = asn1.define(\n  'BuiltInDomainDefinedAttributes', function() {\n    this.seqof(BuiltInDomainDefinedAttribute);\n  });\nrfc5280.BuiltInDomainDefinedAttributes = BuiltInDomainDefinedAttributes;\n\n// BuiltInDomainDefinedAttribute ::= SEQUENCE {\n//    type PrintableString (SIZE (1..ub-domain-defined-attribute-type-length)),\n//    value PrintableString (SIZE (1..ub-domain-defined-attribute-value-length))\n//}\nconst BuiltInDomainDefinedAttribute = asn1.define('BuiltInDomainDefinedAttribute',\n  function() {\n    this.seq().obj(\n      this.key('type').printstr(),\n      this.key('value').printstr()\n    );\n  });\nrfc5280.BuiltInDomainDefinedAttribute = BuiltInDomainDefinedAttribute;\n\n\n// ExtensionAttributes ::= SET SIZE (1..ub-extension-attributes) OF\n//                ExtensionAttribute\nconst ExtensionAttributes = asn1.define('ExtensionAttributes', function() {\n  this.seqof(ExtensionAttribute);\n});\nrfc5280.ExtensionAttributes = ExtensionAttributes;\n\n// ExtensionAttribute ::=  SEQUENCE {\n//    extension-attribute-type [0] IMPLICIT INTEGER,\n//    extension-attribute-value [1] ANY DEFINED BY extension-attribute-type }\nconst ExtensionAttribute = asn1.define('ExtensionAttribute', function() {\n  this.seq().obj(\n    this.key('extensionAttributeType').implicit(0).int(),\n    this.key('extensionAttributeValue').any().explicit(1).int()\n  );\n});\nrfc5280.ExtensionAttribute = ExtensionAttribute;\n\n// SubjectKeyIdentifier ::= KeyIdentifier\nconst SubjectKeyIdentifier = asn1.define('SubjectKeyIdentifier', function() {\n  this.use(KeyIdentifier);\n});\nrfc5280.SubjectKeyIdentifier = SubjectKeyIdentifier;\n\n// KeyUsage ::= BIT STRING {\n//      digitalSignature        (0),\n//      nonRepudiation          (1),  -- recent editions of X.509 have\n//                                    -- renamed this bit to contentCommitment\n//      keyEncipherment         (2),\n//      dataEncipherment        (3),\n//      keyAgreement            (4),\n//      keyCertSign             (5),\n//      cRLSign                 (6),\n//      encipherOnly            (7),\n//      decipherOnly            (8) }\nconst KeyUsage = asn1.define('KeyUsage', function() {\n  this.bitstr();\n});\nrfc5280.KeyUsage = KeyUsage;\n\n// CertificatePolicies ::= SEQUENCE SIZE (1..MAX) OF PolicyInformation\nconst CertificatePolicies = asn1.define('CertificatePolicies', function() {\n  this.seqof(PolicyInformation);\n});\nrfc5280.CertificatePolicies = CertificatePolicies;\n\n// PolicyInformation ::= SEQUENCE {\n//      policyIdentifier   CertPolicyId,\n//      policyQualifiers   SEQUENCE SIZE (1..MAX) OF PolicyQualifierInfo\n//                           OPTIONAL }\nconst PolicyInformation = asn1.define('PolicyInformation', function() {\n  this.seq().obj(\n    this.key('policyIdentifier').use(CertPolicyId),\n    this.key('policyQualifiers').optional().use(PolicyQualifiers)\n  );\n});\nrfc5280.PolicyInformation = PolicyInformation;\n\n// CertPolicyId ::= OBJECT IDENTIFIER\nconst CertPolicyId = asn1.define('CertPolicyId', function() {\n  this.objid();\n});\nrfc5280.CertPolicyId = CertPolicyId;\n\nconst PolicyQualifiers = asn1.define('PolicyQualifiers', function() {\n  this.seqof(PolicyQualifierInfo);\n});\nrfc5280.PolicyQualifiers = PolicyQualifiers;\n\n// PolicyQualifierInfo ::= SEQUENCE {\n//      policyQualifierId  PolicyQualifierId,\n//      qualifier          ANY DEFINED BY policyQualifierId }\nconst PolicyQualifierInfo = asn1.define('PolicyQualifierInfo', function() {\n  this.seq().obj(\n    this.key('policyQualifierId').use(PolicyQualifierId),\n    this.key('qualifier').any()\n  );\n});\nrfc5280.PolicyQualifierInfo = PolicyQualifierInfo;\n\n// PolicyQualifierId ::= OBJECT IDENTIFIER\nconst PolicyQualifierId = asn1.define('PolicyQualifierId', function() {\n  this.objid();\n});\nrfc5280.PolicyQualifierId = PolicyQualifierId;\n\n// PolicyMappings ::= SEQUENCE SIZE (1..MAX) OF SEQUENCE {\n//      issuerDomainPolicy      CertPolicyId,\n//      subjectDomainPolicy     CertPolicyId }\nconst PolicyMappings = asn1.define('PolicyMappings', function() {\n  this.seqof(PolicyMapping);\n});\nrfc5280.PolicyMappings = PolicyMappings;\n\nconst PolicyMapping = asn1.define('PolicyMapping', function() {\n  this.seq().obj(\n    this.key('issuerDomainPolicy').use(CertPolicyId),\n    this.key('subjectDomainPolicy').use(CertPolicyId)\n  );\n});\nrfc5280.PolicyMapping = PolicyMapping;\n\n// SubjectAltName ::= GeneralNames\nconst SubjectAlternativeName = asn1.define('SubjectAlternativeName', function() {\n  this.use(GeneralNames);\n});\nrfc5280.SubjectAlternativeName = SubjectAlternativeName;\n\n// IssuerAltName ::= GeneralNames\nconst IssuerAlternativeName = asn1.define('IssuerAlternativeName', function() {\n  this.use(GeneralNames);\n});\nrfc5280.IssuerAlternativeName = IssuerAlternativeName;\n\n// SubjectDirectoryAttributes ::= SEQUENCE SIZE (1..MAX) OF Attribute\nconst SubjectDirectoryAttributes = asn1.define('SubjectDirectoryAttributes',\n  function() {\n    this.seqof(Attribute);\n  });\nrfc5280.SubjectDirectoryAttributes = SubjectDirectoryAttributes;\n\n// BasicConstraints ::= SEQUENCE {\n//         cA                      BOOLEAN DEFAULT FALSE,\n//         pathLenConstraint       INTEGER (0..MAX) OPTIONAL }\nconst BasicConstraints = asn1.define('BasicConstraints', function() {\n  this.seq().obj(\n    this.key('cA').bool().def(false),\n    this.key('pathLenConstraint').optional().int()\n  );\n});\nrfc5280.BasicConstraints = BasicConstraints;\n\n// NameConstraints ::= SEQUENCE {\n//            permittedSubtrees       [0]     GeneralSubtrees OPTIONAL,\n//            excludedSubtrees        [1]     GeneralSubtrees OPTIONAL }\nconst NameConstraints = asn1.define('NameConstraints', function() {\n  this.seq().obj(\n    this.key('permittedSubtrees').implicit(0).optional().use(GeneralSubtrees),\n    this.key('excludedSubtrees').implicit(1).optional().use(GeneralSubtrees)\n  );\n});\nrfc5280.NameConstraints = NameConstraints;\n\n// GeneralSubtrees ::= SEQUENCE SIZE (1..MAX) OF GeneralSubtree\nconst GeneralSubtrees = asn1.define('GeneralSubtrees', function() {\n  this.seqof(GeneralSubtree);\n});\nrfc5280.GeneralSubtrees = GeneralSubtrees;\n\n// GeneralSubtree ::= SEQUENCE {\n//            base                    GeneralName,\n//            minimum         [0]     BaseDistance DEFAULT 0,\n//            maximum         [1]     BaseDistance OPTIONAL }\nconst GeneralSubtree = asn1.define('GeneralSubtree', function() {\n  this.seq().obj(\n    this.key('base').use(GeneralName),\n    this.key('minimum').implicit(0).def(0).use(BaseDistance),\n    this.key('maximum').implicit(0).optional().use(BaseDistance)\n  );\n});\nrfc5280.GeneralSubtree = GeneralSubtree;\n\n// BaseDistance ::= INTEGER\nconst BaseDistance = asn1.define('BaseDistance', function() {\n  this.int();\n});\nrfc5280.BaseDistance = BaseDistance;\n\n// PolicyConstraints ::= SEQUENCE {\n//         requireExplicitPolicy           [0] SkipCerts OPTIONAL,\n//         inhibitPolicyMapping            [1] SkipCerts OPTIONAL }\nconst PolicyConstraints = asn1.define('PolicyConstraints', function() {\n  this.seq().obj(\n    this.key('requireExplicitPolicy').implicit(0).optional().use(SkipCerts),\n    this.key('inhibitPolicyMapping').implicit(1).optional().use(SkipCerts)\n  );\n});\nrfc5280.PolicyConstraints = PolicyConstraints;\n\n// SkipCerts ::= INTEGER\nconst SkipCerts = asn1.define('SkipCerts', function() {\n  this.int();\n});\nrfc5280.SkipCerts = SkipCerts;\n\n// ExtKeyUsageSyntax ::= SEQUENCE SIZE (1..MAX) OF KeyPurposeId\nconst ExtendedKeyUsage = asn1.define('ExtendedKeyUsage', function() {\n  this.seqof(KeyPurposeId);\n});\nrfc5280.ExtendedKeyUsage = ExtendedKeyUsage;\n\n// KeyPurposeId ::= OBJECT IDENTIFIER\nconst KeyPurposeId = asn1.define('KeyPurposeId', function() {\n  this.objid();\n});\nrfc5280.KeyPurposeId = KeyPurposeId;\n\n// RLDistributionPoints ::= SEQUENCE SIZE (1..MAX) OF DistributionPoint\nconst CRLDistributionPoints = asn1.define('CRLDistributionPoints', function() {\n  this.seqof(DistributionPoint);\n});\nrfc5280.CRLDistributionPoints = CRLDistributionPoints;\n\n// DistributionPoint ::= SEQUENCE {\n//         distributionPoint       [0]     DistributionPointName OPTIONAL,\n//         reasons                 [1]     ReasonFlags OPTIONAL,\n//         cRLIssuer               [2]     GeneralNames OPTIONAL }\nconst DistributionPoint = asn1.define('DistributionPoint', function() {\n  this.seq().obj(\n    this.key('distributionPoint').optional().explicit(0)\n      .use(DistributionPointName),\n    this.key('reasons').optional().implicit(1).use(ReasonFlags),\n    this.key('cRLIssuer').optional().implicit(2).use(GeneralNames)\n  );\n});\nrfc5280.DistributionPoint = DistributionPoint;\n\n// DistributionPointName ::= CHOICE {\n//         fullName                [0]     GeneralNames,\n//         nameRelativeToCRLIssuer [1]     RelativeDistinguishedName }\nconst DistributionPointName = asn1.define('DistributionPointName', function() {\n  this.choice({\n    fullName: this.implicit(0).use(GeneralNames),\n    nameRelativeToCRLIssuer: this.implicit(1).use(RelativeDistinguishedName)\n  });\n});\nrfc5280.DistributionPointName = DistributionPointName;\n\n// ReasonFlags ::= BIT STRING {\n//         unused                  (0),\n//         keyCompromise           (1),\n//         cACompromise            (2),\n//         affiliationChanged      (3),\n//         superseded              (4),\n//         cessationOfOperation    (5),\n//         certificateHold         (6),\n//         privilegeWithdrawn      (7),\n//         aACompromise            (8) }\nconst ReasonFlags = asn1.define('ReasonFlags', function() {\n  this.bitstr();\n});\nrfc5280.ReasonFlags = ReasonFlags;\n\n// InhibitAnyPolicy ::= SkipCerts\nconst InhibitAnyPolicy = asn1.define('InhibitAnyPolicy', function() {\n  this.use(SkipCerts);\n});\nrfc5280.InhibitAnyPolicy = InhibitAnyPolicy;\n\n// FreshestCRL ::= CRLDistributionPoints\nconst FreshestCRL = asn1.define('FreshestCRL', function() {\n  this.use(CRLDistributionPoints);\n});\nrfc5280.FreshestCRL = FreshestCRL;\n\n// AuthorityInfoAccessSyntax  ::=\n//         SEQUENCE SIZE (1..MAX) OF AccessDescription\nconst AuthorityInfoAccessSyntax = asn1.define('AuthorityInfoAccessSyntax',\n  function() {\n    this.seqof(AccessDescription);\n  });\nrfc5280.AuthorityInfoAccessSyntax = AuthorityInfoAccessSyntax;\n\n// AccessDescription  ::=  SEQUENCE {\n//         accessMethod          OBJECT IDENTIFIER,\n//         accessLocation        GeneralName  }\nconst AccessDescription = asn1.define('AccessDescription', function() {\n  this.seq().obj(\n    this.key('accessMethod').objid(),\n    this.key('accessLocation').use(GeneralName)\n  );\n});\nrfc5280.AccessDescription = AccessDescription;\n\n// SubjectInfoAccessSyntax  ::=\n//            SEQUENCE SIZE (1..MAX) OF AccessDescription\nconst SubjectInformationAccess = asn1.define('SubjectInformationAccess',\n  function() {\n    this.seqof(AccessDescription);\n  });\nrfc5280.SubjectInformationAccess = SubjectInformationAccess;\n\n/**\n * CRL Extensions\n */\n\n// CRLNumber ::= INTEGER\nconst CRLNumber = asn1.define('CRLNumber', function() {\n  this.int();\n});\nrfc5280.CRLNumber = CRLNumber;\n\nconst DeltaCRLIndicator = asn1.define('DeltaCRLIndicator', function() {\n  this.use(CRLNumber);\n});\nrfc5280.DeltaCRLIndicator = DeltaCRLIndicator;\n\n// IssuingDistributionPoint ::= SEQUENCE {\n//         distributionPoint          [0] DistributionPointName OPTIONAL,\n//         onlyContainsUserCerts      [1] BOOLEAN DEFAULT FALSE,\n//         onlyContainsCACerts        [2] BOOLEAN DEFAULT FALSE,\n//         onlySomeReasons            [3] ReasonFlags OPTIONAL,\n//         indirectCRL                [4] BOOLEAN DEFAULT FALSE,\n//         onlyContainsAttributeCerts [5] BOOLEAN DEFAULT FALSE }\nconst IssuingDistributionPoint = asn1.define('IssuingDistributionPoint',\n  function() {\n    this.seq().obj(\n      this.key('distributionPoint').explicit(0).optional()\n        .use(DistributionPointName),\n      this.key('onlyContainsUserCerts').implicit(1).def(false).bool(),\n      this.key('onlyContainsCACerts').implicit(2).def(false).bool(),\n      this.key('onlySomeReasons').implicit(3).optional().use(ReasonFlags),\n      this.key('indirectCRL').implicit(4).def(false).bool(),\n      this.key('onlyContainsAttributeCerts').implicit(5).def(false).bool()\n    );\n  });\nrfc5280.IssuingDistributionPoint = IssuingDistributionPoint;\n\n// CRLReason ::= ENUMERATED {\n//         unspecified             (0),\n//         keyCompromise           (1),\n//         cACompromise            (2),\n//         affiliationChanged      (3),\n//         superseded              (4),\n//         cessationOfOperation    (5),\n//         certificateHold         (6),\n//         -- value 7 is not used\n//         removeFromCRL           (8),\n//         privilegeWithdrawn      (9),\n//         aACompromise           (10) }\nconst ReasonCode = asn1.define('ReasonCode', function() {\n  this.enum({\n    0: 'unspecified',\n    1: 'keyCompromise',\n    2: 'cACompromise',\n    3: 'affiliationChanged',\n    4: 'superseded',\n    5: 'cessationOfOperation',\n    6: 'certificateHold',\n    8: 'removeFromCRL',\n    9: 'privilegeWithdrawn',\n    10: 'aACompromise'\n  });\n});\nrfc5280.ReasonCode = ReasonCode;\n\n// InvalidityDate ::=  GeneralizedTime\nconst InvalidityDate = asn1.define('InvalidityDate', function() {\n  this.gentime();\n});\nrfc5280.InvalidityDate = InvalidityDate;\n\n// CertificateIssuer ::=     GeneralNames\nconst CertificateIssuer = asn1.define('CertificateIssuer', function() {\n  this.use(GeneralNames);\n});\nrfc5280.CertificateIssuer = CertificateIssuer;\n\n// OID label to extension model mapping\nconst x509Extensions = {\n  subjectDirectoryAttributes: SubjectDirectoryAttributes,\n  subjectKeyIdentifier: SubjectKeyIdentifier,\n  keyUsage: KeyUsage,\n  subjectAlternativeName: SubjectAlternativeName,\n  issuerAlternativeName: IssuerAlternativeName,\n  basicConstraints: BasicConstraints,\n  cRLNumber: CRLNumber,\n  reasonCode: ReasonCode,\n  invalidityDate: InvalidityDate,\n  deltaCRLIndicator: DeltaCRLIndicator,\n  issuingDistributionPoint: IssuingDistributionPoint,\n  certificateIssuer: CertificateIssuer,\n  nameConstraints: NameConstraints,\n  cRLDistributionPoints: CRLDistributionPoints,\n  certificatePolicies: CertificatePolicies,\n  policyMappings: PolicyMappings,\n  authorityKeyIdentifier: AuthorityKeyIdentifier,\n  policyConstraints: PolicyConstraints,\n  extendedKeyUsage: ExtendedKeyUsage,\n  freshestCRL: FreshestCRL,\n  inhibitAnyPolicy: InhibitAnyPolicy,\n  authorityInformationAccess: AuthorityInfoAccessSyntax,\n  subjectInformationAccess: SubjectInformationAccess\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/asn1.js-rfc5280/index.js\n");

/***/ })

};
;