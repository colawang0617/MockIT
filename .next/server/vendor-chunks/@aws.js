"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@aws";
exports.ids = ["vendor-chunks/@aws"];
exports.modules = {

/***/ "(rsc)/./node_modules/@aws/lambda-invoke-store/dist/invoke-store.js":
/*!********************************************************************!*\
  !*** ./node_modules/@aws/lambda-invoke-store/dist/invoke-store.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.InvokeStore = void 0;\nconst async_hooks_1 = __webpack_require__(/*! async_hooks */ \"async_hooks\");\n// AWS_LAMBDA_NODEJS_NO_GLOBAL_AWSLAMBDA provides an escape hatch since we're modifying the global object which may not be expected to a customer's handler.\nconst noGlobalAwsLambda = process.env[\"AWS_LAMBDA_NODEJS_NO_GLOBAL_AWSLAMBDA\"] === \"1\" ||\n    process.env[\"AWS_LAMBDA_NODEJS_NO_GLOBAL_AWSLAMBDA\"] === \"true\";\nif (!noGlobalAwsLambda) {\n    globalThis.awslambda = globalThis.awslambda || {};\n}\nconst PROTECTED_KEYS = {\n    REQUEST_ID: Symbol(\"_AWS_LAMBDA_REQUEST_ID\"),\n    X_RAY_TRACE_ID: Symbol(\"_AWS_LAMBDA_X_RAY_TRACE_ID\"),\n};\n/**\n * InvokeStore implementation class\n */\nclass InvokeStoreImpl {\n    static storage = new async_hooks_1.AsyncLocalStorage();\n    // Protected keys for Lambda context fields\n    static PROTECTED_KEYS = PROTECTED_KEYS;\n    /**\n     * Initialize and run code within an invoke context\n     */\n    static run(context, fn) {\n        return this.storage.run({ ...context }, fn);\n    }\n    /**\n     * Get the complete current context\n     */\n    static getContext() {\n        return this.storage.getStore();\n    }\n    /**\n     * Get a specific value from the context by key\n     */\n    static get(key) {\n        const context = this.storage.getStore();\n        return context?.[key];\n    }\n    /**\n     * Set a custom value in the current context\n     * Protected Lambda context fields cannot be overwritten\n     */\n    static set(key, value) {\n        if (this.isProtectedKey(key)) {\n            throw new Error(`Cannot modify protected Lambda context field`);\n        }\n        const context = this.storage.getStore();\n        if (context) {\n            context[key] = value;\n        }\n    }\n    /**\n     * Get the current request ID\n     */\n    static getRequestId() {\n        return this.get(this.PROTECTED_KEYS.REQUEST_ID) ?? \"-\";\n    }\n    /**\n     * Get the current X-ray trace ID\n     */\n    static getXRayTraceId() {\n        return this.get(this.PROTECTED_KEYS.X_RAY_TRACE_ID);\n    }\n    /**\n     * Check if we're currently within an invoke context\n     */\n    static hasContext() {\n        return this.storage.getStore() !== undefined;\n    }\n    /**\n     * Check if a key is protected (readonly Lambda context field)\n     */\n    static isProtectedKey(key) {\n        return (key === this.PROTECTED_KEYS.REQUEST_ID ||\n            key === this.PROTECTED_KEYS.X_RAY_TRACE_ID);\n    }\n}\nlet instance;\nif (!noGlobalAwsLambda && globalThis.awslambda?.InvokeStore) {\n    instance = globalThis.awslambda.InvokeStore;\n}\nelse {\n    instance = InvokeStoreImpl;\n    if (!noGlobalAwsLambda && globalThis.awslambda) {\n        globalThis.awslambda.InvokeStore = instance;\n    }\n}\nexports.InvokeStore = instance;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGF3cy9sYW1iZGEtaW52b2tlLXN0b3JlL2Rpc3QvaW52b2tlLXN0b3JlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG1CQUFtQjtBQUNuQixzQkFBc0IsbUJBQU8sQ0FBQyxnQ0FBYTtBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0MsWUFBWTtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIiLCJzb3VyY2VzIjpbIi9Vc2Vycy93YW5naGFvdGFpL0Rlc2t0b3AvZWx2ZW5sYWIvSFRWL25vZGVfbW9kdWxlcy9AYXdzL2xhbWJkYS1pbnZva2Utc3RvcmUvZGlzdC9pbnZva2Utc3RvcmUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkludm9rZVN0b3JlID0gdm9pZCAwO1xuY29uc3QgYXN5bmNfaG9va3NfMSA9IHJlcXVpcmUoXCJhc3luY19ob29rc1wiKTtcbi8vIEFXU19MQU1CREFfTk9ERUpTX05PX0dMT0JBTF9BV1NMQU1CREEgcHJvdmlkZXMgYW4gZXNjYXBlIGhhdGNoIHNpbmNlIHdlJ3JlIG1vZGlmeWluZyB0aGUgZ2xvYmFsIG9iamVjdCB3aGljaCBtYXkgbm90IGJlIGV4cGVjdGVkIHRvIGEgY3VzdG9tZXIncyBoYW5kbGVyLlxuY29uc3Qgbm9HbG9iYWxBd3NMYW1iZGEgPSBwcm9jZXNzLmVudltcIkFXU19MQU1CREFfTk9ERUpTX05PX0dMT0JBTF9BV1NMQU1CREFcIl0gPT09IFwiMVwiIHx8XG4gICAgcHJvY2Vzcy5lbnZbXCJBV1NfTEFNQkRBX05PREVKU19OT19HTE9CQUxfQVdTTEFNQkRBXCJdID09PSBcInRydWVcIjtcbmlmICghbm9HbG9iYWxBd3NMYW1iZGEpIHtcbiAgICBnbG9iYWxUaGlzLmF3c2xhbWJkYSA9IGdsb2JhbFRoaXMuYXdzbGFtYmRhIHx8IHt9O1xufVxuY29uc3QgUFJPVEVDVEVEX0tFWVMgPSB7XG4gICAgUkVRVUVTVF9JRDogU3ltYm9sKFwiX0FXU19MQU1CREFfUkVRVUVTVF9JRFwiKSxcbiAgICBYX1JBWV9UUkFDRV9JRDogU3ltYm9sKFwiX0FXU19MQU1CREFfWF9SQVlfVFJBQ0VfSURcIiksXG59O1xuLyoqXG4gKiBJbnZva2VTdG9yZSBpbXBsZW1lbnRhdGlvbiBjbGFzc1xuICovXG5jbGFzcyBJbnZva2VTdG9yZUltcGwge1xuICAgIHN0YXRpYyBzdG9yYWdlID0gbmV3IGFzeW5jX2hvb2tzXzEuQXN5bmNMb2NhbFN0b3JhZ2UoKTtcbiAgICAvLyBQcm90ZWN0ZWQga2V5cyBmb3IgTGFtYmRhIGNvbnRleHQgZmllbGRzXG4gICAgc3RhdGljIFBST1RFQ1RFRF9LRVlTID0gUFJPVEVDVEVEX0tFWVM7XG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZSBhbmQgcnVuIGNvZGUgd2l0aGluIGFuIGludm9rZSBjb250ZXh0XG4gICAgICovXG4gICAgc3RhdGljIHJ1bihjb250ZXh0LCBmbikge1xuICAgICAgICByZXR1cm4gdGhpcy5zdG9yYWdlLnJ1bih7IC4uLmNvbnRleHQgfSwgZm4pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGNvbXBsZXRlIGN1cnJlbnQgY29udGV4dFxuICAgICAqL1xuICAgIHN0YXRpYyBnZXRDb250ZXh0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdG9yYWdlLmdldFN0b3JlKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCBhIHNwZWNpZmljIHZhbHVlIGZyb20gdGhlIGNvbnRleHQgYnkga2V5XG4gICAgICovXG4gICAgc3RhdGljIGdldChrZXkpIHtcbiAgICAgICAgY29uc3QgY29udGV4dCA9IHRoaXMuc3RvcmFnZS5nZXRTdG9yZSgpO1xuICAgICAgICByZXR1cm4gY29udGV4dD8uW2tleV07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldCBhIGN1c3RvbSB2YWx1ZSBpbiB0aGUgY3VycmVudCBjb250ZXh0XG4gICAgICogUHJvdGVjdGVkIExhbWJkYSBjb250ZXh0IGZpZWxkcyBjYW5ub3QgYmUgb3ZlcndyaXR0ZW5cbiAgICAgKi9cbiAgICBzdGF0aWMgc2V0KGtleSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNQcm90ZWN0ZWRLZXkoa2V5KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDYW5ub3QgbW9kaWZ5IHByb3RlY3RlZCBMYW1iZGEgY29udGV4dCBmaWVsZGApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNvbnRleHQgPSB0aGlzLnN0b3JhZ2UuZ2V0U3RvcmUoKTtcbiAgICAgICAgaWYgKGNvbnRleHQpIHtcbiAgICAgICAgICAgIGNvbnRleHRba2V5XSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgY3VycmVudCByZXF1ZXN0IElEXG4gICAgICovXG4gICAgc3RhdGljIGdldFJlcXVlc3RJZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0KHRoaXMuUFJPVEVDVEVEX0tFWVMuUkVRVUVTVF9JRCkgPz8gXCItXCI7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgY3VycmVudCBYLXJheSB0cmFjZSBJRFxuICAgICAqL1xuICAgIHN0YXRpYyBnZXRYUmF5VHJhY2VJZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0KHRoaXMuUFJPVEVDVEVEX0tFWVMuWF9SQVlfVFJBQ0VfSUQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDaGVjayBpZiB3ZSdyZSBjdXJyZW50bHkgd2l0aGluIGFuIGludm9rZSBjb250ZXh0XG4gICAgICovXG4gICAgc3RhdGljIGhhc0NvbnRleHQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0b3JhZ2UuZ2V0U3RvcmUoKSAhPT0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDaGVjayBpZiBhIGtleSBpcyBwcm90ZWN0ZWQgKHJlYWRvbmx5IExhbWJkYSBjb250ZXh0IGZpZWxkKVxuICAgICAqL1xuICAgIHN0YXRpYyBpc1Byb3RlY3RlZEtleShrZXkpIHtcbiAgICAgICAgcmV0dXJuIChrZXkgPT09IHRoaXMuUFJPVEVDVEVEX0tFWVMuUkVRVUVTVF9JRCB8fFxuICAgICAgICAgICAga2V5ID09PSB0aGlzLlBST1RFQ1RFRF9LRVlTLlhfUkFZX1RSQUNFX0lEKTtcbiAgICB9XG59XG5sZXQgaW5zdGFuY2U7XG5pZiAoIW5vR2xvYmFsQXdzTGFtYmRhICYmIGdsb2JhbFRoaXMuYXdzbGFtYmRhPy5JbnZva2VTdG9yZSkge1xuICAgIGluc3RhbmNlID0gZ2xvYmFsVGhpcy5hd3NsYW1iZGEuSW52b2tlU3RvcmU7XG59XG5lbHNlIHtcbiAgICBpbnN0YW5jZSA9IEludm9rZVN0b3JlSW1wbDtcbiAgICBpZiAoIW5vR2xvYmFsQXdzTGFtYmRhICYmIGdsb2JhbFRoaXMuYXdzbGFtYmRhKSB7XG4gICAgICAgIGdsb2JhbFRoaXMuYXdzbGFtYmRhLkludm9rZVN0b3JlID0gaW5zdGFuY2U7XG4gICAgfVxufVxuZXhwb3J0cy5JbnZva2VTdG9yZSA9IGluc3RhbmNlO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@aws/lambda-invoke-store/dist/invoke-store.js\n");

/***/ })

};
;