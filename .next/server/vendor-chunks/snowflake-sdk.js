/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/snowflake-sdk";
exports.ids = ["vendor-chunks/snowflake-sdk"];
exports.modules = {

/***/ "(rsc)/./node_modules/snowflake-sdk/dist/index.js":
/*!**************************************************!*\
  !*** ./node_modules/snowflake-sdk/dist/index.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nmodule.exports = __webpack_require__(/*! ./lib/snowflake */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/snowflake.js\");\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsdUhBQTJDO0FBQzNDIiwic291cmNlcyI6WyIvVXNlcnMvd2FuZ2hhb3RhaS9EZXNrdG9wL2VsdmVubGFiL0hUVi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9kaXN0L2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9zbm93Zmxha2UnKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/dist/lib/agent/cert_util.js":
/*!****************************************************************!*\
  !*** ./node_modules/snowflake-sdk/dist/lib/agent/cert_util.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("/*\n * This software is licensed under the MIT License.\n *\n * Copyright Fedor Indutny, 2015.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nconst process = __webpack_require__(/*! process */ \"process\");\nconst ocsp = __webpack_require__(/*! @techteamer/ocsp */ \"(rsc)/./node_modules/@techteamer/ocsp/lib/ocsp.js\");\nconst rfc2560 = __webpack_require__(/*! asn1.js-rfc2560 */ \"(rsc)/./node_modules/asn1.js-rfc2560/index.js\");\nconst rfc5280 = __webpack_require__(/*! asn1.js-rfc5280 */ \"(rsc)/./node_modules/asn1.js-rfc5280/index.js\");\nconst crypto = __webpack_require__(/*! crypto */ \"crypto\");\nconst bn = __webpack_require__(/*! bn.js */ \"(rsc)/./node_modules/snowflake-sdk/node_modules/bn.js/lib/bn.js\");\nconst Errors = __webpack_require__(/*! ../errors */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/errors.js\");\nconst ErrorCodes = Errors.codes;\nconst TOLERABLE_VALIDITY_RANGE_RATIO = 0.01;\nconst MAX_CLOCK_SKEW_IN_MILLISECONDS = 900000;\nconst MIN_CACHE_WARMUP_TIME_IN_MILLISECONDS = 18000000;\n/**\n * Builds the certificate id for a given certificate.\n *\n * @param cert\n * @returns {*}\n */\nexports.buildCertId = function (cert) {\n    let issuer = cert.issuerCertificate;\n    cert = cert.raw;\n    try {\n        cert = rfc5280.Certificate.decode(cert, 'der');\n        if (issuer) {\n            issuer = issuer.raw;\n            issuer = rfc5280.Certificate.decode(issuer, 'der');\n        }\n    }\n    catch (e) {\n        return null; // if we encountered an error during decoding, return null\n    }\n    const tbsCert = cert.tbsCertificate;\n    const tbsIssuer = issuer.tbsCertificate;\n    const certID = {\n        hashAlgorithm: {\n            // algorithm: [ 2, 16, 840, 1, 101, 3, 4, 2, 1 ]  // sha256\n            algorithm: [1, 3, 14, 3, 2, 26], // sha1\n        },\n        issuerNameHash: sha1(rfc5280.Name.encode(tbsCert.issuer, 'der')),\n        issuerKeyHash: sha1(tbsIssuer.subjectPublicKeyInfo.subjectPublicKey.data),\n        serialNumber: tbsCert.serialNumber,\n    };\n    const certIDDer = rfc2560.CertID.encode(certID, 'der');\n    return encodeKey(certIDDer.toString('BASE64'));\n};\nfunction sha1(data) {\n    return crypto.createHash('sha1').update(data).digest();\n}\n/**\n * Parses a certificate and returns an object that contains decoded versions\n * of the certificate and its issuer.\n *\n * Note: this method might throw an error, so use a try-catch when calling it.\n *\n * @param cert\n * @returns {{cert: *, issuer: *}}\n */\nexports.decode = function (cert) {\n    let issuer = cert.issuerCertificate;\n    cert = cert.raw;\n    // note: this block might throw an error\n    cert = rfc5280.Certificate.decode(cert, 'der');\n    if (issuer) {\n        issuer = issuer.raw;\n        issuer = rfc5280.Certificate.decode(issuer, 'der');\n    }\n    return {\n        cert: cert,\n        issuer: issuer,\n    };\n};\n/**\n * Encode certID to a cache key\n * @param base64Key {Object}\n * @return cache key {string}\n */\nconst encodeKey = function (base64Key) {\n    const buff = Buffer.from(base64Key, 'base64');\n    const certID = rfc2560.CertID.decode(buff, 'der');\n    return (certID.issuerNameHash.toString('BASE64') +\n        '#' +\n        certID.issuerKeyHash.toString('BASE64') +\n        '#' +\n        certID.serialNumber.toString(10));\n};\nexports.encodeKey = encodeKey;\n/**\n * Encode certID to a cache key\n * @param cacheKey {Object}\n */\nconst decodeKey = function (cacheKey) {\n    // serialNumber.eq(certID.serialNumber)\n    const keys = cacheKey.split('#');\n    const issuerNameHash = Buffer.from(keys[0], 'base64');\n    const issuerKeyHash = Buffer.from(keys[1], 'base64');\n    const serialNumber = new bn(keys[2], 10);\n    const certID = {\n        hashAlgorithm: {\n            // algorithm: [ 2, 16, 840, 1, 101, 3, 4, 2, 1 ]  // sha256\n            algorithm: [1, 3, 14, 3, 2, 26], // sha1\n        },\n        issuerNameHash: issuerNameHash,\n        issuerKeyHash: issuerKeyHash,\n        serialNumber: serialNumber,\n    };\n    const certIDDer = rfc2560.CertID.encode(certID, 'der');\n    return certIDDer.toString('BASE64');\n};\nexports.decodeKey = decodeKey;\n/**\n * Calculates Tolerable validity\n * @param thisUpdate last update\n * @param nextUpdate next update\n * @returns {number}\n */\nconst calculateTolerableVadility = function (thisUpdate, nextUpdate) {\n    const currentRange = (nextUpdate - thisUpdate) * TOLERABLE_VALIDITY_RANGE_RATIO;\n    return currentRange > MIN_CACHE_WARMUP_TIME_IN_MILLISECONDS\n        ? currentRange\n        : MIN_CACHE_WARMUP_TIME_IN_MILLISECONDS;\n};\n/**\n * Checks the validity\n * @param currentTime current time\n * @param thisUpdate last update\n * @param nextUpdate next update\n * @return {boolean}\n */\nconst isValidityRange = function (currentTime, thisUpdate, nextUpdate) {\n    const tolerableValidity = calculateTolerableVadility(thisUpdate, nextUpdate);\n    return (thisUpdate - MAX_CLOCK_SKEW_IN_MILLISECONDS <= currentTime &&\n        currentTime <= nextUpdate + tolerableValidity);\n};\nexports.isValidityRange = isValidityRange;\n/**\n * Converts a epoch time in milliseconds to a UTC datetime string\n * @param epochInMilliSeconds\n * @returns {Date}\n */\nconst toUTCString = function (epochInMilliSeconds) {\n    return new Date(epochInMilliSeconds);\n};\n/**\n * Return issuer certificate or signing certificate\n * @param issuer issuer certificate\n * @param certs\n * @param raws\n */\nconst findResponder = function (issuer, certs, raws) {\n    let issuerKey = issuer.tbsCertificate.subjectPublicKeyInfo;\n    issuerKey = ocsp.utils.toPEM(rfc5280.SubjectPublicKeyInfo.encode(issuerKey, 'der'), 'PUBLIC KEY');\n    if (certs.length > 0) {\n        const currentTime = Date.now();\n        const cert = certs[0];\n        const certValidity = cert.tbsCertificate.validity;\n        if (certValidity.notAfter.value < currentTime || certValidity.notBefore.value > currentTime) {\n            return {\n                err: Errors.createOCSPError(ErrorCodes.ERR_OCSP_INVALID_CERTIFICATE_VALIDITY, 'Valid from:', toUTCString(certValidity.notBefore.value), ', Valid to:', toUTCString(certValidity.notAfter.value)),\n                responderKey: null,\n            };\n        }\n        const signAlg = ocsp.utils.sign[cert.signatureAlgorithm.algorithm.join('.')];\n        if (!signAlg) {\n            return {\n                err: Errors.createOCSPError(ErrorCodes.ERR_OCSP_NO_SIGNATURE_ALGORITHM),\n                responderKey: null,\n            };\n        }\n        const verify = crypto.createVerify(signAlg);\n        verify.update(raws[0]);\n        if (!verify.verify(issuerKey, cert.signature.data)) {\n            return {\n                err: Errors.createOCSPError(ErrorCodes.ERR_OCSP_INVALID_SIGNATURE),\n                responderKey: null,\n            };\n        }\n        let certKey = cert.tbsCertificate.subjectPublicKeyInfo;\n        certKey = ocsp.utils.toPEM(rfc5280.SubjectPublicKeyInfo.encode(certKey, 'der'), 'PUBLIC KEY');\n        return { err: null, responderKey: certKey };\n    }\n    return { err: null, responderKey: issuerKey };\n};\n/**\n * Verify OCSP response. If issuer is not specified, the signature will not be\n * verified.\n * @param issuer issuer certificate\n * @param rawRes OCSP Response\n * @returns {{success, error, revoked}|{res, success, error}}\n */\nconst verifyOCSPResponse = function (issuer, rawRes) {\n    function done(err) {\n        return {\n            err: err,\n            res: rawRes,\n        };\n    }\n    let res;\n    try {\n        res = ocsp.utils.parseResponse(rawRes);\n    }\n    catch (e) {\n        return done(e);\n    }\n    const value = res.value;\n    if (issuer) {\n        // verify signature only if issuer is given\n        const certs = res.certs;\n        const rawTBS = rawRes.slice(res.start, res.end);\n        const raws = res.certsTbs.map(function (tbs) {\n            return rawRes.slice(tbs.start, tbs.end);\n        });\n        const signAlg = ocsp.utils.sign[value.signatureAlgorithm.algorithm.join('.')];\n        if (!signAlg) {\n            return done(Errors.createOCSPError(ErrorCodes.ERR_OCSP_NO_SIGNATURE_ALGORITHM));\n        }\n        const responderStatus = findResponder(issuer, certs, raws);\n        if (responderStatus.err) {\n            return done(responderStatus.err);\n        }\n        const responderKey = responderStatus.responderKey;\n        const v = crypto.createVerify(signAlg);\n        const signature = value.signature.data;\n        v.update(rawTBS);\n        if (!v.verify(responderKey, signature)) {\n            return done(Errors.createOCSPError(ErrorCodes.ERR_OCSP_INVALID_SIGNATURE));\n        }\n    }\n    const tbs = value.tbsResponseData;\n    if (tbs.responses.length < 1) {\n        return done(Errors.createOCSPError(ErrorCodes.ERR_OCSP_NO_RESPONSE));\n    }\n    const sd = tbs.responses[0];\n    if (sd.certStatus.type === 'revoked') {\n        return done(Errors.createOCSPError(ErrorCodes.ERR_OCSP_REVOKED));\n    }\n    const currentTime = Date.now();\n    const isInjectValidity = process.env.SF_OCSP_TEST_INJECT_VALIDITY_ERROR || '';\n    if (isInjectValidity.toLowerCase() === 'true' ||\n        !isValidityRange(currentTime, sd.thisUpdate, sd.nextUpdate)) {\n        return done(Errors.createOCSPError(ErrorCodes.ERR_OCSP_INVALID_VALIDITY, 'Valid from:', toUTCString(sd.thisUpdate), ', Valid to:', toUTCString(sd.nextUpdate)));\n    }\n    const isInjectUnknown = process.env.SF_OCSP_TEST_INJECT_UNKNOWN_STATUS || '';\n    if (isInjectUnknown.toLowerCase() === 'true' || sd.certStatus.type === 'unknown') {\n        return done(Errors.createOCSPError(ErrorCodes.ERR_OCSP_UNKNOWN));\n    }\n    if (sd.certStatus.type === 'good') {\n        return done(null);\n    }\n    return done(Errors.createOCSPError(ErrorCodes.ERR_OCSP_UNKNOWN_STATE));\n};\nexports.verifyOCSPResponse = verifyOCSPResponse;\n//# sourceMappingURL=cert_util.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/dist/lib/agent/cert_util.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/dist/lib/agent/check.js":
/*!************************************************************!*\
  !*** ./node_modules/snowflake-sdk/dist/lib/agent/check.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*\n * This software is licensed under the MIT License.\n *\n * Copyright Fedor Indutny, 2015.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nconst http = __webpack_require__(/*! http */ \"http\");\nconst url = __webpack_require__(/*! url */ \"url\");\nconst ocsp = __webpack_require__(/*! @techteamer/ocsp */ \"(rsc)/./node_modules/@techteamer/ocsp/lib/ocsp.js\");\nconst rfc2560 = __webpack_require__(/*! asn1.js-rfc2560 */ \"(rsc)/./node_modules/asn1.js-rfc2560/index.js\");\nconst SnowflakeUtil = __webpack_require__(/*! ../util */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/util.js\");\nconst CertUtil = __webpack_require__(/*! ./cert_util */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/agent/cert_util.js\");\nconst GlobalConfig = __webpack_require__(/*! ../global_config */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/global_config.js\");\nconst Errors = __webpack_require__(/*! ../errors */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/errors.js\");\nconst ErrorCodes = Errors.codes;\nconst Logger = __webpack_require__(/*! ../logger */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/logger.js\");\n/**\n * OCSP specific HTTP retryable errors\n * @param statusCode\n * @returns {boolean}\n */\nconst isRetryableHttpError = function (statusCode) {\n    return ((statusCode >= 500 && statusCode < 600) ||\n        statusCode === 404 ||\n        statusCode === 403 ||\n        statusCode === 408);\n};\nfunction getResponse(uri, req, cb) {\n    uri = url.parse(uri);\n    const timeout = process.env.SF_OCSP_TEST_OCSP_RESPONDER_TIMEOUT || 10000;\n    const options = Object.assign({\n        timeout: Number(timeout),\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/ocsp-request',\n            'Content-Length': req.length,\n        },\n    }, uri);\n    function done(err, response) {\n        if (cb) {\n            cb(err, response);\n        }\n        cb = null;\n    }\n    function onResponse(response) {\n        if (response.statusCode < 200 || response.statusCode >= 400) {\n            return done(Errors.createOCSPError(ErrorCodes.ERR_OCSP_FAILED_OBTAIN_OCSP_RESPONSE, response.statusCode), response);\n        }\n        const chunks = [];\n        response.on('readable', function () {\n            const chunk = response.read();\n            if (!chunk) {\n                return;\n            }\n            chunks.push(chunk);\n        });\n        response.on('end', function () {\n            Logger.getInstance().debug('Finish OCSP responder: %s', uri.host);\n            const ocsp = Buffer.concat(chunks);\n            done(null, ocsp);\n        });\n    }\n    const httpRequest = http.request(options, onResponse);\n    httpRequest.on('error', function (e) {\n        if (cb) {\n            cb(e);\n        }\n        cb = null;\n    });\n    httpRequest.on('timeout', function () {\n        httpRequest.abort();\n        Logger.getInstance().debug('Timeout OCSP responder: %s', uri.host);\n        if (cb) {\n            cb(Errors.createOCSPError(ErrorCodes.ERR_OCSP_RESPONDER_TIMEOUT));\n        }\n        cb = null;\n    });\n    httpRequest.end(req);\n}\nmodule.exports = function check(options, cb, mock) {\n    let sync = true;\n    const isFailClosed = GlobalConfig.getOcspMode() === GlobalConfig.ocspModes.FAIL_CLOSED;\n    const maxNumRetries = isFailClosed ? 2 : 1;\n    function done(err, data) {\n        if (sync) {\n            sync = false;\n            process.nextTick(function () {\n                cb(err, data);\n            });\n            return;\n        }\n        cb(err, data);\n    }\n    let req;\n    try {\n        req = mock ? mock.req : ocsp.request.generate(options.cert, options.issuer);\n    }\n    catch (e) {\n        return done(e);\n    }\n    const ocspMethod = rfc2560['id-pkix-ocsp'].join('.');\n    let numRetries = 1;\n    let sleep = 1;\n    function ocspResponseVerify(err, raw) {\n        let retry = false;\n        if (err) {\n            if (Object.prototype.hasOwnProperty.call(err, 'code') &&\n                err.code === ErrorCodes.ERR_OCSP_RESPONDER_TIMEOUT) {\n                retry = true;\n            }\n            else if (Object.prototype.hasOwnProperty.call(err, 'message')) {\n                const errorMessage = err.message.split(' ');\n                if (errorMessage.length === 0) {\n                    return done(err);\n                }\n                try {\n                    const statusCode = parseInt(errorMessage[errorMessage.length - 1], 10);\n                    retry = isRetryableHttpError(statusCode);\n                }\n                catch (e) {\n                    // ignore\n                }\n            }\n            if (numRetries < maxNumRetries && retry) {\n                numRetries++;\n                sleep = SnowflakeUtil.nextSleepTime(1, 10, sleep);\n                setTimeout(ocspRequestSend, sleep * 1000);\n            }\n            else {\n                Logger.getInstance().debug('Failed to all retries to OCSP responder.');\n                return done(err);\n            }\n        }\n        else {\n            const status = CertUtil.verifyOCSPResponse(req.issuer, raw);\n            done(status.err, status);\n        }\n    }\n    function setOcspResponderUrl(uri) {\n        let parsedUrl = (__webpack_require__(/*! url */ \"url\").parse)(process.env.SF_OCSP_RESPONSE_CACHE_SERVER_URL);\n        let targetUrl;\n        if (parsedUrl.port) {\n            targetUrl = `${parsedUrl.protocol}//${parsedUrl.hostname}:${parsedUrl.port}/retry`;\n        }\n        else {\n            targetUrl = `${parsedUrl.protocol}//${parsedUrl.hostname}/retry`;\n        }\n        const b64data = req.data.toString('base64');\n        parsedUrl = (__webpack_require__(/*! url */ \"url\").parse)(uri);\n        process.env.SF_OCSP_RESPONDER_URL = targetUrl + '/' + parsedUrl.hostname + '/' + b64data;\n    }\n    function ocspRequestCallback(err, uri) {\n        if (err) {\n            //This error message is from @techteamer/ocsp (ocsp.utils.getAuthorityInfo)\n            if (err.message === 'AuthorityInfoAccess not found in extensions') {\n                if (!isFailClosed) {\n                    Logger.getInstance().debug('OCSP Responder URL is missing from the certificate.');\n                    return done(null);\n                }\n                else {\n                    Logger.getInstance().error('OCSP Responder URL is missing from the certificate, so cannot verify with OCSP. Aborting connection attempt due to OCSP being set to FAIL_CLOSE https://docs.snowflake.com/en/user-guide/ocsp#fail-close');\n                }\n            }\n            return done(err);\n        }\n        if (process.env.SF_OCSP_RESPONSE_CACHE_SERVER_URL &&\n            process.env.SF_OCSP_RESPONSE_CACHE_SERVER_URL.includes('ocsp_response_cache.json')) {\n            setOcspResponderUrl(uri);\n        }\n        const responderUrl = process.env.SF_OCSP_RESPONDER_URL;\n        if (responderUrl) {\n            uri = responderUrl;\n        }\n        Logger.getInstance().trace('Contact OCSP responder: %s, (%s/%s)', uri, numRetries, maxNumRetries);\n        if (!mock) {\n            getResponse(uri, req.data, ocspResponseVerify);\n        }\n    }\n    function ocspRequestSend() {\n        if (!mock) {\n            ocsp.utils.getAuthorityInfo(req.cert, ocspMethod, ocspRequestCallback);\n        }\n        else {\n            ocspRequestCallback(null, mock.uri);\n        }\n    }\n    ocspRequestSend();\n    sync = false;\n};\n//# sourceMappingURL=check.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/dist/lib/agent/check.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/dist/lib/agent/crl_cache.js":
/*!****************************************************************!*\
  !*** ./node_modules/snowflake-sdk/dist/lib/agent/crl_cache.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CRL_MEMORY_CACHE = void 0;\nexports.getCrlFromMemory = getCrlFromMemory;\nexports.setCrlInMemory = setCrlInMemory;\nexports.clearExpiredCrlFromMemoryCache = clearExpiredCrlFromMemoryCache;\nexports.clearExpiredCrlFromDiskCache = clearExpiredCrlFromDiskCache;\nexports.getCrlFromDisk = getCrlFromDisk;\nexports.writeCrlToDisk = writeCrlToDisk;\nconst path_1 = __importDefault(__webpack_require__(/*! path */ \"path\"));\nconst promises_1 = __importDefault(__webpack_require__(/*! fs/promises */ \"fs/promises\"));\nconst asn1_js_rfc5280_1 = __importDefault(__webpack_require__(/*! asn1.js-rfc5280 */ \"(rsc)/./node_modules/asn1.js-rfc5280/index.js\"));\nconst disk_cache_1 = __webpack_require__(/*! ../disk_cache */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/disk_cache.js\");\nconst global_config_typed_1 = __importDefault(__webpack_require__(/*! ../global_config_typed */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/global_config_typed.js\"));\nconst logger_1 = __importDefault(__webpack_require__(/*! ../logger */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/logger.js\"));\nexports.CRL_MEMORY_CACHE = new Map();\nfunction getCrlFromMemory(url) {\n    const cachedEntry = exports.CRL_MEMORY_CACHE.get(url);\n    if (cachedEntry) {\n        if (cachedEntry.expireAt > Date.now()) {\n            return cachedEntry.crl;\n        }\n        else {\n            exports.CRL_MEMORY_CACHE.delete(url);\n            return null;\n        }\n    }\n    else {\n        return null;\n    }\n}\nfunction setCrlInMemory(url, crl) {\n    exports.CRL_MEMORY_CACHE.set(url, {\n        expireAt: Math.min(Date.now() + global_config_typed_1.default.getValue('crlCacheValidityTime'), crl.tbsCertList.nextUpdate.value),\n        crl,\n    });\n}\nfunction clearExpiredCrlFromMemoryCache() {\n    exports.CRL_MEMORY_CACHE.forEach((entry, key) => {\n        if (entry.expireAt < Date.now()) {\n            exports.CRL_MEMORY_CACHE.delete(key);\n        }\n    });\n}\nasync function clearExpiredCrlFromDiskCache() {\n    try {\n        const cacheDir = global_config_typed_1.default.getValue('crlCacheDir');\n        for (const fileName of await promises_1.default.readdir(cacheDir)) {\n            const filePath = path_1.default.join(cacheDir, fileName);\n            const stats = await promises_1.default.stat(filePath);\n            const thirtyDaysAgo = Date.now() - 1000 * 60 * 60 * 24 * 30;\n            // NOTE:\n            // Keeping expired CRLs on disk for 30 days for debugging purposes\n            if (stats.mtime.getTime() < thirtyDaysAgo) {\n                (0, logger_1.default)().debug(`Deleting CRL file ${fileName} older than 30 days.`);\n                await promises_1.default.rm(filePath);\n            }\n        }\n    }\n    catch (error) {\n        if ((0, disk_cache_1.isFileNotFoundError)(error)) {\n            (0, logger_1.default)().debug('CRL cache directory does not exist, skipping cleanup.');\n        }\n        else {\n            (0, logger_1.default)().warn(`Failed to clear expired CRL entries from disk cache: ${error}.`);\n        }\n    }\n}\nasync function getCrlFromDisk(url) {\n    const filePath = path_1.default.join(global_config_typed_1.default.getValue('crlCacheDir'), encodeURIComponent(url));\n    try {\n        const stats = await promises_1.default.stat(filePath);\n        if (Date.now() - stats.mtime.getTime() > global_config_typed_1.default.getValue('crlCacheValidityTime')) {\n            (0, logger_1.default)().debug(`CRL ${filePath} is older than crlCacheValidityTime, ignoring.`);\n            return null;\n        }\n        const rawCrl = await promises_1.default.readFile(filePath);\n        const decodedCrl = asn1_js_rfc5280_1.default.CertificateList.decode(rawCrl, 'der');\n        if (decodedCrl.tbsCertList.nextUpdate.value > Date.now()) {\n            return decodedCrl;\n        }\n        else {\n            (0, logger_1.default)().debug(`CRL ${filePath} is expired, ignoring.`);\n            return null;\n        }\n    }\n    catch (error) {\n        if ((0, disk_cache_1.isFileNotFoundError)(error)) {\n            (0, logger_1.default)().debug(`CRL ${url} not found on disk cache.`);\n        }\n        else {\n            (0, logger_1.default)().warn(`Failed to read CRL ${filePath} from disk cache: ${error}.`);\n        }\n    }\n    return null;\n}\nasync function writeCrlToDisk(url, rawCrl) {\n    const filePath = path_1.default.join(global_config_typed_1.default.getValue('crlCacheDir'), encodeURIComponent(url));\n    try {\n        return (0, disk_cache_1.writeCacheFile)(filePath, rawCrl);\n    }\n    catch (error) {\n        (0, logger_1.default)().warn(`Failed to write CRL ${filePath} to disk cache: ${error}.`);\n    }\n}\n//# sourceMappingURL=crl_cache.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9kaXN0L2xpYi9hZ2VudC9jcmxfY2FjaGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLDZDQUE2QztBQUM3QztBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx3QkFBd0I7QUFDeEIsd0JBQXdCO0FBQ3hCLHNCQUFzQjtBQUN0QixzQ0FBc0M7QUFDdEMsb0NBQW9DO0FBQ3BDLHNCQUFzQjtBQUN0QixzQkFBc0I7QUFDdEIsK0JBQStCLG1CQUFPLENBQUMsa0JBQU07QUFDN0MsbUNBQW1DLG1CQUFPLENBQUMsZ0NBQWE7QUFDeEQsMENBQTBDLG1CQUFPLENBQUMsc0VBQWlCO0FBQ25FLHFCQUFxQixtQkFBTyxDQUFDLGdGQUFlO0FBQzVDLDhDQUE4QyxtQkFBTyxDQUFDLGtHQUF3QjtBQUM5RSxpQ0FBaUMsbUJBQU8sQ0FBQyx3RUFBVztBQUNwRCx3QkFBd0I7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtRUFBbUUsVUFBVTtBQUM3RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpR0FBaUcsTUFBTTtBQUN2RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaURBQWlELFVBQVU7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRCxVQUFVO0FBQzNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQsS0FBSztBQUN0RDtBQUNBO0FBQ0EsK0RBQStELFVBQVUsbUJBQW1CLE1BQU07QUFDbEc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0REFBNEQsVUFBVSxpQkFBaUIsTUFBTTtBQUM3RjtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy93YW5naGFvdGFpL0Rlc2t0b3AvZWx2ZW5sYWIvSFRWL25vZGVfbW9kdWxlcy9zbm93Zmxha2Utc2RrL2Rpc3QvbGliL2FnZW50L2NybF9jYWNoZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQ1JMX01FTU9SWV9DQUNIRSA9IHZvaWQgMDtcbmV4cG9ydHMuZ2V0Q3JsRnJvbU1lbW9yeSA9IGdldENybEZyb21NZW1vcnk7XG5leHBvcnRzLnNldENybEluTWVtb3J5ID0gc2V0Q3JsSW5NZW1vcnk7XG5leHBvcnRzLmNsZWFyRXhwaXJlZENybEZyb21NZW1vcnlDYWNoZSA9IGNsZWFyRXhwaXJlZENybEZyb21NZW1vcnlDYWNoZTtcbmV4cG9ydHMuY2xlYXJFeHBpcmVkQ3JsRnJvbURpc2tDYWNoZSA9IGNsZWFyRXhwaXJlZENybEZyb21EaXNrQ2FjaGU7XG5leHBvcnRzLmdldENybEZyb21EaXNrID0gZ2V0Q3JsRnJvbURpc2s7XG5leHBvcnRzLndyaXRlQ3JsVG9EaXNrID0gd3JpdGVDcmxUb0Rpc2s7XG5jb25zdCBwYXRoXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcInBhdGhcIikpO1xuY29uc3QgcHJvbWlzZXNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiZnMvcHJvbWlzZXNcIikpO1xuY29uc3QgYXNuMV9qc19yZmM1MjgwXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImFzbjEuanMtcmZjNTI4MFwiKSk7XG5jb25zdCBkaXNrX2NhY2hlXzEgPSByZXF1aXJlKFwiLi4vZGlza19jYWNoZVwiKTtcbmNvbnN0IGdsb2JhbF9jb25maWdfdHlwZWRfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi4vZ2xvYmFsX2NvbmZpZ190eXBlZFwiKSk7XG5jb25zdCBsb2dnZXJfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi4vbG9nZ2VyXCIpKTtcbmV4cG9ydHMuQ1JMX01FTU9SWV9DQUNIRSA9IG5ldyBNYXAoKTtcbmZ1bmN0aW9uIGdldENybEZyb21NZW1vcnkodXJsKSB7XG4gICAgY29uc3QgY2FjaGVkRW50cnkgPSBleHBvcnRzLkNSTF9NRU1PUllfQ0FDSEUuZ2V0KHVybCk7XG4gICAgaWYgKGNhY2hlZEVudHJ5KSB7XG4gICAgICAgIGlmIChjYWNoZWRFbnRyeS5leHBpcmVBdCA+IERhdGUubm93KCkpIHtcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRFbnRyeS5jcmw7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBleHBvcnRzLkNSTF9NRU1PUllfQ0FDSEUuZGVsZXRlKHVybCk7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxufVxuZnVuY3Rpb24gc2V0Q3JsSW5NZW1vcnkodXJsLCBjcmwpIHtcbiAgICBleHBvcnRzLkNSTF9NRU1PUllfQ0FDSEUuc2V0KHVybCwge1xuICAgICAgICBleHBpcmVBdDogTWF0aC5taW4oRGF0ZS5ub3coKSArIGdsb2JhbF9jb25maWdfdHlwZWRfMS5kZWZhdWx0LmdldFZhbHVlKCdjcmxDYWNoZVZhbGlkaXR5VGltZScpLCBjcmwudGJzQ2VydExpc3QubmV4dFVwZGF0ZS52YWx1ZSksXG4gICAgICAgIGNybCxcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGNsZWFyRXhwaXJlZENybEZyb21NZW1vcnlDYWNoZSgpIHtcbiAgICBleHBvcnRzLkNSTF9NRU1PUllfQ0FDSEUuZm9yRWFjaCgoZW50cnksIGtleSkgPT4ge1xuICAgICAgICBpZiAoZW50cnkuZXhwaXJlQXQgPCBEYXRlLm5vdygpKSB7XG4gICAgICAgICAgICBleHBvcnRzLkNSTF9NRU1PUllfQ0FDSEUuZGVsZXRlKGtleSk7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbmFzeW5jIGZ1bmN0aW9uIGNsZWFyRXhwaXJlZENybEZyb21EaXNrQ2FjaGUoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgY2FjaGVEaXIgPSBnbG9iYWxfY29uZmlnX3R5cGVkXzEuZGVmYXVsdC5nZXRWYWx1ZSgnY3JsQ2FjaGVEaXInKTtcbiAgICAgICAgZm9yIChjb25zdCBmaWxlTmFtZSBvZiBhd2FpdCBwcm9taXNlc18xLmRlZmF1bHQucmVhZGRpcihjYWNoZURpcikpIHtcbiAgICAgICAgICAgIGNvbnN0IGZpbGVQYXRoID0gcGF0aF8xLmRlZmF1bHQuam9pbihjYWNoZURpciwgZmlsZU5hbWUpO1xuICAgICAgICAgICAgY29uc3Qgc3RhdHMgPSBhd2FpdCBwcm9taXNlc18xLmRlZmF1bHQuc3RhdChmaWxlUGF0aCk7XG4gICAgICAgICAgICBjb25zdCB0aGlydHlEYXlzQWdvID0gRGF0ZS5ub3coKSAtIDEwMDAgKiA2MCAqIDYwICogMjQgKiAzMDtcbiAgICAgICAgICAgIC8vIE5PVEU6XG4gICAgICAgICAgICAvLyBLZWVwaW5nIGV4cGlyZWQgQ1JMcyBvbiBkaXNrIGZvciAzMCBkYXlzIGZvciBkZWJ1Z2dpbmcgcHVycG9zZXNcbiAgICAgICAgICAgIGlmIChzdGF0cy5tdGltZS5nZXRUaW1lKCkgPCB0aGlydHlEYXlzQWdvKSB7XG4gICAgICAgICAgICAgICAgKDAsIGxvZ2dlcl8xLmRlZmF1bHQpKCkuZGVidWcoYERlbGV0aW5nIENSTCBmaWxlICR7ZmlsZU5hbWV9IG9sZGVyIHRoYW4gMzAgZGF5cy5gKTtcbiAgICAgICAgICAgICAgICBhd2FpdCBwcm9taXNlc18xLmRlZmF1bHQucm0oZmlsZVBhdGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICBpZiAoKDAsIGRpc2tfY2FjaGVfMS5pc0ZpbGVOb3RGb3VuZEVycm9yKShlcnJvcikpIHtcbiAgICAgICAgICAgICgwLCBsb2dnZXJfMS5kZWZhdWx0KSgpLmRlYnVnKCdDUkwgY2FjaGUgZGlyZWN0b3J5IGRvZXMgbm90IGV4aXN0LCBza2lwcGluZyBjbGVhbnVwLicpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgKDAsIGxvZ2dlcl8xLmRlZmF1bHQpKCkud2FybihgRmFpbGVkIHRvIGNsZWFyIGV4cGlyZWQgQ1JMIGVudHJpZXMgZnJvbSBkaXNrIGNhY2hlOiAke2Vycm9yfS5gKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmFzeW5jIGZ1bmN0aW9uIGdldENybEZyb21EaXNrKHVybCkge1xuICAgIGNvbnN0IGZpbGVQYXRoID0gcGF0aF8xLmRlZmF1bHQuam9pbihnbG9iYWxfY29uZmlnX3R5cGVkXzEuZGVmYXVsdC5nZXRWYWx1ZSgnY3JsQ2FjaGVEaXInKSwgZW5jb2RlVVJJQ29tcG9uZW50KHVybCkpO1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHN0YXRzID0gYXdhaXQgcHJvbWlzZXNfMS5kZWZhdWx0LnN0YXQoZmlsZVBhdGgpO1xuICAgICAgICBpZiAoRGF0ZS5ub3coKSAtIHN0YXRzLm10aW1lLmdldFRpbWUoKSA+IGdsb2JhbF9jb25maWdfdHlwZWRfMS5kZWZhdWx0LmdldFZhbHVlKCdjcmxDYWNoZVZhbGlkaXR5VGltZScpKSB7XG4gICAgICAgICAgICAoMCwgbG9nZ2VyXzEuZGVmYXVsdCkoKS5kZWJ1ZyhgQ1JMICR7ZmlsZVBhdGh9IGlzIG9sZGVyIHRoYW4gY3JsQ2FjaGVWYWxpZGl0eVRpbWUsIGlnbm9yaW5nLmApO1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmF3Q3JsID0gYXdhaXQgcHJvbWlzZXNfMS5kZWZhdWx0LnJlYWRGaWxlKGZpbGVQYXRoKTtcbiAgICAgICAgY29uc3QgZGVjb2RlZENybCA9IGFzbjFfanNfcmZjNTI4MF8xLmRlZmF1bHQuQ2VydGlmaWNhdGVMaXN0LmRlY29kZShyYXdDcmwsICdkZXInKTtcbiAgICAgICAgaWYgKGRlY29kZWRDcmwudGJzQ2VydExpc3QubmV4dFVwZGF0ZS52YWx1ZSA+IERhdGUubm93KCkpIHtcbiAgICAgICAgICAgIHJldHVybiBkZWNvZGVkQ3JsO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgKDAsIGxvZ2dlcl8xLmRlZmF1bHQpKCkuZGVidWcoYENSTCAke2ZpbGVQYXRofSBpcyBleHBpcmVkLCBpZ25vcmluZy5gKTtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICBpZiAoKDAsIGRpc2tfY2FjaGVfMS5pc0ZpbGVOb3RGb3VuZEVycm9yKShlcnJvcikpIHtcbiAgICAgICAgICAgICgwLCBsb2dnZXJfMS5kZWZhdWx0KSgpLmRlYnVnKGBDUkwgJHt1cmx9IG5vdCBmb3VuZCBvbiBkaXNrIGNhY2hlLmApO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgKDAsIGxvZ2dlcl8xLmRlZmF1bHQpKCkud2FybihgRmFpbGVkIHRvIHJlYWQgQ1JMICR7ZmlsZVBhdGh9IGZyb20gZGlzayBjYWNoZTogJHtlcnJvcn0uYCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59XG5hc3luYyBmdW5jdGlvbiB3cml0ZUNybFRvRGlzayh1cmwsIHJhd0NybCkge1xuICAgIGNvbnN0IGZpbGVQYXRoID0gcGF0aF8xLmRlZmF1bHQuam9pbihnbG9iYWxfY29uZmlnX3R5cGVkXzEuZGVmYXVsdC5nZXRWYWx1ZSgnY3JsQ2FjaGVEaXInKSwgZW5jb2RlVVJJQ29tcG9uZW50KHVybCkpO1xuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiAoMCwgZGlza19jYWNoZV8xLndyaXRlQ2FjaGVGaWxlKShmaWxlUGF0aCwgcmF3Q3JsKTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICgwLCBsb2dnZXJfMS5kZWZhdWx0KSgpLndhcm4oYEZhaWxlZCB0byB3cml0ZSBDUkwgJHtmaWxlUGF0aH0gdG8gZGlzayBjYWNoZTogJHtlcnJvcn0uYCk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3JsX2NhY2hlLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/dist/lib/agent/crl_cache.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/dist/lib/agent/crl_fetcher.js":
/*!******************************************************************!*\
  !*** ./node_modules/snowflake-sdk/dist/lib/agent/crl_fetcher.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PENDING_FETCH_REQUESTS = void 0;\nexports.getCrl = getCrl;\nconst asn1_js_rfc5280_1 = __importDefault(__webpack_require__(/*! asn1.js-rfc5280 */ \"(rsc)/./node_modules/asn1.js-rfc5280/index.js\"));\nconst axios_1 = __importDefault(__webpack_require__(/*! axios */ \"(rsc)/./node_modules/axios/dist/node/axios.cjs\"));\nconst logger_1 = __importDefault(__webpack_require__(/*! ../logger */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/logger.js\"));\nconst global_config_typed_1 = __importDefault(__webpack_require__(/*! ../global_config_typed */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/global_config_typed.js\"));\nconst crl_cache_1 = __webpack_require__(/*! ./crl_cache */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/agent/crl_cache.js\");\nexports.PENDING_FETCH_REQUESTS = new Map();\nlet crlCacheCleanerCreated = false;\nasync function getCrl(url, options) {\n    const logDebug = (msg) => (0, logger_1.default)().debug(`getCrl[${url}]: ${msg}`);\n    if (!crlCacheCleanerCreated) {\n        crlCacheCleanerCreated = true;\n        const oneHour = 1000 * 60 * 60;\n        logDebug('Starting periodic memory cache cleaner');\n        setInterval(crl_cache_1.clearExpiredCrlFromMemoryCache, oneHour).unref();\n        logDebug('Starting periodic disk cache cleaner');\n        (0, crl_cache_1.clearExpiredCrlFromDiskCache)();\n        setInterval(crl_cache_1.clearExpiredCrlFromDiskCache, oneHour).unref();\n    }\n    const pendingFetchRequest = exports.PENDING_FETCH_REQUESTS.get(url);\n    if (pendingFetchRequest) {\n        logDebug(`Returning pending fetch request`);\n        return pendingFetchRequest;\n    }\n    if (options.inMemoryCache) {\n        logDebug(`Checking in-memory cache`);\n        const cachedCrl = (0, crl_cache_1.getCrlFromMemory)(url);\n        if (cachedCrl) {\n            logDebug(`Returning from in-memory cache`);\n            return cachedCrl;\n        }\n    }\n    if (options.onDiskCache) {\n        logDebug(`Checking on-disk cache`);\n        const cachedCrl = await (0, crl_cache_1.getCrlFromDisk)(url);\n        if (cachedCrl) {\n            if (options.inMemoryCache) {\n                (0, crl_cache_1.setCrlInMemory)(url, cachedCrl);\n            }\n            logDebug(`Returning from disk cache`);\n            return cachedCrl;\n        }\n    }\n    const fetchPromise = new Promise(async (resolve, reject) => {\n        try {\n            logDebug(`Downloading CRL`);\n            const { data } = await axios_1.default.get(url, {\n                timeout: global_config_typed_1.default.getValue('crlDownloadTimeout'),\n                responseType: 'arraybuffer',\n            });\n            logDebug(`Parsing CRL`);\n            const parsedCrl = asn1_js_rfc5280_1.default.CertificateList.decode(data, 'der');\n            if (options.inMemoryCache) {\n                logDebug('Saving to memory cache');\n                (0, crl_cache_1.setCrlInMemory)(url, parsedCrl);\n            }\n            if (options.onDiskCache) {\n                logDebug('Saving to disk cache');\n                await (0, crl_cache_1.writeCrlToDisk)(url, data);\n            }\n            exports.PENDING_FETCH_REQUESTS.delete(url);\n            return resolve(parsedCrl);\n        }\n        catch (error) {\n            reject(error);\n        }\n    });\n    exports.PENDING_FETCH_REQUESTS.set(url, fetchPromise);\n    return fetchPromise;\n}\n//# sourceMappingURL=crl_fetcher.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9kaXN0L2xpYi9hZ2VudC9jcmxfZmV0Y2hlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDhCQUE4QjtBQUM5QixjQUFjO0FBQ2QsMENBQTBDLG1CQUFPLENBQUMsc0VBQWlCO0FBQ25FLGdDQUFnQyxtQkFBTyxDQUFDLDZEQUFPO0FBQy9DLGlDQUFpQyxtQkFBTyxDQUFDLHdFQUFXO0FBQ3BELDhDQUE4QyxtQkFBTyxDQUFDLGtHQUF3QjtBQUM5RSxvQkFBb0IsbUJBQU8sQ0FBQyxtRkFBYTtBQUN6Qyw4QkFBOEI7QUFDOUI7QUFDQTtBQUNBLHNFQUFzRSxJQUFJLEtBQUssSUFBSTtBQUNuRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsT0FBTztBQUMzQjtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvd2FuZ2hhb3RhaS9EZXNrdG9wL2VsdmVubGFiL0hUVi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9kaXN0L2xpYi9hZ2VudC9jcmxfZmV0Y2hlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUEVORElOR19GRVRDSF9SRVFVRVNUUyA9IHZvaWQgMDtcbmV4cG9ydHMuZ2V0Q3JsID0gZ2V0Q3JsO1xuY29uc3QgYXNuMV9qc19yZmM1MjgwXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImFzbjEuanMtcmZjNTI4MFwiKSk7XG5jb25zdCBheGlvc18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJheGlvc1wiKSk7XG5jb25zdCBsb2dnZXJfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi4vbG9nZ2VyXCIpKTtcbmNvbnN0IGdsb2JhbF9jb25maWdfdHlwZWRfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi4vZ2xvYmFsX2NvbmZpZ190eXBlZFwiKSk7XG5jb25zdCBjcmxfY2FjaGVfMSA9IHJlcXVpcmUoXCIuL2NybF9jYWNoZVwiKTtcbmV4cG9ydHMuUEVORElOR19GRVRDSF9SRVFVRVNUUyA9IG5ldyBNYXAoKTtcbmxldCBjcmxDYWNoZUNsZWFuZXJDcmVhdGVkID0gZmFsc2U7XG5hc3luYyBmdW5jdGlvbiBnZXRDcmwodXJsLCBvcHRpb25zKSB7XG4gICAgY29uc3QgbG9nRGVidWcgPSAobXNnKSA9PiAoMCwgbG9nZ2VyXzEuZGVmYXVsdCkoKS5kZWJ1ZyhgZ2V0Q3JsWyR7dXJsfV06ICR7bXNnfWApO1xuICAgIGlmICghY3JsQ2FjaGVDbGVhbmVyQ3JlYXRlZCkge1xuICAgICAgICBjcmxDYWNoZUNsZWFuZXJDcmVhdGVkID0gdHJ1ZTtcbiAgICAgICAgY29uc3Qgb25lSG91ciA9IDEwMDAgKiA2MCAqIDYwO1xuICAgICAgICBsb2dEZWJ1ZygnU3RhcnRpbmcgcGVyaW9kaWMgbWVtb3J5IGNhY2hlIGNsZWFuZXInKTtcbiAgICAgICAgc2V0SW50ZXJ2YWwoY3JsX2NhY2hlXzEuY2xlYXJFeHBpcmVkQ3JsRnJvbU1lbW9yeUNhY2hlLCBvbmVIb3VyKS51bnJlZigpO1xuICAgICAgICBsb2dEZWJ1ZygnU3RhcnRpbmcgcGVyaW9kaWMgZGlzayBjYWNoZSBjbGVhbmVyJyk7XG4gICAgICAgICgwLCBjcmxfY2FjaGVfMS5jbGVhckV4cGlyZWRDcmxGcm9tRGlza0NhY2hlKSgpO1xuICAgICAgICBzZXRJbnRlcnZhbChjcmxfY2FjaGVfMS5jbGVhckV4cGlyZWRDcmxGcm9tRGlza0NhY2hlLCBvbmVIb3VyKS51bnJlZigpO1xuICAgIH1cbiAgICBjb25zdCBwZW5kaW5nRmV0Y2hSZXF1ZXN0ID0gZXhwb3J0cy5QRU5ESU5HX0ZFVENIX1JFUVVFU1RTLmdldCh1cmwpO1xuICAgIGlmIChwZW5kaW5nRmV0Y2hSZXF1ZXN0KSB7XG4gICAgICAgIGxvZ0RlYnVnKGBSZXR1cm5pbmcgcGVuZGluZyBmZXRjaCByZXF1ZXN0YCk7XG4gICAgICAgIHJldHVybiBwZW5kaW5nRmV0Y2hSZXF1ZXN0O1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy5pbk1lbW9yeUNhY2hlKSB7XG4gICAgICAgIGxvZ0RlYnVnKGBDaGVja2luZyBpbi1tZW1vcnkgY2FjaGVgKTtcbiAgICAgICAgY29uc3QgY2FjaGVkQ3JsID0gKDAsIGNybF9jYWNoZV8xLmdldENybEZyb21NZW1vcnkpKHVybCk7XG4gICAgICAgIGlmIChjYWNoZWRDcmwpIHtcbiAgICAgICAgICAgIGxvZ0RlYnVnKGBSZXR1cm5pbmcgZnJvbSBpbi1tZW1vcnkgY2FjaGVgKTtcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDcmw7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKG9wdGlvbnMub25EaXNrQ2FjaGUpIHtcbiAgICAgICAgbG9nRGVidWcoYENoZWNraW5nIG9uLWRpc2sgY2FjaGVgKTtcbiAgICAgICAgY29uc3QgY2FjaGVkQ3JsID0gYXdhaXQgKDAsIGNybF9jYWNoZV8xLmdldENybEZyb21EaXNrKSh1cmwpO1xuICAgICAgICBpZiAoY2FjaGVkQ3JsKSB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5pbk1lbW9yeUNhY2hlKSB7XG4gICAgICAgICAgICAgICAgKDAsIGNybF9jYWNoZV8xLnNldENybEluTWVtb3J5KSh1cmwsIGNhY2hlZENybCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsb2dEZWJ1ZyhgUmV0dXJuaW5nIGZyb20gZGlzayBjYWNoZWApO1xuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENybDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBmZXRjaFByb21pc2UgPSBuZXcgUHJvbWlzZShhc3luYyAocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBsb2dEZWJ1ZyhgRG93bmxvYWRpbmcgQ1JMYCk7XG4gICAgICAgICAgICBjb25zdCB7IGRhdGEgfSA9IGF3YWl0IGF4aW9zXzEuZGVmYXVsdC5nZXQodXJsLCB7XG4gICAgICAgICAgICAgICAgdGltZW91dDogZ2xvYmFsX2NvbmZpZ190eXBlZF8xLmRlZmF1bHQuZ2V0VmFsdWUoJ2NybERvd25sb2FkVGltZW91dCcpLFxuICAgICAgICAgICAgICAgIHJlc3BvbnNlVHlwZTogJ2FycmF5YnVmZmVyJyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgbG9nRGVidWcoYFBhcnNpbmcgQ1JMYCk7XG4gICAgICAgICAgICBjb25zdCBwYXJzZWRDcmwgPSBhc24xX2pzX3JmYzUyODBfMS5kZWZhdWx0LkNlcnRpZmljYXRlTGlzdC5kZWNvZGUoZGF0YSwgJ2RlcicpO1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMuaW5NZW1vcnlDYWNoZSkge1xuICAgICAgICAgICAgICAgIGxvZ0RlYnVnKCdTYXZpbmcgdG8gbWVtb3J5IGNhY2hlJyk7XG4gICAgICAgICAgICAgICAgKDAsIGNybF9jYWNoZV8xLnNldENybEluTWVtb3J5KSh1cmwsIHBhcnNlZENybCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5vbkRpc2tDYWNoZSkge1xuICAgICAgICAgICAgICAgIGxvZ0RlYnVnKCdTYXZpbmcgdG8gZGlzayBjYWNoZScpO1xuICAgICAgICAgICAgICAgIGF3YWl0ICgwLCBjcmxfY2FjaGVfMS53cml0ZUNybFRvRGlzaykodXJsLCBkYXRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGV4cG9ydHMuUEVORElOR19GRVRDSF9SRVFVRVNUUy5kZWxldGUodXJsKTtcbiAgICAgICAgICAgIHJldHVybiByZXNvbHZlKHBhcnNlZENybCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgZXhwb3J0cy5QRU5ESU5HX0ZFVENIX1JFUVVFU1RTLnNldCh1cmwsIGZldGNoUHJvbWlzZSk7XG4gICAgcmV0dXJuIGZldGNoUHJvbWlzZTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNybF9mZXRjaGVyLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/dist/lib/agent/crl_fetcher.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/dist/lib/agent/crl_utils.js":
/*!****************************************************************!*\
  !*** ./node_modules/snowflake-sdk/dist/lib/agent/crl_utils.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getCertificateCrlUrls = exports.CRL_SIGNATURE_OID_TO_CRYPTO_DIGEST_ALGORITHM = void 0;\nexports.getCertificateDebugName = getCertificateDebugName;\nexports.isShortLivedCertificate = isShortLivedCertificate;\nexports.isCrlSignatureValid = isCrlSignatureValid;\nexports.isCertificateRevoked = isCertificateRevoked;\nexports.isIssuingDistributionPointExtensionValid = isIssuingDistributionPointExtensionValid;\nconst crypto_1 = __importDefault(__webpack_require__(/*! crypto */ \"crypto\"));\nconst asn1_js_rfc5280_1 = __importDefault(__webpack_require__(/*! asn1.js-rfc5280 */ \"(rsc)/./node_modules/asn1.js-rfc5280/index.js\"));\nconst logger_1 = __importDefault(__webpack_require__(/*! ../logger */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/logger.js\"));\n// TODO:\n// Implement RSASSA-PSS signature verification\n// https://snowflakecomputing.atlassian.net/browse/SNOW-2333028\nexports.CRL_SIGNATURE_OID_TO_CRYPTO_DIGEST_ALGORITHM = {\n    '1.2.840.113549.1.1.11': 'sha256',\n    '1.2.840.113549.1.1.12': 'sha384',\n    '1.2.840.113549.1.1.13': 'sha512',\n    '1.2.840.10045.4.3.2': 'sha256',\n    '1.2.840.10045.4.3.3': 'sha384',\n    '1.2.840.10045.4.3.4': 'sha512',\n};\nfunction getCertificateDebugName(certificate) {\n    return [\n        `O:${certificate.subject.O}`,\n        `CN:${certificate.subject.CN}`,\n        `SN:${certificate.serialNumber}`,\n    ].join(',');\n}\nconst getCertificateCrlUrls = (certificateName, decodedCertificate) => {\n    const logDebug = (msg, ...msgArgs) => (0, logger_1.default)().debug(`getCertificateCrlUrls[${certificateName}]: ${msg}`, ...msgArgs);\n    const crlExtension = decodedCertificate.tbsCertificate.extensions?.find((ext) => ext.extnID === 'cRLDistributionPoints');\n    if (!crlExtension) {\n        logDebug('certificate doesnt have cRLDistributionPoints extension');\n        return null;\n    }\n    const result = [];\n    for (const entry of crlExtension.extnValue) {\n        if (!entry.distributionPoint) {\n            logDebug('skipping entry without distributionPoint %j', entry);\n            continue;\n        }\n        for (const fullNameEntry of entry.distributionPoint.value) {\n            if (fullNameEntry.type !== 'uniformResourceIdentifier') {\n                logDebug('skipping non-uniformResourceIdentifier entry %j', fullNameEntry);\n                continue;\n            }\n            if (fullNameEntry.value.startsWith('http')) {\n                // Even though the spec allows multiple http urls, we only pick first one and don't handle redundancy\n                result.push(fullNameEntry.value);\n                break;\n            }\n            else {\n                logDebug('skipping non-http value %j', fullNameEntry);\n            }\n        }\n    }\n    logDebug(`found URLs: ${result.join(',')}`);\n    return result.length > 0 ? result : null;\n};\nexports.getCertificateCrlUrls = getCertificateCrlUrls;\n/**\n * See Short-lived Subscriber Certificate section\\\n * https://cabforum.org/working-groups/server/baseline-requirements/requirements/\n */\nfunction isShortLivedCertificate(decodedCertificate) {\n    const notBefore = new Date(decodedCertificate.tbsCertificate.validity.notBefore.value);\n    const notAfter = new Date(decodedCertificate.tbsCertificate.validity.notAfter.value);\n    let maximumValidityPeriod = 7 * 24 * 60 * 60 * 1000; // 7 days in milliseconds\n    if (notBefore < new Date('2026-03-15T00:00:00.000Z')) {\n        maximumValidityPeriod = 10 * 24 * 60 * 60 * 1000; // 10 days in milliseconds\n    }\n    maximumValidityPeriod += 60 * 1000; // Fix inclusion start and end time (1 minute)\n    const certValidityPeriod = notAfter.getTime() - notBefore.getTime();\n    return maximumValidityPeriod > certValidityPeriod;\n}\nfunction isCrlSignatureValid(crl, issuerPublicKey) {\n    const signatureAlgOid = crl.signatureAlgorithm.algorithm.join('.');\n    const digestAlg = exports.CRL_SIGNATURE_OID_TO_CRYPTO_DIGEST_ALGORITHM[signatureAlgOid];\n    if (!digestAlg) {\n        throw new Error(`Unsupported signature algorithm: ${signatureAlgOid}`);\n    }\n    const verify = crypto_1.default.createVerify(digestAlg);\n    const tbsEncoded = asn1_js_rfc5280_1.default.TBSCertList.encode(crl.tbsCertList, 'der');\n    verify.update(tbsEncoded);\n    return verify.verify(issuerPublicKey, crl.signature.data);\n}\nfunction isCertificateRevoked(decodedCertificate, crl) {\n    for (const revokedCert of crl.tbsCertList.revokedCertificates) {\n        if (revokedCert.userCertificate.eq(decodedCertificate.tbsCertificate.serialNumber)) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction isIssuingDistributionPointExtensionValid(crl, expectedCrlUrl) {\n    const issuingDistributionPointExtension = crl.tbsCertList.crlExtensions?.find((ext) => ext.extnID === 'issuingDistributionPoint');\n    if (!issuingDistributionPointExtension) {\n        (0, logger_1.default)().debug(`CRL ${expectedCrlUrl} doesnt have issuingDistributionPoint extension, ignoring`);\n        return true;\n    }\n    for (const fullNameEntry of issuingDistributionPointExtension.extnValue.distributionPoint.value) {\n        if (fullNameEntry.type === 'uniformResourceIdentifier' &&\n            fullNameEntry.value === expectedCrlUrl) {\n            return true;\n        }\n    }\n    return false;\n}\n//# sourceMappingURL=crl_utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/dist/lib/agent/crl_utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/dist/lib/agent/crl_validator.js":
/*!********************************************************************!*\
  !*** ./node_modules/snowflake-sdk/dist/lib/agent/crl_validator.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CertificateRevokedError = exports.CRL_VALIDATOR_INTERNAL = void 0;\nexports.isCrlValidationEnabled = isCrlValidationEnabled;\nexports.corkSocketAndValidateCrl = corkSocketAndValidateCrl;\nexports.validateCrl = validateCrl;\nconst asn1_js_rfc5280_1 = __importDefault(__webpack_require__(/*! asn1.js-rfc5280 */ \"(rsc)/./node_modules/asn1.js-rfc5280/index.js\"));\nconst crypto_1 = __importDefault(__webpack_require__(/*! crypto */ \"crypto\"));\nconst logger_1 = __importDefault(__webpack_require__(/*! ../logger */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/logger.js\"));\nconst crl_utils_1 = __webpack_require__(/*! ./crl_utils */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/agent/crl_utils.js\");\nconst crl_fetcher_1 = __webpack_require__(/*! ./crl_fetcher */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/agent/crl_fetcher.js\");\nconst errors_1 = __webpack_require__(/*! ../errors */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/errors.js\");\n// Allows to mock/spy internal calls in tests\nexports.CRL_VALIDATOR_INTERNAL = {\n    validateCrl: (...args) => validateCrl(...args),\n};\nclass CertificateRevokedError extends Error {\n    constructor(message) {\n        super(message);\n        this.name = 'CertificateRevokedError';\n    }\n}\nexports.CertificateRevokedError = CertificateRevokedError;\nfunction isCrlValidationEnabled(config) {\n    return config.checkMode !== 'DISABLED';\n}\nfunction corkSocketAndValidateCrl(socket, config) {\n    socket.once('secureConnect', async () => {\n        const certChain = socket.getPeerCertificate(true);\n        try {\n            await exports.CRL_VALIDATOR_INTERNAL.validateCrl(certChain, config);\n        }\n        catch (error) {\n            if (!(error instanceof CertificateRevokedError) && config.checkMode === 'ADVISORY') {\n                (0, logger_1.default)().debug('Failed to check CRL revocation, but checkMode=ADVISORY. Allowing connection. Error: %j', error);\n            }\n            else {\n                // NOTE: Wrap error into CrlError to prevent retries\n                socket.destroy((0, errors_1.createCrlError)(error));\n            }\n        }\n        socket.uncork();\n    });\n    socket.cork();\n}\nfunction* iterateCertChain(cert) {\n    let current = cert;\n    while (current) {\n        if (current === current.issuerCertificate)\n            break; // Root is self-signed, ignoring\n        yield current;\n        current = current.issuerCertificate;\n    }\n}\n// NOTE:\n// Sticking with asn1.js-rfc5280 + custom signature validation, because popular libraries have issues:\n// - jsrsasign: has outdated crypto library with CEV issues\n// - pkijs: takes 4 seconds to parse 9Mb CRL\n// - @peculiar/x509: takes 2.5 seconds to parse 9Mb CRL\nasync function validateCrl(certChain, config) {\n    for (const certificate of iterateCertChain(certChain)) {\n        const decodedCertificate = asn1_js_rfc5280_1.default.Certificate.decode(certificate.raw, 'der');\n        const name = (0, crl_utils_1.getCertificateDebugName)(certificate);\n        const logDebug = (msg) => (0, logger_1.default)().debug(`validateCrl[${name}]: ${msg}`);\n        logDebug('starting validation');\n        if ((0, crl_utils_1.isShortLivedCertificate)(decodedCertificate)) {\n            logDebug('certificate is short-lived, skipping');\n            continue;\n        }\n        logDebug('getting CRL distribution points');\n        const crlUrls = (0, crl_utils_1.getCertificateCrlUrls)(name, decodedCertificate);\n        if (!crlUrls) {\n            if (config.allowCertificatesWithoutCrlURL) {\n                logDebug('certificate has no CRL distribution points, skipping');\n                continue;\n            }\n            throw new Error(`Certificate ${name} does not have CRL http URL. This could be disabled with allowCertificatesWithoutCrlURL`);\n        }\n        const decodedIssuerCertificate = asn1_js_rfc5280_1.default.Certificate.decode(certificate.issuerCertificate.raw, 'der');\n        const issuerSubject = JSON.stringify(decodedIssuerCertificate.tbsCertificate.subject);\n        const issuerPublicKey = crypto_1.default\n            .createPublicKey({\n            key: certificate.issuerCertificate.pubkey,\n            format: 'der',\n            type: 'spki',\n        })\n            .export({ format: 'pem', type: 'spki' });\n        for (const crlUrl of crlUrls) {\n            logDebug(`fetching ${crlUrl}`);\n            const crl = await (0, crl_fetcher_1.getCrl)(crlUrl, {\n                inMemoryCache: config.inMemoryCache,\n                onDiskCache: config.onDiskCache,\n            });\n            logDebug(`validating ${crlUrl} signature`);\n            if (!(0, crl_utils_1.isCrlSignatureValid)(crl, issuerPublicKey)) {\n                throw new Error(`CRL ${crlUrl} signature is invalid. Expected signature by ${(0, crl_utils_1.getCertificateDebugName)(certificate.issuerCertificate)}`);\n            }\n            logDebug(`validating ${crlUrl} issuingDistributionPoint extension`);\n            if (!(0, crl_utils_1.isIssuingDistributionPointExtensionValid)(crl, crlUrl)) {\n                throw new Error(`CRL ${crlUrl} issuingDistributionPoint extension is invalid`);\n            }\n            logDebug(`validating ${crlUrl} issuer`);\n            const crlIssuer = JSON.stringify(crl.tbsCertList.issuer);\n            if (issuerSubject !== crlIssuer) {\n                throw new Error(`CRL ${crlUrl} issuer is invalid. Expected ${issuerSubject} but got ${crlIssuer}`);\n            }\n            logDebug(`validating ${crlUrl} nextUpdate`);\n            if (crl.tbsCertList.nextUpdate.value < Date.now()) {\n                throw new Error(`CRL ${crlUrl} nextUpdate is expired`);\n            }\n            logDebug(`checking if certificate is revoked in ${crlUrl}`);\n            if ((0, crl_utils_1.isCertificateRevoked)(decodedCertificate, crl)) {\n                throw new CertificateRevokedError(`Certificate ${name} is revoked in ${crlUrl}`);\n            }\n        }\n    }\n    return true;\n}\n//# sourceMappingURL=crl_validator.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/dist/lib/agent/crl_validator.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/dist/lib/agent/https_crl_agent.js":
/*!**********************************************************************!*\
  !*** ./node_modules/snowflake-sdk/dist/lib/agent/https_crl_agent.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst https_1 = __webpack_require__(/*! https */ \"https\");\nconst crl_validator_1 = __webpack_require__(/*! ./crl_validator */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/agent/crl_validator.js\");\n// TODO: when OCSP is removed, rename to HttpsAgent\nclass HttpsCrlAgent extends https_1.Agent {\n    crlValidatorConfig;\n    constructor(opts) {\n        const { crlValidatorConfig, ...agentOptions } = opts;\n        super(agentOptions);\n        this.crlValidatorConfig = crlValidatorConfig;\n    }\n    createConnection(...args) {\n        const createConnection = https_1.Agent.prototype.createConnection;\n        const socket = createConnection.apply(this, args);\n        (0, crl_validator_1.corkSocketAndValidateCrl)(socket, this.crlValidatorConfig);\n        return socket;\n    }\n}\nexports[\"default\"] = HttpsCrlAgent;\n//# sourceMappingURL=https_crl_agent.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9kaXN0L2xpYi9hZ2VudC9odHRwc19jcmxfYWdlbnQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZ0JBQWdCLG1CQUFPLENBQUMsb0JBQU87QUFDL0Isd0JBQXdCLG1CQUFPLENBQUMsMkZBQWlCO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLHNDQUFzQztBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFlO0FBQ2YiLCJzb3VyY2VzIjpbIi9Vc2Vycy93YW5naGFvdGFpL0Rlc2t0b3AvZWx2ZW5sYWIvSFRWL25vZGVfbW9kdWxlcy9zbm93Zmxha2Utc2RrL2Rpc3QvbGliL2FnZW50L2h0dHBzX2NybF9hZ2VudC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGh0dHBzXzEgPSByZXF1aXJlKFwiaHR0cHNcIik7XG5jb25zdCBjcmxfdmFsaWRhdG9yXzEgPSByZXF1aXJlKFwiLi9jcmxfdmFsaWRhdG9yXCIpO1xuLy8gVE9ETzogd2hlbiBPQ1NQIGlzIHJlbW92ZWQsIHJlbmFtZSB0byBIdHRwc0FnZW50XG5jbGFzcyBIdHRwc0NybEFnZW50IGV4dGVuZHMgaHR0cHNfMS5BZ2VudCB7XG4gICAgY3JsVmFsaWRhdG9yQ29uZmlnO1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICAgICAgY29uc3QgeyBjcmxWYWxpZGF0b3JDb25maWcsIC4uLmFnZW50T3B0aW9ucyB9ID0gb3B0cztcbiAgICAgICAgc3VwZXIoYWdlbnRPcHRpb25zKTtcbiAgICAgICAgdGhpcy5jcmxWYWxpZGF0b3JDb25maWcgPSBjcmxWYWxpZGF0b3JDb25maWc7XG4gICAgfVxuICAgIGNyZWF0ZUNvbm5lY3Rpb24oLi4uYXJncykge1xuICAgICAgICBjb25zdCBjcmVhdGVDb25uZWN0aW9uID0gaHR0cHNfMS5BZ2VudC5wcm90b3R5cGUuY3JlYXRlQ29ubmVjdGlvbjtcbiAgICAgICAgY29uc3Qgc29ja2V0ID0gY3JlYXRlQ29ubmVjdGlvbi5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgKDAsIGNybF92YWxpZGF0b3JfMS5jb3JrU29ja2V0QW5kVmFsaWRhdGVDcmwpKHNvY2tldCwgdGhpcy5jcmxWYWxpZGF0b3JDb25maWcpO1xuICAgICAgICByZXR1cm4gc29ja2V0O1xuICAgIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IEh0dHBzQ3JsQWdlbnQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1odHRwc19jcmxfYWdlbnQuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/dist/lib/agent/https_crl_agent.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/dist/lib/agent/https_ocsp_agent.js":
/*!***********************************************************************!*\
  !*** ./node_modules/snowflake-sdk/dist/lib/agent/https_ocsp_agent.js ***!
  \***********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst HttpsAgent = (__webpack_require__(/*! https */ \"https\").Agent);\nconst SocketUtil = __webpack_require__(/*! ./socket_util */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/agent/socket_util.js\");\n/**\n * Creates a new HttpsOcspAgent.\n *\n * @param {Object} options\n *\n * @returns {HttpsOcspAgent}\n * @constructor\n */\nfunction HttpsOcspAgent(options) {\n    const agent = HttpsAgent.apply(this, [options]);\n    agent.createConnection = function (port, host, options) {\n        // make sure the 'options' variables references the argument that actually\n        // contains the options\n        // Note: look at the Node.js https agent to understand why this code is\n        // written this way\n        if (port !== null && typeof port === 'object') {\n            options = port;\n        }\n        else if (host !== null && typeof host === 'object') {\n            options = host;\n        }\n        else if (options === null || typeof options !== 'object') {\n            options = {};\n        }\n        if (typeof host !== 'string') {\n            host = options.host;\n        }\n        // call super\n        const socket = HttpsAgent.prototype.createConnection.apply(this, arguments);\n        // secure the socket and return it\n        return SocketUtil.secureSocket(socket, host, null);\n    };\n    return agent;\n}\nmodule.exports = HttpsOcspAgent;\n//# sourceMappingURL=https_ocsp_agent.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9kaXN0L2xpYi9hZ2VudC9odHRwc19vY3NwX2FnZW50LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsbUJBQW1CLGlEQUFzQjtBQUN6QyxtQkFBbUIsbUJBQU8sQ0FBQyx1RkFBZTtBQUMxQztBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkI7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvd2FuZ2hhb3RhaS9EZXNrdG9wL2VsdmVubGFiL0hUVi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9kaXN0L2xpYi9hZ2VudC9odHRwc19vY3NwX2FnZW50LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuY29uc3QgSHR0cHNBZ2VudCA9IHJlcXVpcmUoJ2h0dHBzJykuQWdlbnQ7XG5jb25zdCBTb2NrZXRVdGlsID0gcmVxdWlyZSgnLi9zb2NrZXRfdXRpbCcpO1xuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IEh0dHBzT2NzcEFnZW50LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKlxuICogQHJldHVybnMge0h0dHBzT2NzcEFnZW50fVxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIEh0dHBzT2NzcEFnZW50KG9wdGlvbnMpIHtcbiAgICBjb25zdCBhZ2VudCA9IEh0dHBzQWdlbnQuYXBwbHkodGhpcywgW29wdGlvbnNdKTtcbiAgICBhZ2VudC5jcmVhdGVDb25uZWN0aW9uID0gZnVuY3Rpb24gKHBvcnQsIGhvc3QsIG9wdGlvbnMpIHtcbiAgICAgICAgLy8gbWFrZSBzdXJlIHRoZSAnb3B0aW9ucycgdmFyaWFibGVzIHJlZmVyZW5jZXMgdGhlIGFyZ3VtZW50IHRoYXQgYWN0dWFsbHlcbiAgICAgICAgLy8gY29udGFpbnMgdGhlIG9wdGlvbnNcbiAgICAgICAgLy8gTm90ZTogbG9vayBhdCB0aGUgTm9kZS5qcyBodHRwcyBhZ2VudCB0byB1bmRlcnN0YW5kIHdoeSB0aGlzIGNvZGUgaXNcbiAgICAgICAgLy8gd3JpdHRlbiB0aGlzIHdheVxuICAgICAgICBpZiAocG9ydCAhPT0gbnVsbCAmJiB0eXBlb2YgcG9ydCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIG9wdGlvbnMgPSBwb3J0O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGhvc3QgIT09IG51bGwgJiYgdHlwZW9mIGhvc3QgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICBvcHRpb25zID0gaG9zdDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChvcHRpb25zID09PSBudWxsIHx8IHR5cGVvZiBvcHRpb25zICE9PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgb3B0aW9ucyA9IHt9O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgaG9zdCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGhvc3QgPSBvcHRpb25zLmhvc3Q7XG4gICAgICAgIH1cbiAgICAgICAgLy8gY2FsbCBzdXBlclxuICAgICAgICBjb25zdCBzb2NrZXQgPSBIdHRwc0FnZW50LnByb3RvdHlwZS5jcmVhdGVDb25uZWN0aW9uLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIC8vIHNlY3VyZSB0aGUgc29ja2V0IGFuZCByZXR1cm4gaXRcbiAgICAgICAgcmV0dXJuIFNvY2tldFV0aWwuc2VjdXJlU29ja2V0KHNvY2tldCwgaG9zdCwgbnVsbCk7XG4gICAgfTtcbiAgICByZXR1cm4gYWdlbnQ7XG59XG5tb2R1bGUuZXhwb3J0cyA9IEh0dHBzT2NzcEFnZW50O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aHR0cHNfb2NzcF9hZ2VudC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/dist/lib/agent/https_ocsp_agent.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/dist/lib/agent/https_proxy_agent.js":
/*!************************************************************************!*\
  !*** ./node_modules/snowflake-sdk/dist/lib/agent/https_proxy_agent.js ***!
  \************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst tls = __importStar(__webpack_require__(/*! tls */ \"tls\"));\nconst url_1 = __webpack_require__(/*! url */ \"url\");\nconst https_proxy_agent_1 = __webpack_require__(/*! https-proxy-agent */ \"(rsc)/./node_modules/https-proxy-agent/dist/index.js\");\nconst crl_validator_1 = __webpack_require__(/*! ./crl_validator */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/agent/crl_validator.js\");\nconst socket_util_1 = __importDefault(__webpack_require__(/*! ./socket_util */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/agent/socket_util.js\"));\nconst proxy_util_1 = __importDefault(__webpack_require__(/*! ../proxy_util */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/proxy_util.js\"));\nconst logger_1 = __importDefault(__webpack_require__(/*! ../logger */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/logger.js\"));\nclass SnowflakeHttpsProxyAgent extends https_proxy_agent_1.HttpsProxyAgent {\n    useForOCSP;\n    crlValidatorConfig;\n    constructor(opts) {\n        const { host, port, user, password, protocol: rawProtocol, useForOCSP, crlValidatorConfig, ...agentOptions } = opts;\n        const protocol = rawProtocol.endsWith(':') ? rawProtocol : `${rawProtocol}:`;\n        const proxyUrl = new url_1.URL(`${protocol}//${host}:${port}`);\n        proxyUrl.username = user ?? '';\n        proxyUrl.password = password ?? '';\n        super(proxyUrl, agentOptions);\n        this.useForOCSP = useForOCSP;\n        this.crlValidatorConfig = crlValidatorConfig;\n    }\n    async connect(req, opts) {\n        (0, logger_1.default)().debug('Using proxy=%s for host %s', this.proxy.hostname, opts.host);\n        const socket = await super.connect(req, opts);\n        if (socket instanceof tls.TLSSocket) {\n            if ((0, crl_validator_1.isCrlValidationEnabled)(this.crlValidatorConfig)) {\n                (0, crl_validator_1.corkSocketAndValidateCrl)(socket, this.crlValidatorConfig);\n            }\n            else {\n                const isProxyRequiredForOCSP = this.useForOCSP &&\n                    !proxy_util_1.default.isByPassProxy(this.proxy, socket_util_1.default.REGEX_SNOWFLAKE_ENDPOINT);\n                socket_util_1.default.secureSocket(socket, this.proxy.hostname, isProxyRequiredForOCSP ? this : null);\n            }\n        }\n        return socket;\n    }\n}\nmodule.exports = SnowflakeHttpsProxyAgent;\n//# sourceMappingURL=https_proxy_agent.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9kaXN0L2xpYi9hZ2VudC9odHRwc19wcm94eV9hZ2VudC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxvQ0FBb0M7QUFDbkQ7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EsMENBQTBDLDRCQUE0QjtBQUN0RSxDQUFDO0FBQ0Q7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkRBQTJELGNBQWM7QUFDekU7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHlCQUF5QixtQkFBTyxDQUFDLGdCQUFLO0FBQ3RDLGNBQWMsbUJBQU8sQ0FBQyxnQkFBSztBQUMzQiw0QkFBNEIsbUJBQU8sQ0FBQywrRUFBbUI7QUFDdkQsd0JBQXdCLG1CQUFPLENBQUMsMkZBQWlCO0FBQ2pELHNDQUFzQyxtQkFBTyxDQUFDLHVGQUFlO0FBQzdELHFDQUFxQyxtQkFBTyxDQUFDLGdGQUFlO0FBQzVELGlDQUFpQyxtQkFBTyxDQUFDLHdFQUFXO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLHFHQUFxRztBQUNySCxzRUFBc0UsWUFBWTtBQUNsRiwwQ0FBMEMsU0FBUyxJQUFJLEtBQUssR0FBRyxLQUFLO0FBQ3BFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL3dhbmdoYW90YWkvRGVza3RvcC9lbHZlbmxhYi9IVFYvbm9kZV9tb2R1bGVzL3Nub3dmbGFrZS1zZGsvZGlzdC9saWIvYWdlbnQvaHR0cHNfcHJveHlfYWdlbnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fc2V0TW9kdWxlRGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19zZXRNb2R1bGVEZWZhdWx0KSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCB2KSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIFwiZGVmYXVsdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2IH0pO1xufSkgOiBmdW5jdGlvbihvLCB2KSB7XG4gICAgb1tcImRlZmF1bHRcIl0gPSB2O1xufSk7XG52YXIgX19pbXBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydFN0YXIpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG93bktleXMgPSBmdW5jdGlvbihvKSB7XG4gICAgICAgIG93bktleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB8fCBmdW5jdGlvbiAobykge1xuICAgICAgICAgICAgdmFyIGFyID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBrIGluIG8pIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobywgaykpIGFyW2FyLmxlbmd0aF0gPSBrO1xuICAgICAgICAgICAgcmV0dXJuIGFyO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gb3duS2V5cyhvKTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAobW9kKSB7XG4gICAgICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XG4gICAgICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICAgICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrID0gb3duS2V5cyhtb2QpLCBpID0gMDsgaSA8IGsubGVuZ3RoOyBpKyspIGlmIChrW2ldICE9PSBcImRlZmF1bHRcIikgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrW2ldKTtcbiAgICAgICAgX19zZXRNb2R1bGVEZWZhdWx0KHJlc3VsdCwgbW9kKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xufSkoKTtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IHRscyA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwidGxzXCIpKTtcbmNvbnN0IHVybF8xID0gcmVxdWlyZShcInVybFwiKTtcbmNvbnN0IGh0dHBzX3Byb3h5X2FnZW50XzEgPSByZXF1aXJlKFwiaHR0cHMtcHJveHktYWdlbnRcIik7XG5jb25zdCBjcmxfdmFsaWRhdG9yXzEgPSByZXF1aXJlKFwiLi9jcmxfdmFsaWRhdG9yXCIpO1xuY29uc3Qgc29ja2V0X3V0aWxfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9zb2NrZXRfdXRpbFwiKSk7XG5jb25zdCBwcm94eV91dGlsXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4uL3Byb3h5X3V0aWxcIikpO1xuY29uc3QgbG9nZ2VyXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4uL2xvZ2dlclwiKSk7XG5jbGFzcyBTbm93Zmxha2VIdHRwc1Byb3h5QWdlbnQgZXh0ZW5kcyBodHRwc19wcm94eV9hZ2VudF8xLkh0dHBzUHJveHlBZ2VudCB7XG4gICAgdXNlRm9yT0NTUDtcbiAgICBjcmxWYWxpZGF0b3JDb25maWc7XG4gICAgY29uc3RydWN0b3Iob3B0cykge1xuICAgICAgICBjb25zdCB7IGhvc3QsIHBvcnQsIHVzZXIsIHBhc3N3b3JkLCBwcm90b2NvbDogcmF3UHJvdG9jb2wsIHVzZUZvck9DU1AsIGNybFZhbGlkYXRvckNvbmZpZywgLi4uYWdlbnRPcHRpb25zIH0gPSBvcHRzO1xuICAgICAgICBjb25zdCBwcm90b2NvbCA9IHJhd1Byb3RvY29sLmVuZHNXaXRoKCc6JykgPyByYXdQcm90b2NvbCA6IGAke3Jhd1Byb3RvY29sfTpgO1xuICAgICAgICBjb25zdCBwcm94eVVybCA9IG5ldyB1cmxfMS5VUkwoYCR7cHJvdG9jb2x9Ly8ke2hvc3R9OiR7cG9ydH1gKTtcbiAgICAgICAgcHJveHlVcmwudXNlcm5hbWUgPSB1c2VyID8/ICcnO1xuICAgICAgICBwcm94eVVybC5wYXNzd29yZCA9IHBhc3N3b3JkID8/ICcnO1xuICAgICAgICBzdXBlcihwcm94eVVybCwgYWdlbnRPcHRpb25zKTtcbiAgICAgICAgdGhpcy51c2VGb3JPQ1NQID0gdXNlRm9yT0NTUDtcbiAgICAgICAgdGhpcy5jcmxWYWxpZGF0b3JDb25maWcgPSBjcmxWYWxpZGF0b3JDb25maWc7XG4gICAgfVxuICAgIGFzeW5jIGNvbm5lY3QocmVxLCBvcHRzKSB7XG4gICAgICAgICgwLCBsb2dnZXJfMS5kZWZhdWx0KSgpLmRlYnVnKCdVc2luZyBwcm94eT0lcyBmb3IgaG9zdCAlcycsIHRoaXMucHJveHkuaG9zdG5hbWUsIG9wdHMuaG9zdCk7XG4gICAgICAgIGNvbnN0IHNvY2tldCA9IGF3YWl0IHN1cGVyLmNvbm5lY3QocmVxLCBvcHRzKTtcbiAgICAgICAgaWYgKHNvY2tldCBpbnN0YW5jZW9mIHRscy5UTFNTb2NrZXQpIHtcbiAgICAgICAgICAgIGlmICgoMCwgY3JsX3ZhbGlkYXRvcl8xLmlzQ3JsVmFsaWRhdGlvbkVuYWJsZWQpKHRoaXMuY3JsVmFsaWRhdG9yQ29uZmlnKSkge1xuICAgICAgICAgICAgICAgICgwLCBjcmxfdmFsaWRhdG9yXzEuY29ya1NvY2tldEFuZFZhbGlkYXRlQ3JsKShzb2NrZXQsIHRoaXMuY3JsVmFsaWRhdG9yQ29uZmlnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IGlzUHJveHlSZXF1aXJlZEZvck9DU1AgPSB0aGlzLnVzZUZvck9DU1AgJiZcbiAgICAgICAgICAgICAgICAgICAgIXByb3h5X3V0aWxfMS5kZWZhdWx0LmlzQnlQYXNzUHJveHkodGhpcy5wcm94eSwgc29ja2V0X3V0aWxfMS5kZWZhdWx0LlJFR0VYX1NOT1dGTEFLRV9FTkRQT0lOVCk7XG4gICAgICAgICAgICAgICAgc29ja2V0X3V0aWxfMS5kZWZhdWx0LnNlY3VyZVNvY2tldChzb2NrZXQsIHRoaXMucHJveHkuaG9zdG5hbWUsIGlzUHJveHlSZXF1aXJlZEZvck9DU1AgPyB0aGlzIDogbnVsbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNvY2tldDtcbiAgICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IFNub3dmbGFrZUh0dHBzUHJveHlBZ2VudDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWh0dHBzX3Byb3h5X2FnZW50LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/dist/lib/agent/https_proxy_agent.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/dist/lib/agent/ocsp_response_cache.js":
/*!**************************************************************************!*\
  !*** ./node_modules/snowflake-sdk/dist/lib/agent/ocsp_response_cache.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nconst http = __webpack_require__(/*! http */ \"http\");\nconst url = __webpack_require__(/*! url */ \"url\");\nconst path = __webpack_require__(/*! path */ \"path\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst SimpleCache = __webpack_require__(/*! simple-lru-cache */ \"(rsc)/./node_modules/simple-lru-cache/index.js\");\nconst Errors = __webpack_require__(/*! ../errors */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/errors.js\");\nconst ErrorCodes = Errors.codes;\nconst Util = __webpack_require__(/*! ../util */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/util.js\");\nconst CertUtil = __webpack_require__(/*! ./cert_util */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/agent/cert_util.js\");\nconst GlobalConfig = __webpack_require__(/*! ../global_config */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/global_config.js\");\nconst Logger = __webpack_require__(/*! ../logger */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/logger.js\");\nconst status = {\n    NOT_START: 'not_start',\n    STARTED: 'started',\n    FINISHED: 'finish',\n};\n// validate input\nconst sizeLimit = GlobalConfig.getOcspResponseCacheSizeLimit();\n// ocsp cache max age in second\nlet maxAgeSec = GlobalConfig.getOcspResponseCacheMaxAge();\nErrors.assertInternal(Util.number.isPositiveInteger(sizeLimit));\nErrors.assertInternal(Util.number.isPositiveInteger(maxAgeSec));\nconst cacheDir = GlobalConfig.mkdirCacheDir();\nconst cacheFileName = path.join(cacheDir, 'ocsp_response_cache.json');\n// create a cache to store the responses, dynamically changes in size\nlet cache;\n// Cache updated time, in seconds, initialized as current time.\n// Will be updated when load from local cache file or refresh by downloading\nfunction deleteCache() {\n    try {\n        cache.reset();\n        fs.unlinkSync(cacheFileName);\n    }\n    catch (e) {\n        Logger.getInstance().debug('Failed to delete OCSP cache file: %s, err: %s', cacheFileName, e);\n    }\n}\nexports.deleteCache = deleteCache;\n/**\n * Cache for storing OCSP responses. This covers both client and server caches.\n *\n * @constructor\n */\nfunction OcspResponseCache() {\n    let downloadStatus = status.NOT_START;\n    let cacheUpdated = false;\n    let cacheInitialized = false;\n    let proxyAgent = null;\n    /**\n     * Reads OCSP cache file.\n     */\n    // Cache update time in second\n    let cacheUpdateTimeSec = Date.now() / 1000;\n    let OCSP_URL = process.env.SF_OCSP_RESPONSE_CACHE_SERVER_URL;\n    if (!OCSP_URL) {\n        OCSP_URL = 'http://ocsp.snowflakecomputing.com/ocsp_response_cache.json';\n    }\n    try {\n        Logger.getInstance().debug('Reading OCSP cache file. %s', cacheFileName);\n        const contents = fs.readFileSync(cacheFileName, 'utf-8');\n        const jsonCacheFromFile = JSON.parse(contents);\n        updateCache(jsonCacheFromFile);\n        cacheInitialized = true;\n    }\n    catch (e) {\n        Logger.getInstance().debug('Failed to read OCSP cache file: %s, err: %s', cacheFileName, e);\n    }\n    /**\n     * set proxy agent for ocsp validation\n     *\n     * @param agent\n     */\n    this.setAgent = function setAgent(agent) {\n        proxyAgent = agent;\n    };\n    /**\n     * Initializes the cache\n     *\n     * @param cert\n     * @param response\n     */\n    this.initCache = function initCache(cert, response) {\n        cache = new SimpleCache({ maxSize: 1 });\n        this.set(cert, response);\n    };\n    /**\n     * Is OCSP Cache initialized?\n     * @returns {boolean}\n     */\n    this.isInitialized = function () {\n        return cacheInitialized;\n    };\n    /**\n     * Is OCSP Cache download finished?\n     * @returns {boolean}\n     */\n    this.isDownloadFinished = function () {\n        return downloadStatus === status.FINISHED;\n    };\n    /**\n     * Forces download status to finish\n     */\n    this.forceDownloadToFinish = function () {\n        downloadStatus = status.FINISHED;\n    };\n    /**\n     * Is local OCSP Cache expired?\n     * @returns {boolean}\n     */\n    this.IsCacheExpired = function () {\n        if (!cacheInitialized) {\n            return false;\n        }\n        // Update maxAge in case it could be changed through environment variable\n        maxAgeSec = GlobalConfig.getOcspResponseCacheMaxAge();\n        // Current time in seconds\n        const currentTimeSec = Date.now() / 1000;\n        if (currentTimeSec - cacheUpdateTimeSec > maxAgeSec) {\n            Logger.getInstance().debug('OCSP local cache validity is out of range. currentTime: %s, timestamp: %s, maxAge: %s', currentTimeSec, cacheUpdateTimeSec, maxAgeSec);\n            return true;\n        }\n        return false;\n    };\n    /**\n     * Resets OCSP Cache status\n     */\n    this.resetCacheStatus = function () {\n        downloadStatus = status.NOT_START;\n        if (cacheUpdated) {\n            Logger.getInstance().debug(cacheFileName);\n            // current time in second\n            const currentTimeSec = Date.now() / 1000;\n            const cacheOutput = {};\n            cache.forEach(function (v, k) {\n                const certIdInBase64 = CertUtil.decodeKey(k);\n                const ocspResponseInBase64 = v.toString('BASE64');\n                cacheOutput[certIdInBase64] = [currentTimeSec, ocspResponseInBase64];\n            });\n            const writeContent = JSON.stringify(cacheOutput);\n            Logger.getInstance().debug('Writing OCSP cache file. %s', cacheFileName);\n            try {\n                fs.writeFileSync(cacheFileName, writeContent, 'utf-8');\n            }\n            catch (e) {\n                Logger.getInstance().debug('Failed to update OCSP cache file: %s, err: %s', cacheFileName, e);\n            }\n            cacheUpdated = false;\n        }\n    };\n    /**\n     * Adds an entry to the cache.\n     *\n     * @param cert\n     * @param response\n     */\n    this.set = function set(cert, response) {\n        try {\n            const certId = CertUtil.buildCertId(cert);\n            cache.set(certId, response);\n            cacheUpdated = true;\n        }\n        catch (e) {\n            Logger.getInstance().debug('Failed to add certificate to OCSP cache file. err: %s', e);\n        }\n    };\n    /**\n     * Returns an entry from the cache.\n     *\n     * @param cert\n     * @returns {*}\n     */\n    this.get = function get(cert) {\n        try {\n            const certId = CertUtil.buildCertId(cert);\n            return cache.get(certId);\n        }\n        catch (e) {\n            Logger.getInstance().debug('Failed to get certificate from OCSP cache. err: %s', e);\n            return null;\n        }\n    };\n    /**\n     * Downloads OCSP cache from the Snowflake OCSP cache server.\n     * @param cb callback\n     */\n    this.downloadCache = function (cb) {\n        if (downloadStatus === status.STARTED) {\n            // reschedule calling cb\n            return false;\n        }\n        else if (downloadStatus === status.FINISHED) {\n            // call cb immediately\n            cb(null, false);\n            return true;\n        }\n        downloadStatus = status.STARTED;\n        function checkOCSPResponse(err, cacheContent) {\n            if (downloadStatus === status.FINISHED) {\n                return;\n            }\n            downloadStatus = status.FINISHED;\n            Logger.getInstance().debug('Finish OCSP Cache Server: %s', OCSP_URL);\n            if (err) {\n                Logger.getInstance().debug('Failed to download OCSP cache file. %s. Ignored', err);\n                return cb(err, false);\n            }\n            try {\n                const jsonParsed = JSON.parse(cacheContent);\n                updateCache(jsonParsed);\n                cacheUpdated = true;\n                return cb(null, false);\n            }\n            catch (e) {\n                cb(e, false);\n            }\n        }\n        function onResponse(response) {\n            if (response.statusCode < 200 || response.statusCode >= 400) {\n                return checkOCSPResponse(new Error('Failed to obtain OCSP response: ' + response.statusCode), null);\n            }\n            let rawData = '';\n            // A chunk of data has been received.\n            response.on('data', function (chunk) {\n                rawData += chunk;\n            });\n            // The whole response has been received. Print out the result.\n            response.on('end', function () {\n                checkOCSPResponse(null, rawData);\n            });\n        }\n        const uri = url.parse(OCSP_URL);\n        const timeout = process.env.SF_OCSP_TEST_OCSP_RESPONSE_CACHE_SERVER_TIMEOUT || 5000;\n        const options = Object.assign({\n            timeout: Number(timeout),\n            method: 'GET',\n            agent: proxyAgent,\n        }, uri);\n        const httpRequest = http.request(options, onResponse);\n        httpRequest.on('error', function (e) {\n            downloadStatus = status.FINISHED;\n            if (cb) {\n                cb(e, false);\n            }\n            cb = null;\n        });\n        httpRequest.on('timeout', function () {\n            downloadStatus = status.FINISHED;\n            httpRequest.abort();\n            Logger.getInstance().debug('Timeout OCSP responder: %s, %ss', OCSP_URL, options.timeout);\n            if (cb) {\n                cb(Errors.createOCSPError(ErrorCodes.ERR_OCSP_CACHE_SERVER_TIMEOUT), false);\n            }\n            cb = null;\n        });\n        httpRequest.end();\n        Logger.getInstance().trace('Contact OCSP Cache Server: %s', OCSP_URL);\n        return true;\n    };\n    /**\n     * Validate cache entry\n     * @param certIdBase64 cache key\n     * @param ocspResponseBase64 cache value\n     * @returns {Object}\n     */\n    function validateCacheEntry(certIdBase64, ocspResponseBase64) {\n        let err;\n        if (ocspResponseBase64.length !== 2) {\n            Logger.getInstance().debug(\"OCSP cache value doesn't consist of two elements. Ignored.\");\n            err = Errors.createOCSPError(ErrorCodes.ERR_OCSP_NOT_TWO_ELEMENTS);\n        }\n        const cacheEntryWriteTime = ocspResponseBase64[0];\n        const currentTimeSec = Date.now() / 1000;\n        if (currentTimeSec - cacheEntryWriteTime > maxAgeSec) {\n            Logger.getInstance().debug('OCSP cache validity is out of range. currentTime: %s, timestamp: %s, maxAge: %s', currentTimeSec, cacheEntryWriteTime, maxAgeSec);\n            err = Errors.createOCSPError(ErrorCodes.ERR_OCSP_CACHE_EXPIRED);\n        }\n        try {\n            const k = CertUtil.encodeKey(certIdBase64);\n            if (err) {\n                return { err: err, key: k };\n            }\n            const cacheEntryOcspResponse = ocspResponseBase64[1];\n            const rawOCSPResponse = Buffer.from(cacheEntryOcspResponse, 'base64');\n            const status = CertUtil.verifyOCSPResponse(null, rawOCSPResponse);\n            if (!status.err) {\n                return { err: null, key: k, value: rawOCSPResponse };\n            }\n            return { err: status.err };\n        }\n        catch (e) {\n            Logger.getInstance().debug('Failed to parse OCSP response. %s. Ignored.', e);\n            return { err: Errors.createOCSPError(ErrorCodes.ERR_OCSP_FAILED_PARSE_RESPONSE) };\n        }\n    }\n    function updateCache(jsonObject) {\n        // Get the size of cache\n        const cacheSize = Object.keys(jsonObject).length;\n        // Create cache using response cache size if it doesn't exceed the upper limit\n        cache = new SimpleCache({ maxSize: cacheSize < sizeLimit ? cacheSize : sizeLimit });\n        // Add new entries\n        setCacheEntries(jsonObject);\n        // set cache update time\n        cacheInitialized = true;\n    }\n    function setCacheEntries(jsonObject) {\n        let cacheUpdateTime = Date.now() / 1000;\n        for (const entry in jsonObject) {\n            if (Object.prototype.hasOwnProperty.call(jsonObject, entry)) {\n                const newUpdateTime = validateAndSetEntry(jsonObject, entry, cacheUpdateTime);\n                if (newUpdateTime) {\n                    cacheUpdateTime = newUpdateTime;\n                }\n            }\n        }\n        cacheUpdateTimeSec = cacheUpdateTime;\n    }\n    function validateAndSetEntry(jsonObject, entry, cacheUpdateTime) {\n        const status = validateCacheEntry(entry, jsonObject[entry]);\n        if (!status.err) {\n            // Add new entry or update existing one\n            cache.set(status.key, status.value);\n            // change cache update time if needed\n            if (jsonObject[entry][0] < cacheUpdateTime) {\n                return jsonObject[entry][0];\n            }\n        }\n        else {\n            Logger.getInstance().trace('Error when validating OCSP cache entry %s, %s', entry, status.err.toString());\n        }\n    }\n}\nexports.OcspResponseCache = OcspResponseCache;\n//# sourceMappingURL=ocsp_response_cache.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/dist/lib/agent/ocsp_response_cache.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/dist/lib/agent/socket_util.js":
/*!******************************************************************!*\
  !*** ./node_modules/snowflake-sdk/dist/lib/agent/socket_util.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nconst Check = __webpack_require__(/*! ./check */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/agent/check.js\");\nconst Logger = __webpack_require__(/*! ../logger */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/logger.js\");\nconst GlobalConfig = __webpack_require__(/*! ../global_config */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/global_config.js\");\nconst Parameters = __webpack_require__(/*! ../parameters */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/parameters.js\");\nconst CertUtil = __webpack_require__(/*! ./cert_util */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/agent/cert_util.js\");\nconst OcspResponseCache = __webpack_require__(/*! ./ocsp_response_cache */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/agent/ocsp_response_cache.js\");\nconst Errors = __webpack_require__(/*! ../errors */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/errors.js\");\nconst ProxyUtil = __webpack_require__(/*! ../proxy_util */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/proxy_util.js\");\nconst ProxyAgent = __webpack_require__(/*! ../agent/https_proxy_agent */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/agent/https_proxy_agent.js\");\nconst ErrorCodes = Errors.codes;\nconst REGEX_SNOWFLAKE_ENDPOINT = /.snowflakecomputing./;\nexports.REGEX_SNOWFLAKE_ENDPOINT = REGEX_SNOWFLAKE_ENDPOINT;\nconst socketSecuredEvent = 'secureConnect';\nconst rawOcspFlag = process.env.SF_OCSP_RESPONSE_CACHE_SERVER_ENABLED;\nconst variables = {\n    SF_OCSP_RESPONSE_CACHE_SERVER_ENABLED: !rawOcspFlag || (rawOcspFlag && rawOcspFlag.toLowerCase() !== 'false'),\n    OCSP_RESPONSE_CACHE: undefined,\n};\n/**\n * Returns the ocsp response cache.\n *\n * @returns {*}\n */\nfunction getOcspResponseCache() {\n    // initialize the ocsp response cache if needed\n    if (!variables.OCSP_RESPONSE_CACHE) {\n        variables.OCSP_RESPONSE_CACHE = new OcspResponseCache.OcspResponseCache();\n    }\n    return variables.OCSP_RESPONSE_CACHE;\n}\nexports.variables = variables;\n/**\n * Secures a given TLSSocket by blocking all writes until the certificate\n * associated with the socket has been validated.\n *\n * @param {Object} socket\n * @param {String} host\n * @param {Object|null} agent\n * @param {Object} [mock]\n *\n * @returns {Object}\n */\nexports.secureSocket = function (socket, host, agent, mock) {\n    // if ocsp validation is disabled for the given host, return the socket as is\n    if (isOcspValidationDisabled(host)) {\n        Logger.getInstance().debug('OCSP validation disabled for %s', host);\n        return socket;\n    }\n    if (agent != null) {\n        getOcspResponseCache().setAgent(agent);\n    }\n    else if (GlobalConfig.isEnvProxyActive()) {\n        const httpProxy = ProxyUtil.getProxyFromEnv(false);\n        if (httpProxy && !ProxyUtil.isByPassProxy(httpProxy, REGEX_SNOWFLAKE_ENDPOINT)) {\n            agent = ProxyAgent(httpProxy);\n            getOcspResponseCache().setAgent(agent);\n        }\n    }\n    const validate = function () {\n        // stop listening for the secure event\n        socket.removeListener(socketSecuredEvent, validate);\n        Logger.getInstance().trace('socket reused = %s', socket.isSessionReused());\n        // if the server has resumed our existing session, unblock all\n        // writes without performing any additional validation\n        if (socket.isSessionReused()) {\n            socket.uncork();\n        }\n        else {\n            if (!socket.authorized) {\n                Logger.getInstance().warn('Socket is not authorized: %s', socket.authorizationError);\n                return socket.destroy(socket.authorizationError);\n            }\n            // use ocsp to make sure the entire certificate chain can be trusted\n            const certChain = socket.getPeerCertificate(true);\n            const vcc = mock ? mock.validateCertChain : validateCertChain;\n            vcc(certChain, function (err) {\n                getOcspResponseCache().resetCacheStatus();\n                if (err) {\n                    // if there's an error, destroy the socket\n                    Logger.getInstance().error('OCSP validation failed: %s', err);\n                    return socket.destroy(err);\n                }\n                Logger.getInstance().trace('OCSP validation succeeded for %s', host);\n                // unblock all writes\n                socket.uncork();\n            });\n        }\n    };\n    // when the socket is secure, perform additional validation\n    socket.on(socketSecuredEvent, validate);\n    // block all writes until validation is complete\n    socket.cork();\n    return socket;\n};\n/**\n * Determines if ocsp validation is disabled for a given host.\n *\n * @param {String} host\n * @returns {boolean}\n */\nfunction isOcspValidationDisabled(host) {\n    // ocsp is disabled if insecure-connect is enabled, or if we've disabled ocsp\n    // for non-snowflake endpoints and the host is a non-snowflake endpoint\n    return (GlobalConfig.isOCSPChecksDisabled() ||\n        (Parameters.getValue(Parameters.names.JS_DRIVER_DISABLE_OCSP_FOR_NON_SF_ENDPOINTS) &&\n            !REGEX_SNOWFLAKE_ENDPOINT.test(host)));\n}\n/**\n * Is valid OCSP error for cache\n * @param err\n * @returns {boolean}\n */\nfunction isValidOCSPError(err) {\n    return (err && (err.code === ErrorCodes.ERR_OCSP_REVOKED || err.code === ErrorCodes.ERR_OCSP_UNKNOWN));\n}\n/**\n * Return err if any valid error is found.\n * @param errors\n * @returns {null|*}\n */\nfunction canEarlyExitForOCSP(errors) {\n    if (GlobalConfig.getOcspMode() === GlobalConfig.ocspModes.FAIL_CLOSED) {\n        for (let errorIndex = 0, length = errors.length; errorIndex < length; errorIndex++) {\n            // first error\n            const err = errors[errorIndex];\n            if (err) {\n                return Object.prototype.hasOwnProperty.call(err, 'err') ? err.err : err;\n            }\n        }\n    }\n    else {\n        let anyRevoked = null;\n        for (let errorIndex = 0, length = errors.length; errorIndex < length; errorIndex++) {\n            // first error\n            const err = errors[errorIndex];\n            if (err && !isValidOCSPError(err)) {\n                // any of the errors is NOT good/revoked/unknown\n                Logger.getInstance().debug(`OCSP responder didn't respond correctly. Assuming certificate is not revoked. Details: ${err}`);\n                return null;\n            }\n            else if (err && err.code === ErrorCodes.ERR_OCSP_REVOKED) {\n                anyRevoked = err;\n            }\n        }\n        return anyRevoked;\n    }\n}\nexports.canEarlyExitForOCSP = canEarlyExitForOCSP;\n/**\n * Validates a certificate chain using OCSP.\n *\n * @param {Object} cert a top-level cert that represents the leaf of a\n *   certificate chain.\n * @param {Function} cb the callback to invoke once the validation is complete.\n */\nfunction validateCertChain(cert, cb) {\n    // walk up the certificate chain and collect all the certificates in an array\n    const certs = [];\n    while (cert &&\n        cert.issuerCertificate &&\n        cert.fingerprint !== cert.issuerCertificate.fingerprint) {\n        certs.push(cert);\n        cert = cert.issuerCertificate;\n    }\n    // create an array to store any errors encountered\n    // while validating the certificate chain\n    const errors = new Array(certs.length);\n    /**\n     * Called for every certificate as we traverse the certificate chain and\n     * validate each one.\n     *\n     * @param certs\n     * @param index\n     */\n    const eachCallback = function (certs, index) {\n        const cert = certs[index];\n        validateCert(cert, function (err, data) {\n            completed++;\n            errors[index] = err;\n            if (err) {\n                Logger.getInstance().debug(err);\n            }\n            // if we have an ocsp response, cache it\n            if (data && (!data.err || isValidOCSPError(data.err))) {\n                // check if cache is initialized before setting entry\n                if (getOcspResponseCache().isInitialized()) {\n                    getOcspResponseCache().set(cert, data.res);\n                }\n                else {\n                    getOcspResponseCache().initCache(cert, data.res);\n                }\n                if (data.err) {\n                    err = data.err;\n                    errors[index] = err;\n                }\n            }\n            // if this is the last request to complete\n            if (completed === certs.length) {\n                const validError = canEarlyExitForOCSP(errors);\n                cb(validError);\n            }\n        });\n    };\n    // fire off requests to validate all the certificates in the chain\n    let completed = 0;\n    for (let index = 0, length = certs.length; index < length; index++) {\n        eachCallback(certs, index);\n    }\n}\n/**\n * Validates a certificate using OCSP.\n *\n * @param cert the certificate to validate.\n * @param cb the callback to invoke once the validation is complete.\n */\nfunction validateCert(cert, cb) {\n    function getOcspCache() {\n        try {\n            if (!getOcspResponseCache().downloadCache(getOcspResonseAndVerify)) {\n                setTimeout(getOcspCache, 10);\n            }\n        }\n        catch (e) {\n            process.nextTick(function () {\n                cb(e);\n            });\n        }\n    }\n    /**\n     * Gets and Verifies OCSP Response\n     * @param err {object}\n     * @param useCacheServer {boolean}\n     */\n    function getOcspResonseAndVerify(err, useCacheServer) {\n        if (!useCacheServer && !getOcspResponseCache().isDownloadFinished()) {\n            setTimeout(getOcspResonseAndVerify, 10); // ms\n            return;\n        }\n        let decoded;\n        try {\n            decoded = CertUtil.decode(cert);\n        }\n        catch (e) {\n            process.nextTick(function () {\n                cb(e);\n            });\n        }\n        let ocspResponse;\n        // check if cache is initialized before getting entry\n        if (getOcspResponseCache().isInitialized()) {\n            if (getOcspResponseCache().IsCacheExpired()) {\n                // reset cache status so it can be refreshed\n                getOcspResponseCache().resetCacheStatus();\n            }\n            else {\n                // if we already have a valid entry in the cache, use it\n                ocspResponse = getOcspResponseCache().get(cert);\n            }\n        }\n        if (ocspResponse) {\n            Logger.getInstance().trace('Returning OCSP status for certificate %s from cache', cert.serialNumber);\n            const status = CertUtil.verifyOCSPResponse(decoded.issuer, ocspResponse);\n            if (!status.err) {\n                // verification was success with the cache\n                process.nextTick(function () {\n                    cb(null, null);\n                });\n            }\n            else {\n                // verification was failure with the cache\n                process.nextTick(function () {\n                    cb(status.err, null);\n                });\n            }\n        }\n        else {\n            if (useCacheServer) {\n                process.nextTick(function () {\n                    getOcspCache();\n                });\n            }\n            else {\n                Check(decoded, cb);\n            }\n        }\n    }\n    if (!variables.SF_OCSP_RESPONSE_CACHE_SERVER_ENABLED) {\n        getOcspResponseCache().forceDownloadToFinish();\n    }\n    getOcspResonseAndVerify(null, variables.SF_OCSP_RESPONSE_CACHE_SERVER_ENABLED);\n}\n//# sourceMappingURL=socket_util.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/dist/lib/agent/socket_util.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/dist/lib/authentication/auth_default.js":
/*!****************************************************************************!*\
  !*** ./node_modules/snowflake-sdk/dist/lib/authentication/auth_default.js ***!
  \****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst mfaAuthenticator = (__webpack_require__(/*! ./authentication_types */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/authentication/authentication_types.js\").USER_PWD_MFA_AUTHENTICATOR);\n/**\n * Creates a default authenticator.\n *\n * @param {String} password\n *\n * @returns {Object}\n * @constructor\n */\nfunction AuthDefault(connectionConfig) {\n    const password = connectionConfig.password;\n    const mfaToken = connectionConfig.mfaToken;\n    const passcode = connectionConfig.getPasscode();\n    const isPasscodeInPassword = connectionConfig.getPasscodeInPassword();\n    /**\n     * Update JSON body with password or token.\n     *\n     * @param {JSON} body\n     *\n     * @returns {null}\n     */\n    this.updateBody = function (body) {\n        body['data']['PASSWORD'] = password;\n        if (isMFAAuth()) {\n            setMFASessionParams(body);\n        }\n    };\n    function isMFAAuth() {\n        return (connectionConfig.getAuthenticator() === mfaAuthenticator ||\n            mfaToken ||\n            passcode ||\n            isPasscodeInPassword);\n    }\n    function setMFASessionParams(body) {\n        body['data']['TOKEN'] = mfaToken;\n        body['data']['AUTHENTICATOR'] = mfaAuthenticator;\n        if (isPasscodeInPassword) {\n            body['data']['EXT_AUTHN_DUO_METHOD'] = 'passcode';\n            body['data']['passcodeInPassword'] = true;\n        }\n        else if (passcode) {\n            body['data']['EXT_AUTHN_DUO_METHOD'] = 'passcode';\n            body['data']['PASSCODE'] = passcode;\n        }\n        else {\n            body['data']['EXT_AUTHN_DUO_METHOD'] = 'push';\n        }\n    }\n    this.authenticate = async function () {\n        return;\n    };\n}\nmodule.exports = AuthDefault;\n//# sourceMappingURL=auth_default.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9kaXN0L2xpYi9hdXRoZW50aWNhdGlvbi9hdXRoX2RlZmF1bHQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYix5QkFBeUIsb0tBQTREO0FBQ3JGO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQjtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsTUFBTTtBQUNyQjtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL3dhbmdoYW90YWkvRGVza3RvcC9lbHZlbmxhYi9IVFYvbm9kZV9tb2R1bGVzL3Nub3dmbGFrZS1zZGsvZGlzdC9saWIvYXV0aGVudGljYXRpb24vYXV0aF9kZWZhdWx0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuY29uc3QgbWZhQXV0aGVudGljYXRvciA9IHJlcXVpcmUoJy4vYXV0aGVudGljYXRpb25fdHlwZXMnKS5VU0VSX1BXRF9NRkFfQVVUSEVOVElDQVRPUjtcbi8qKlxuICogQ3JlYXRlcyBhIGRlZmF1bHQgYXV0aGVudGljYXRvci5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gcGFzc3dvcmRcbiAqXG4gKiBAcmV0dXJucyB7T2JqZWN0fVxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIEF1dGhEZWZhdWx0KGNvbm5lY3Rpb25Db25maWcpIHtcbiAgICBjb25zdCBwYXNzd29yZCA9IGNvbm5lY3Rpb25Db25maWcucGFzc3dvcmQ7XG4gICAgY29uc3QgbWZhVG9rZW4gPSBjb25uZWN0aW9uQ29uZmlnLm1mYVRva2VuO1xuICAgIGNvbnN0IHBhc3Njb2RlID0gY29ubmVjdGlvbkNvbmZpZy5nZXRQYXNzY29kZSgpO1xuICAgIGNvbnN0IGlzUGFzc2NvZGVJblBhc3N3b3JkID0gY29ubmVjdGlvbkNvbmZpZy5nZXRQYXNzY29kZUluUGFzc3dvcmQoKTtcbiAgICAvKipcbiAgICAgKiBVcGRhdGUgSlNPTiBib2R5IHdpdGggcGFzc3dvcmQgb3IgdG9rZW4uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0pTT059IGJvZHlcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtudWxsfVxuICAgICAqL1xuICAgIHRoaXMudXBkYXRlQm9keSA9IGZ1bmN0aW9uIChib2R5KSB7XG4gICAgICAgIGJvZHlbJ2RhdGEnXVsnUEFTU1dPUkQnXSA9IHBhc3N3b3JkO1xuICAgICAgICBpZiAoaXNNRkFBdXRoKCkpIHtcbiAgICAgICAgICAgIHNldE1GQVNlc3Npb25QYXJhbXMoYm9keSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGZ1bmN0aW9uIGlzTUZBQXV0aCgpIHtcbiAgICAgICAgcmV0dXJuIChjb25uZWN0aW9uQ29uZmlnLmdldEF1dGhlbnRpY2F0b3IoKSA9PT0gbWZhQXV0aGVudGljYXRvciB8fFxuICAgICAgICAgICAgbWZhVG9rZW4gfHxcbiAgICAgICAgICAgIHBhc3Njb2RlIHx8XG4gICAgICAgICAgICBpc1Bhc3Njb2RlSW5QYXNzd29yZCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHNldE1GQVNlc3Npb25QYXJhbXMoYm9keSkge1xuICAgICAgICBib2R5WydkYXRhJ11bJ1RPS0VOJ10gPSBtZmFUb2tlbjtcbiAgICAgICAgYm9keVsnZGF0YSddWydBVVRIRU5USUNBVE9SJ10gPSBtZmFBdXRoZW50aWNhdG9yO1xuICAgICAgICBpZiAoaXNQYXNzY29kZUluUGFzc3dvcmQpIHtcbiAgICAgICAgICAgIGJvZHlbJ2RhdGEnXVsnRVhUX0FVVEhOX0RVT19NRVRIT0QnXSA9ICdwYXNzY29kZSc7XG4gICAgICAgICAgICBib2R5WydkYXRhJ11bJ3Bhc3Njb2RlSW5QYXNzd29yZCddID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChwYXNzY29kZSkge1xuICAgICAgICAgICAgYm9keVsnZGF0YSddWydFWFRfQVVUSE5fRFVPX01FVEhPRCddID0gJ3Bhc3Njb2RlJztcbiAgICAgICAgICAgIGJvZHlbJ2RhdGEnXVsnUEFTU0NPREUnXSA9IHBhc3Njb2RlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgYm9keVsnZGF0YSddWydFWFRfQVVUSE5fRFVPX01FVEhPRCddID0gJ3B1c2gnO1xuICAgICAgICB9XG4gICAgfVxuICAgIHRoaXMuYXV0aGVudGljYXRlID0gYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm47XG4gICAgfTtcbn1cbm1vZHVsZS5leHBvcnRzID0gQXV0aERlZmF1bHQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hdXRoX2RlZmF1bHQuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/dist/lib/authentication/auth_default.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/dist/lib/authentication/auth_idtoken.js":
/*!****************************************************************************!*\
  !*** ./node_modules/snowflake-sdk/dist/lib/authentication/auth_idtoken.js ***!
  \****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst AuthWeb = __webpack_require__(/*! ./auth_web */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/authentication/auth_web.js\");\nconst Util = __webpack_require__(/*! ../util */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/util.js\");\nconst AuthenticationTypes = __webpack_require__(/*! ./authentication_types */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/authentication/authentication_types.js\");\nconst GlobalConfig = __webpack_require__(/*! ../global_config */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/global_config.js\");\n/**\n * Creates an ID token authenticator.\n *\n * @param {Object} connectionConfig\n * @param {Object} httpClient\n * @param {module} webbrowser\n *\n * @returns {Object} the authenticator\n * @constructor\n */\nfunction AuthIDToken(connectionConfig, httpClient, webbrowser) {\n    this.idToken = connectionConfig.idToken;\n    /**\n     * Update JSON body with token.\n     *\n     * @param {JSON} body\n     *\n     * @returns {null}\n     */\n    this.updateBody = function (body) {\n        body['data']['TOKEN'] = this.idToken;\n        body['data']['AUTHENTICATOR'] = 'ID_TOKEN';\n    };\n    this.authenticate = async function () { };\n    this.reauthenticate = async function (body) {\n        const key = Util.buildCredentialCacheKey(connectionConfig.host, connectionConfig.username, AuthenticationTypes.ID_TOKEN_AUTHENTICATOR);\n        await GlobalConfig.getCredentialManager().remove(key);\n        const auth = new AuthWeb(connectionConfig, httpClient, webbrowser);\n        await auth.authenticate(connectionConfig.getAuthenticator(), connectionConfig.getServiceName(), connectionConfig.account, connectionConfig.username);\n        auth.updateBody(body);\n    };\n}\nmodule.exports = AuthIDToken;\n//# sourceMappingURL=auth_idtoken.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9kaXN0L2xpYi9hdXRoZW50aWNhdGlvbi9hdXRoX2lkdG9rZW4uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixnQkFBZ0IsbUJBQU8sQ0FBQywwRkFBWTtBQUNwQyxhQUFhLG1CQUFPLENBQUMsb0VBQVM7QUFDOUIsNEJBQTRCLG1CQUFPLENBQUMsa0hBQXdCO0FBQzVELHFCQUFxQixtQkFBTyxDQUFDLHNGQUFrQjtBQUMvQztBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQjtBQUNBLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsTUFBTTtBQUNyQjtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL3dhbmdoYW90YWkvRGVza3RvcC9lbHZlbmxhYi9IVFYvbm9kZV9tb2R1bGVzL3Nub3dmbGFrZS1zZGsvZGlzdC9saWIvYXV0aGVudGljYXRpb24vYXV0aF9pZHRva2VuLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuY29uc3QgQXV0aFdlYiA9IHJlcXVpcmUoJy4vYXV0aF93ZWInKTtcbmNvbnN0IFV0aWwgPSByZXF1aXJlKCcuLi91dGlsJyk7XG5jb25zdCBBdXRoZW50aWNhdGlvblR5cGVzID0gcmVxdWlyZSgnLi9hdXRoZW50aWNhdGlvbl90eXBlcycpO1xuY29uc3QgR2xvYmFsQ29uZmlnID0gcmVxdWlyZSgnLi4vZ2xvYmFsX2NvbmZpZycpO1xuLyoqXG4gKiBDcmVhdGVzIGFuIElEIHRva2VuIGF1dGhlbnRpY2F0b3IuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbm5lY3Rpb25Db25maWdcbiAqIEBwYXJhbSB7T2JqZWN0fSBodHRwQ2xpZW50XG4gKiBAcGFyYW0ge21vZHVsZX0gd2ViYnJvd3NlclxuICpcbiAqIEByZXR1cm5zIHtPYmplY3R9IHRoZSBhdXRoZW50aWNhdG9yXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gQXV0aElEVG9rZW4oY29ubmVjdGlvbkNvbmZpZywgaHR0cENsaWVudCwgd2ViYnJvd3Nlcikge1xuICAgIHRoaXMuaWRUb2tlbiA9IGNvbm5lY3Rpb25Db25maWcuaWRUb2tlbjtcbiAgICAvKipcbiAgICAgKiBVcGRhdGUgSlNPTiBib2R5IHdpdGggdG9rZW4uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0pTT059IGJvZHlcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtudWxsfVxuICAgICAqL1xuICAgIHRoaXMudXBkYXRlQm9keSA9IGZ1bmN0aW9uIChib2R5KSB7XG4gICAgICAgIGJvZHlbJ2RhdGEnXVsnVE9LRU4nXSA9IHRoaXMuaWRUb2tlbjtcbiAgICAgICAgYm9keVsnZGF0YSddWydBVVRIRU5USUNBVE9SJ10gPSAnSURfVE9LRU4nO1xuICAgIH07XG4gICAgdGhpcy5hdXRoZW50aWNhdGUgPSBhc3luYyBmdW5jdGlvbiAoKSB7IH07XG4gICAgdGhpcy5yZWF1dGhlbnRpY2F0ZSA9IGFzeW5jIGZ1bmN0aW9uIChib2R5KSB7XG4gICAgICAgIGNvbnN0IGtleSA9IFV0aWwuYnVpbGRDcmVkZW50aWFsQ2FjaGVLZXkoY29ubmVjdGlvbkNvbmZpZy5ob3N0LCBjb25uZWN0aW9uQ29uZmlnLnVzZXJuYW1lLCBBdXRoZW50aWNhdGlvblR5cGVzLklEX1RPS0VOX0FVVEhFTlRJQ0FUT1IpO1xuICAgICAgICBhd2FpdCBHbG9iYWxDb25maWcuZ2V0Q3JlZGVudGlhbE1hbmFnZXIoKS5yZW1vdmUoa2V5KTtcbiAgICAgICAgY29uc3QgYXV0aCA9IG5ldyBBdXRoV2ViKGNvbm5lY3Rpb25Db25maWcsIGh0dHBDbGllbnQsIHdlYmJyb3dzZXIpO1xuICAgICAgICBhd2FpdCBhdXRoLmF1dGhlbnRpY2F0ZShjb25uZWN0aW9uQ29uZmlnLmdldEF1dGhlbnRpY2F0b3IoKSwgY29ubmVjdGlvbkNvbmZpZy5nZXRTZXJ2aWNlTmFtZSgpLCBjb25uZWN0aW9uQ29uZmlnLmFjY291bnQsIGNvbm5lY3Rpb25Db25maWcudXNlcm5hbWUpO1xuICAgICAgICBhdXRoLnVwZGF0ZUJvZHkoYm9keSk7XG4gICAgfTtcbn1cbm1vZHVsZS5leHBvcnRzID0gQXV0aElEVG9rZW47XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hdXRoX2lkdG9rZW4uanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/dist/lib/authentication/auth_idtoken.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/dist/lib/authentication/auth_keypair.js":
/*!****************************************************************************!*\
  !*** ./node_modules/snowflake-sdk/dist/lib/authentication/auth_keypair.js ***!
  \****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst crypto = __webpack_require__(/*! crypto */ \"crypto\");\nconst jwt = __webpack_require__(/*! jsonwebtoken */ \"(rsc)/./node_modules/jsonwebtoken/index.js\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst util = __webpack_require__(/*! ../util */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/util.js\");\n/**\n * Creates a key-pair authenticator.\n *\n * @param {Object} connectionConfig\n *\n * @returns {Object}\n * @constructor\n */\nfunction AuthKeypair(connectionConfig) {\n    let privateKey = connectionConfig.getPrivateKey();\n    const privateKeyPath = connectionConfig.getPrivateKeyPath();\n    const privateKeyPass = connectionConfig.getPrivateKeyPass();\n    let jwtToken;\n    const LIFETIME = 120; // seconds\n    const ALGORITHM = 'RS256';\n    const ISSUER = 'iss';\n    const SUBJECT = 'sub';\n    const EXPIRE_TIME = 'exp';\n    const ISSUE_TIME = 'iat';\n    /**\n     * Update JSON body with token.\n     *\n     * @param {JSON} body\n     *\n     * @returns {null}\n     */\n    this.updateBody = function (body) {\n        body['data']['TOKEN'] = jwtToken;\n    };\n    /**\n     * Load private key from specified file location.\n     *\n     * @param {String} privateKeyPath\n     * @param {String} privateKeyPass\n     *\n     * @returns {String} the private key.\n     */\n    function loadPrivateKey(privateKeyPath, privateKeyPass) {\n        // Load private key file\n        const privateKeyFile = fs.readFileSync(privateKeyPath);\n        let privateKeyObject;\n        // For encrypted private key\n        if (privateKeyPass) {\n            // Get private key with passphrase\n            privateKeyObject = crypto.createPrivateKey({\n                key: privateKeyFile,\n                format: 'pem',\n                passphrase: privateKeyPass,\n            });\n        }\n        else {\n            // For unencrypted private key\n            privateKeyObject = crypto.createPrivateKey({\n                key: privateKeyFile,\n                format: 'pem',\n            });\n        }\n        const privateKey = privateKeyObject.export({\n            format: 'pem',\n            type: 'pkcs8',\n        });\n        return privateKey;\n    }\n    /**\n     * Get public key fingerprint from private key.\n     *\n     * @param {String} privateKey\n     *\n     * @returns {String} the public key fingerprint.\n     */\n    function calculatePublicKeyFingerprint(privateKey) {\n        // Extract public key object from private key\n        const pubKeyObject = crypto.createPublicKey({\n            key: privateKey,\n            format: 'pem',\n        });\n        // Obtain public key string\n        const publicKey = pubKeyObject.export({\n            format: 'der',\n            type: 'spki',\n        });\n        // Generate SHA256 hash of public key and encode in base64\n        const publicKeyFingerprint = 'SHA256:' + crypto.createHash('sha256').update(publicKey, 'utf8').digest('base64');\n        return publicKeyFingerprint;\n    }\n    /**\n     * Generate JWT token using RS256 algorithm.\n     *\n     * @param {String} authenticator\n     * @param {String} serviceName\n     * @param {String} account\n     * @param {String} username\n     *\n     * @returns {null}\n     */\n    this.authenticate = async function (authenticator, serviceName, account, username) {\n        let publicKeyFingerprint;\n        // Use private key if already set in connection string, otherwise use private key file location\n        if (privateKey) {\n            // Get public key fingerprint\n            publicKeyFingerprint = calculatePublicKeyFingerprint(privateKey);\n        }\n        else if (privateKeyPath) {\n            // Extract private key and get fingerprint\n            privateKey = loadPrivateKey(privateKeyPath, privateKeyPass);\n            publicKeyFingerprint = calculatePublicKeyFingerprint(privateKey);\n        }\n        // Current time + 120 seconds\n        const currentTime = Date.now();\n        const jwtTokenExp = currentTime + LIFETIME * 1000;\n        // Create payload containing jwt token and lifetime span\n        const payload = {\n            [ISSUER]: util.format('%s.%s.%s', account.toUpperCase(), username.toUpperCase(), publicKeyFingerprint),\n            [SUBJECT]: util.format('%s.%s', account.toUpperCase(), username.toUpperCase()),\n            [ISSUE_TIME]: currentTime,\n            [EXPIRE_TIME]: jwtTokenExp,\n        };\n        // Sign payload with RS256 algorithm\n        jwtToken = jwt.sign(payload, privateKey, { algorithm: ALGORITHM });\n    };\n    this.reauthenticate = async function (body) {\n        this.authenticate(connectionConfig.getAuthenticator(), connectionConfig.getServiceName(), connectionConfig.account, connectionConfig.username);\n        this.updateBody(body);\n    };\n}\nmodule.exports = AuthKeypair;\n//# sourceMappingURL=auth_keypair.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9kaXN0L2xpYi9hdXRoZW50aWNhdGlvbi9hdXRoX2tleXBhaXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixlQUFlLG1CQUFPLENBQUMsc0JBQVE7QUFDL0IsWUFBWSxtQkFBTyxDQUFDLGdFQUFjO0FBQ2xDLFdBQVcsbUJBQU8sQ0FBQyxjQUFJO0FBQ3ZCLGFBQWEsbUJBQU8sQ0FBQyxvRUFBUztBQUM5QjtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkI7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsTUFBTTtBQUNyQjtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsUUFBUTtBQUN2QixlQUFlLFFBQVE7QUFDdkI7QUFDQSxpQkFBaUIsUUFBUTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkI7QUFDQSxpQkFBaUIsUUFBUTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkIsZUFBZSxRQUFRO0FBQ3ZCLGVBQWUsUUFBUTtBQUN2QixlQUFlLFFBQVE7QUFDdkI7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbURBQW1ELHNCQUFzQjtBQUN6RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvd2FuZ2hhb3RhaS9EZXNrdG9wL2VsdmVubGFiL0hUVi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9kaXN0L2xpYi9hdXRoZW50aWNhdGlvbi9hdXRoX2tleXBhaXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBjcnlwdG8gPSByZXF1aXJlKCdjcnlwdG8nKTtcbmNvbnN0IGp3dCA9IHJlcXVpcmUoJ2pzb253ZWJ0b2tlbicpO1xuY29uc3QgZnMgPSByZXF1aXJlKCdmcycpO1xuY29uc3QgdXRpbCA9IHJlcXVpcmUoJy4uL3V0aWwnKTtcbi8qKlxuICogQ3JlYXRlcyBhIGtleS1wYWlyIGF1dGhlbnRpY2F0b3IuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbm5lY3Rpb25Db25maWdcbiAqXG4gKiBAcmV0dXJucyB7T2JqZWN0fVxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIEF1dGhLZXlwYWlyKGNvbm5lY3Rpb25Db25maWcpIHtcbiAgICBsZXQgcHJpdmF0ZUtleSA9IGNvbm5lY3Rpb25Db25maWcuZ2V0UHJpdmF0ZUtleSgpO1xuICAgIGNvbnN0IHByaXZhdGVLZXlQYXRoID0gY29ubmVjdGlvbkNvbmZpZy5nZXRQcml2YXRlS2V5UGF0aCgpO1xuICAgIGNvbnN0IHByaXZhdGVLZXlQYXNzID0gY29ubmVjdGlvbkNvbmZpZy5nZXRQcml2YXRlS2V5UGFzcygpO1xuICAgIGxldCBqd3RUb2tlbjtcbiAgICBjb25zdCBMSUZFVElNRSA9IDEyMDsgLy8gc2Vjb25kc1xuICAgIGNvbnN0IEFMR09SSVRITSA9ICdSUzI1Nic7XG4gICAgY29uc3QgSVNTVUVSID0gJ2lzcyc7XG4gICAgY29uc3QgU1VCSkVDVCA9ICdzdWInO1xuICAgIGNvbnN0IEVYUElSRV9USU1FID0gJ2V4cCc7XG4gICAgY29uc3QgSVNTVUVfVElNRSA9ICdpYXQnO1xuICAgIC8qKlxuICAgICAqIFVwZGF0ZSBKU09OIGJvZHkgd2l0aCB0b2tlbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7SlNPTn0gYm9keVxuICAgICAqXG4gICAgICogQHJldHVybnMge251bGx9XG4gICAgICovXG4gICAgdGhpcy51cGRhdGVCb2R5ID0gZnVuY3Rpb24gKGJvZHkpIHtcbiAgICAgICAgYm9keVsnZGF0YSddWydUT0tFTiddID0gand0VG9rZW47XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBMb2FkIHByaXZhdGUga2V5IGZyb20gc3BlY2lmaWVkIGZpbGUgbG9jYXRpb24uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gcHJpdmF0ZUtleVBhdGhcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gcHJpdmF0ZUtleVBhc3NcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtTdHJpbmd9IHRoZSBwcml2YXRlIGtleS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsb2FkUHJpdmF0ZUtleShwcml2YXRlS2V5UGF0aCwgcHJpdmF0ZUtleVBhc3MpIHtcbiAgICAgICAgLy8gTG9hZCBwcml2YXRlIGtleSBmaWxlXG4gICAgICAgIGNvbnN0IHByaXZhdGVLZXlGaWxlID0gZnMucmVhZEZpbGVTeW5jKHByaXZhdGVLZXlQYXRoKTtcbiAgICAgICAgbGV0IHByaXZhdGVLZXlPYmplY3Q7XG4gICAgICAgIC8vIEZvciBlbmNyeXB0ZWQgcHJpdmF0ZSBrZXlcbiAgICAgICAgaWYgKHByaXZhdGVLZXlQYXNzKSB7XG4gICAgICAgICAgICAvLyBHZXQgcHJpdmF0ZSBrZXkgd2l0aCBwYXNzcGhyYXNlXG4gICAgICAgICAgICBwcml2YXRlS2V5T2JqZWN0ID0gY3J5cHRvLmNyZWF0ZVByaXZhdGVLZXkoe1xuICAgICAgICAgICAgICAgIGtleTogcHJpdmF0ZUtleUZpbGUsXG4gICAgICAgICAgICAgICAgZm9ybWF0OiAncGVtJyxcbiAgICAgICAgICAgICAgICBwYXNzcGhyYXNlOiBwcml2YXRlS2V5UGFzcyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gRm9yIHVuZW5jcnlwdGVkIHByaXZhdGUga2V5XG4gICAgICAgICAgICBwcml2YXRlS2V5T2JqZWN0ID0gY3J5cHRvLmNyZWF0ZVByaXZhdGVLZXkoe1xuICAgICAgICAgICAgICAgIGtleTogcHJpdmF0ZUtleUZpbGUsXG4gICAgICAgICAgICAgICAgZm9ybWF0OiAncGVtJyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHByaXZhdGVLZXkgPSBwcml2YXRlS2V5T2JqZWN0LmV4cG9ydCh7XG4gICAgICAgICAgICBmb3JtYXQ6ICdwZW0nLFxuICAgICAgICAgICAgdHlwZTogJ3BrY3M4JyxcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBwcml2YXRlS2V5O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZXQgcHVibGljIGtleSBmaW5nZXJwcmludCBmcm9tIHByaXZhdGUga2V5LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHByaXZhdGVLZXlcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtTdHJpbmd9IHRoZSBwdWJsaWMga2V5IGZpbmdlcnByaW50LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNhbGN1bGF0ZVB1YmxpY0tleUZpbmdlcnByaW50KHByaXZhdGVLZXkpIHtcbiAgICAgICAgLy8gRXh0cmFjdCBwdWJsaWMga2V5IG9iamVjdCBmcm9tIHByaXZhdGUga2V5XG4gICAgICAgIGNvbnN0IHB1YktleU9iamVjdCA9IGNyeXB0by5jcmVhdGVQdWJsaWNLZXkoe1xuICAgICAgICAgICAga2V5OiBwcml2YXRlS2V5LFxuICAgICAgICAgICAgZm9ybWF0OiAncGVtJyxcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIE9idGFpbiBwdWJsaWMga2V5IHN0cmluZ1xuICAgICAgICBjb25zdCBwdWJsaWNLZXkgPSBwdWJLZXlPYmplY3QuZXhwb3J0KHtcbiAgICAgICAgICAgIGZvcm1hdDogJ2RlcicsXG4gICAgICAgICAgICB0eXBlOiAnc3BraScsXG4gICAgICAgIH0pO1xuICAgICAgICAvLyBHZW5lcmF0ZSBTSEEyNTYgaGFzaCBvZiBwdWJsaWMga2V5IGFuZCBlbmNvZGUgaW4gYmFzZTY0XG4gICAgICAgIGNvbnN0IHB1YmxpY0tleUZpbmdlcnByaW50ID0gJ1NIQTI1NjonICsgY3J5cHRvLmNyZWF0ZUhhc2goJ3NoYTI1NicpLnVwZGF0ZShwdWJsaWNLZXksICd1dGY4JykuZGlnZXN0KCdiYXNlNjQnKTtcbiAgICAgICAgcmV0dXJuIHB1YmxpY0tleUZpbmdlcnByaW50O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZSBKV1QgdG9rZW4gdXNpbmcgUlMyNTYgYWxnb3JpdGhtLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGF1dGhlbnRpY2F0b3JcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gc2VydmljZU5hbWVcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gYWNjb3VudFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSB1c2VybmFtZVxuICAgICAqXG4gICAgICogQHJldHVybnMge251bGx9XG4gICAgICovXG4gICAgdGhpcy5hdXRoZW50aWNhdGUgPSBhc3luYyBmdW5jdGlvbiAoYXV0aGVudGljYXRvciwgc2VydmljZU5hbWUsIGFjY291bnQsIHVzZXJuYW1lKSB7XG4gICAgICAgIGxldCBwdWJsaWNLZXlGaW5nZXJwcmludDtcbiAgICAgICAgLy8gVXNlIHByaXZhdGUga2V5IGlmIGFscmVhZHkgc2V0IGluIGNvbm5lY3Rpb24gc3RyaW5nLCBvdGhlcndpc2UgdXNlIHByaXZhdGUga2V5IGZpbGUgbG9jYXRpb25cbiAgICAgICAgaWYgKHByaXZhdGVLZXkpIHtcbiAgICAgICAgICAgIC8vIEdldCBwdWJsaWMga2V5IGZpbmdlcnByaW50XG4gICAgICAgICAgICBwdWJsaWNLZXlGaW5nZXJwcmludCA9IGNhbGN1bGF0ZVB1YmxpY0tleUZpbmdlcnByaW50KHByaXZhdGVLZXkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHByaXZhdGVLZXlQYXRoKSB7XG4gICAgICAgICAgICAvLyBFeHRyYWN0IHByaXZhdGUga2V5IGFuZCBnZXQgZmluZ2VycHJpbnRcbiAgICAgICAgICAgIHByaXZhdGVLZXkgPSBsb2FkUHJpdmF0ZUtleShwcml2YXRlS2V5UGF0aCwgcHJpdmF0ZUtleVBhc3MpO1xuICAgICAgICAgICAgcHVibGljS2V5RmluZ2VycHJpbnQgPSBjYWxjdWxhdGVQdWJsaWNLZXlGaW5nZXJwcmludChwcml2YXRlS2V5KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBDdXJyZW50IHRpbWUgKyAxMjAgc2Vjb25kc1xuICAgICAgICBjb25zdCBjdXJyZW50VGltZSA9IERhdGUubm93KCk7XG4gICAgICAgIGNvbnN0IGp3dFRva2VuRXhwID0gY3VycmVudFRpbWUgKyBMSUZFVElNRSAqIDEwMDA7XG4gICAgICAgIC8vIENyZWF0ZSBwYXlsb2FkIGNvbnRhaW5pbmcgand0IHRva2VuIGFuZCBsaWZldGltZSBzcGFuXG4gICAgICAgIGNvbnN0IHBheWxvYWQgPSB7XG4gICAgICAgICAgICBbSVNTVUVSXTogdXRpbC5mb3JtYXQoJyVzLiVzLiVzJywgYWNjb3VudC50b1VwcGVyQ2FzZSgpLCB1c2VybmFtZS50b1VwcGVyQ2FzZSgpLCBwdWJsaWNLZXlGaW5nZXJwcmludCksXG4gICAgICAgICAgICBbU1VCSkVDVF06IHV0aWwuZm9ybWF0KCclcy4lcycsIGFjY291bnQudG9VcHBlckNhc2UoKSwgdXNlcm5hbWUudG9VcHBlckNhc2UoKSksXG4gICAgICAgICAgICBbSVNTVUVfVElNRV06IGN1cnJlbnRUaW1lLFxuICAgICAgICAgICAgW0VYUElSRV9USU1FXTogand0VG9rZW5FeHAsXG4gICAgICAgIH07XG4gICAgICAgIC8vIFNpZ24gcGF5bG9hZCB3aXRoIFJTMjU2IGFsZ29yaXRobVxuICAgICAgICBqd3RUb2tlbiA9IGp3dC5zaWduKHBheWxvYWQsIHByaXZhdGVLZXksIHsgYWxnb3JpdGhtOiBBTEdPUklUSE0gfSk7XG4gICAgfTtcbiAgICB0aGlzLnJlYXV0aGVudGljYXRlID0gYXN5bmMgZnVuY3Rpb24gKGJvZHkpIHtcbiAgICAgICAgdGhpcy5hdXRoZW50aWNhdGUoY29ubmVjdGlvbkNvbmZpZy5nZXRBdXRoZW50aWNhdG9yKCksIGNvbm5lY3Rpb25Db25maWcuZ2V0U2VydmljZU5hbWUoKSwgY29ubmVjdGlvbkNvbmZpZy5hY2NvdW50LCBjb25uZWN0aW9uQ29uZmlnLnVzZXJuYW1lKTtcbiAgICAgICAgdGhpcy51cGRhdGVCb2R5KGJvZHkpO1xuICAgIH07XG59XG5tb2R1bGUuZXhwb3J0cyA9IEF1dGhLZXlwYWlyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXV0aF9rZXlwYWlyLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/dist/lib/authentication/auth_keypair.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/dist/lib/authentication/auth_oauth.js":
/*!**************************************************************************!*\
  !*** ./node_modules/snowflake-sdk/dist/lib/authentication/auth_oauth.js ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
eval("\n/**\n * Creates an oauth authenticator.\n *\n * @param {String} token\n *\n * @returns {Object}\n * @constructor\n */\nfunction AuthOauth(token) {\n    /**\n     * Update JSON body with token.\n     *\n     * @param {JSON} body\n     *\n     * @returns {null}\n     */\n    this.updateBody = function (body) {\n        body['data']['TOKEN'] = token;\n    };\n    this.authenticate = async function () { };\n}\nmodule.exports = AuthOauth;\n//# sourceMappingURL=auth_oauth.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9kaXN0L2xpYi9hdXRoZW50aWNhdGlvbi9hdXRoX29hdXRoLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsTUFBTTtBQUNyQjtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvd2FuZ2hhb3RhaS9EZXNrdG9wL2VsdmVubGFiL0hUVi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9kaXN0L2xpYi9hdXRoZW50aWNhdGlvbi9hdXRoX29hdXRoLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiBDcmVhdGVzIGFuIG9hdXRoIGF1dGhlbnRpY2F0b3IuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHRva2VuXG4gKlxuICogQHJldHVybnMge09iamVjdH1cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBBdXRoT2F1dGgodG9rZW4pIHtcbiAgICAvKipcbiAgICAgKiBVcGRhdGUgSlNPTiBib2R5IHdpdGggdG9rZW4uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0pTT059IGJvZHlcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtudWxsfVxuICAgICAqL1xuICAgIHRoaXMudXBkYXRlQm9keSA9IGZ1bmN0aW9uIChib2R5KSB7XG4gICAgICAgIGJvZHlbJ2RhdGEnXVsnVE9LRU4nXSA9IHRva2VuO1xuICAgIH07XG4gICAgdGhpcy5hdXRoZW50aWNhdGUgPSBhc3luYyBmdW5jdGlvbiAoKSB7IH07XG59XG5tb2R1bGUuZXhwb3J0cyA9IEF1dGhPYXV0aDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWF1dGhfb2F1dGguanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/dist/lib/authentication/auth_oauth.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/dist/lib/authentication/auth_oauth_authorization_code.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/snowflake-sdk/dist/lib/authentication/auth_oauth_authorization_code.js ***!
  \*********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst Logger = (__webpack_require__(/*! ./../logger */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/logger.js\")[\"default\"]);\nconst authUtil = __webpack_require__(/*! ../authentication/authentication_util */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/authentication/authentication_util.js\");\nconst { getFreePort, format } = __webpack_require__(/*! ../util */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/util.js\");\nconst { withBrowserActionTimeout, writeToCache, removeFromCache, readCache, } = __webpack_require__(/*! ./authentication_util */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/authentication/authentication_util.js\");\nconst querystring = __webpack_require__(/*! querystring */ \"querystring\");\nconst GlobalConfig = __webpack_require__(/*! ../global_config */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/global_config.js\");\nconst open = __webpack_require__(/*! open */ \"(rsc)/./node_modules/open/index.js\");\nconst Util = __webpack_require__(/*! ../util */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/util.js\");\nconst AuthenticationTypes = __webpack_require__(/*! ./authentication_types */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/authentication/authentication_types.js\");\n/**\n * Creates an oauth authenticator.\n *\n * @param {Object} connectionConfig\n * @param {Object} httpClient\n *\n * @returns {Object}\n * @constructor\n */\nfunction AuthOauthAuthorizationCode(connectionConfig, httpClient) {\n    const DEFAULT_REDIRECT_HOST = 'http://127.0.0.1';\n    const browserActionTimeout = connectionConfig.getBrowserActionTimeout();\n    let oauth;\n    let token;\n    const clientId = connectionConfig.getOauthClientId();\n    const clientSecret = connectionConfig.getOauthClientSecret();\n    const authorizationUrl = getAuthorizationUrl(connectionConfig);\n    const tokenUrl = authUtil.getTokenUrl(connectionConfig);\n    const accessTokenKey = authUtil.buildOauthAccessTokenCacheKey(authorizationUrl.host, connectionConfig.username, AuthenticationTypes.OAUTH_AUTHORIZATION_CODE);\n    const refreshTokenKey = authUtil.buildOauthRefreshTokenCacheKey(tokenUrl.host, connectionConfig.username, AuthenticationTypes.OAUTH_AUTHORIZATION_CODE);\n    /**\n     * Update JSON body with token.\n     * @param {JSON} body\n     * @returns {null}\n     */\n    this.updateBody = function (body) {\n        if (token) {\n            body.data.TOKEN = token;\n        }\n        body.data.AUTHENTICATOR = AuthenticationTypes.OAUTH_AUTHENTICATOR;\n        body.data.CLIENT_ENVIRONMENT.OAUTH_TYPE = AuthenticationTypes.OAUTH_AUTHORIZATION_CODE;\n    };\n    this.loadOauth4webapi = async function () {\n        if (!oauth) {\n            oauth = await Util.dynamicImportESMInTypescriptWithCommonJS('oauth4webapi');\n        }\n    };\n    this.authenticate = async function () {\n        globalThis.crypto ??= (__webpack_require__(/*! node:crypto */ \"node:crypto\").webcrypto);\n        //verify that there is access token in the cache\n        const accessTokenFromCache = await readCache(accessTokenKey);\n        //verify that there is refresh token in the cache\n        const refreshTokenFromCache = await readCache(refreshTokenKey);\n        if (accessTokenFromCache && connectionConfig.getClientStoreTemporaryCredential()) {\n            token = accessTokenFromCache;\n        }\n        else if (refreshTokenFromCache && connectionConfig.getClientStoreTemporaryCredential()) {\n            token = await this.getAccessTokenUsingRefreshToken(refreshTokenFromCache);\n        }\n        else {\n            token = await this.executeFullAuthorizationCodeFlow();\n        }\n    };\n    this.reauthenticate = async function (body) {\n        await removeFromCache(accessTokenKey);\n        const refreshToken = await readCache(refreshTokenKey);\n        if (refreshToken) {\n            try {\n                await this.getAccessTokenUsingRefreshToken(refreshToken);\n                this.updateBody(body);\n            }\n            catch (error) {\n                await removeFromCache(refreshTokenKey);\n                Logger().warn(format('Error while getting access token using refresh token. Message: %s. The refresh token is removed form cache - authentication must be proceed from the beginning', error.message));\n                await this.authenticate();\n                this.updateBody(body);\n            }\n        }\n        else {\n            await this.authenticate();\n            this.updateBody(body);\n        }\n    };\n    this.executeFullAuthorizationCodeFlow = async function () {\n        await this.loadOauth4webapi(); // import module using the dynamic import\n        const codeChallengeMethod = connectionConfig.getOauthChallengeMethod() || 'S256'; // TODO: should be verified with \"discovery\" response\n        //An issuer is a obligatory parameter in validation processed by oauth4webapi library, even when it isn't used\n        const issuer = connectionConfig.issuer || 'UNKNOWN';\n        const codeVerifier = oauth.generateRandomCodeVerifier();\n        const codeChallenge = await oauth.calculatePKCECodeChallenge(codeVerifier);\n        const as = { issuer: issuer };\n        // eslint-disable-next-line camelcase\n        const client = { client_id: clientId };\n        const clientAuth = oauth.ClientSecretPost(clientSecret);\n        const redirectUri = await buildRedirectUri(connectionConfig);\n        const scope = await authUtil.prepareScope(connectionConfig);\n        const authorizationUrlWithParams = await prepareAuthorizationUrl(authorizationUrl, client, redirectUri, codeChallenge, codeChallengeMethod, as, scope);\n        const authorizationCodeResponse = await requestAuthorizationCode(authorizationUrlWithParams, browserActionTimeout);\n        const params = oauth.validateAuthResponse(as, client, authorizationUrlWithParams, authorizationCodeResponse.state);\n        params.set('code', authorizationCodeResponse.code);\n        Logger().trace('Requesting token');\n        const token = await requestToken(as, tokenUrl, client, clientAuth, params, redirectUri, codeVerifier);\n        return token;\n    };\n    this.getAccessTokenUsingRefreshToken = async function (refreshToken) {\n        globalThis.crypto ??= (__webpack_require__(/*! node:crypto */ \"node:crypto\").webcrypto);\n        await this.loadOauth4webapi(); // import module using the dynamic import\n        const issuer = connectionConfig.issuer || 'UNKNOWN';\n        const as = { issuer: issuer };\n        const clientId = connectionConfig.getOauthClientId();\n        const clientSecret = connectionConfig.getOauthClientSecret();\n        // eslint-disable-next-line camelcase\n        const client = { client_id: clientId };\n        const clientAuth = oauth.ClientSecretPost(clientSecret);\n        // Refresh Token Grant Request & Response\n        const tokenUrl = authUtil.getTokenUrl(connectionConfig);\n        Logger().trace(`Receiving new OAuth access token from: Host: ${tokenUrl.host} Path: ${tokenUrl.pathname}`);\n        as['token_endpoint'] = tokenUrl.href;\n        const response = await oauth.refreshTokenGrantRequest(as, client, clientAuth, refreshToken, {\n            [oauth.allowInsecureRequests]: connectionConfig.getOauthHttpAllowed(),\n            [oauth.customFetch]: async (url, options) => await convertToResponseType(httpClient, url, options),\n        });\n        const result = await oauth.processRefreshTokenResponse(as, client, response);\n        if (result.access_token) {\n            //cache access token\n            Logger().debug(`Received new OAuth access token from: Host: ${tokenUrl.host} Path: ${tokenUrl.pathname}`);\n            await writeToCache(accessTokenKey, result.access_token);\n            //cache refreshToken if exists\n            if (result.refresh_token) {\n                //cache refresh token\n                Logger().debug(`Received new OAuth refresh token from: Host: ${tokenUrl.host} Path: ${tokenUrl.pathname}`);\n                await writeToCache(refreshTokenKey, result.refresh_token);\n            }\n            else {\n                Logger().warn('There is no refresh_token value to write to cache. Clearing refresh token in cache');\n                await removeFromCache(refreshTokenKey);\n            }\n        }\n        else {\n            throw Error(`Response doesn't contain OAuth access token. Requested URI: Host: ${tokenUrl.host} Path: ${tokenUrl.pathname}`);\n        }\n        return result.access_token;\n    };\n    async function prepareAuthorizationUrl(authorizationUrl, client, redirectUri, codeChallenge, codeChallengeMethod, as, scope) {\n        authorizationUrl.searchParams.set('client_id', client.client_id);\n        authorizationUrl.searchParams.set('redirect_uri', redirectUri);\n        authorizationUrl.searchParams.set('response_type', 'code');\n        authorizationUrl.searchParams.set('scope', scope);\n        authorizationUrl.searchParams.set('code_challenge', codeChallenge);\n        authorizationUrl.searchParams.set('code_challenge_method', codeChallengeMethod);\n        /**\n         * We cannot be sure PKCE is supported then the state should be used.\n         */\n        if (as.code_challenge_methods_supported?.includes('S256') !== true) {\n            const state = oauth.generateRandomState();\n            authorizationUrl.searchParams.set('state', state);\n        }\n        return authorizationUrl;\n    }\n    async function verifyPortIsAvailable(server, redirectPort) {\n        return Util.isPortOpen(redirectPort).catch((rejected) => {\n            server.close();\n            throw new Error(`Cannot run server using provided redirect url. ${rejected}`);\n        });\n    }\n    async function requestAuthorizationCode(authorizationUrl, browserActionTimeout) {\n        if (!Util.number.isPositiveInteger(browserActionTimeout)) {\n            throw new Error(`Invalid value for browser action timeout: ${browserActionTimeout}`);\n        }\n        let server;\n        const receiveData = new Promise((resolve, reject) => {\n            server = authUtil.createServer(resolve, reject);\n        }).then((result) => {\n            return result;\n        });\n        const redirectUri = new URL(authorizationUrl.searchParams.get('redirect_uri'));\n        await verifyPortIsAvailable(server, redirectUri.port);\n        server.listen(redirectUri.port || 0, 0);\n        const authorizationCodeProvider = GlobalConfig.getCustomRedirectingClient();\n        const codeProvider = authorizationCodeProvider\n            ? authorizationCodeProvider\n            : browserAuthorizationCodeProvider;\n        await codeProvider(authorizationUrl);\n        const codeResponse = await withBrowserActionTimeout(browserActionTimeout, receiveData).catch((rejected) => {\n            server.close();\n            throw new Error(rejected);\n        });\n        const autorizationCodeResponseParameters = querystring.parse(codeResponse.substring(codeResponse.indexOf('?') + 1));\n        const code = autorizationCodeResponseParameters['code'];\n        const state = autorizationCodeResponseParameters['state'].replace(new RegExp('\\\\sHTTP/.*'), '');\n        Logger().debug(`Received new OAuth authorization code from: Host: ${authorizationUrl.host} Path: ${authorizationUrl.pathname}`);\n        return { code: code, state: state };\n    }\n    async function convertToResponseType(httpClient, url, options) {\n        function asResponseType(response) {\n            return new Response(response.json, {\n                staus: response.statusCode,\n                statusText: response.statusText,\n                headers: response.headers,\n            });\n        }\n        options.url = url;\n        return asResponseType(await httpClient.requestAsync(options));\n    }\n    async function requestToken(as, tokenUrl, client, clientAuth, params, redirectUri, codeVerifier) {\n        try {\n            Logger().trace(`Receiving new OAuth access token from: Host: ${tokenUrl.host} Path: ${tokenUrl.pathname}`);\n            as['token_endpoint'] = tokenUrl.href;\n            const response = await oauth.authorizationCodeGrantRequest(as, client, clientAuth, params, redirectUri, codeVerifier, {\n                [oauth.allowInsecureRequests]: connectionConfig.getOauthHttpAllowed(),\n                [oauth.customFetch]: async (url, options) => await convertToResponseType(httpClient, url, options),\n                additionalParameters: connectionConfig.oauthEnableSingleUseRefreshTokens\n                    ? {\n                        // eslint-disable-next-line camelcase\n                        enable_single_use_refresh_tokens: 'true',\n                    }\n                    : undefined,\n            });\n            const result = await oauth.processAuthorizationCodeResponse(as, client, response);\n            if (result.access_token) {\n                //cache access token\n                Logger().debug(`Received new OAuth access token from: Host: ${tokenUrl.host} Path: ${tokenUrl.pathname}`);\n                await writeToCache(accessTokenKey, result.access_token);\n                //cache refreshToken if exists\n                if (result.refresh_token) {\n                    //cache refresh token\n                    Logger().debug(`Received new OAuth refresh token from: Host: ${tokenUrl.host} Path: ${tokenUrl.pathname}`);\n                    await writeToCache(refreshTokenKey, result.refresh_token);\n                }\n            }\n            else {\n                throw Error(`Response doesn't contain OAuth access token. Requested URI: Host: ${tokenUrl.host} Path: ${tokenUrl.pathname}`);\n            }\n            return result.access_token;\n        }\n        catch (error) {\n            throw new Error(format('Error while getting access token. Message: %s', error.message));\n        }\n    }\n    function getAuthorizationUrl(options) {\n        const authCodeUrl = options.getOauthAuthorizationUrl();\n        Logger().debug(`Url used for receiving authorization code: ${authCodeUrl}`);\n        return new URL(authCodeUrl);\n    }\n    async function buildRedirectUri(options) {\n        const redirectUri = options.getOauthRedirectUri() || (await createDefaultRedirectUri());\n        Logger().debug(`Authorization code redirect URL: ${redirectUri}`);\n        return redirectUri;\n    }\n    async function createDefaultRedirectUri() {\n        const redirectPort = await getFreePort();\n        return `${DEFAULT_REDIRECT_HOST}:${redirectPort}`;\n    }\n    async function browserAuthorizationCodeProvider(authorizationUrl) {\n        Logger().debug(`Opening your browser to obtain the authorization code: ${authorizationUrl}`);\n        return open(authorizationUrl.href);\n    }\n}\nmodule.exports = AuthOauthAuthorizationCode;\n//# sourceMappingURL=auth_oauth_authorization_code.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/dist/lib/authentication/auth_oauth_authorization_code.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/dist/lib/authentication/auth_oauth_client_credentials.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/snowflake-sdk/dist/lib/authentication/auth_oauth_client_credentials.js ***!
  \*********************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst logger_1 = __importDefault(__webpack_require__(/*! ../logger */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/logger.js\"));\nconst authUtil = __importStar(__webpack_require__(/*! ../authentication/authentication_util */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/authentication/authentication_util.js\"));\nconst util_1 = __webpack_require__(/*! ../util */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/util.js\");\nconst authentication_types_1 = __importDefault(__webpack_require__(/*! ./authentication_types */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/authentication/authentication_types.js\"));\nclass AuthOauthClientCredentials {\n    connectionConfig;\n    httpClient;\n    _oauthImport;\n    token;\n    constructor(connectionConfig, httpClient) {\n        this.connectionConfig = connectionConfig;\n        this.httpClient = httpClient;\n    }\n    async getOauth4webapi() {\n        if (!this._oauthImport) {\n            this._oauthImport = await (0, util_1.dynamicImportESMInTypescriptWithCommonJS)('oauth4webapi');\n        }\n        return this._oauthImport;\n    }\n    updateBody(body) {\n        if (this.token) {\n            body.data.TOKEN = this.token;\n        }\n        body.data.AUTHENTICATOR = authentication_types_1.default.OAUTH_AUTHENTICATOR;\n        body.data.CLIENT_ENVIRONMENT.OAUTH_TYPE = authentication_types_1.default.OAUTH_CLIENT_CREDENTIALS;\n    }\n    async authenticate() {\n        const clientId = this.connectionConfig.getOauthClientId();\n        const clientSecret = this.connectionConfig.getOauthClientSecret();\n        const scope = await authUtil.prepareScope(this.connectionConfig);\n        const parameters = new URLSearchParams();\n        parameters.set('scope', scope);\n        this.token = await this.requestToken(clientId, clientSecret, parameters);\n    }\n    async requestToken(clientId, clientSecret, parameters) {\n        const oauth = await this.getOauth4webapi();\n        const tokenUrl = authUtil.getTokenUrl(this.connectionConfig);\n        const as = {\n            // An issuer is an obligatory parameter in validation processed by oauth4webapi library, even when it isn't used\n            issuer: 'UNKNOWN',\n            // eslint-disable-next-line camelcase\n            token_endpoint: tokenUrl.href,\n        };\n        const client = {\n            // eslint-disable-next-line camelcase\n            client_id: clientId,\n        };\n        try {\n            (0, logger_1.default)().debug(`Executing token request: ${tokenUrl.href}`);\n            const clientAuth = oauth.ClientSecretPost(clientSecret);\n            const response = await oauth.clientCredentialsGrantRequest(as, client, clientAuth, parameters, {\n                [oauth.allowInsecureRequests]: this.connectionConfig.getOauthHttpAllowed(),\n                [oauth.customFetch]: async (url, options) => {\n                    const response = await this.httpClient.requestAsync({ url, ...options });\n                    return new Response(response.json, {\n                        status: response.statusCode,\n                        statusText: response.statusText,\n                        headers: response.headers,\n                    });\n                },\n            });\n            const result = await oauth.processClientCredentialsResponse(as, client, response);\n            if (result.access_token) {\n                (0, logger_1.default)().debug(`Received new OAuth access token from: ${tokenUrl.href}`);\n            }\n            else {\n                throw Error(`Response doesn't contain OAuth access token. Requested URI: ${tokenUrl.href}`);\n            }\n            return result.access_token;\n        }\n        catch (error) {\n            throw new Error((0, util_1.format)('Error while getting access token. Message: %s', error.message));\n        }\n    }\n}\nexports[\"default\"] = AuthOauthClientCredentials;\n//# sourceMappingURL=auth_oauth_client_credentials.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9kaXN0L2xpYi9hdXRoZW50aWNhdGlvbi9hdXRoX29hdXRoX2NsaWVudF9jcmVkZW50aWFscy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxvQ0FBb0M7QUFDbkQ7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EsMENBQTBDLDRCQUE0QjtBQUN0RSxDQUFDO0FBQ0Q7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkRBQTJELGNBQWM7QUFDekU7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGlDQUFpQyxtQkFBTyxDQUFDLHdFQUFXO0FBQ3BELDhCQUE4QixtQkFBTyxDQUFDLGdJQUF1QztBQUM3RSxlQUFlLG1CQUFPLENBQUMsb0VBQVM7QUFDaEMsK0NBQStDLG1CQUFPLENBQUMsa0hBQXdCO0FBQy9FO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzRUFBc0UsY0FBYztBQUNwRjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBFQUEwRSxpQkFBaUI7QUFDM0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckIsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0EsdUZBQXVGLGNBQWM7QUFDckc7QUFDQTtBQUNBLDJGQUEyRixjQUFjO0FBQ3pHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBZTtBQUNmIiwic291cmNlcyI6WyIvVXNlcnMvd2FuZ2hhb3RhaS9EZXNrdG9wL2VsdmVubGFiL0hUVi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9kaXN0L2xpYi9hdXRoZW50aWNhdGlvbi9hdXRoX29hdXRoX2NsaWVudF9jcmVkZW50aWFscy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX3NldE1vZHVsZURlZmF1bHQpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XG59KTtcbnZhciBfX2ltcG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0U3RhcikgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgb3duS2V5cyA9IGZ1bmN0aW9uKG8pIHtcbiAgICAgICAgb3duS2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHx8IGZ1bmN0aW9uIChvKSB7XG4gICAgICAgICAgICB2YXIgYXIgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIGsgaW4gbykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvLCBrKSkgYXJbYXIubGVuZ3RoXSA9IGs7XG4gICAgICAgICAgICByZXR1cm4gYXI7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBvd25LZXlzKG8pO1xuICAgIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChtb2QpIHtcbiAgICAgICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgICAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgPSBvd25LZXlzKG1vZCksIGkgPSAwOyBpIDwgay5sZW5ndGg7IGkrKykgaWYgKGtbaV0gIT09IFwiZGVmYXVsdFwiKSBfX2NyZWF0ZUJpbmRpbmcocmVzdWx0LCBtb2QsIGtbaV0pO1xuICAgICAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG59KSgpO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgbG9nZ2VyXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4uL2xvZ2dlclwiKSk7XG5jb25zdCBhdXRoVXRpbCA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwiLi4vYXV0aGVudGljYXRpb24vYXV0aGVudGljYXRpb25fdXRpbFwiKSk7XG5jb25zdCB1dGlsXzEgPSByZXF1aXJlKFwiLi4vdXRpbFwiKTtcbmNvbnN0IGF1dGhlbnRpY2F0aW9uX3R5cGVzXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vYXV0aGVudGljYXRpb25fdHlwZXNcIikpO1xuY2xhc3MgQXV0aE9hdXRoQ2xpZW50Q3JlZGVudGlhbHMge1xuICAgIGNvbm5lY3Rpb25Db25maWc7XG4gICAgaHR0cENsaWVudDtcbiAgICBfb2F1dGhJbXBvcnQ7XG4gICAgdG9rZW47XG4gICAgY29uc3RydWN0b3IoY29ubmVjdGlvbkNvbmZpZywgaHR0cENsaWVudCkge1xuICAgICAgICB0aGlzLmNvbm5lY3Rpb25Db25maWcgPSBjb25uZWN0aW9uQ29uZmlnO1xuICAgICAgICB0aGlzLmh0dHBDbGllbnQgPSBodHRwQ2xpZW50O1xuICAgIH1cbiAgICBhc3luYyBnZXRPYXV0aDR3ZWJhcGkoKSB7XG4gICAgICAgIGlmICghdGhpcy5fb2F1dGhJbXBvcnQpIHtcbiAgICAgICAgICAgIHRoaXMuX29hdXRoSW1wb3J0ID0gYXdhaXQgKDAsIHV0aWxfMS5keW5hbWljSW1wb3J0RVNNSW5UeXBlc2NyaXB0V2l0aENvbW1vbkpTKSgnb2F1dGg0d2ViYXBpJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX29hdXRoSW1wb3J0O1xuICAgIH1cbiAgICB1cGRhdGVCb2R5KGJvZHkpIHtcbiAgICAgICAgaWYgKHRoaXMudG9rZW4pIHtcbiAgICAgICAgICAgIGJvZHkuZGF0YS5UT0tFTiA9IHRoaXMudG9rZW47XG4gICAgICAgIH1cbiAgICAgICAgYm9keS5kYXRhLkFVVEhFTlRJQ0FUT1IgPSBhdXRoZW50aWNhdGlvbl90eXBlc18xLmRlZmF1bHQuT0FVVEhfQVVUSEVOVElDQVRPUjtcbiAgICAgICAgYm9keS5kYXRhLkNMSUVOVF9FTlZJUk9OTUVOVC5PQVVUSF9UWVBFID0gYXV0aGVudGljYXRpb25fdHlwZXNfMS5kZWZhdWx0Lk9BVVRIX0NMSUVOVF9DUkVERU5USUFMUztcbiAgICB9XG4gICAgYXN5bmMgYXV0aGVudGljYXRlKCkge1xuICAgICAgICBjb25zdCBjbGllbnRJZCA9IHRoaXMuY29ubmVjdGlvbkNvbmZpZy5nZXRPYXV0aENsaWVudElkKCk7XG4gICAgICAgIGNvbnN0IGNsaWVudFNlY3JldCA9IHRoaXMuY29ubmVjdGlvbkNvbmZpZy5nZXRPYXV0aENsaWVudFNlY3JldCgpO1xuICAgICAgICBjb25zdCBzY29wZSA9IGF3YWl0IGF1dGhVdGlsLnByZXBhcmVTY29wZSh0aGlzLmNvbm5lY3Rpb25Db25maWcpO1xuICAgICAgICBjb25zdCBwYXJhbWV0ZXJzID0gbmV3IFVSTFNlYXJjaFBhcmFtcygpO1xuICAgICAgICBwYXJhbWV0ZXJzLnNldCgnc2NvcGUnLCBzY29wZSk7XG4gICAgICAgIHRoaXMudG9rZW4gPSBhd2FpdCB0aGlzLnJlcXVlc3RUb2tlbihjbGllbnRJZCwgY2xpZW50U2VjcmV0LCBwYXJhbWV0ZXJzKTtcbiAgICB9XG4gICAgYXN5bmMgcmVxdWVzdFRva2VuKGNsaWVudElkLCBjbGllbnRTZWNyZXQsIHBhcmFtZXRlcnMpIHtcbiAgICAgICAgY29uc3Qgb2F1dGggPSBhd2FpdCB0aGlzLmdldE9hdXRoNHdlYmFwaSgpO1xuICAgICAgICBjb25zdCB0b2tlblVybCA9IGF1dGhVdGlsLmdldFRva2VuVXJsKHRoaXMuY29ubmVjdGlvbkNvbmZpZyk7XG4gICAgICAgIGNvbnN0IGFzID0ge1xuICAgICAgICAgICAgLy8gQW4gaXNzdWVyIGlzIGFuIG9ibGlnYXRvcnkgcGFyYW1ldGVyIGluIHZhbGlkYXRpb24gcHJvY2Vzc2VkIGJ5IG9hdXRoNHdlYmFwaSBsaWJyYXJ5LCBldmVuIHdoZW4gaXQgaXNuJ3QgdXNlZFxuICAgICAgICAgICAgaXNzdWVyOiAnVU5LTk9XTicsXG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2FtZWxjYXNlXG4gICAgICAgICAgICB0b2tlbl9lbmRwb2ludDogdG9rZW5VcmwuaHJlZixcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgY2xpZW50ID0ge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNhbWVsY2FzZVxuICAgICAgICAgICAgY2xpZW50X2lkOiBjbGllbnRJZCxcbiAgICAgICAgfTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICgwLCBsb2dnZXJfMS5kZWZhdWx0KSgpLmRlYnVnKGBFeGVjdXRpbmcgdG9rZW4gcmVxdWVzdDogJHt0b2tlblVybC5ocmVmfWApO1xuICAgICAgICAgICAgY29uc3QgY2xpZW50QXV0aCA9IG9hdXRoLkNsaWVudFNlY3JldFBvc3QoY2xpZW50U2VjcmV0KTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgb2F1dGguY2xpZW50Q3JlZGVudGlhbHNHcmFudFJlcXVlc3QoYXMsIGNsaWVudCwgY2xpZW50QXV0aCwgcGFyYW1ldGVycywge1xuICAgICAgICAgICAgICAgIFtvYXV0aC5hbGxvd0luc2VjdXJlUmVxdWVzdHNdOiB0aGlzLmNvbm5lY3Rpb25Db25maWcuZ2V0T2F1dGhIdHRwQWxsb3dlZCgpLFxuICAgICAgICAgICAgICAgIFtvYXV0aC5jdXN0b21GZXRjaF06IGFzeW5jICh1cmwsIG9wdGlvbnMpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmh0dHBDbGllbnQucmVxdWVzdEFzeW5jKHsgdXJsLCAuLi5vcHRpb25zIH0pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJlc3BvbnNlKHJlc3BvbnNlLmpzb24sIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1czogcmVzcG9uc2Uuc3RhdHVzQ29kZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1c1RleHQ6IHJlc3BvbnNlLnN0YXR1c1RleHQsXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiByZXNwb25zZS5oZWFkZXJzLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBvYXV0aC5wcm9jZXNzQ2xpZW50Q3JlZGVudGlhbHNSZXNwb25zZShhcywgY2xpZW50LCByZXNwb25zZSk7XG4gICAgICAgICAgICBpZiAocmVzdWx0LmFjY2Vzc190b2tlbikge1xuICAgICAgICAgICAgICAgICgwLCBsb2dnZXJfMS5kZWZhdWx0KSgpLmRlYnVnKGBSZWNlaXZlZCBuZXcgT0F1dGggYWNjZXNzIHRva2VuIGZyb206ICR7dG9rZW5VcmwuaHJlZn1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IEVycm9yKGBSZXNwb25zZSBkb2Vzbid0IGNvbnRhaW4gT0F1dGggYWNjZXNzIHRva2VuLiBSZXF1ZXN0ZWQgVVJJOiAke3Rva2VuVXJsLmhyZWZ9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0LmFjY2Vzc190b2tlbjtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigoMCwgdXRpbF8xLmZvcm1hdCkoJ0Vycm9yIHdoaWxlIGdldHRpbmcgYWNjZXNzIHRva2VuLiBNZXNzYWdlOiAlcycsIGVycm9yLm1lc3NhZ2UpKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IEF1dGhPYXV0aENsaWVudENyZWRlbnRpYWxzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXV0aF9vYXV0aF9jbGllbnRfY3JlZGVudGlhbHMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/dist/lib/authentication/auth_oauth_client_credentials.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/dist/lib/authentication/auth_oauth_pat.js":
/*!******************************************************************************!*\
  !*** ./node_modules/snowflake-sdk/dist/lib/authentication/auth_oauth_pat.js ***!
  \******************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst Util = __webpack_require__(/*! ../util */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/util.js\");\n/**\n * Creates an oauth PAT  authenticator.\n *\n * @param {String} token\n * @param {String} password\n *\n * @returns {Object}\n * @constructor\n */\nfunction AuthOauthPAT(token, password) {\n    /**\n     * Update JSON body with token.\n     *\n     * @param {JSON} body\n     *\n     * @returns {null}\n     */\n    this.updateBody = function (body) {\n        if (Util.exists(token)) {\n            body['data']['TOKEN'] = token;\n        }\n        else if (Util.exists(password)) {\n            body['data']['TOKEN'] = password;\n        }\n    };\n    this.authenticate = async function () { };\n}\nmodule.exports = AuthOauthPAT;\n//# sourceMappingURL=auth_oauth_pat.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9kaXN0L2xpYi9hdXRoZW50aWNhdGlvbi9hdXRoX29hdXRoX3BhdC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLGFBQWEsbUJBQU8sQ0FBQyxvRUFBUztBQUM5QjtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsTUFBTTtBQUNyQjtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL3dhbmdoYW90YWkvRGVza3RvcC9lbHZlbmxhYi9IVFYvbm9kZV9tb2R1bGVzL3Nub3dmbGFrZS1zZGsvZGlzdC9saWIvYXV0aGVudGljYXRpb24vYXV0aF9vYXV0aF9wYXQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBVdGlsID0gcmVxdWlyZSgnLi4vdXRpbCcpO1xuLyoqXG4gKiBDcmVhdGVzIGFuIG9hdXRoIFBBVCAgYXV0aGVudGljYXRvci5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gdG9rZW5cbiAqIEBwYXJhbSB7U3RyaW5nfSBwYXNzd29yZFxuICpcbiAqIEByZXR1cm5zIHtPYmplY3R9XG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gQXV0aE9hdXRoUEFUKHRva2VuLCBwYXNzd29yZCkge1xuICAgIC8qKlxuICAgICAqIFVwZGF0ZSBKU09OIGJvZHkgd2l0aCB0b2tlbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7SlNPTn0gYm9keVxuICAgICAqXG4gICAgICogQHJldHVybnMge251bGx9XG4gICAgICovXG4gICAgdGhpcy51cGRhdGVCb2R5ID0gZnVuY3Rpb24gKGJvZHkpIHtcbiAgICAgICAgaWYgKFV0aWwuZXhpc3RzKHRva2VuKSkge1xuICAgICAgICAgICAgYm9keVsnZGF0YSddWydUT0tFTiddID0gdG9rZW47XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoVXRpbC5leGlzdHMocGFzc3dvcmQpKSB7XG4gICAgICAgICAgICBib2R5WydkYXRhJ11bJ1RPS0VOJ10gPSBwYXNzd29yZDtcbiAgICAgICAgfVxuICAgIH07XG4gICAgdGhpcy5hdXRoZW50aWNhdGUgPSBhc3luYyBmdW5jdGlvbiAoKSB7IH07XG59XG5tb2R1bGUuZXhwb3J0cyA9IEF1dGhPYXV0aFBBVDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWF1dGhfb2F1dGhfcGF0LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/dist/lib/authentication/auth_oauth_pat.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/dist/lib/authentication/auth_okta.js":
/*!*************************************************************************!*\
  !*** ./node_modules/snowflake-sdk/dist/lib/authentication/auth_okta.js ***!
  \*************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst util = __webpack_require__(/*! ../util */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/util.js\");\nconst rest = (__webpack_require__(/*! ../global_config */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/global_config.js\").rest);\nconst Logger = __webpack_require__(/*! ../logger */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/logger.js\");\n/**\n * Creates an okta authenticator.\n *\n * @param {Object} connectionConfig\n * @param {HttpClient} httpClient\n *\n * @returns {Object}\n * @constructor\n */\nfunction AuthOkta(connectionConfig, httpClient) {\n    const password = connectionConfig.password;\n    const region = connectionConfig.region;\n    const account = connectionConfig.account;\n    const clientAppId = connectionConfig.getClientType();\n    const clientAppVersion = connectionConfig.getClientVersion();\n    const host = util.constructHostname(region, account);\n    const port = rest.HTTPS_PORT;\n    const protocol = rest.HTTPS_PROTOCOL;\n    let user;\n    let ssoUrl;\n    let tokenUrl;\n    let samlResponse;\n    /**\n     * Update JSON body with saml response.\n     *\n     * @param {JSON} body\n     *\n     * @returns {null}\n     */\n    this.updateBody = function (body) {\n        body['data']['RAW_SAML_RESPONSE'] = samlResponse;\n    };\n    /**\n     * Obtain saml response from Okta.\n     *\n     * @param {String} authenticator\n     * @param {String} serviceName\n     * @param {String} account\n     * @param {String} username\n     *\n     * @returns {null}\n     */\n    this.authenticate = async function (authenticator, serviceName, account, username) {\n        const response = await getAuthURLs(authenticator, serviceName, account, username);\n        const responseData = response['data'];\n        const success = responseData['success'];\n        const errorCode = responseData['code'];\n        const errorMessage = responseData['message'];\n        user = username;\n        if (typeof success === 'undefined' ||\n            errorCode === 'undefined' ||\n            errorMessage === 'undefined') {\n            throw new Error('Unable to use provided Okta address as an authenticator. Is the authenticator URL correct?');\n        }\n        if (success !== true) {\n            throw new Error(`Unable to use provided Okta address as an authenticator. Error code: ${errorCode}, error message: ${errorMessage}`);\n        }\n        ssoUrl = responseData['data']['ssoUrl'];\n        tokenUrl = responseData['data']['tokenUrl'];\n        this.validateURLs(authenticator, ssoUrl, tokenUrl);\n        const responseHtml = await getSAMLResponse(await createAccessToken(tokenUrl, username, password), ssoUrl);\n        validateSAML(responseHtml);\n    };\n    this.reauthenticate = async function (body, retryOption) {\n        const maxRetryTimeout = connectionConfig.getRetryTimeout();\n        const maxRetryCount = connectionConfig.getRetrySfMaxLoginRetries();\n        const remainingTimeout = (maxRetryTimeout - retryOption.totalElapsedTime) * 1000;\n        const startTime = Date.now();\n        const authRetryOption = {\n            maxRetryCount,\n            numRetries: retryOption.numRetries,\n            startTime,\n            remainingTimeout,\n            maxRetryTimeout,\n        };\n        let responseHtml;\n        while (util.shouldRetryOktaAuth(authRetryOption)) {\n            try {\n                responseHtml = await getSAMLResponse(await createAccessToken(tokenUrl, user, password), ssoUrl);\n                break;\n            }\n            catch (err) {\n                Logger.getInstance().debug('getSAMLResponse: refresh token for re-authentication');\n                authRetryOption.numRetries++;\n            }\n        }\n        if (remainingTimeout !== 0 && startTime + remainingTimeout < Date.now()) {\n            Logger.getInstance().warn(`getSAMLResponse: Fail to get SAML response, timeout reached: ${remainingTimeout} miliseconds`);\n            throw new Error('Reached out to the Login Timeout');\n        }\n        if (maxRetryCount < authRetryOption.numRetries) {\n            Logger.getInstance().warn(`getSAMLResponse: Fail to get SAML response, max retry reached: ${maxRetryCount} time`);\n            throw new Error('Reached out to the max retry count');\n        }\n        retryOption.totalElapsedTime += (Date.now() - startTime) / 1000;\n        retryOption.numRetries = authRetryOption.numRetries;\n        validateSAML(responseHtml);\n        this.updateBody(body);\n    };\n    /**\n     *\n     * @param {String} authenticator\n     * @param {String} serviceName\n     * @param {String} account\n     * @param {String} username\n     *\n     * @returns {Object}\n     */\n    async function getAuthURLs(authenticator, serviceName, account, username) {\n        // Create URL to send POST request to\n        const url = protocol + '://' + host + '/session/authenticator-request';\n        let header;\n        if (serviceName) {\n            header = {\n                HTTP_HEADER_SERVICE_NAME: serviceName,\n            };\n        }\n        // JSON body to send with POST request\n        const body = {\n            data: {\n                ACCOUNT_NAME: account,\n                LOGIN_NAME: username,\n                PORT: port,\n                PROTOCOL: protocol,\n                AUTHENTICATOR: authenticator,\n                CLIENT_APP_ID: clientAppId,\n                CLIENT_APP_VERSION: clientAppVersion,\n            },\n        };\n        // POST request to get SSO URL and token URL\n        return await httpClient.post(url, body, {\n            headers: header,\n        });\n    }\n    /**\n     *\n     * @param {String} authenticator\n     * @param {String} ssoUrl\n     * @param {String} tokenUrl\n     *\n     * @returns {null}\n     */\n    this.validateURLs = function (authenticator, ssoUrl, tokenUrl) {\n        const compareUrlsByProtocolAndHost = (firstUrl, secondUrl) => firstUrl.protocol === secondUrl.protocol && firstUrl.host === secondUrl.host;\n        try {\n            const aUrl = new URL(authenticator);\n            const sUrl = new URL(ssoUrl);\n            const tUrl = new URL(tokenUrl);\n            if (!(compareUrlsByProtocolAndHost(aUrl, sUrl) && compareUrlsByProtocolAndHost(aUrl, tUrl))) {\n                throw new Error('The prefix of the SSO/token URL and the specified authenticator do not match.');\n            }\n        }\n        catch (err) {\n            // we did not get a valid URL to test\n            if (err instanceof TypeError) {\n                throw new Error('Authenticator, SSO, or token URL is invalid.');\n            }\n            else {\n                throw err;\n            }\n        }\n    };\n    /**\n     *\n     * @param {String} tokenUrl\n     * @param {String} username\n     * @param {String} password\n     *\n     * @returns {Object}\n     */\n    async function createAccessToken(tokenUrl, username, password) {\n        // JSON body to send with POST request\n        const body = {\n            username: username,\n            password: password,\n        };\n        // Query IDP token url to authenticate and retrieve access token\n        const response = await httpClient.post(tokenUrl, body);\n        const data = response['data'];\n        let oneTimeToken;\n        if (data['sessionToken']) {\n            oneTimeToken = data['sessionToken'];\n        }\n        else {\n            oneTimeToken = data['cookieToken'];\n        }\n        return oneTimeToken;\n    }\n    /**\n     *\n     * @param {String} oneTimeToken\n     * @param {String} ssoUrl\n     *\n     * @returns {Object}\n     */\n    async function getSAMLResponse(oneTimeToken, ssoUrl) {\n        // Query IDP URL to get SAML response\n        const response = await httpClient.get(ssoUrl, {\n            params: {\n                RelayState: '/some/deep/link',\n                onetimetoken: oneTimeToken,\n            },\n        });\n        return response['data'];\n    }\n    /**\n     *\n     * @param {String} responseHtml\n     *\n     * @returns {null}\n     */\n    function validateSAML(responseHtml) {\n        const postBackUrl = getPostBackUrlFromHtml(responseHtml);\n        const fullUrl = util.format('%s://%s:%s', protocol, host, port);\n        // Validate the post back url come back with the SAML response\n        // contains the same prefix as the Snowflake's server url, which is the\n        // intended destination url to Snowflake.\n        if (!connectionConfig.getDisableSamlURLCheck()) {\n            if (postBackUrl.substring(0, 20) !== fullUrl.substring(0, 20)) {\n                throw new Error(util.format('The specified authenticator and destination URL ' +\n                    'in the SAML assertion do not match: expected: %s postback: %s', fullUrl, postBackUrl));\n            }\n        }\n        samlResponse = responseHtml;\n    }\n    /**\n     * Extract the postback URL from the HTML response.\n     *\n     * @param {String} html\n     *\n     * @returns {String}\n     */\n    function getPostBackUrlFromHtml(html) {\n        const index = html.search('<form');\n        const startIndex = html.indexOf('action=\"', index);\n        const endIndex = html.indexOf('\"', startIndex + 8);\n        return unescapeHtml(html.substring(startIndex + 8, endIndex));\n    }\n    /**\n     * Unescape the HTML hex characters in the string.\n     *\n     * @param {String} html\n     *\n     * @returns {String}\n     */\n    function unescapeHtml(html) {\n        return html.replace(/&#x3a;/g, ':').replace(/&#x2f;/g, '/');\n    }\n}\nmodule.exports = AuthOkta;\n//# sourceMappingURL=auth_okta.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/dist/lib/authentication/auth_okta.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/dist/lib/authentication/auth_web.js":
/*!************************************************************************!*\
  !*** ./node_modules/snowflake-sdk/dist/lib/authentication/auth_web.js ***!
  \************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst util = __webpack_require__(/*! ../util */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/util.js\");\nconst querystring = __webpack_require__(/*! querystring */ \"querystring\");\nconst URLUtil = __webpack_require__(/*! ./../../lib/url_util */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/url_util.js\");\nconst Util = __webpack_require__(/*! ./../../lib/util */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/util.js\");\nconst SsoUrlProvider = __webpack_require__(/*! ../authentication/sso_url_provider */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/authentication/sso_url_provider.js\");\nconst crypto = __webpack_require__(/*! crypto */ \"crypto\");\nconst { rest } = __webpack_require__(/*! ../global_config */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/global_config.js\");\nconst { createServer } = __webpack_require__(/*! ./authentication_util */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/authentication/authentication_util.js\");\nconst { withBrowserActionTimeout } = __webpack_require__(/*! ./authentication_util */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/authentication/authentication_util.js\");\n/**\n * Creates an external browser authenticator.\n *\n * @param {Object} connectionConfig\n * @param {Object} httpClient\n * @param {module} webbrowser\n *\n * @returns {Object}\n * @constructor\n */\nfunction AuthWeb(connectionConfig, httpClient, webbrowser) {\n    const host = connectionConfig.host;\n    const browserActionTimeout = connectionConfig.getBrowserActionTimeout();\n    const ssoUrlProvider = new SsoUrlProvider(httpClient);\n    if (!Util.exists(host)) {\n        throw new Error(`Invalid value for host: ${host}`);\n    }\n    if (!Util.number.isPositiveInteger(browserActionTimeout)) {\n        throw new Error(`Invalid value for browser action timeout: ${browserActionTimeout}`);\n    }\n    const open = typeof webbrowser !== 'undefined' ? webbrowser : __webpack_require__(/*! open */ \"(rsc)/./node_modules/open/index.js\");\n    let proofKey;\n    let token;\n    /**\n     * Update JSON body with token and proof_key.\n     *\n     * @param {JSON} body\n     *\n     * @returns {null}\n     */\n    this.updateBody = function (body) {\n        body['data']['TOKEN'] = token;\n        body['data']['PROOF_KEY'] = proofKey;\n        body['data']['AUTHENTICATOR'] = 'EXTERNALBROWSER';\n    };\n    /**\n     * Obtain SAML token through SSO URL.\n     *\n     * @param {String} authenticator\n     * @param {String} serviceName\n     * @param {String} account\n     * @param {String} username\n     *\n     * @returns {Promise<null>}\n     */\n    this.authenticate = async function (authenticator, serviceName, account, username) {\n        let server;\n        let loginUrl;\n        const receiveData = new Promise((resolve) => {\n            // Server to receive SAML token\n            server = createServer(resolve);\n        }).then((result) => {\n            return result;\n        });\n        // Use a free random port and set to no backlog\n        server.listen(0, 0);\n        if (connectionConfig.getDisableConsoleLogin()) {\n            // Step 1: query Snowflake to obtain SSO url\n            const ssoData = await ssoUrlProvider.getSSOURL(authenticator, serviceName, account, server.address().port, username, host);\n            proofKey = ssoData['proofKey'];\n            loginUrl = ssoData['ssoUrl'];\n        }\n        else {\n            proofKey = this.generateProofKey();\n            loginUrl = this.getLoginUrl(username, proofKey, server.address().port);\n        }\n        // Step 2: validate URL\n        if (!URLUtil.isValidURL(loginUrl)) {\n            throw new Error(util.format('Invalid SSO URL found - %s ', loginUrl));\n        }\n        // Step 3: open browser\n        open(loginUrl);\n        // Step 4: get SAML token\n        const tokenGetHttpLine = await withBrowserActionTimeout(browserActionTimeout, receiveData).catch((rejected) => {\n            server.close();\n            throw new Error(util.format('Error while getting SAML token: %s', rejected));\n        });\n        processGet(tokenGetHttpLine);\n    };\n    this.generateProofKey = function () {\n        const randomness = crypto.randomBytes(32);\n        return Buffer.from(randomness, 'utf8').toString('base64');\n    };\n    this.getLoginUrl = function (username, proofKey, port) {\n        const url = new URL(rest.HTTPS_PROTOCOL + '://' + host + '/console/login');\n        url.searchParams.append('login_name', username);\n        url.searchParams.append('proof_key', proofKey);\n        url.searchParams.append('browser_mode_redirect_port', port);\n        return url.toString();\n    };\n    /**\n     * Parse the GET request and get token parameter value.\n     *\n     * @param {String} tokenHttpGetLine\n     *\n     * @returns {null}\n     */\n    function processGet(tokenHttpGetLine) {\n        // Split the GET request line\n        const data = tokenHttpGetLine.split(' ');\n        // Get value of the \"token\" query parameter\n        token = querystring.parse(data[1])['/?token'];\n    }\n}\nmodule.exports = AuthWeb;\n//# sourceMappingURL=auth_web.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9kaXN0L2xpYi9hdXRoZW50aWNhdGlvbi9hdXRoX3dlYi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLGFBQWEsbUJBQU8sQ0FBQyxvRUFBUztBQUM5QixvQkFBb0IsbUJBQU8sQ0FBQyxnQ0FBYTtBQUN6QyxnQkFBZ0IsbUJBQU8sQ0FBQyxxRkFBc0I7QUFDOUMsYUFBYSxtQkFBTyxDQUFDLDZFQUFrQjtBQUN2Qyx1QkFBdUIsbUJBQU8sQ0FBQywwSEFBb0M7QUFDbkUsZUFBZSxtQkFBTyxDQUFDLHNCQUFRO0FBQy9CLFFBQVEsT0FBTyxFQUFFLG1CQUFPLENBQUMsc0ZBQWtCO0FBQzNDLFFBQVEsZUFBZSxFQUFFLG1CQUFPLENBQUMsZ0hBQXVCO0FBQ3hELFFBQVEsMkJBQTJCLEVBQUUsbUJBQU8sQ0FBQyxnSEFBdUI7QUFDcEU7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkI7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtREFBbUQsS0FBSztBQUN4RDtBQUNBO0FBQ0EscUVBQXFFLHFCQUFxQjtBQUMxRjtBQUNBLGtFQUFrRSxtQkFBTyxDQUFDLGdEQUFNO0FBQ2hGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLE1BQU07QUFDckI7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCLGVBQWUsUUFBUTtBQUN2QixlQUFlLFFBQVE7QUFDdkIsZUFBZSxRQUFRO0FBQ3ZCO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvd2FuZ2hhb3RhaS9EZXNrdG9wL2VsdmVubGFiL0hUVi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9kaXN0L2xpYi9hdXRoZW50aWNhdGlvbi9hdXRoX3dlYi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmNvbnN0IHV0aWwgPSByZXF1aXJlKCcuLi91dGlsJyk7XG5jb25zdCBxdWVyeXN0cmluZyA9IHJlcXVpcmUoJ3F1ZXJ5c3RyaW5nJyk7XG5jb25zdCBVUkxVdGlsID0gcmVxdWlyZSgnLi8uLi8uLi9saWIvdXJsX3V0aWwnKTtcbmNvbnN0IFV0aWwgPSByZXF1aXJlKCcuLy4uLy4uL2xpYi91dGlsJyk7XG5jb25zdCBTc29VcmxQcm92aWRlciA9IHJlcXVpcmUoJy4uL2F1dGhlbnRpY2F0aW9uL3Nzb191cmxfcHJvdmlkZXInKTtcbmNvbnN0IGNyeXB0byA9IHJlcXVpcmUoJ2NyeXB0bycpO1xuY29uc3QgeyByZXN0IH0gPSByZXF1aXJlKCcuLi9nbG9iYWxfY29uZmlnJyk7XG5jb25zdCB7IGNyZWF0ZVNlcnZlciB9ID0gcmVxdWlyZSgnLi9hdXRoZW50aWNhdGlvbl91dGlsJyk7XG5jb25zdCB7IHdpdGhCcm93c2VyQWN0aW9uVGltZW91dCB9ID0gcmVxdWlyZSgnLi9hdXRoZW50aWNhdGlvbl91dGlsJyk7XG4vKipcbiAqIENyZWF0ZXMgYW4gZXh0ZXJuYWwgYnJvd3NlciBhdXRoZW50aWNhdG9yLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25uZWN0aW9uQ29uZmlnXG4gKiBAcGFyYW0ge09iamVjdH0gaHR0cENsaWVudFxuICogQHBhcmFtIHttb2R1bGV9IHdlYmJyb3dzZXJcbiAqXG4gKiBAcmV0dXJucyB7T2JqZWN0fVxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIEF1dGhXZWIoY29ubmVjdGlvbkNvbmZpZywgaHR0cENsaWVudCwgd2ViYnJvd3Nlcikge1xuICAgIGNvbnN0IGhvc3QgPSBjb25uZWN0aW9uQ29uZmlnLmhvc3Q7XG4gICAgY29uc3QgYnJvd3NlckFjdGlvblRpbWVvdXQgPSBjb25uZWN0aW9uQ29uZmlnLmdldEJyb3dzZXJBY3Rpb25UaW1lb3V0KCk7XG4gICAgY29uc3Qgc3NvVXJsUHJvdmlkZXIgPSBuZXcgU3NvVXJsUHJvdmlkZXIoaHR0cENsaWVudCk7XG4gICAgaWYgKCFVdGlsLmV4aXN0cyhob3N0KSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgdmFsdWUgZm9yIGhvc3Q6ICR7aG9zdH1gKTtcbiAgICB9XG4gICAgaWYgKCFVdGlsLm51bWJlci5pc1Bvc2l0aXZlSW50ZWdlcihicm93c2VyQWN0aW9uVGltZW91dCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIHZhbHVlIGZvciBicm93c2VyIGFjdGlvbiB0aW1lb3V0OiAke2Jyb3dzZXJBY3Rpb25UaW1lb3V0fWApO1xuICAgIH1cbiAgICBjb25zdCBvcGVuID0gdHlwZW9mIHdlYmJyb3dzZXIgIT09ICd1bmRlZmluZWQnID8gd2ViYnJvd3NlciA6IHJlcXVpcmUoJ29wZW4nKTtcbiAgICBsZXQgcHJvb2ZLZXk7XG4gICAgbGV0IHRva2VuO1xuICAgIC8qKlxuICAgICAqIFVwZGF0ZSBKU09OIGJvZHkgd2l0aCB0b2tlbiBhbmQgcHJvb2Zfa2V5LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtKU09OfSBib2R5XG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7bnVsbH1cbiAgICAgKi9cbiAgICB0aGlzLnVwZGF0ZUJvZHkgPSBmdW5jdGlvbiAoYm9keSkge1xuICAgICAgICBib2R5WydkYXRhJ11bJ1RPS0VOJ10gPSB0b2tlbjtcbiAgICAgICAgYm9keVsnZGF0YSddWydQUk9PRl9LRVknXSA9IHByb29mS2V5O1xuICAgICAgICBib2R5WydkYXRhJ11bJ0FVVEhFTlRJQ0FUT1InXSA9ICdFWFRFUk5BTEJST1dTRVInO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogT2J0YWluIFNBTUwgdG9rZW4gdGhyb3VnaCBTU08gVVJMLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGF1dGhlbnRpY2F0b3JcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gc2VydmljZU5hbWVcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gYWNjb3VudFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSB1c2VybmFtZVxuICAgICAqXG4gICAgICogQHJldHVybnMge1Byb21pc2U8bnVsbD59XG4gICAgICovXG4gICAgdGhpcy5hdXRoZW50aWNhdGUgPSBhc3luYyBmdW5jdGlvbiAoYXV0aGVudGljYXRvciwgc2VydmljZU5hbWUsIGFjY291bnQsIHVzZXJuYW1lKSB7XG4gICAgICAgIGxldCBzZXJ2ZXI7XG4gICAgICAgIGxldCBsb2dpblVybDtcbiAgICAgICAgY29uc3QgcmVjZWl2ZURhdGEgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICAgICAgLy8gU2VydmVyIHRvIHJlY2VpdmUgU0FNTCB0b2tlblxuICAgICAgICAgICAgc2VydmVyID0gY3JlYXRlU2VydmVyKHJlc29sdmUpO1xuICAgICAgICB9KS50aGVuKChyZXN1bHQpID0+IHtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBVc2UgYSBmcmVlIHJhbmRvbSBwb3J0IGFuZCBzZXQgdG8gbm8gYmFja2xvZ1xuICAgICAgICBzZXJ2ZXIubGlzdGVuKDAsIDApO1xuICAgICAgICBpZiAoY29ubmVjdGlvbkNvbmZpZy5nZXREaXNhYmxlQ29uc29sZUxvZ2luKCkpIHtcbiAgICAgICAgICAgIC8vIFN0ZXAgMTogcXVlcnkgU25vd2ZsYWtlIHRvIG9idGFpbiBTU08gdXJsXG4gICAgICAgICAgICBjb25zdCBzc29EYXRhID0gYXdhaXQgc3NvVXJsUHJvdmlkZXIuZ2V0U1NPVVJMKGF1dGhlbnRpY2F0b3IsIHNlcnZpY2VOYW1lLCBhY2NvdW50LCBzZXJ2ZXIuYWRkcmVzcygpLnBvcnQsIHVzZXJuYW1lLCBob3N0KTtcbiAgICAgICAgICAgIHByb29mS2V5ID0gc3NvRGF0YVsncHJvb2ZLZXknXTtcbiAgICAgICAgICAgIGxvZ2luVXJsID0gc3NvRGF0YVsnc3NvVXJsJ107XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBwcm9vZktleSA9IHRoaXMuZ2VuZXJhdGVQcm9vZktleSgpO1xuICAgICAgICAgICAgbG9naW5VcmwgPSB0aGlzLmdldExvZ2luVXJsKHVzZXJuYW1lLCBwcm9vZktleSwgc2VydmVyLmFkZHJlc3MoKS5wb3J0KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBTdGVwIDI6IHZhbGlkYXRlIFVSTFxuICAgICAgICBpZiAoIVVSTFV0aWwuaXNWYWxpZFVSTChsb2dpblVybCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcih1dGlsLmZvcm1hdCgnSW52YWxpZCBTU08gVVJMIGZvdW5kIC0gJXMgJywgbG9naW5VcmwpKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBTdGVwIDM6IG9wZW4gYnJvd3NlclxuICAgICAgICBvcGVuKGxvZ2luVXJsKTtcbiAgICAgICAgLy8gU3RlcCA0OiBnZXQgU0FNTCB0b2tlblxuICAgICAgICBjb25zdCB0b2tlbkdldEh0dHBMaW5lID0gYXdhaXQgd2l0aEJyb3dzZXJBY3Rpb25UaW1lb3V0KGJyb3dzZXJBY3Rpb25UaW1lb3V0LCByZWNlaXZlRGF0YSkuY2F0Y2goKHJlamVjdGVkKSA9PiB7XG4gICAgICAgICAgICBzZXJ2ZXIuY2xvc2UoKTtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcih1dGlsLmZvcm1hdCgnRXJyb3Igd2hpbGUgZ2V0dGluZyBTQU1MIHRva2VuOiAlcycsIHJlamVjdGVkKSk7XG4gICAgICAgIH0pO1xuICAgICAgICBwcm9jZXNzR2V0KHRva2VuR2V0SHR0cExpbmUpO1xuICAgIH07XG4gICAgdGhpcy5nZW5lcmF0ZVByb29mS2V5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBjb25zdCByYW5kb21uZXNzID0gY3J5cHRvLnJhbmRvbUJ5dGVzKDMyKTtcbiAgICAgICAgcmV0dXJuIEJ1ZmZlci5mcm9tKHJhbmRvbW5lc3MsICd1dGY4JykudG9TdHJpbmcoJ2Jhc2U2NCcpO1xuICAgIH07XG4gICAgdGhpcy5nZXRMb2dpblVybCA9IGZ1bmN0aW9uICh1c2VybmFtZSwgcHJvb2ZLZXksIHBvcnQpIHtcbiAgICAgICAgY29uc3QgdXJsID0gbmV3IFVSTChyZXN0LkhUVFBTX1BST1RPQ09MICsgJzovLycgKyBob3N0ICsgJy9jb25zb2xlL2xvZ2luJyk7XG4gICAgICAgIHVybC5zZWFyY2hQYXJhbXMuYXBwZW5kKCdsb2dpbl9uYW1lJywgdXNlcm5hbWUpO1xuICAgICAgICB1cmwuc2VhcmNoUGFyYW1zLmFwcGVuZCgncHJvb2Zfa2V5JywgcHJvb2ZLZXkpO1xuICAgICAgICB1cmwuc2VhcmNoUGFyYW1zLmFwcGVuZCgnYnJvd3Nlcl9tb2RlX3JlZGlyZWN0X3BvcnQnLCBwb3J0KTtcbiAgICAgICAgcmV0dXJuIHVybC50b1N0cmluZygpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUGFyc2UgdGhlIEdFVCByZXF1ZXN0IGFuZCBnZXQgdG9rZW4gcGFyYW1ldGVyIHZhbHVlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHRva2VuSHR0cEdldExpbmVcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtudWxsfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHByb2Nlc3NHZXQodG9rZW5IdHRwR2V0TGluZSkge1xuICAgICAgICAvLyBTcGxpdCB0aGUgR0VUIHJlcXVlc3QgbGluZVxuICAgICAgICBjb25zdCBkYXRhID0gdG9rZW5IdHRwR2V0TGluZS5zcGxpdCgnICcpO1xuICAgICAgICAvLyBHZXQgdmFsdWUgb2YgdGhlIFwidG9rZW5cIiBxdWVyeSBwYXJhbWV0ZXJcbiAgICAgICAgdG9rZW4gPSBxdWVyeXN0cmluZy5wYXJzZShkYXRhWzFdKVsnLz90b2tlbiddO1xuICAgIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gQXV0aFdlYjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWF1dGhfd2ViLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/dist/lib/authentication/auth_web.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/dist/lib/authentication/auth_workload_identity/attestation_aws.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/snowflake-sdk/dist/lib/authentication/auth_workload_identity/attestation_aws.js ***!
  \******************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getAwsCredentials = getAwsCredentials;\nexports.getAwsRegion = getAwsRegion;\nexports.getStsHostname = getStsHostname;\nexports.getAwsAttestationToken = getAwsAttestationToken;\nconst credential_provider_node_1 = __webpack_require__(/*! @aws-sdk/credential-provider-node */ \"(rsc)/./node_modules/@aws-sdk/credential-provider-node/dist-es/index.js\");\nconst ec2_metadata_service_1 = __webpack_require__(/*! @aws-sdk/ec2-metadata-service */ \"(rsc)/./node_modules/@aws-sdk/ec2-metadata-service/dist-es/index.js\");\nconst protocol_http_1 = __webpack_require__(/*! @smithy/protocol-http */ \"(rsc)/./node_modules/@smithy/protocol-http/dist-es/index.js\");\nconst signature_v4_1 = __webpack_require__(/*! @smithy/signature-v4 */ \"(rsc)/./node_modules/@smithy/signature-v4/dist-es/index.js\");\nconst sha256_js_1 = __webpack_require__(/*! @aws-crypto/sha256-js */ \"(rsc)/./node_modules/@aws-crypto/sha256-js/build/module/index.js\");\nconst logger_1 = __importDefault(__webpack_require__(/*! ../../logger */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/logger.js\"));\nasync function getAwsCredentials() {\n    (0, logger_1.default)().debug('Getting AWS credentials from default provider');\n    return await (0, credential_provider_node_1.defaultProvider)()();\n}\nasync function getAwsRegion() {\n    if (process.env.AWS_REGION) {\n        (0, logger_1.default)().debug('Getting AWS region from AWS_REGION');\n        return process.env.AWS_REGION; // Lambda\n    }\n    else {\n        (0, logger_1.default)().debug('Getting AWS region from EC2 metadata service');\n        return new ec2_metadata_service_1.MetadataService().request('/latest/meta-data/placement/region', {}); // EC2\n    }\n}\nfunction getStsHostname(region) {\n    const domain = region.startsWith('cn-') ? 'amazonaws.com.cn' : 'amazonaws.com';\n    return `sts.${region}.${domain}`;\n}\nasync function getAwsAttestationToken() {\n    const credentials = await getAwsCredentials();\n    const region = await getAwsRegion();\n    const stsHostname = getStsHostname(region);\n    const request = new protocol_http_1.HttpRequest({\n        method: 'POST',\n        protocol: 'https',\n        hostname: stsHostname,\n        path: '/',\n        headers: {\n            host: stsHostname,\n            'x-snowflake-audience': 'snowflakecomputing.com',\n        },\n        query: {\n            Action: 'GetCallerIdentity',\n            Version: '2011-06-15',\n        },\n    });\n    const signedRequest = await new signature_v4_1.SignatureV4({\n        credentials,\n        applyChecksum: false,\n        region,\n        service: 'sts',\n        sha256: sha256_js_1.Sha256,\n    }).sign(request);\n    const token = {\n        url: `https://${stsHostname}/?Action=GetCallerIdentity&Version=2011-06-15`,\n        method: 'POST',\n        headers: signedRequest.headers,\n    };\n    return btoa(JSON.stringify(token));\n}\n//# sourceMappingURL=attestation_aws.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9kaXN0L2xpYi9hdXRoZW50aWNhdGlvbi9hdXRoX3dvcmtsb2FkX2lkZW50aXR5L2F0dGVzdGF0aW9uX2F3cy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHlCQUF5QjtBQUN6QixvQkFBb0I7QUFDcEIsc0JBQXNCO0FBQ3RCLDhCQUE4QjtBQUM5QixtQ0FBbUMsbUJBQU8sQ0FBQyxrSEFBbUM7QUFDOUUsK0JBQStCLG1CQUFPLENBQUMsMEdBQStCO0FBQ3RFLHdCQUF3QixtQkFBTyxDQUFDLDBGQUF1QjtBQUN2RCx1QkFBdUIsbUJBQU8sQ0FBQyx3RkFBc0I7QUFDckQsb0JBQW9CLG1CQUFPLENBQUMsK0ZBQXVCO0FBQ25ELGlDQUFpQyxtQkFBTyxDQUFDLDJFQUFjO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBLDRHQUE0RyxHQUFHO0FBQy9HO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLE9BQU8sR0FBRyxPQUFPO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0Esd0JBQXdCLFlBQVk7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvd2FuZ2hhb3RhaS9EZXNrdG9wL2VsdmVubGFiL0hUVi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9kaXN0L2xpYi9hdXRoZW50aWNhdGlvbi9hdXRoX3dvcmtsb2FkX2lkZW50aXR5L2F0dGVzdGF0aW9uX2F3cy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0QXdzQ3JlZGVudGlhbHMgPSBnZXRBd3NDcmVkZW50aWFscztcbmV4cG9ydHMuZ2V0QXdzUmVnaW9uID0gZ2V0QXdzUmVnaW9uO1xuZXhwb3J0cy5nZXRTdHNIb3N0bmFtZSA9IGdldFN0c0hvc3RuYW1lO1xuZXhwb3J0cy5nZXRBd3NBdHRlc3RhdGlvblRva2VuID0gZ2V0QXdzQXR0ZXN0YXRpb25Ub2tlbjtcbmNvbnN0IGNyZWRlbnRpYWxfcHJvdmlkZXJfbm9kZV8xID0gcmVxdWlyZShcIkBhd3Mtc2RrL2NyZWRlbnRpYWwtcHJvdmlkZXItbm9kZVwiKTtcbmNvbnN0IGVjMl9tZXRhZGF0YV9zZXJ2aWNlXzEgPSByZXF1aXJlKFwiQGF3cy1zZGsvZWMyLW1ldGFkYXRhLXNlcnZpY2VcIik7XG5jb25zdCBwcm90b2NvbF9odHRwXzEgPSByZXF1aXJlKFwiQHNtaXRoeS9wcm90b2NvbC1odHRwXCIpO1xuY29uc3Qgc2lnbmF0dXJlX3Y0XzEgPSByZXF1aXJlKFwiQHNtaXRoeS9zaWduYXR1cmUtdjRcIik7XG5jb25zdCBzaGEyNTZfanNfMSA9IHJlcXVpcmUoXCJAYXdzLWNyeXB0by9zaGEyNTYtanNcIik7XG5jb25zdCBsb2dnZXJfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi4vLi4vbG9nZ2VyXCIpKTtcbmFzeW5jIGZ1bmN0aW9uIGdldEF3c0NyZWRlbnRpYWxzKCkge1xuICAgICgwLCBsb2dnZXJfMS5kZWZhdWx0KSgpLmRlYnVnKCdHZXR0aW5nIEFXUyBjcmVkZW50aWFscyBmcm9tIGRlZmF1bHQgcHJvdmlkZXInKTtcbiAgICByZXR1cm4gYXdhaXQgKDAsIGNyZWRlbnRpYWxfcHJvdmlkZXJfbm9kZV8xLmRlZmF1bHRQcm92aWRlcikoKSgpO1xufVxuYXN5bmMgZnVuY3Rpb24gZ2V0QXdzUmVnaW9uKCkge1xuICAgIGlmIChwcm9jZXNzLmVudi5BV1NfUkVHSU9OKSB7XG4gICAgICAgICgwLCBsb2dnZXJfMS5kZWZhdWx0KSgpLmRlYnVnKCdHZXR0aW5nIEFXUyByZWdpb24gZnJvbSBBV1NfUkVHSU9OJyk7XG4gICAgICAgIHJldHVybiBwcm9jZXNzLmVudi5BV1NfUkVHSU9OOyAvLyBMYW1iZGFcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgICgwLCBsb2dnZXJfMS5kZWZhdWx0KSgpLmRlYnVnKCdHZXR0aW5nIEFXUyByZWdpb24gZnJvbSBFQzIgbWV0YWRhdGEgc2VydmljZScpO1xuICAgICAgICByZXR1cm4gbmV3IGVjMl9tZXRhZGF0YV9zZXJ2aWNlXzEuTWV0YWRhdGFTZXJ2aWNlKCkucmVxdWVzdCgnL2xhdGVzdC9tZXRhLWRhdGEvcGxhY2VtZW50L3JlZ2lvbicsIHt9KTsgLy8gRUMyXG4gICAgfVxufVxuZnVuY3Rpb24gZ2V0U3RzSG9zdG5hbWUocmVnaW9uKSB7XG4gICAgY29uc3QgZG9tYWluID0gcmVnaW9uLnN0YXJ0c1dpdGgoJ2NuLScpID8gJ2FtYXpvbmF3cy5jb20uY24nIDogJ2FtYXpvbmF3cy5jb20nO1xuICAgIHJldHVybiBgc3RzLiR7cmVnaW9ufS4ke2RvbWFpbn1gO1xufVxuYXN5bmMgZnVuY3Rpb24gZ2V0QXdzQXR0ZXN0YXRpb25Ub2tlbigpIHtcbiAgICBjb25zdCBjcmVkZW50aWFscyA9IGF3YWl0IGdldEF3c0NyZWRlbnRpYWxzKCk7XG4gICAgY29uc3QgcmVnaW9uID0gYXdhaXQgZ2V0QXdzUmVnaW9uKCk7XG4gICAgY29uc3Qgc3RzSG9zdG5hbWUgPSBnZXRTdHNIb3N0bmFtZShyZWdpb24pO1xuICAgIGNvbnN0IHJlcXVlc3QgPSBuZXcgcHJvdG9jb2xfaHR0cF8xLkh0dHBSZXF1ZXN0KHtcbiAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgIHByb3RvY29sOiAnaHR0cHMnLFxuICAgICAgICBob3N0bmFtZTogc3RzSG9zdG5hbWUsXG4gICAgICAgIHBhdGg6ICcvJyxcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgaG9zdDogc3RzSG9zdG5hbWUsXG4gICAgICAgICAgICAneC1zbm93Zmxha2UtYXVkaWVuY2UnOiAnc25vd2ZsYWtlY29tcHV0aW5nLmNvbScsXG4gICAgICAgIH0sXG4gICAgICAgIHF1ZXJ5OiB7XG4gICAgICAgICAgICBBY3Rpb246ICdHZXRDYWxsZXJJZGVudGl0eScsXG4gICAgICAgICAgICBWZXJzaW9uOiAnMjAxMS0wNi0xNScsXG4gICAgICAgIH0sXG4gICAgfSk7XG4gICAgY29uc3Qgc2lnbmVkUmVxdWVzdCA9IGF3YWl0IG5ldyBzaWduYXR1cmVfdjRfMS5TaWduYXR1cmVWNCh7XG4gICAgICAgIGNyZWRlbnRpYWxzLFxuICAgICAgICBhcHBseUNoZWNrc3VtOiBmYWxzZSxcbiAgICAgICAgcmVnaW9uLFxuICAgICAgICBzZXJ2aWNlOiAnc3RzJyxcbiAgICAgICAgc2hhMjU2OiBzaGEyNTZfanNfMS5TaGEyNTYsXG4gICAgfSkuc2lnbihyZXF1ZXN0KTtcbiAgICBjb25zdCB0b2tlbiA9IHtcbiAgICAgICAgdXJsOiBgaHR0cHM6Ly8ke3N0c0hvc3RuYW1lfS8/QWN0aW9uPUdldENhbGxlcklkZW50aXR5JlZlcnNpb249MjAxMS0wNi0xNWAsXG4gICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICBoZWFkZXJzOiBzaWduZWRSZXF1ZXN0LmhlYWRlcnMsXG4gICAgfTtcbiAgICByZXR1cm4gYnRvYShKU09OLnN0cmluZ2lmeSh0b2tlbikpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXR0ZXN0YXRpb25fYXdzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/dist/lib/authentication/auth_workload_identity/attestation_aws.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/dist/lib/authentication/auth_workload_identity/attestation_azure.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/snowflake-sdk/dist/lib/authentication/auth_workload_identity/attestation_azure.js ***!
  \********************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DEFAULT_AZURE_ENTRA_ID_RESOURCE = void 0;\nexports.getAzureAttestationToken = getAzureAttestationToken;\nconst identity_1 = __webpack_require__(/*! @azure/identity */ \"(rsc)/./node_modules/@azure/identity/dist/commonjs/index.js\");\nconst logger_1 = __importDefault(__webpack_require__(/*! ../../logger */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/logger.js\"));\nexports.DEFAULT_AZURE_ENTRA_ID_RESOURCE = 'api://fd3f753b-eed3-462c-b6a7-a4b5bb650aad';\nasync function getAzureAttestationToken(entraIdResource = exports.DEFAULT_AZURE_ENTRA_ID_RESOURCE) {\n    const credential = new identity_1.DefaultAzureCredential();\n    (0, logger_1.default)().debug('Getting Azure auth token');\n    const token = await credential.getToken(entraIdResource);\n    return token.token;\n}\n//# sourceMappingURL=attestation_azure.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9kaXN0L2xpYi9hdXRoZW50aWNhdGlvbi9hdXRoX3dvcmtsb2FkX2lkZW50aXR5L2F0dGVzdGF0aW9uX2F6dXJlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsdUNBQXVDO0FBQ3ZDLGdDQUFnQztBQUNoQyxtQkFBbUIsbUJBQU8sQ0FBQyxvRkFBaUI7QUFDNUMsaUNBQWlDLG1CQUFPLENBQUMsMkVBQWM7QUFDdkQsdUNBQXVDO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvd2FuZ2hhb3RhaS9EZXNrdG9wL2VsdmVubGFiL0hUVi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9kaXN0L2xpYi9hdXRoZW50aWNhdGlvbi9hdXRoX3dvcmtsb2FkX2lkZW50aXR5L2F0dGVzdGF0aW9uX2F6dXJlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5ERUZBVUxUX0FaVVJFX0VOVFJBX0lEX1JFU09VUkNFID0gdm9pZCAwO1xuZXhwb3J0cy5nZXRBenVyZUF0dGVzdGF0aW9uVG9rZW4gPSBnZXRBenVyZUF0dGVzdGF0aW9uVG9rZW47XG5jb25zdCBpZGVudGl0eV8xID0gcmVxdWlyZShcIkBhenVyZS9pZGVudGl0eVwiKTtcbmNvbnN0IGxvZ2dlcl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuLi8uLi9sb2dnZXJcIikpO1xuZXhwb3J0cy5ERUZBVUxUX0FaVVJFX0VOVFJBX0lEX1JFU09VUkNFID0gJ2FwaTovL2ZkM2Y3NTNiLWVlZDMtNDYyYy1iNmE3LWE0YjViYjY1MGFhZCc7XG5hc3luYyBmdW5jdGlvbiBnZXRBenVyZUF0dGVzdGF0aW9uVG9rZW4oZW50cmFJZFJlc291cmNlID0gZXhwb3J0cy5ERUZBVUxUX0FaVVJFX0VOVFJBX0lEX1JFU09VUkNFKSB7XG4gICAgY29uc3QgY3JlZGVudGlhbCA9IG5ldyBpZGVudGl0eV8xLkRlZmF1bHRBenVyZUNyZWRlbnRpYWwoKTtcbiAgICAoMCwgbG9nZ2VyXzEuZGVmYXVsdCkoKS5kZWJ1ZygnR2V0dGluZyBBenVyZSBhdXRoIHRva2VuJyk7XG4gICAgY29uc3QgdG9rZW4gPSBhd2FpdCBjcmVkZW50aWFsLmdldFRva2VuKGVudHJhSWRSZXNvdXJjZSk7XG4gICAgcmV0dXJuIHRva2VuLnRva2VuO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXR0ZXN0YXRpb25fYXp1cmUuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/dist/lib/authentication/auth_workload_identity/attestation_azure.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/dist/lib/authentication/auth_workload_identity/attestation_gcp.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/snowflake-sdk/dist/lib/authentication/auth_workload_identity/attestation_gcp.js ***!
  \******************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SNOWFLAKE_AUDIENCE = void 0;\nexports.getGcpAttestationToken = getGcpAttestationToken;\nconst google_auth_library_1 = __webpack_require__(/*! google-auth-library */ \"(rsc)/./node_modules/google-auth-library/build/src/index.js\");\nconst logger_1 = __importDefault(__webpack_require__(/*! ../../logger */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/logger.js\"));\nexports.SNOWFLAKE_AUDIENCE = 'snowflakecomputing.com';\nasync function getGcpAttestationToken() {\n    const auth = new google_auth_library_1.GoogleAuth();\n    (0, logger_1.default)().debug('Getting GCP auth token');\n    const client = await auth.getIdTokenClient(exports.SNOWFLAKE_AUDIENCE);\n    const idToken = await client.idTokenProvider.fetchIdToken(exports.SNOWFLAKE_AUDIENCE);\n    return idToken;\n}\n//# sourceMappingURL=attestation_gcp.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9kaXN0L2xpYi9hdXRoZW50aWNhdGlvbi9hdXRoX3dvcmtsb2FkX2lkZW50aXR5L2F0dGVzdGF0aW9uX2djcC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDBCQUEwQjtBQUMxQiw4QkFBOEI7QUFDOUIsOEJBQThCLG1CQUFPLENBQUMsd0ZBQXFCO0FBQzNELGlDQUFpQyxtQkFBTyxDQUFDLDJFQUFjO0FBQ3ZELDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvd2FuZ2hhb3RhaS9EZXNrdG9wL2VsdmVubGFiL0hUVi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9kaXN0L2xpYi9hdXRoZW50aWNhdGlvbi9hdXRoX3dvcmtsb2FkX2lkZW50aXR5L2F0dGVzdGF0aW9uX2djcC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuU05PV0ZMQUtFX0FVRElFTkNFID0gdm9pZCAwO1xuZXhwb3J0cy5nZXRHY3BBdHRlc3RhdGlvblRva2VuID0gZ2V0R2NwQXR0ZXN0YXRpb25Ub2tlbjtcbmNvbnN0IGdvb2dsZV9hdXRoX2xpYnJhcnlfMSA9IHJlcXVpcmUoXCJnb29nbGUtYXV0aC1saWJyYXJ5XCIpO1xuY29uc3QgbG9nZ2VyXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4uLy4uL2xvZ2dlclwiKSk7XG5leHBvcnRzLlNOT1dGTEFLRV9BVURJRU5DRSA9ICdzbm93Zmxha2Vjb21wdXRpbmcuY29tJztcbmFzeW5jIGZ1bmN0aW9uIGdldEdjcEF0dGVzdGF0aW9uVG9rZW4oKSB7XG4gICAgY29uc3QgYXV0aCA9IG5ldyBnb29nbGVfYXV0aF9saWJyYXJ5XzEuR29vZ2xlQXV0aCgpO1xuICAgICgwLCBsb2dnZXJfMS5kZWZhdWx0KSgpLmRlYnVnKCdHZXR0aW5nIEdDUCBhdXRoIHRva2VuJyk7XG4gICAgY29uc3QgY2xpZW50ID0gYXdhaXQgYXV0aC5nZXRJZFRva2VuQ2xpZW50KGV4cG9ydHMuU05PV0ZMQUtFX0FVRElFTkNFKTtcbiAgICBjb25zdCBpZFRva2VuID0gYXdhaXQgY2xpZW50LmlkVG9rZW5Qcm92aWRlci5mZXRjaElkVG9rZW4oZXhwb3J0cy5TTk9XRkxBS0VfQVVESUVOQ0UpO1xuICAgIHJldHVybiBpZFRva2VuO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXR0ZXN0YXRpb25fZ2NwLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/dist/lib/authentication/auth_workload_identity/attestation_gcp.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/dist/lib/authentication/auth_workload_identity/auth_workload_identity.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/snowflake-sdk/dist/lib/authentication/auth_workload_identity/auth_workload_identity.js ***!
  \*************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst attestation_aws_1 = __webpack_require__(/*! ./attestation_aws */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/authentication/auth_workload_identity/attestation_aws.js\");\nconst types_1 = __webpack_require__(/*! ./types */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/authentication/auth_workload_identity/types.js\");\nconst errors_1 = __webpack_require__(/*! ../../errors */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/errors.js\");\nconst logger_1 = __importDefault(__webpack_require__(/*! ../../logger */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/logger.js\"));\nconst attestation_azure_1 = __webpack_require__(/*! ./attestation_azure */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/authentication/auth_workload_identity/attestation_azure.js\");\nconst attestation_gcp_1 = __webpack_require__(/*! ./attestation_gcp */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/authentication/auth_workload_identity/attestation_gcp.js\");\nconst authentication_types_1 = __importDefault(__webpack_require__(/*! ../authentication_types */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/authentication/authentication_types.js\"));\nclass AuthWorkloadIdentity {\n    connectionConfig;\n    tokenProvider;\n    token;\n    constructor(connectionConfig) {\n        this.connectionConfig = connectionConfig;\n    }\n    updateBody(body) {\n        body.data['AUTHENTICATOR'] = authentication_types_1.default.WORKLOAD_IDENTITY;\n        body.data['PROVIDER'] = this.tokenProvider;\n        body.data['TOKEN'] = this.token;\n    }\n    async authenticate() {\n        let provider = this.connectionConfig.workloadIdentityProvider;\n        let token;\n        if (provider === types_1.WorkloadIdentityProvider.AWS) {\n            token = await (0, attestation_aws_1.getAwsAttestationToken)();\n        }\n        else if (provider === types_1.WorkloadIdentityProvider.AZURE) {\n            token = await (0, attestation_azure_1.getAzureAttestationToken)(this.connectionConfig.workloadIdentityAzureEntraIdResource);\n        }\n        else if (provider === types_1.WorkloadIdentityProvider.GCP) {\n            token = await (0, attestation_gcp_1.getGcpAttestationToken)();\n        }\n        else if (provider === types_1.WorkloadIdentityProvider.OIDC) {\n            if (this.connectionConfig.token) {\n                token = this.connectionConfig.token;\n            }\n            else {\n                throw (0, errors_1.createInvalidParameterError)(errors_1.ErrorCode.ERR_CONN_CREATE_INVALID_WORKLOAD_IDENTITY_PARAMETERS, `workloadIdentityProvider: OIDC requires token in connection options`);\n            }\n        }\n        else {\n            throw (0, errors_1.createInvalidParameterError)(errors_1.ErrorCode.ERR_CONN_CREATE_INVALID_WORKLOAD_IDENTITY_PARAMETERS, `workloadIdentityProvider must be one of: ${Object.values(types_1.WorkloadIdentityProvider).join(', ')}`);\n        }\n        (0, logger_1.default)().debug(`AuthWorkloadIdentity using provider=${provider}`);\n        this.tokenProvider = provider;\n        this.token = token;\n    }\n}\nexports[\"default\"] = AuthWorkloadIdentity;\n//# sourceMappingURL=auth_workload_identity.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9kaXN0L2xpYi9hdXRoZW50aWNhdGlvbi9hdXRoX3dvcmtsb2FkX2lkZW50aXR5L2F1dGhfd29ya2xvYWRfaWRlbnRpdHkuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLDZDQUE2QztBQUM3QztBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwwQkFBMEIsbUJBQU8sQ0FBQywrSEFBbUI7QUFDckQsZ0JBQWdCLG1CQUFPLENBQUMsMkdBQVM7QUFDakMsaUJBQWlCLG1CQUFPLENBQUMsMkVBQWM7QUFDdkMsaUNBQWlDLG1CQUFPLENBQUMsMkVBQWM7QUFDdkQsNEJBQTRCLG1CQUFPLENBQUMsbUlBQXFCO0FBQ3pELDBCQUEwQixtQkFBTyxDQUFDLCtIQUFtQjtBQUNyRCwrQ0FBK0MsbUJBQU8sQ0FBQyxtSEFBeUI7QUFDaEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUxBQWlMLDJEQUEyRDtBQUM1TztBQUNBLDZFQUE2RSxTQUFTO0FBQ3RGO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWU7QUFDZiIsInNvdXJjZXMiOlsiL1VzZXJzL3dhbmdoYW90YWkvRGVza3RvcC9lbHZlbmxhYi9IVFYvbm9kZV9tb2R1bGVzL3Nub3dmbGFrZS1zZGsvZGlzdC9saWIvYXV0aGVudGljYXRpb24vYXV0aF93b3JrbG9hZF9pZGVudGl0eS9hdXRoX3dvcmtsb2FkX2lkZW50aXR5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgYXR0ZXN0YXRpb25fYXdzXzEgPSByZXF1aXJlKFwiLi9hdHRlc3RhdGlvbl9hd3NcIik7XG5jb25zdCB0eXBlc18xID0gcmVxdWlyZShcIi4vdHlwZXNcIik7XG5jb25zdCBlcnJvcnNfMSA9IHJlcXVpcmUoXCIuLi8uLi9lcnJvcnNcIik7XG5jb25zdCBsb2dnZXJfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi4vLi4vbG9nZ2VyXCIpKTtcbmNvbnN0IGF0dGVzdGF0aW9uX2F6dXJlXzEgPSByZXF1aXJlKFwiLi9hdHRlc3RhdGlvbl9henVyZVwiKTtcbmNvbnN0IGF0dGVzdGF0aW9uX2djcF8xID0gcmVxdWlyZShcIi4vYXR0ZXN0YXRpb25fZ2NwXCIpO1xuY29uc3QgYXV0aGVudGljYXRpb25fdHlwZXNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi4vYXV0aGVudGljYXRpb25fdHlwZXNcIikpO1xuY2xhc3MgQXV0aFdvcmtsb2FkSWRlbnRpdHkge1xuICAgIGNvbm5lY3Rpb25Db25maWc7XG4gICAgdG9rZW5Qcm92aWRlcjtcbiAgICB0b2tlbjtcbiAgICBjb25zdHJ1Y3Rvcihjb25uZWN0aW9uQ29uZmlnKSB7XG4gICAgICAgIHRoaXMuY29ubmVjdGlvbkNvbmZpZyA9IGNvbm5lY3Rpb25Db25maWc7XG4gICAgfVxuICAgIHVwZGF0ZUJvZHkoYm9keSkge1xuICAgICAgICBib2R5LmRhdGFbJ0FVVEhFTlRJQ0FUT1InXSA9IGF1dGhlbnRpY2F0aW9uX3R5cGVzXzEuZGVmYXVsdC5XT1JLTE9BRF9JREVOVElUWTtcbiAgICAgICAgYm9keS5kYXRhWydQUk9WSURFUiddID0gdGhpcy50b2tlblByb3ZpZGVyO1xuICAgICAgICBib2R5LmRhdGFbJ1RPS0VOJ10gPSB0aGlzLnRva2VuO1xuICAgIH1cbiAgICBhc3luYyBhdXRoZW50aWNhdGUoKSB7XG4gICAgICAgIGxldCBwcm92aWRlciA9IHRoaXMuY29ubmVjdGlvbkNvbmZpZy53b3JrbG9hZElkZW50aXR5UHJvdmlkZXI7XG4gICAgICAgIGxldCB0b2tlbjtcbiAgICAgICAgaWYgKHByb3ZpZGVyID09PSB0eXBlc18xLldvcmtsb2FkSWRlbnRpdHlQcm92aWRlci5BV1MpIHtcbiAgICAgICAgICAgIHRva2VuID0gYXdhaXQgKDAsIGF0dGVzdGF0aW9uX2F3c18xLmdldEF3c0F0dGVzdGF0aW9uVG9rZW4pKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocHJvdmlkZXIgPT09IHR5cGVzXzEuV29ya2xvYWRJZGVudGl0eVByb3ZpZGVyLkFaVVJFKSB7XG4gICAgICAgICAgICB0b2tlbiA9IGF3YWl0ICgwLCBhdHRlc3RhdGlvbl9henVyZV8xLmdldEF6dXJlQXR0ZXN0YXRpb25Ub2tlbikodGhpcy5jb25uZWN0aW9uQ29uZmlnLndvcmtsb2FkSWRlbnRpdHlBenVyZUVudHJhSWRSZXNvdXJjZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocHJvdmlkZXIgPT09IHR5cGVzXzEuV29ya2xvYWRJZGVudGl0eVByb3ZpZGVyLkdDUCkge1xuICAgICAgICAgICAgdG9rZW4gPSBhd2FpdCAoMCwgYXR0ZXN0YXRpb25fZ2NwXzEuZ2V0R2NwQXR0ZXN0YXRpb25Ub2tlbikoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChwcm92aWRlciA9PT0gdHlwZXNfMS5Xb3JrbG9hZElkZW50aXR5UHJvdmlkZXIuT0lEQykge1xuICAgICAgICAgICAgaWYgKHRoaXMuY29ubmVjdGlvbkNvbmZpZy50b2tlbikge1xuICAgICAgICAgICAgICAgIHRva2VuID0gdGhpcy5jb25uZWN0aW9uQ29uZmlnLnRva2VuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgKDAsIGVycm9yc18xLmNyZWF0ZUludmFsaWRQYXJhbWV0ZXJFcnJvcikoZXJyb3JzXzEuRXJyb3JDb2RlLkVSUl9DT05OX0NSRUFURV9JTlZBTElEX1dPUktMT0FEX0lERU5USVRZX1BBUkFNRVRFUlMsIGB3b3JrbG9hZElkZW50aXR5UHJvdmlkZXI6IE9JREMgcmVxdWlyZXMgdG9rZW4gaW4gY29ubmVjdGlvbiBvcHRpb25zYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyAoMCwgZXJyb3JzXzEuY3JlYXRlSW52YWxpZFBhcmFtZXRlckVycm9yKShlcnJvcnNfMS5FcnJvckNvZGUuRVJSX0NPTk5fQ1JFQVRFX0lOVkFMSURfV09SS0xPQURfSURFTlRJVFlfUEFSQU1FVEVSUywgYHdvcmtsb2FkSWRlbnRpdHlQcm92aWRlciBtdXN0IGJlIG9uZSBvZjogJHtPYmplY3QudmFsdWVzKHR5cGVzXzEuV29ya2xvYWRJZGVudGl0eVByb3ZpZGVyKS5qb2luKCcsICcpfWApO1xuICAgICAgICB9XG4gICAgICAgICgwLCBsb2dnZXJfMS5kZWZhdWx0KSgpLmRlYnVnKGBBdXRoV29ya2xvYWRJZGVudGl0eSB1c2luZyBwcm92aWRlcj0ke3Byb3ZpZGVyfWApO1xuICAgICAgICB0aGlzLnRva2VuUHJvdmlkZXIgPSBwcm92aWRlcjtcbiAgICAgICAgdGhpcy50b2tlbiA9IHRva2VuO1xuICAgIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IEF1dGhXb3JrbG9hZElkZW50aXR5O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXV0aF93b3JrbG9hZF9pZGVudGl0eS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/dist/lib/authentication/auth_workload_identity/auth_workload_identity.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/dist/lib/authentication/auth_workload_identity/index.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/snowflake-sdk/dist/lib/authentication/auth_workload_identity/index.js ***!
  \********************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports[\"default\"] = void 0;\nvar auth_workload_identity_1 = __webpack_require__(/*! ./auth_workload_identity */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/authentication/auth_workload_identity/auth_workload_identity.js\");\nObject.defineProperty(exports, \"default\", ({ enumerable: true, get: function () { return __importDefault(auth_workload_identity_1).default; } }));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9kaXN0L2xpYi9hdXRoZW50aWNhdGlvbi9hdXRoX3dvcmtsb2FkX2lkZW50aXR5L2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsa0JBQWU7QUFDZiwrQkFBK0IsbUJBQU8sQ0FBQyw2SUFBMEI7QUFDakUsMkNBQTBDLEVBQUUscUNBQXFDLDZEQUE2RCxFQUFDO0FBQy9JIiwic291cmNlcyI6WyIvVXNlcnMvd2FuZ2hhb3RhaS9EZXNrdG9wL2VsdmVubGFiL0hUVi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9kaXN0L2xpYi9hdXRoZW50aWNhdGlvbi9hdXRoX3dvcmtsb2FkX2lkZW50aXR5L2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xudmFyIGF1dGhfd29ya2xvYWRfaWRlbnRpdHlfMSA9IHJlcXVpcmUoXCIuL2F1dGhfd29ya2xvYWRfaWRlbnRpdHlcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBfX2ltcG9ydERlZmF1bHQoYXV0aF93b3JrbG9hZF9pZGVudGl0eV8xKS5kZWZhdWx0OyB9IH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/dist/lib/authentication/auth_workload_identity/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/dist/lib/authentication/auth_workload_identity/types.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/snowflake-sdk/dist/lib/authentication/auth_workload_identity/types.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.WorkloadIdentityProvider = void 0;\n// NOTE:\n// Intentionally not an enum as we want users to pass strings\nexports.WorkloadIdentityProvider = {\n    AWS: 'AWS',\n    AZURE: 'AZURE',\n    GCP: 'GCP',\n    OIDC: 'OIDC',\n};\n//# sourceMappingURL=types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9kaXN0L2xpYi9hdXRoZW50aWNhdGlvbi9hdXRoX3dvcmtsb2FkX2lkZW50aXR5L3R5cGVzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGdDQUFnQztBQUNoQztBQUNBO0FBQ0EsZ0NBQWdDO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL3dhbmdoYW90YWkvRGVza3RvcC9lbHZlbmxhYi9IVFYvbm9kZV9tb2R1bGVzL3Nub3dmbGFrZS1zZGsvZGlzdC9saWIvYXV0aGVudGljYXRpb24vYXV0aF93b3JrbG9hZF9pZGVudGl0eS90eXBlcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuV29ya2xvYWRJZGVudGl0eVByb3ZpZGVyID0gdm9pZCAwO1xuLy8gTk9URTpcbi8vIEludGVudGlvbmFsbHkgbm90IGFuIGVudW0gYXMgd2Ugd2FudCB1c2VycyB0byBwYXNzIHN0cmluZ3NcbmV4cG9ydHMuV29ya2xvYWRJZGVudGl0eVByb3ZpZGVyID0ge1xuICAgIEFXUzogJ0FXUycsXG4gICAgQVpVUkU6ICdBWlVSRScsXG4gICAgR0NQOiAnR0NQJyxcbiAgICBPSURDOiAnT0lEQycsXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHlwZXMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/dist/lib/authentication/auth_workload_identity/types.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/dist/lib/authentication/authentication.js":
/*!******************************************************************************!*\
  !*** ./node_modules/snowflake-sdk/dist/lib/authentication/authentication.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nconst AuthDefault = __webpack_require__(/*! ./auth_default */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/authentication/auth_default.js\");\nconst AuthWeb = __webpack_require__(/*! ./auth_web */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/authentication/auth_web.js\");\nconst AuthKeypair = __webpack_require__(/*! ./auth_keypair */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/authentication/auth_keypair.js\");\nconst AuthOauth = __webpack_require__(/*! ./auth_oauth */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/authentication/auth_oauth.js\");\nconst AuthOauthPAT = __webpack_require__(/*! ./auth_oauth_pat */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/authentication/auth_oauth_pat.js\");\nconst AuthOkta = __webpack_require__(/*! ./auth_okta */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/authentication/auth_okta.js\");\nconst AuthIDToken = __webpack_require__(/*! ./auth_idtoken */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/authentication/auth_idtoken.js\");\nconst Logger = __webpack_require__(/*! ../logger */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/logger.js\");\nconst AuthenticationTypes = __webpack_require__(/*! ./authentication_types */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/authentication/authentication_types.js\");\nconst AuthOauthAuthorizationCode = __webpack_require__(/*! ./auth_oauth_authorization_code */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/authentication/auth_oauth_authorization_code.js\");\nconst AuthOauthClientCredentials = (__webpack_require__(/*! ./auth_oauth_client_credentials */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/authentication/auth_oauth_client_credentials.js\")[\"default\"]);\nconst AuthWorkloadIdentity = (__webpack_require__(/*! ./auth_workload_identity */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/authentication/auth_workload_identity/index.js\")[\"default\"]);\n/**\n * TODO: Refactor\n * - StateConnecting.continue in sf.js and ConnectionConfig adds almost every param\n *   from this function (overwrites them)\n * - AUTHENTICATOR is implemented in almost every auth provider\n *\n * Refactor Plan:\n * - Have a single place to build CLIENT_ENVIRONMENT: ConnectionConfig or sf.js\n * - Have a single place to build common params by either:\n *  - Removing this method\n *  - Moving logic from StateConnecting.continue to this method.\n *    Options should be simplified to accept only ConnectionConfig\n * - Rename auth.updateBody to auth.buildData (as it only builds keys under body.data)\n * - Ensure AUTHENTICATOR is set in every auth provider\n * - Cleanup StateConnecting.continue so it's more clear how final body is built\n *\n * Returns the JSON body to be sent when connecting.\n *\n * @param {String} authenticator\n * @param {String} account\n * @param {String} username\n * @param {String} clientType\n * @param {String} clientVersion\n * @param {Object} clientEnv\n *\n * @returns {JSON}\n */\nexports.formAuthJSON = function formAuthJSON(authenticator, account, username, clientType, clientVersion, clientEnv) {\n    const body = {\n        data: {\n            ACCOUNT_NAME: account,\n            CLIENT_APP_ID: clientType,\n            CLIENT_APP_VERSION: clientVersion,\n            CLIENT_ENVIRONMENT: {\n                OS: clientEnv.OS,\n                OS_VERSION: clientEnv.OS_VERSION,\n                OCSP_MODE: clientEnv.OCSP_MODE,\n            },\n        },\n    };\n    if (!this.isOktaAuth(authenticator)) {\n        body['data']['AUTHENTICATOR'] = authenticator;\n        body['data']['LOGIN_NAME'] = username;\n    }\n    return body;\n};\n/**\n * Returns the authenticator to use base on the connection configuration.\n *\n * @param {Object} connectionConfig\n * @param httpClient\n *\n * @returns {Object} the authenticator.\n */\nexports.getAuthenticator = function getAuthenticator(connectionConfig, httpClient) {\n    const authType = connectionConfig.getAuthenticator();\n    const openExternalBrowserCallback = connectionConfig.openExternalBrowserCallback; // Important for SSO in the Snowflake VS Code extension\n    let auth;\n    if (authType === AuthenticationTypes.DEFAULT_AUTHENTICATOR ||\n        authType === AuthenticationTypes.USER_PWD_MFA_AUTHENTICATOR) {\n        auth = new AuthDefault(connectionConfig);\n    }\n    else if (authType === AuthenticationTypes.EXTERNAL_BROWSER_AUTHENTICATOR) {\n        if (connectionConfig.getClientStoreTemporaryCredential() && !!connectionConfig.idToken) {\n            auth = new AuthIDToken(connectionConfig, httpClient, openExternalBrowserCallback);\n        }\n        else {\n            auth = new AuthWeb(connectionConfig, httpClient, openExternalBrowserCallback);\n        }\n    }\n    else if (authType === AuthenticationTypes.KEY_PAIR_AUTHENTICATOR) {\n        auth = new AuthKeypair(connectionConfig);\n    }\n    else if (authType === AuthenticationTypes.OAUTH_AUTHENTICATOR) {\n        auth = new AuthOauth(connectionConfig.getToken());\n    }\n    else if (authType === AuthenticationTypes.PROGRAMMATIC_ACCESS_TOKEN) {\n        auth = new AuthOauthPAT(connectionConfig.getToken(), connectionConfig.password);\n    }\n    else if (authType === AuthenticationTypes.OAUTH_AUTHORIZATION_CODE) {\n        auth = new AuthOauthAuthorizationCode(connectionConfig, httpClient);\n    }\n    else if (authType === AuthenticationTypes.OAUTH_CLIENT_CREDENTIALS) {\n        auth = new AuthOauthClientCredentials(connectionConfig, httpClient);\n    }\n    else if (this.isOktaAuth(authType)) {\n        auth = new AuthOkta(connectionConfig, httpClient);\n    }\n    else if (authType === AuthenticationTypes.WORKLOAD_IDENTITY) {\n        auth = new AuthWorkloadIdentity(connectionConfig, httpClient);\n    }\n    else {\n        // Authenticator specified does not exist\n        Logger.getInstance().warn(`No authenticator found for '${authType}'. Using default authenticator as a fallback`);\n        auth = new AuthDefault(connectionConfig);\n    }\n    return auth;\n};\n/**\n * Returns the boolean describing if the provided authenticator is okta or not.\n *\n * @param {String} authenticator\n * @returns {boolean}\n */\nexports.isOktaAuth = function isOktaAuth(authenticator) {\n    return authenticator.toUpperCase().startsWith('HTTPS://');\n};\n//# sourceMappingURL=authentication.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/dist/lib/authentication/authentication.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/dist/lib/authentication/authentication_types.js":
/*!************************************************************************************!*\
  !*** ./node_modules/snowflake-sdk/dist/lib/authentication/authentication_types.js ***!
  \************************************************************************************/
/***/ ((module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nvar AuthenticationTypes;\n(function (AuthenticationTypes) {\n    AuthenticationTypes[\"DEFAULT_AUTHENTICATOR\"] = \"SNOWFLAKE\";\n    AuthenticationTypes[\"EXTERNAL_BROWSER_AUTHENTICATOR\"] = \"EXTERNALBROWSER\";\n    AuthenticationTypes[\"KEY_PAIR_AUTHENTICATOR\"] = \"SNOWFLAKE_JWT\";\n    AuthenticationTypes[\"OAUTH_AUTHENTICATOR\"] = \"OAUTH\";\n    AuthenticationTypes[\"USER_PWD_MFA_AUTHENTICATOR\"] = \"USERNAME_PASSWORD_MFA\";\n    AuthenticationTypes[\"ID_TOKEN_AUTHENTICATOR\"] = \"ID_TOKEN\";\n    AuthenticationTypes[\"PROGRAMMATIC_ACCESS_TOKEN\"] = \"PROGRAMMATIC_ACCESS_TOKEN\";\n    AuthenticationTypes[\"OAUTH_AUTHORIZATION_CODE\"] = \"OAUTH_AUTHORIZATION_CODE\";\n    AuthenticationTypes[\"OAUTH_CLIENT_CREDENTIALS\"] = \"OAUTH_CLIENT_CREDENTIALS\";\n    AuthenticationTypes[\"WORKLOAD_IDENTITY\"] = \"WORKLOAD_IDENTITY\";\n})(AuthenticationTypes || (AuthenticationTypes = {}));\nmodule.exports = AuthenticationTypes;\nexports[\"default\"] = AuthenticationTypes;\n//# sourceMappingURL=authentication_types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9kaXN0L2xpYi9hdXRoZW50aWNhdGlvbi9hdXRoZW50aWNhdGlvbl90eXBlcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLGtEQUFrRDtBQUNuRDtBQUNBLGtCQUFlO0FBQ2YiLCJzb3VyY2VzIjpbIi9Vc2Vycy93YW5naGFvdGFpL0Rlc2t0b3AvZWx2ZW5sYWIvSFRWL25vZGVfbW9kdWxlcy9zbm93Zmxha2Utc2RrL2Rpc3QvbGliL2F1dGhlbnRpY2F0aW9uL2F1dGhlbnRpY2F0aW9uX3R5cGVzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIEF1dGhlbnRpY2F0aW9uVHlwZXM7XG4oZnVuY3Rpb24gKEF1dGhlbnRpY2F0aW9uVHlwZXMpIHtcbiAgICBBdXRoZW50aWNhdGlvblR5cGVzW1wiREVGQVVMVF9BVVRIRU5USUNBVE9SXCJdID0gXCJTTk9XRkxBS0VcIjtcbiAgICBBdXRoZW50aWNhdGlvblR5cGVzW1wiRVhURVJOQUxfQlJPV1NFUl9BVVRIRU5USUNBVE9SXCJdID0gXCJFWFRFUk5BTEJST1dTRVJcIjtcbiAgICBBdXRoZW50aWNhdGlvblR5cGVzW1wiS0VZX1BBSVJfQVVUSEVOVElDQVRPUlwiXSA9IFwiU05PV0ZMQUtFX0pXVFwiO1xuICAgIEF1dGhlbnRpY2F0aW9uVHlwZXNbXCJPQVVUSF9BVVRIRU5USUNBVE9SXCJdID0gXCJPQVVUSFwiO1xuICAgIEF1dGhlbnRpY2F0aW9uVHlwZXNbXCJVU0VSX1BXRF9NRkFfQVVUSEVOVElDQVRPUlwiXSA9IFwiVVNFUk5BTUVfUEFTU1dPUkRfTUZBXCI7XG4gICAgQXV0aGVudGljYXRpb25UeXBlc1tcIklEX1RPS0VOX0FVVEhFTlRJQ0FUT1JcIl0gPSBcIklEX1RPS0VOXCI7XG4gICAgQXV0aGVudGljYXRpb25UeXBlc1tcIlBST0dSQU1NQVRJQ19BQ0NFU1NfVE9LRU5cIl0gPSBcIlBST0dSQU1NQVRJQ19BQ0NFU1NfVE9LRU5cIjtcbiAgICBBdXRoZW50aWNhdGlvblR5cGVzW1wiT0FVVEhfQVVUSE9SSVpBVElPTl9DT0RFXCJdID0gXCJPQVVUSF9BVVRIT1JJWkFUSU9OX0NPREVcIjtcbiAgICBBdXRoZW50aWNhdGlvblR5cGVzW1wiT0FVVEhfQ0xJRU5UX0NSRURFTlRJQUxTXCJdID0gXCJPQVVUSF9DTElFTlRfQ1JFREVOVElBTFNcIjtcbiAgICBBdXRoZW50aWNhdGlvblR5cGVzW1wiV09SS0xPQURfSURFTlRJVFlcIl0gPSBcIldPUktMT0FEX0lERU5USVRZXCI7XG59KShBdXRoZW50aWNhdGlvblR5cGVzIHx8IChBdXRoZW50aWNhdGlvblR5cGVzID0ge30pKTtcbm1vZHVsZS5leHBvcnRzID0gQXV0aGVudGljYXRpb25UeXBlcztcbmV4cG9ydHMuZGVmYXVsdCA9IEF1dGhlbnRpY2F0aW9uVHlwZXM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hdXRoZW50aWNhdGlvbl90eXBlcy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/dist/lib/authentication/authentication_types.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/dist/lib/authentication/authentication_util.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/snowflake-sdk/dist/lib/authentication/authentication_util.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nconst net = __webpack_require__(/*! net */ \"net\");\nconst querystring = __webpack_require__(/*! querystring */ \"querystring\");\nconst { exists, format, escapeHTML, buildCredentialCacheKey } = __webpack_require__(/*! ../util */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/util.js\");\nconst Logger = __webpack_require__(/*! ../logger */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/logger.js\");\nconst GlobalConfig = __webpack_require__(/*! ../global_config */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/global_config.js\");\nconst responseHeadersAsString = 'HTTP/1.1 200 OK\\r\\nContent-Type: text/plain\\r\\nConnection: close\\r\\n\\r\\n';\nconst successResponse = 'Your identity was confirmed and propagated to Snowflake Node.js driver. You can close this window now and go back where you started from.';\nconst SNOWFLAKE_DOMAIN_REGEX = /(^|\\.)snowflakecomputing\\.(com|cn)/;\n/**\n * Create server to retrieve SAML token.\n *\n * @param {Function} resolve\n * @param {Function} reject\n *\n * @returns {Server}\n */\nfunction createServer(resolve, reject) {\n    const server = net.createServer(function (socket) {\n        socket.on('data', function (chunk) {\n            // Receive the data and split by line\n            const data = chunk.toString().split('\\r\\n');\n            if (data[0].includes('?error=')) {\n                // Error d credentials\n                const error = prepareError(data[0]);\n                socket.write(`${responseHeadersAsString} ${escapeHTML(error)}`, 'utf8');\n                socket.destroy();\n                server.close();\n                Logger.getInstance().trace(`Error during authorization: ${error}`);\n                reject(error);\n            }\n            else {\n                // User successfully entered credentials\n                socket.write(`${responseHeadersAsString} ${escapeHTML(successResponse)}`, 'utf8');\n                socket.destroy();\n                server.close();\n                Logger.getInstance().trace('User successfully entered authorization code');\n                resolve(data[0]);\n            }\n        });\n        socket.on('error', (socketErr) => {\n            if (socketErr['code'] === 'ECONNRESET') {\n                socket.end();\n            }\n            else {\n                throw socketErr;\n            }\n        });\n    });\n    return server;\n}\nconst withBrowserActionTimeout = (millis, promise) => {\n    let timeoutId;\n    const timeout = new Promise((resolve, reject) => (timeoutId = setTimeout(() => reject(`Browser action timed out after ${millis} ms.`), millis)));\n    return Promise.race([promise, timeout]).finally(() => {\n        clearTimeout(timeoutId);\n    });\n};\nfunction prepareError(rejected) {\n    const errorResponse = querystring.parse(rejected.substring(rejected.indexOf('?') + 1));\n    const error = errorResponse['error'];\n    const errorDescription = errorResponse['error_description'].replace(new RegExp('\\\\sHTTP/.*'), '');\n    return format('Error while getting oauth authorization code. ErrorCode %s. Message: %s', error, errorDescription);\n}\nfunction getTokenUrl(options) {\n    const tokenUrl = options.getOauthTokenRequestUrl();\n    Logger.getInstance().debug(`Url used for receiving token: ${tokenUrl}`);\n    return new URL(tokenUrl);\n}\nasync function prepareScope(options) {\n    const scope = exists(options.getOauthScope())\n        ? options.getOauthScope()\n        : `session:role:${options.getRole()}`;\n    Logger.getInstance().debug(`Prepared scope used for receiving authorization code: ${scope}`);\n    return scope;\n}\nconst readCache = async (key) => {\n    if (exists(GlobalConfig.getCredentialManager())) {\n        return GlobalConfig.getCredentialManager().read(key);\n    }\n    else {\n        return null;\n    }\n};\nconst writeToCache = async (key, value) => {\n    if (exists(GlobalConfig.getCredentialManager())) {\n        return GlobalConfig.getCredentialManager().write(key, value);\n    }\n};\nconst removeFromCache = async (key) => {\n    if (exists(GlobalConfig.getCredentialManager())) {\n        return GlobalConfig.getCredentialManager().remove(key);\n    }\n};\nconst buildOauthAccessTokenCacheKey = (host, username, authenticationType) => buildCredentialCacheKey(host, username, authenticationType + '_access_token');\nconst buildOauthRefreshTokenCacheKey = (host, username, authenticationType) => buildCredentialCacheKey(host, username, authenticationType + '_refresh_token');\nconst isSnowflakeHost = (url) => {\n    return SNOWFLAKE_DOMAIN_REGEX.test(url);\n};\nexports.createServer = createServer;\nexports.withBrowserActionTimeout = withBrowserActionTimeout;\nexports.getTokenUrl = getTokenUrl;\nexports.prepareScope = prepareScope;\nexports.readCache = readCache;\nexports.writeToCache = writeToCache;\nexports.removeFromCache = removeFromCache;\nexports.buildOauthAccessTokenCacheKey = buildOauthAccessTokenCacheKey;\nexports.buildOauthRefreshTokenCacheKey = buildOauthRefreshTokenCacheKey;\nexports.isSnowflakeHost = isSnowflakeHost;\n//# sourceMappingURL=authentication_util.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/dist/lib/authentication/authentication_util.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/dist/lib/authentication/secure_storage/json_credential_manager.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/snowflake-sdk/dist/lib/authentication/secure_storage/json_credential_manager.js ***!
  \******************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst path = __webpack_require__(/*! path */ \"path\");\nconst Logger = __webpack_require__(/*! ../../logger */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/logger.js\");\nconst fs = __webpack_require__(/*! node:fs/promises */ \"node:fs/promises\");\nconst Util = __webpack_require__(/*! ../../util */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/util.js\");\nconst os = __webpack_require__(/*! os */ \"os\");\nconst crypto = __webpack_require__(/*! crypto */ \"crypto\");\nconst { getSecureHandle, closeHandle } = __webpack_require__(/*! ../../file_util */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/file_util.js\");\nconst defaultJsonTokenCachePaths = {\n    win32: ['AppData', 'Local', 'Snowflake', 'Caches'],\n    linux: ['.cache', 'snowflake'],\n    darwin: ['Library', 'Caches', 'Snowflake'],\n};\nfunction JsonCredentialManager(credentialCacheDir, timeoutMs = 60000) {\n    const tokenMapKey = 'tokens';\n    const retryInterval = 100;\n    this.hashKey = function (key) {\n        return crypto.createHash('sha256').update(key).digest('hex');\n    };\n    this.getTokenDirCandidates = function () {\n        const candidates = [];\n        candidates.push({ folder: credentialCacheDir, subfolders: [] });\n        candidates.push({ folder: process.env.SF_TEMPORARY_CREDENTIAL_CACHE_DIR, subfolders: [] });\n        switch (process.platform) {\n            case 'win32':\n                candidates.push({ folder: os.homedir(), subfolders: defaultJsonTokenCachePaths['win32'] });\n                break;\n            case 'linux':\n                candidates.push({ folder: process.env.XDG_CACHE_HOME, subfolders: ['snowflake'] });\n                candidates.push({\n                    folder: process.env.HOME,\n                    subfolders: defaultJsonTokenCachePaths['linux'],\n                });\n                break;\n            case 'darwin':\n                candidates.push({\n                    folder: process.env.HOME,\n                    subfolders: defaultJsonTokenCachePaths['darwin'],\n                });\n        }\n        return candidates;\n    };\n    this.createCacheDir = async function (cacheDir) {\n        const options = { recursive: true };\n        if (process.platform !== 'win32') {\n            options.mode = 0o755;\n        }\n        await fs.mkdir(cacheDir, options);\n        if (process.platform !== 'win32') {\n            await fs.chmod(cacheDir, 0o700);\n        }\n    };\n    this.tryTokenDir = async function (dir, subDirs) {\n        if (!Util.exists(dir)) {\n            return false;\n        }\n        const cacheDir = path.join(dir, ...subDirs);\n        try {\n            const stat = await fs.stat(dir);\n            if (!stat.isDirectory()) {\n                Logger.getInstance().info(`Path ${dir} is not a directory`);\n                return false;\n            }\n            const cacheStat = await fs.stat(cacheDir).catch(async (err) => {\n                if (err.code !== 'ENOENT') {\n                    throw err;\n                }\n                await this.createCacheDir(cacheDir);\n                return await fs.stat(cacheDir);\n            });\n            if (!cacheStat.isDirectory()) {\n                return false;\n            }\n            if (process.platform === 'win32') {\n                return true;\n            }\n            if (cacheStat.uid !== os.userInfo().uid) {\n                Logger.getInstance().warn(`Token cache directory ${cacheDir} has insecure owner.`);\n            }\n            else if ((cacheStat.mode & 0o777) !== 0o700) {\n                Logger.getInstance().warn(`Token cache directory ${cacheDir} has insecure permissions.`);\n            }\n            return true;\n        }\n        catch (err) {\n            Logger.getInstance().warn(`The location ${cacheDir} is invalid. Please check this location is accessible or existing`);\n            return false;\n        }\n    };\n    this.getTokenDir = async function () {\n        const candidates = this.getTokenDirCandidates();\n        for (const candidate of candidates) {\n            const { folder: dir, subfolders: subDirs } = candidate;\n            if (await this.tryTokenDir(dir, subDirs)) {\n                return path.join(dir, ...subDirs);\n            }\n        }\n        return null;\n    };\n    this.getTokenFilePath = async function () {\n        const tokenDir = await this.getTokenDir();\n        if (!Util.exists(tokenDir)) {\n            throw new Error(`Temporary credential cache directory is invalid, and the driver is unable to use the default location. \n      Please set 'credentialCacheDir' connection configuration option to enable the default credential manager.`);\n        }\n        return path.join(tokenDir, 'credential_cache_v1.json');\n    };\n    this.readJsonCredentialFile = async function (fileHandle) {\n        if (!Util.exists(fileHandle)) {\n            return null;\n        }\n        try {\n            const cred = await fileHandle.readFile('utf8');\n            return JSON.parse(cred);\n        }\n        catch (err) {\n            Logger.getInstance().warn('Failed to read token data from the file. Err: %s', err.message);\n            return null;\n        }\n    };\n    this.removeStale = async function (file) {\n        const stat = await fs.stat(file).catch(() => {\n            return undefined;\n        });\n        if (!Util.exists(stat)) {\n            return;\n        }\n        if (new Date().getTime() - stat.birthtimeMs > timeoutMs) {\n            try {\n                await fs.rmdir(file);\n            }\n            catch (err) {\n                Logger.getInstance().warn('Failed to remove stale file. Error: %s', err.message);\n            }\n        }\n    };\n    this.lockFile = async function (filename) {\n        const lckFile = filename + '.lck';\n        await this.removeStale(lckFile);\n        let attempts = 1;\n        let locked = false;\n        const options = {};\n        if (process.platform !== 'win32') {\n            options.mode = 0o600;\n        }\n        while (attempts <= 10) {\n            Logger.getInstance().debug('Attempting to get a lock on file %s, attempt: %d', filename, attempts);\n            attempts++;\n            await fs.mkdir(lckFile, options).then(() => {\n                locked = true;\n            }, () => { });\n            if (locked) {\n                break;\n            }\n            await new Promise((resolve) => setTimeout(resolve, retryInterval));\n        }\n        if (!locked) {\n            Logger.getInstance().warn('Could not acquire lock on cache file %s', filename);\n        }\n        return locked;\n    };\n    this.unlockFile = async function (filename) {\n        const lckFile = filename + '.lck';\n        await fs.rmdir(lckFile);\n    };\n    this.withFileLocked = async function (fun) {\n        const filename = await this.getTokenFilePath();\n        if (await this.lockFile(filename)) {\n            const res = await fun(filename);\n            await this.unlockFile(filename);\n            return res;\n        }\n        return null;\n    };\n    this.write = async function (key, token) {\n        if (!validateTokenCacheOption(key)) {\n            return null;\n        }\n        const keyHash = this.hashKey(key);\n        await this.withFileLocked(async (filename) => {\n            const fileHandle = await getSecureHandle(filename, fs.constants.O_RDWR | fs.constants.O_CREAT, fs);\n            const jsonCredential = (await this.readJsonCredentialFile(fileHandle)) || {};\n            if (!Util.exists(jsonCredential[tokenMapKey])) {\n                jsonCredential[tokenMapKey] = {};\n            }\n            jsonCredential[tokenMapKey][keyHash] = token;\n            try {\n                await fileHandle.truncate();\n                await fileHandle.write(JSON.stringify(jsonCredential), 0);\n                await closeHandle(fileHandle);\n            }\n            catch (err) {\n                Logger.getInstance().warn(`Failed to write token data in ${filename}. Please check the permission or the file format of the token. ${err.message}`);\n            }\n        });\n    };\n    this.read = async function (key) {\n        if (!validateTokenCacheOption(key)) {\n            return null;\n        }\n        const keyHash = this.hashKey(key);\n        return await this.withFileLocked(async (filename) => {\n            const fileHandle = await getSecureHandle(filename, fs.constants.O_RDWR, fs);\n            const jsonCredential = await this.readJsonCredentialFile(fileHandle);\n            await closeHandle(fileHandle);\n            if (!!jsonCredential && jsonCredential[tokenMapKey] && jsonCredential[tokenMapKey][keyHash]) {\n                return jsonCredential[tokenMapKey][keyHash];\n            }\n            else {\n                return null;\n            }\n        });\n    };\n    this.remove = async function (key) {\n        if (!validateTokenCacheOption(key)) {\n            return null;\n        }\n        const keyHash = this.hashKey(key);\n        await this.withFileLocked(async (filename) => {\n            const fileHandle = await getSecureHandle(filename, fs.constants.O_RDWR, fs);\n            const jsonCredential = await this.readJsonCredentialFile(fileHandle);\n            if (jsonCredential && jsonCredential[tokenMapKey] && jsonCredential[tokenMapKey][keyHash]) {\n                try {\n                    jsonCredential[tokenMapKey][keyHash] = null;\n                    await fileHandle.truncate();\n                    await fileHandle.write(JSON.stringify(jsonCredential), 0);\n                    await closeHandle(fileHandle);\n                }\n                catch (err) {\n                    Logger.getInstance().warn(`Failed to remove token data from the file in ${filename}. Please check the permission or the file format of the token. ${err.message}`);\n                }\n            }\n        });\n    };\n    function validateTokenCacheOption(key) {\n        return Util.checkParametersDefined(key);\n    }\n}\nmodule.exports.defaultJsonTokenCachePaths = defaultJsonTokenCachePaths;\nmodule.exports.JsonCredentialManager = JsonCredentialManager;\n//# sourceMappingURL=json_credential_manager.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/dist/lib/authentication/secure_storage/json_credential_manager.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/dist/lib/authentication/sso_url_provider.js":
/*!********************************************************************************!*\
  !*** ./node_modules/snowflake-sdk/dist/lib/authentication/sso_url_provider.js ***!
  \********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst Util = __webpack_require__(/*! ../util */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/util.js\");\nconst Errors = __webpack_require__(/*! ../errors */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/errors.js\");\nconst { rest } = __webpack_require__(/*! ../global_config */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/global_config.js\");\n/**\n * Creates a new instance of an SsoUrlProvider.\n *\n * @param {Object} httpClient\n * @constructor\n */\nfunction SsoUrlProvider(httpClient) {\n    Errors.assertInternal(Util.isObject(httpClient));\n    const port = rest.HTTPS_PORT;\n    const protocol = rest.HTTPS_PROTOCOL;\n    /**\n     * Get SSO URL through POST request.\n     *\n     * @param {String} authenticator\n     * @param {String} serviceName\n     * @param {String} account\n     * @param {Number} callbackPort\n     * @param {String} user\n     * @param {String} host\n     *\n     * @returns {Promise<String>} the SSO URL.\n     */\n    this.getSSOURL = async function (authenticator, serviceName, account, callbackPort, user, host) {\n        // Create URL to send POST request to\n        const url = protocol + '://' + host + '/session/authenticator-request';\n        let header;\n        if (serviceName) {\n            header = {\n                HTTP_HEADER_SERVICE_NAME: serviceName,\n            };\n        }\n        const body = {\n            data: {\n                ACCOUNT_NAME: account,\n                LOGIN_NAME: user,\n                PORT: port,\n                PROTOCOL: protocol,\n                AUTHENTICATOR: authenticator,\n                BROWSER_MODE_REDIRECT_PORT: callbackPort.toString(),\n            },\n        };\n        const requestOptions = {\n            method: 'post',\n            url: url,\n            headers: header,\n            data: body,\n            responseType: 'json',\n        };\n        // Post request to get the SSO URL\n        return httpClient\n            .requestAsync(requestOptions)\n            .then((response) => {\n            const data = response['data']['data'];\n            return data;\n        })\n            .catch((requestErr) => {\n            throw requestErr;\n        });\n    };\n}\nmodule.exports = SsoUrlProvider;\n//# sourceMappingURL=sso_url_provider.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9kaXN0L2xpYi9hdXRoZW50aWNhdGlvbi9zc29fdXJsX3Byb3ZpZGVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsYUFBYSxtQkFBTyxDQUFDLG9FQUFTO0FBQzlCLGVBQWUsbUJBQU8sQ0FBQyx3RUFBVztBQUNsQyxRQUFRLE9BQU8sRUFBRSxtQkFBTyxDQUFDLHNGQUFrQjtBQUMzQztBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCLGVBQWUsUUFBUTtBQUN2QixlQUFlLFFBQVE7QUFDdkIsZUFBZSxRQUFRO0FBQ3ZCLGVBQWUsUUFBUTtBQUN2QixlQUFlLFFBQVE7QUFDdkI7QUFDQSxpQkFBaUIsaUJBQWlCO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy93YW5naGFvdGFpL0Rlc2t0b3AvZWx2ZW5sYWIvSFRWL25vZGVfbW9kdWxlcy9zbm93Zmxha2Utc2RrL2Rpc3QvbGliL2F1dGhlbnRpY2F0aW9uL3Nzb191cmxfcHJvdmlkZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBVdGlsID0gcmVxdWlyZSgnLi4vdXRpbCcpO1xuY29uc3QgRXJyb3JzID0gcmVxdWlyZSgnLi4vZXJyb3JzJyk7XG5jb25zdCB7IHJlc3QgfSA9IHJlcXVpcmUoJy4uL2dsb2JhbF9jb25maWcnKTtcbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBvZiBhbiBTc29VcmxQcm92aWRlci5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gaHR0cENsaWVudFxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIFNzb1VybFByb3ZpZGVyKGh0dHBDbGllbnQpIHtcbiAgICBFcnJvcnMuYXNzZXJ0SW50ZXJuYWwoVXRpbC5pc09iamVjdChodHRwQ2xpZW50KSk7XG4gICAgY29uc3QgcG9ydCA9IHJlc3QuSFRUUFNfUE9SVDtcbiAgICBjb25zdCBwcm90b2NvbCA9IHJlc3QuSFRUUFNfUFJPVE9DT0w7XG4gICAgLyoqXG4gICAgICogR2V0IFNTTyBVUkwgdGhyb3VnaCBQT1NUIHJlcXVlc3QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gYXV0aGVudGljYXRvclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBzZXJ2aWNlTmFtZVxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBhY2NvdW50XG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGNhbGxiYWNrUG9ydFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSB1c2VyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGhvc3RcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPFN0cmluZz59IHRoZSBTU08gVVJMLlxuICAgICAqL1xuICAgIHRoaXMuZ2V0U1NPVVJMID0gYXN5bmMgZnVuY3Rpb24gKGF1dGhlbnRpY2F0b3IsIHNlcnZpY2VOYW1lLCBhY2NvdW50LCBjYWxsYmFja1BvcnQsIHVzZXIsIGhvc3QpIHtcbiAgICAgICAgLy8gQ3JlYXRlIFVSTCB0byBzZW5kIFBPU1QgcmVxdWVzdCB0b1xuICAgICAgICBjb25zdCB1cmwgPSBwcm90b2NvbCArICc6Ly8nICsgaG9zdCArICcvc2Vzc2lvbi9hdXRoZW50aWNhdG9yLXJlcXVlc3QnO1xuICAgICAgICBsZXQgaGVhZGVyO1xuICAgICAgICBpZiAoc2VydmljZU5hbWUpIHtcbiAgICAgICAgICAgIGhlYWRlciA9IHtcbiAgICAgICAgICAgICAgICBIVFRQX0hFQURFUl9TRVJWSUNFX05BTUU6IHNlcnZpY2VOYW1lLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBib2R5ID0ge1xuICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgIEFDQ09VTlRfTkFNRTogYWNjb3VudCxcbiAgICAgICAgICAgICAgICBMT0dJTl9OQU1FOiB1c2VyLFxuICAgICAgICAgICAgICAgIFBPUlQ6IHBvcnQsXG4gICAgICAgICAgICAgICAgUFJPVE9DT0w6IHByb3RvY29sLFxuICAgICAgICAgICAgICAgIEFVVEhFTlRJQ0FUT1I6IGF1dGhlbnRpY2F0b3IsXG4gICAgICAgICAgICAgICAgQlJPV1NFUl9NT0RFX1JFRElSRUNUX1BPUlQ6IGNhbGxiYWNrUG9ydC50b1N0cmluZygpLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgcmVxdWVzdE9wdGlvbnMgPSB7XG4gICAgICAgICAgICBtZXRob2Q6ICdwb3N0JyxcbiAgICAgICAgICAgIHVybDogdXJsLFxuICAgICAgICAgICAgaGVhZGVyczogaGVhZGVyLFxuICAgICAgICAgICAgZGF0YTogYm9keSxcbiAgICAgICAgICAgIHJlc3BvbnNlVHlwZTogJ2pzb24nLFxuICAgICAgICB9O1xuICAgICAgICAvLyBQb3N0IHJlcXVlc3QgdG8gZ2V0IHRoZSBTU08gVVJMXG4gICAgICAgIHJldHVybiBodHRwQ2xpZW50XG4gICAgICAgICAgICAucmVxdWVzdEFzeW5jKHJlcXVlc3RPcHRpb25zKVxuICAgICAgICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBkYXRhID0gcmVzcG9uc2VbJ2RhdGEnXVsnZGF0YSddO1xuICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICAgIH0pXG4gICAgICAgICAgICAuY2F0Y2goKHJlcXVlc3RFcnIpID0+IHtcbiAgICAgICAgICAgIHRocm93IHJlcXVlc3RFcnI7XG4gICAgICAgIH0pO1xuICAgIH07XG59XG5tb2R1bGUuZXhwb3J0cyA9IFNzb1VybFByb3ZpZGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3NvX3VybF9wcm92aWRlci5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/dist/lib/authentication/sso_url_provider.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/dist/lib/configuration/client_configuration.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/snowflake-sdk/dist/lib/configuration/client_configuration.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nconst os = __webpack_require__(/*! os */ \"os\");\nconst path = __webpack_require__(/*! path */ \"path\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst { isString, exists, getDriverDirectory, isWindows } = __webpack_require__(/*! ../util */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/util.js\");\nconst Logger = __webpack_require__(/*! ../logger */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/logger.js\");\nconst { IsFileExisted } = __webpack_require__(/*! ../file_util */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/file_util.js\");\nconst clientConfigFileName = 'sf_client_config.json';\nconst Levels = Object.freeze({\n    Off: 'OFF',\n    Error: 'ERROR',\n    Warn: 'WARN',\n    Info: 'INFO',\n    Debug: 'DEBUG',\n    Trace: 'TRACE',\n});\nconst defaultDirectories = getDefaultDirectories();\nfunction getDefaultDirectories() {\n    const directories = [];\n    const driverDirectory = getDriverDirectory();\n    Logger.getInstance().debug(`Detected driver directory: ${driverDirectory}`);\n    if (driverDirectory) {\n        directories.push({\n            dir: driverDirectory,\n            dirDescription: 'driver',\n        });\n    }\n    else {\n        Logger.getInstance().warn('Driver directory is not defined');\n    }\n    const homedir = os.homedir();\n    Logger.getInstance().debug(`Detected home directory: ${homedir}`);\n    if (exists(homedir)) {\n        directories.push({\n            dir: homedir,\n            dirDescription: 'home',\n        });\n    }\n    else {\n        Logger.getInstance().warn('Home directory of the user is not defined');\n    }\n    Logger.getInstance().debug(`Detected default directories: ${driverDirectory}`);\n    return directories;\n}\nconst knownCommonEntries = ['log_level', 'log_path'];\nconst allLevels = Object.values(Levels);\nclass ClientConfig {\n    constructor(filePath, loggingConfig) {\n        this.configPath = filePath;\n        this.loggingConfig = loggingConfig;\n    }\n}\nclass ClientLoggingConfig {\n    constructor(logLevel, logPath) {\n        this.logLevel = logLevel;\n        this.logPath = logPath;\n    }\n}\nclass ConfigurationError extends Error {\n    name = 'ConfigurationError';\n    constructor(message, cause) {\n        super(message);\n        this.cause = cause;\n        Error.captureStackTrace(this, this.constructor);\n    }\n    toString() {\n        return this.message + ': ' + this.cause.toString();\n    }\n}\n/**\n * @param value {String} Log level.\n * @return {String} normalized log level value.\n * @throws {Error} Error for unknown value.\n */\nfunction levelFromString(value) {\n    const level = value.toUpperCase();\n    if (!allLevels.includes(level)) {\n        Logger.getInstance().error(`Tried to create unsupported log level from string: ${value}`);\n        throw new Error('Unknown log level: ' + value);\n    }\n    return level;\n}\n/**\n * @param fsPromisesModule {module} filestream module\n * @param processModule {processModule} process module\n */\nfunction ConfigurationUtil(fsPromisesModule, processModule) {\n    const fsPromises = typeof fsPromisesModule !== 'undefined' ? fsPromisesModule : __webpack_require__(/*! fs/promises */ \"fs/promises\");\n    const process = typeof processModule !== 'undefined' ? processModule : __webpack_require__(/*! process */ \"process\");\n    let configFileContents = null;\n    let fd = null;\n    /**\n     * @param configFilePath {String} A path to a client config file.\n     * @return {Promise<ClientConfig>} Client configuration.\n     */\n    this.getClientConfig = async function (configFilePath, mock = false, delay = 0) {\n        Logger.getInstance().debug('Retrieving client config');\n        const path = await findConfig(configFilePath);\n        if (!exists(path) || path === '') {\n            Logger.getInstance().info('No config file path found. Client config will not be used.');\n            return null;\n        }\n        const isFileExist = mock ? mock : IsFileExisted(path);\n        if (!isFileExist) {\n            Logger.getInstance().info(`No config file not found on ${path}. Client config will not be used.`);\n            return null;\n        }\n        try {\n            fd = await openFileSafely(path);\n            if (!isWindows()) {\n                const openStats = await fd.stat();\n                const mode = openStats.mode & 0o777;\n                if (!isFilePermissionValid(mode)) {\n                    Logger.getInstance().warn(`Config file path permissions are invalid. File: ${path} can be modified by group or others. Client config will not be used.`);\n                    throw new ConfigurationError(`Configuration file: ${path} can be modified by group or others`, 'IncorrectPerms');\n                }\n                if (!validateOwnership(openStats)) {\n                    Logger.getInstance().warn('This config file is not owned by the current user. Client config will not be used.');\n                    throw new ConfigurationError('Configuration file: not owned by the current user', 'Invalid Ownership');\n                }\n                Logger.getInstance().debug(`Config file path permissions are valid. Path: ${path}`);\n                if (mock) {\n                    await new Promise((resolve) => setTimeout(resolve, delay));\n                }\n                configFileContents = await readFileConfig(fd).catch((err) => {\n                    Logger.getInstance().debug(`Reading configuration from the file failed. Path: ${path}`);\n                    throw new ConfigurationError('Finding client configuration failed', err);\n                });\n                //Compare the modification time from the 'open' call with the modification time after reading to validate whether the file has been modified.\n                const currentStat = await fsPromises.stat(path);\n                if (!isFileModified(openStats, currentStat)) {\n                    Logger.getInstance().error('The file was modified after the driver opened the config file and can no longer be used.');\n                    throw new ConfigurationError('The config file has been modified', 'InvalidConfigFile');\n                }\n            }\n            else {\n                configFileContents = await readFileConfig(fd).catch((err) => {\n                    Logger.getInstance().debug(`Reading configuration from the file failed. Path: ${path}`);\n                    throw new ConfigurationError('Finding client configuration failed', err);\n                });\n            }\n            Logger.getInstance().info('Using client configuration from path: %s', path);\n        }\n        catch (err) {\n            if (err.syscall === 'open') {\n                Logger.getInstance().debug(`Fail to open the configuration file from. Path: ${path}. If the file is a symlink, please change the path to the real path`);\n                throw new ConfigurationError('Fail to open the configuration file', err);\n            }\n            else {\n                throw err;\n            }\n        }\n        finally {\n            await fd?.close();\n        }\n        return configFileContents == null ? null : parseConfigFile(path, configFileContents);\n    };\n    function isFilePermissionValid(mode) {\n        return (mode & (1 << 4)) === 0 && (mode & (1 << 1)) === 0;\n    }\n    function validateOwnership(stats) {\n        const currentUser = os.userInfo();\n        return stats.uid === currentUser.uid && stats.gid === currentUser.gid;\n    }\n    function isFileModified(openStat, newStat) {\n        const keys = ['uid', 'mtimeMs', 'mode', 'birthtimeMs', 'ctimeMs'];\n        return keys.every((key) => openStat[key] === newStat[key]);\n    }\n    async function openFileSafely(filePath) {\n        return fsPromises.open(filePath, fs.constants.O_NOFOLLOW | fs.constants.O_RDONLY);\n    }\n    async function readFileConfig(fd) {\n        return fd.readFile({ encoding: 'utf8' });\n    }\n    function parseConfigFile(path, configurationJson) {\n        Logger.getInstance().debug('Parsing config file: %s', path);\n        try {\n            const parsedConfiguration = JSON.parse(configurationJson);\n            Logger.getInstance().trace('Config file contains correct JSON structure. Validating the input.');\n            checkUnknownEntries(parsedConfiguration);\n            validate(parsedConfiguration);\n            Logger.getInstance().debug('Config file contains valid configuration input.');\n            const clientConfig = new ClientConfig(path, new ClientLoggingConfig(getLogLevel(parsedConfiguration), getLogPath(parsedConfiguration)));\n            Logger.getInstance().info('Client Configuration created with Log Level: %s and Log Path: %s', clientConfig.loggingConfig.logLevel, clientConfig.loggingConfig.logPath);\n            return clientConfig;\n        }\n        catch (err) {\n            Logger.getInstance().error('Parsing client configuration failed. Used config file from path: %s', path);\n            throw new ConfigurationError('Parsing client configuration failed', err);\n        }\n    }\n    function checkUnknownEntries(config) {\n        for (const key in config.common) {\n            if (!knownCommonEntries.includes(key.toLowerCase())) {\n                Logger.getInstance().warn('Unknown configuration entry: %s with value: %s', key, config.common[key]);\n            }\n        }\n    }\n    function validate(configuration) {\n        validateLogLevel(configuration);\n        validateLogPath(configuration);\n    }\n    function validateLogLevel(configuration) {\n        const logLevel = getLogLevel(configuration);\n        if (logLevel == null) {\n            Logger.getInstance().debug('Log level is not specified.');\n            return;\n        }\n        if (!isString(logLevel)) {\n            const errorMessage = 'Log level is not a string.';\n            Logger.getInstance().error(errorMessage);\n            throw new Error(errorMessage);\n        }\n        levelFromString(logLevel);\n    }\n    function validateLogPath(configuration) {\n        const logPath = getLogPath(configuration);\n        if (logPath == null) {\n            Logger.getInstance().debug('Log path is not specified');\n            return;\n        }\n        if (!isString(logPath)) {\n            const errorMessage = 'Log path is not a string.';\n            Logger.getInstance().error(errorMessage);\n            throw new Error(errorMessage);\n        }\n    }\n    function getLogLevel(configuration) {\n        return configuration.common.log_level;\n    }\n    function getLogPath(configuration) {\n        return configuration.common.log_path;\n    }\n    async function findConfig(filePathFromConnectionString) {\n        Logger.getInstance().trace(`findConfig() called with param: ${filePathFromConnectionString}`);\n        if (exists(filePathFromConnectionString)) {\n            Logger.getInstance().info('Found client configuration path in a connection string. Path: %s', filePathFromConnectionString);\n            return filePathFromConnectionString;\n        }\n        const filePathFromEnvVariable = await getFilePathFromEnvironmentVariable();\n        if (exists(filePathFromEnvVariable)) {\n            Logger.getInstance().info('Found client configuration path in an environment variable. Path: %s', filePathFromEnvVariable);\n            return filePathFromEnvVariable;\n        }\n        const fileFromDefDirs = await searchForConfigInDefaultDirectories();\n        if (exists(fileFromDefDirs)) {\n            Logger.getInstance().info('Found client configuration path in %s directory. Path: %s', fileFromDefDirs.dirDescription, fileFromDefDirs.configPath);\n            return fileFromDefDirs.configPath;\n        }\n        Logger.getInstance().info('No client config detected.');\n        return null;\n    }\n    async function verifyNotEmpty(filePath) {\n        return filePath ? filePath : null;\n    }\n    function getFilePathFromEnvironmentVariable() {\n        return verifyNotEmpty(process.env.SF_CLIENT_CONFIG_FILE);\n    }\n    async function searchForConfigInDefaultDirectories() {\n        Logger.getInstance().debug(`Searching for config in default directories: ${JSON.stringify(defaultDirectories)}`);\n        for (const directory of defaultDirectories) {\n            const configPath = await searchForConfigInDictionary(directory.dir, directory.dirDescription);\n            if (exists(configPath)) {\n                Logger.getInstance().debug(`Config found in the default directory: ${directory.dir}. Path: ${configPath}`);\n                return { configPath: configPath, dirDescription: directory.dirDescription };\n            }\n        }\n        Logger.getInstance().debug('Unable to find config in any default directory.');\n        return null;\n    }\n    async function searchForConfigInDictionary(directory, directoryDescription) {\n        try {\n            const filePath = path.join(directory, clientConfigFileName);\n            return await onlyIfFileExists(filePath);\n        }\n        catch (e) {\n            Logger.getInstance().error('Error while searching for the client config in %s directory: %s', directoryDescription, e);\n            return null;\n        }\n    }\n    async function onlyIfFileExists(filePath) {\n        return await fsPromises\n            .access(filePath, fs.constants.F_OK)\n            .then(() => filePath)\n            .catch(() => null);\n    }\n}\nexports.Levels = Levels;\nexports.levelFromString = levelFromString;\nexports.ConfigurationUtil = ConfigurationUtil;\n//# sourceMappingURL=client_configuration.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/dist/lib/configuration/client_configuration.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/dist/lib/configuration/connection_configuration.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/snowflake-sdk/dist/lib/configuration/connection_configuration.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nconst toml = __webpack_require__(/*! toml */ \"(rsc)/./node_modules/toml/index.js\");\nconst os = __webpack_require__(/*! os */ \"os\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst { validateNoExtraPermissionsForOthersSync, generateChecksum } = __webpack_require__(/*! ../file_util */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/file_util.js\");\nconst path = __webpack_require__(/*! path */ \"path\");\nconst Logger = (__webpack_require__(/*! ../logger */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/logger.js\")[\"default\"]);\nconst AuthenticationTypes = __webpack_require__(/*! ../authentication/authentication_types */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/authentication/authentication_types.js\");\nconst Util = __webpack_require__(/*! ../util */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/util.js\");\nfunction defaultIfNotSet(value, defaultValue) {\n    if (value === null || typeof value === 'undefined' || value === '') {\n        return defaultValue;\n    }\n    else {\n        return value;\n    }\n}\nfunction shouldReadTokenFromFile(fixedConfiguration) {\n    return (fixedConfiguration &&\n        fixedConfiguration.authenticator &&\n        fixedConfiguration.authenticator.toUpperCase() === AuthenticationTypes.OAUTH_AUTHENTICATOR &&\n        !Util.string.isNotNullOrEmpty(fixedConfiguration.token));\n}\nfunction readTokenFromFile(fixedConfiguration) {\n    const tokenFilePath = fixedConfiguration.token_file_path\n        ? fixedConfiguration.token_file_path\n        : '/snowflake/session/token';\n    const resolvedPath = fs.realpathSync(tokenFilePath);\n    Logger().trace('Token file path is : %s', tokenFilePath);\n    validateNoExtraPermissionsForOthersSync(resolvedPath);\n    fixedConfiguration.token = fs.readFileSync(resolvedPath, 'utf-8').trim();\n    if (!fixedConfiguration.token) {\n        Logger().error('The token does not exist or has empty value.');\n        throw new Error('The token does not exist or has empty value');\n    }\n    const tokenChecksum = generateChecksum(fixedConfiguration.token);\n    Logger().info('Token used in connection has been read from file: %s. Checksum: %s', resolvedPath, tokenChecksum);\n}\nfunction loadConnectionConfiguration() {\n    Logger().trace('Loading connection configuration from the local files...');\n    const snowflakeConfigDir = defaultIfNotSet(process.env.SNOWFLAKE_HOME, path.join(os.homedir(), '.snowflake'));\n    Logger().trace('Looking for connection file in directory %s', snowflakeConfigDir);\n    const filePath = path.join(snowflakeConfigDir, 'connections.toml');\n    const resolvedPath = fs.realpathSync(filePath);\n    Logger().trace('Connection configuration file found under the path %s. Validating file access.', resolvedPath);\n    validateNoExtraPermissionsForOthersSync(resolvedPath);\n    const str = fs.readFileSync(resolvedPath, { encoding: 'utf8' });\n    const configurationChecksum = generateChecksum(str);\n    Logger().info('Connection configuration file is read from path: %s. Checksum: %s', resolvedPath, configurationChecksum);\n    Logger().trace('Trying to parse the config file');\n    const parsingResult = toml.parse(str);\n    const configurationName = defaultIfNotSet(process.env.SNOWFLAKE_DEFAULT_CONNECTION_NAME, 'default');\n    if (parsingResult[configurationName] !== undefined) {\n        const fixedConfiguration = fixUserKey(parsingResult[configurationName]);\n        if (shouldReadTokenFromFile(fixedConfiguration)) {\n            Logger().info('Trying to read token from config file.');\n            readTokenFromFile(fixedConfiguration);\n        }\n        return fixedConfiguration;\n    }\n    else {\n        Logger().error('Connection configuration with name %s does not exist in the file %s', configurationName, resolvedPath);\n        throw new Error(`Connection configuration with name ${configurationName} does not exist`);\n    }\n}\nfunction fixUserKey(parsingResult) {\n    Logger().trace(\"Empty Username field will be filled with 'User' field value.\");\n    if (parsingResult['username'] === undefined && parsingResult['user'] !== undefined) {\n        parsingResult['username'] = parsingResult['user'];\n    }\n    return parsingResult;\n}\nexports.loadConnectionConfiguration = loadConnectionConfiguration;\n//# sourceMappingURL=connection_configuration.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9kaXN0L2xpYi9jb25maWd1cmF0aW9uL2Nvbm5lY3Rpb25fY29uZmlndXJhdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLGFBQWEsbUJBQU8sQ0FBQyxnREFBTTtBQUMzQixXQUFXLG1CQUFPLENBQUMsY0FBSTtBQUN2QixXQUFXLG1CQUFPLENBQUMsY0FBSTtBQUN2QixRQUFRLDREQUE0RCxFQUFFLG1CQUFPLENBQUMsOEVBQWM7QUFDNUYsYUFBYSxtQkFBTyxDQUFDLGtCQUFNO0FBQzNCLGVBQWUsMEdBQTRCO0FBQzNDLDRCQUE0QixtQkFBTyxDQUFDLGtJQUF3QztBQUM1RSxhQUFhLG1CQUFPLENBQUMsb0VBQVM7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnREFBZ0Qsa0JBQWtCO0FBQ2xFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhEQUE4RCxtQkFBbUI7QUFDakY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DO0FBQ25DIiwic291cmNlcyI6WyIvVXNlcnMvd2FuZ2hhb3RhaS9EZXNrdG9wL2VsdmVubGFiL0hUVi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9kaXN0L2xpYi9jb25maWd1cmF0aW9uL2Nvbm5lY3Rpb25fY29uZmlndXJhdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmNvbnN0IHRvbWwgPSByZXF1aXJlKCd0b21sJyk7XG5jb25zdCBvcyA9IHJlcXVpcmUoJ29zJyk7XG5jb25zdCBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG5jb25zdCB7IHZhbGlkYXRlTm9FeHRyYVBlcm1pc3Npb25zRm9yT3RoZXJzU3luYywgZ2VuZXJhdGVDaGVja3N1bSB9ID0gcmVxdWlyZSgnLi4vZmlsZV91dGlsJyk7XG5jb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuY29uc3QgTG9nZ2VyID0gcmVxdWlyZSgnLi4vbG9nZ2VyJykuZGVmYXVsdDtcbmNvbnN0IEF1dGhlbnRpY2F0aW9uVHlwZXMgPSByZXF1aXJlKCcuLi9hdXRoZW50aWNhdGlvbi9hdXRoZW50aWNhdGlvbl90eXBlcycpO1xuY29uc3QgVXRpbCA9IHJlcXVpcmUoJy4uL3V0aWwnKTtcbmZ1bmN0aW9uIGRlZmF1bHRJZk5vdFNldCh2YWx1ZSwgZGVmYXVsdFZhbHVlKSB7XG4gICAgaWYgKHZhbHVlID09PSBudWxsIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcgfHwgdmFsdWUgPT09ICcnKSB7XG4gICAgICAgIHJldHVybiBkZWZhdWx0VmFsdWU7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxufVxuZnVuY3Rpb24gc2hvdWxkUmVhZFRva2VuRnJvbUZpbGUoZml4ZWRDb25maWd1cmF0aW9uKSB7XG4gICAgcmV0dXJuIChmaXhlZENvbmZpZ3VyYXRpb24gJiZcbiAgICAgICAgZml4ZWRDb25maWd1cmF0aW9uLmF1dGhlbnRpY2F0b3IgJiZcbiAgICAgICAgZml4ZWRDb25maWd1cmF0aW9uLmF1dGhlbnRpY2F0b3IudG9VcHBlckNhc2UoKSA9PT0gQXV0aGVudGljYXRpb25UeXBlcy5PQVVUSF9BVVRIRU5USUNBVE9SICYmXG4gICAgICAgICFVdGlsLnN0cmluZy5pc05vdE51bGxPckVtcHR5KGZpeGVkQ29uZmlndXJhdGlvbi50b2tlbikpO1xufVxuZnVuY3Rpb24gcmVhZFRva2VuRnJvbUZpbGUoZml4ZWRDb25maWd1cmF0aW9uKSB7XG4gICAgY29uc3QgdG9rZW5GaWxlUGF0aCA9IGZpeGVkQ29uZmlndXJhdGlvbi50b2tlbl9maWxlX3BhdGhcbiAgICAgICAgPyBmaXhlZENvbmZpZ3VyYXRpb24udG9rZW5fZmlsZV9wYXRoXG4gICAgICAgIDogJy9zbm93Zmxha2Uvc2Vzc2lvbi90b2tlbic7XG4gICAgY29uc3QgcmVzb2x2ZWRQYXRoID0gZnMucmVhbHBhdGhTeW5jKHRva2VuRmlsZVBhdGgpO1xuICAgIExvZ2dlcigpLnRyYWNlKCdUb2tlbiBmaWxlIHBhdGggaXMgOiAlcycsIHRva2VuRmlsZVBhdGgpO1xuICAgIHZhbGlkYXRlTm9FeHRyYVBlcm1pc3Npb25zRm9yT3RoZXJzU3luYyhyZXNvbHZlZFBhdGgpO1xuICAgIGZpeGVkQ29uZmlndXJhdGlvbi50b2tlbiA9IGZzLnJlYWRGaWxlU3luYyhyZXNvbHZlZFBhdGgsICd1dGYtOCcpLnRyaW0oKTtcbiAgICBpZiAoIWZpeGVkQ29uZmlndXJhdGlvbi50b2tlbikge1xuICAgICAgICBMb2dnZXIoKS5lcnJvcignVGhlIHRva2VuIGRvZXMgbm90IGV4aXN0IG9yIGhhcyBlbXB0eSB2YWx1ZS4nKTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgdG9rZW4gZG9lcyBub3QgZXhpc3Qgb3IgaGFzIGVtcHR5IHZhbHVlJyk7XG4gICAgfVxuICAgIGNvbnN0IHRva2VuQ2hlY2tzdW0gPSBnZW5lcmF0ZUNoZWNrc3VtKGZpeGVkQ29uZmlndXJhdGlvbi50b2tlbik7XG4gICAgTG9nZ2VyKCkuaW5mbygnVG9rZW4gdXNlZCBpbiBjb25uZWN0aW9uIGhhcyBiZWVuIHJlYWQgZnJvbSBmaWxlOiAlcy4gQ2hlY2tzdW06ICVzJywgcmVzb2x2ZWRQYXRoLCB0b2tlbkNoZWNrc3VtKTtcbn1cbmZ1bmN0aW9uIGxvYWRDb25uZWN0aW9uQ29uZmlndXJhdGlvbigpIHtcbiAgICBMb2dnZXIoKS50cmFjZSgnTG9hZGluZyBjb25uZWN0aW9uIGNvbmZpZ3VyYXRpb24gZnJvbSB0aGUgbG9jYWwgZmlsZXMuLi4nKTtcbiAgICBjb25zdCBzbm93Zmxha2VDb25maWdEaXIgPSBkZWZhdWx0SWZOb3RTZXQocHJvY2Vzcy5lbnYuU05PV0ZMQUtFX0hPTUUsIHBhdGguam9pbihvcy5ob21lZGlyKCksICcuc25vd2ZsYWtlJykpO1xuICAgIExvZ2dlcigpLnRyYWNlKCdMb29raW5nIGZvciBjb25uZWN0aW9uIGZpbGUgaW4gZGlyZWN0b3J5ICVzJywgc25vd2ZsYWtlQ29uZmlnRGlyKTtcbiAgICBjb25zdCBmaWxlUGF0aCA9IHBhdGguam9pbihzbm93Zmxha2VDb25maWdEaXIsICdjb25uZWN0aW9ucy50b21sJyk7XG4gICAgY29uc3QgcmVzb2x2ZWRQYXRoID0gZnMucmVhbHBhdGhTeW5jKGZpbGVQYXRoKTtcbiAgICBMb2dnZXIoKS50cmFjZSgnQ29ubmVjdGlvbiBjb25maWd1cmF0aW9uIGZpbGUgZm91bmQgdW5kZXIgdGhlIHBhdGggJXMuIFZhbGlkYXRpbmcgZmlsZSBhY2Nlc3MuJywgcmVzb2x2ZWRQYXRoKTtcbiAgICB2YWxpZGF0ZU5vRXh0cmFQZXJtaXNzaW9uc0Zvck90aGVyc1N5bmMocmVzb2x2ZWRQYXRoKTtcbiAgICBjb25zdCBzdHIgPSBmcy5yZWFkRmlsZVN5bmMocmVzb2x2ZWRQYXRoLCB7IGVuY29kaW5nOiAndXRmOCcgfSk7XG4gICAgY29uc3QgY29uZmlndXJhdGlvbkNoZWNrc3VtID0gZ2VuZXJhdGVDaGVja3N1bShzdHIpO1xuICAgIExvZ2dlcigpLmluZm8oJ0Nvbm5lY3Rpb24gY29uZmlndXJhdGlvbiBmaWxlIGlzIHJlYWQgZnJvbSBwYXRoOiAlcy4gQ2hlY2tzdW06ICVzJywgcmVzb2x2ZWRQYXRoLCBjb25maWd1cmF0aW9uQ2hlY2tzdW0pO1xuICAgIExvZ2dlcigpLnRyYWNlKCdUcnlpbmcgdG8gcGFyc2UgdGhlIGNvbmZpZyBmaWxlJyk7XG4gICAgY29uc3QgcGFyc2luZ1Jlc3VsdCA9IHRvbWwucGFyc2Uoc3RyKTtcbiAgICBjb25zdCBjb25maWd1cmF0aW9uTmFtZSA9IGRlZmF1bHRJZk5vdFNldChwcm9jZXNzLmVudi5TTk9XRkxBS0VfREVGQVVMVF9DT05ORUNUSU9OX05BTUUsICdkZWZhdWx0Jyk7XG4gICAgaWYgKHBhcnNpbmdSZXN1bHRbY29uZmlndXJhdGlvbk5hbWVdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29uc3QgZml4ZWRDb25maWd1cmF0aW9uID0gZml4VXNlcktleShwYXJzaW5nUmVzdWx0W2NvbmZpZ3VyYXRpb25OYW1lXSk7XG4gICAgICAgIGlmIChzaG91bGRSZWFkVG9rZW5Gcm9tRmlsZShmaXhlZENvbmZpZ3VyYXRpb24pKSB7XG4gICAgICAgICAgICBMb2dnZXIoKS5pbmZvKCdUcnlpbmcgdG8gcmVhZCB0b2tlbiBmcm9tIGNvbmZpZyBmaWxlLicpO1xuICAgICAgICAgICAgcmVhZFRva2VuRnJvbUZpbGUoZml4ZWRDb25maWd1cmF0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZml4ZWRDb25maWd1cmF0aW9uO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgTG9nZ2VyKCkuZXJyb3IoJ0Nvbm5lY3Rpb24gY29uZmlndXJhdGlvbiB3aXRoIG5hbWUgJXMgZG9lcyBub3QgZXhpc3QgaW4gdGhlIGZpbGUgJXMnLCBjb25maWd1cmF0aW9uTmFtZSwgcmVzb2x2ZWRQYXRoKTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDb25uZWN0aW9uIGNvbmZpZ3VyYXRpb24gd2l0aCBuYW1lICR7Y29uZmlndXJhdGlvbk5hbWV9IGRvZXMgbm90IGV4aXN0YCk7XG4gICAgfVxufVxuZnVuY3Rpb24gZml4VXNlcktleShwYXJzaW5nUmVzdWx0KSB7XG4gICAgTG9nZ2VyKCkudHJhY2UoXCJFbXB0eSBVc2VybmFtZSBmaWVsZCB3aWxsIGJlIGZpbGxlZCB3aXRoICdVc2VyJyBmaWVsZCB2YWx1ZS5cIik7XG4gICAgaWYgKHBhcnNpbmdSZXN1bHRbJ3VzZXJuYW1lJ10gPT09IHVuZGVmaW5lZCAmJiBwYXJzaW5nUmVzdWx0Wyd1c2VyJ10gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBwYXJzaW5nUmVzdWx0Wyd1c2VybmFtZSddID0gcGFyc2luZ1Jlc3VsdFsndXNlciddO1xuICAgIH1cbiAgICByZXR1cm4gcGFyc2luZ1Jlc3VsdDtcbn1cbmV4cG9ydHMubG9hZENvbm5lY3Rpb25Db25maWd1cmF0aW9uID0gbG9hZENvbm5lY3Rpb25Db25maWd1cmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29ubmVjdGlvbl9jb25maWd1cmF0aW9uLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/dist/lib/configuration/connection_configuration.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/dist/lib/connection/bind_uploader.js":
/*!*************************************************************************!*\
  !*** ./node_modules/snowflake-sdk/dist/lib/connection/bind_uploader.js ***!
  \*************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst Logger = __webpack_require__(/*! ../logger */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/logger.js\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst Statement = __webpack_require__(/*! ./statement */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/connection/statement.js\");\nconst { isString } = __webpack_require__(/*! util */ \"util\");\nconst STAGE_NAME = 'SYSTEM$BIND';\nconst CREATE_STAGE_STMT = 'CREATE OR REPLACE TEMPORARY STAGE ' +\n    STAGE_NAME +\n    \" file_format=( type=csv field_optionally_enclosed_by='\\\"')\";\n/**\n * Creates a new BindUploader.\n *\n * @param {Object} options\n * @param {Object} services\n * @param {Object} connectionConfig\n * @param {*} requestId\n *\n * @constructor\n */\nfunction BindUploader(options, services, connectionConfig, requestId) {\n    const MAX_BUFFER_SIZE = 1024 * 1024 * 100;\n    Logger.getInstance().debug('BindUploaders');\n    this.options = options;\n    this.services = services;\n    this.connectionConfig = connectionConfig;\n    this.requestId = requestId;\n    this.stagePath = '@' + STAGE_NAME + '/' + requestId;\n    Logger.getInstance().debug('token = %s', connectionConfig.getToken());\n    this.createStage = async function () {\n        const createStageOptions = { sqlText: GetCreateStageStmt() };\n        const newContext = Statement.createContext(createStageOptions, this.services, this.connectionConfig);\n        if (this.connectionConfig.getForceStageBindError() === 0) {\n            throw new Error('Failed to create stage');\n        }\n        const ret = await Statement.sendRequest(newContext);\n        if (ret['status'] !== 200) {\n            throw new Error('Failed to create stage');\n        }\n    };\n    this.uploadFilestream = async function (fileName, fileData) {\n        Logger.getInstance().debug('BindUploaders::uploadFilestream');\n        const stageName = this.stagePath;\n        if (stageName == null) {\n            throw new Error('Stage name is null.');\n        }\n        if (fileName == null) {\n            throw new Error('File name is null.');\n        }\n        if (this.connectionConfig.getForceStageBindError() === 1) {\n            throw new Error('Failed to upload file');\n        }\n        await new Promise((resolve, reject) => {\n            const putStmt = 'PUT file://' +\n                fileName +\n                \"'\" +\n                stageName +\n                \"' overwrite=true auto_compress=false source_compression=gzip\";\n            const uploadFileOptions = {\n                sqlText: putStmt,\n                fileStream: fileData,\n                complete: function (err, stmt) {\n                    if (err) {\n                        Logger.getInstance().debug('err ' + err);\n                        reject(err);\n                    }\n                    Logger.getInstance().debug('uploadFiles done ');\n                    resolve(stmt.streamRows());\n                },\n            };\n            Statement.createStatementPreExec(uploadFileOptions, this.services, this.connectionConfig);\n        });\n    };\n    this.Upload = async function (bindings) {\n        Logger.getInstance().debug('BindUploaders::Upload');\n        if (bindings == null) {\n            return null;\n        }\n        if (!this.services.sf.isStageCreated) {\n            await this.createStage();\n            this.services.sf.isStageCreated = true;\n        }\n        let fileCount = 0;\n        let strbuffer = '';\n        for (let i = 0; i < bindings.length; i++) {\n            for (let j = 0; j < bindings[i].length; j++) {\n                if (j > 0) {\n                    strbuffer += ',';\n                }\n                const value = this.csvData(bindings[i][j]);\n                strbuffer += value;\n            }\n            strbuffer += '\\n';\n            if (strbuffer.length >= MAX_BUFFER_SIZE || i === bindings.length - 1) {\n                const fileName = (++fileCount).toString();\n                Logger.getInstance().debug('fileName=' + fileName);\n                await this.uploadFilestream(fileName, strbuffer);\n                strbuffer = '';\n            }\n        }\n    };\n    this.csvData = function (data) {\n        if (data === null) {\n            return '';\n        }\n        if (data.toString() === '') {\n            return '\"\"';\n        }\n        if (!isString(data)) {\n            if (data instanceof Date) {\n                data = data.toJSON();\n            }\n            else {\n                data = JSON.stringify(data);\n            }\n        }\n        if (data.toString().indexOf('\"') >= 0 ||\n            data.toString().indexOf(',') >= 0 ||\n            data.toString().indexOf('\\\\') >= 0 ||\n            data.toString().indexOf('\\n') >= 0 ||\n            data.toString().indexOf('\\t') >= 0) {\n            return '\"' + data.toString().replaceAll('\"', '\"\"') + '\"';\n        }\n        else {\n            return data;\n        }\n    };\n}\nfunction GetCreateStageStmt() {\n    return CREATE_STAGE_STMT;\n}\nfunction GetStageName(requestId) {\n    return '@' + STAGE_NAME + '/' + requestId;\n}\nfunction CleanFile(fileName) {\n    try {\n        if (fs.existsSync(fileName)) {\n            fs.unlinkSync(fileName);\n        }\n    }\n    catch (err) {\n        Logger.getInstance().debug('Delete file failed: %s', fileName);\n    }\n}\nmodule.exports = { BindUploader, GetCreateStageStmt, GetStageName, CleanFile };\n//# sourceMappingURL=bind_uploader.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/dist/lib/connection/bind_uploader.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/dist/lib/connection/connection.js":
/*!**********************************************************************!*\
  !*** ./node_modules/snowflake-sdk/dist/lib/connection/connection.js ***!
  \**********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst { v4: uuidv4 } = __webpack_require__(/*! uuid */ \"(rsc)/./node_modules/snowflake-sdk/node_modules/uuid/dist/esm-node/index.js\");\nconst Url = __webpack_require__(/*! url */ \"url\");\nconst QueryString = __webpack_require__(/*! querystring */ \"querystring\");\nconst QueryStatus = __webpack_require__(/*! ../constants/query_status */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/constants/query_status.js\");\nconst LoggingUtil = __webpack_require__(/*! ../logger/logging_util */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/logger/logging_util.js\");\nconst Util = __webpack_require__(/*! ../util */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/util.js\");\nconst Errors = __webpack_require__(/*! ../errors */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/errors.js\");\nconst ErrorCodes = Errors.codes;\nconst EventEmitter = (__webpack_require__(/*! events */ \"events\").EventEmitter);\nconst Statement = __webpack_require__(/*! ./statement */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/connection/statement.js\");\nconst Parameters = __webpack_require__(/*! ../parameters */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/parameters.js\");\nconst Authenticator = __webpack_require__(/*! ../authentication/authentication */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/authentication/authentication.js\");\nconst AuthenticationTypes = __webpack_require__(/*! ../authentication/authentication_types */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/authentication/authentication_types.js\");\nconst Logger = __webpack_require__(/*! ../logger */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/logger.js\");\nconst { isOktaAuth } = __webpack_require__(/*! ../authentication/authentication */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/authentication/authentication.js\");\nconst { init: initEasyLogging } = __webpack_require__(/*! ../logger/easy_logging_starter */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/logger/easy_logging_starter.js\");\nconst GlobalConfig = __webpack_require__(/*! ../global_config */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/global_config.js\");\nconst { JsonCredentialManager, } = __webpack_require__(/*! ../authentication/secure_storage/json_credential_manager */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/authentication/secure_storage/json_credential_manager.js\");\nconst ExecutionTimer = __webpack_require__(/*! ../logger/execution_timer */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/logger/execution_timer.js\");\n/**\n * Creates a new Connection instance.\n *\n * @param {ConnectionContext} context\n *\n * @returns {Object}\n */\nfunction Connection(context) {\n    // validate input\n    Logger.getInstance().trace('Connection object is being constructed');\n    Errors.assertInternal(Util.isObject(context));\n    const services = context.getServices();\n    const connectionConfig = context.getConnectionConfig();\n    // generate an id for the connection\n    const id = uuidv4();\n    Logger.getInstance().trace('Generated connection id: %s', id);\n    Logger.getInstance().info('Creating Connection[id: %s] with %s, password is %s, region: %s, ' +\n        'authenticator: %s, ocsp mode: %s, os: %s, os version: %s', id, connectionConfig.describeIdentityAttributes(), LoggingUtil.describePresence(connectionConfig.password), connectionConfig.region, connectionConfig.getAuthenticator(), connectionConfig.getClientEnvironment().OCSP_MODE, connectionConfig.getClientEnvironment().OS, connectionConfig.getClientEnvironment().OS_VERSION);\n    // Log was split due to possibility of exceeding the max message length of the logger\n    Logger.getInstance().info('Connection[id: %s] additional details: ' +\n        'passcode in password is %s, passcode is %s, private key is %s, ' +\n        'application: %s, client name: %s, client version: %s, retry timeout: %s, ' +\n        'private key path: %s, private key pass is %s, ' +\n        'client store temporary credential: %s, browser response timeout: %s', id, LoggingUtil.describePresence(connectionConfig.getPasscodeInPassword()), LoggingUtil.describePresence(connectionConfig.getPasscode()), LoggingUtil.describePresence(connectionConfig.getPrivateKey()), connectionConfig.getClientApplication(), connectionConfig.getClientName(), connectionConfig.getClientVersion(), connectionConfig.getRetryTimeout(), connectionConfig.getPrivateKeyPath(), LoggingUtil.describePresence(connectionConfig.getPrivateKeyPass()), connectionConfig.getClientStoreTemporaryCredential(), connectionConfig.getBrowserActionTimeout());\n    // async max retry and retry pattern from python connector\n    const asyncNoDataMaxRetry = 24;\n    const asyncRetryPattern = [1, 1, 2, 3, 4, 8, 10];\n    const asyncRetryInMilliseconds = 500;\n    // Custom regex based on uuid validate\n    // Unable to directly use uuid validate because the queryId returned from the server doesn't match the regex\n    const queryIdRegex = new RegExp(/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i);\n    //Make session tokens available for testing\n    this.getTokens = function () {\n        if (connectionConfig._qaMode) {\n            return services.sf.getConfig() && services.sf.getConfig().tokenInfo;\n        }\n        return {};\n    };\n    /**\n     * Returns true if the connection is active otherwise false\n     *\n     * @returns {boolean}\n     */\n    this.isUp = function () {\n        const isUp = services.sf.isConnected();\n        Logger.getInstance().trace('Connection[id: %s] - isUp called. Returning: %s', this.getId(), isUp);\n        return isUp;\n    };\n    /**\n     * Returns true if the session token and master token are valid\n     *\n     * @returns {boolean}\n     */\n    this.isTokenValid = function () {\n        Logger.getInstance().trace('Connection[id: %s] - isTokenValid called', this.getId());\n        const tokenInfo = services.sf.getConfig().tokenInfo;\n        const sessionTokenExpirationTime = tokenInfo.sessionTokenExpirationTime;\n        const isSessionValid = sessionTokenExpirationTime > Date.now();\n        Logger.getInstance().trace('Connection[id: %s] - isSessionTokenValid: %s', this.getId(), isSessionValid);\n        const masterTokenExpirationTime = tokenInfo.masterTokenExpirationTime;\n        const isMasterValid = masterTokenExpirationTime > Date.now();\n        Logger.getInstance().trace('Connection[id: %s] - isMasterTokenValid: %s', this.getId(), isMasterValid);\n        const areTokensValid = isSessionValid && isMasterValid;\n        Logger.getInstance().trace('Connection[id: %s] - isTokenValid returned: %s', this.getId(), areTokensValid);\n        return areTokensValid;\n    };\n    this.getServiceName = function () {\n        return services.sf.getServiceName();\n    };\n    this.getClientSessionKeepAlive = function () {\n        return services.sf.getClientSessionKeepAlive();\n    };\n    this.getClientSessionKeepAliveHeartbeatFrequency = function () {\n        return services.sf.getClientSessionKeepAliveHeartbeatFrequency();\n    };\n    this.getJsTreatIntegerAsBigInt = function () {\n        return services.sf.getJsTreatIntegerAsBigInt();\n    };\n    /**\n     * Returns the connection id.\n     *\n     * @returns {String}\n     */\n    this.getId = function () {\n        return id;\n    };\n    this.heartbeat = (callback) => {\n        Logger.getInstance().trace('Issuing heartbeat call');\n        const requestId = uuidv4();\n        services.sf.request({\n            method: 'POST',\n            url: Url.format({\n                pathname: '/session/heartbeat',\n                search: QueryString.stringify({\n                    requestId: requestId,\n                }),\n            }),\n            callback: Util.isFunction(callback)\n                ? callback\n                : function (err, body) {\n                    if (err) {\n                        Logger.getInstance().error('Error issuing heartbeat call: %s', err.message);\n                    }\n                    else {\n                        Logger.getInstance().trace('Heartbeat response %s', JSON.stringify(body));\n                    }\n                },\n        });\n    };\n    this.heartbeatAsync = () => {\n        return new Promise((resolve, reject) => {\n            // previous version of driver called `select 1;` which result in `[ { '1': 1 } ]`\n            Logger.getInstance().trace('Issuing async heartbeat call');\n            this.heartbeat((err) => (err ? reject(err) : resolve([{ 1: 1 }])));\n        });\n    };\n    /**\n     * @return {Promise<boolean>}\n     */\n    this.isValidAsync = async () => {\n        Logger.getInstance().trace('Connection[id: %s] - isValidAsync called', this.getId());\n        if (!this.isUp()) {\n            return false;\n        }\n        try {\n            await this.heartbeatAsync();\n            return true;\n        }\n        catch (e) {\n            Logger.getInstance().debug('Connection[id: %s] - heartbeat failed: %s', this.getId(), JSON.stringify(e, Object.getOwnPropertyNames(e)));\n            return false;\n        }\n    };\n    /**\n     * Set the private link as the OCSP cache server's URL.\n     *\n     * @param {String} host\n     *\n     * @returns {null}\n     */\n    this.setupOcspPrivateLink = function (host) {\n        process.env.SF_OCSP_RESPONSE_CACHE_SERVER_URL = Util.createOcspResponseCacheServerUrl(host);\n    };\n    /**\n     * Method returning callback function for connect() - used to establish a connection.\n     *\n     * @param self\n     * @param {Function} callback\n     *\n     * @returns {function}\n     */\n    function connectCallback(self, callback) {\n        return function (err) {\n            if (Parameters.getValue(Parameters.names.CLIENT_SESSION_KEEP_ALIVE)) {\n                const SECONDS_TO_MILLISECONDS_MULTIPLIER = 1000;\n                const KEEP_ALIVE_HEARTBEAT_FREQUENCY_IN_MS = Parameters.getValue(Parameters.names.CLIENT_SESSION_KEEP_ALIVE_HEARTBEAT_FREQUENCY) *\n                    SECONDS_TO_MILLISECONDS_MULTIPLIER;\n                self.keepalive = setInterval(self.heartbeat, KEEP_ALIVE_HEARTBEAT_FREQUENCY_IN_MS, self);\n                Logger.getInstance().trace('Connection[id: %s] - keepAlive internal created', id);\n            }\n            if (Util.isFunction(callback)) {\n                callback(Errors.externalize(err), self);\n            }\n        };\n    }\n    this.determineConnectionDomain = () => connectionConfig.accessUrl && connectionConfig.accessUrl.includes('snowflakecomputing.cn')\n        ? 'CHINA'\n        : 'GLOBAL';\n    /**\n     * Establishes a connection if we aren't in a fatal state.\n     *\n     * @param {Function} callback\n     *\n     * @returns {Object} the connection object.\n     */\n    this.connect = function (callback) {\n        const timer = new ExecutionTimer().start();\n        const connectionDomain = this.determineConnectionDomain();\n        Logger.getInstance().info('Connection[id: %s] - connecting. Associated Snowflake domain: %s', this.getId(), connectionDomain);\n        // invalid callback\n        Errors.checkArgumentValid(!Util.exists(callback) || Util.isFunction(callback), ErrorCodes.ERR_CONN_CONNECT_INVALID_CALLBACK);\n        if (Util.exists(connectionConfig.host) && Util.isPrivateLink(connectionConfig.host)) {\n            Logger.getInstance().info('Connection[id: %s] - setting up private link', this.getId());\n            this.setupOcspPrivateLink(connectionConfig.host);\n        }\n        // connect to the snowflake service and provide our own callback so that\n        // the connection can be passed in when invoking the connection.connect()\n        // callback\n        const self = this;\n        const authenticationType = connectionConfig.getAuthenticator();\n        Logger.getInstance().debug('Connection[id: %s] - using authentication type: %s', this.getId(), authenticationType);\n        // check if authentication type is compatible with connect()\n        // external browser and okta are not compatible with connect() due to their usage of async functions\n        if (authenticationType === AuthenticationTypes.EXTERNAL_BROWSER_AUTHENTICATOR ||\n            isOktaAuth(authenticationType)) {\n            const connectingDuration = timer.getDuration();\n            Logger.getInstance().error('Connection[id: %s] - connecting failed after %s milliseconds.' +\n                'Error: External browser and Okta are not compatible with connection process', this.getId(), connectingDuration);\n            throw Errors.createClientError(ErrorCodes.ERR_CONN_CREATE_INVALID_AUTH_CONNECT);\n        }\n        // Get authenticator to use\n        Logger.getInstance().debug('Connection[id: %s] - retrieving authenticator', this.getId());\n        const auth = services.sf.getAuthenticator();\n        Logger.getInstance().debug('Connection[id: %s] - trying to authenticate', this.getId());\n        auth\n            .authenticate(connectionConfig.getAuthenticator(), connectionConfig.getServiceName(), connectionConfig.account, connectionConfig.username)\n            .then(() => {\n            Logger.getInstance().info('Connection[id: %s] - authentication successful using: %s', this.getId(), connectionConfig.getAuthenticator());\n            // JSON for connection\n            const body = Authenticator.formAuthJSON(connectionConfig.getAuthenticator(), connectionConfig.account, connectionConfig.username, connectionConfig.getClientType(), connectionConfig.getClientVersion(), connectionConfig.getClientEnvironment());\n            // Update JSON body with the authentication values\n            auth.updateBody(body);\n            Logger.getInstance().debug('Connection[id: %s] - initializing easyLogging', this.getId());\n            initEasyLogging(connectionConfig.clientConfigFile).then(() => {\n                Logger.getInstance().debug('Connection[id: %s] - easyLogging initialized', this.getId());\n                try {\n                    Logger.getInstance().debug('Connection[id: %s] - connecting through service', this.getId());\n                    services.sf.connect({\n                        callback: connectCallback(self, callback),\n                        json: body,\n                    });\n                    const connectingDuration = timer.getDuration();\n                    Logger.getInstance().info('Connection[id: %s] - connected successfully after %s milliseconds', this.getId(), connectingDuration);\n                    return this;\n                }\n                catch (e) {\n                    // we don't expect an error here since callback method should be called\n                    const connectingDuration = timer.getDuration();\n                    Logger.getInstance().info('Connection[id: %s] - failed to connect after %s milliseconds. ' +\n                        'Error: Unexpected error from calling connectCallback function in snowflake service - %s', this.getId(), connectingDuration, e);\n                }\n            }, () => {\n                const connectingDuration = timer.getDuration();\n                Logger.getInstance().error('Connection[id: %s] - failed to initialize easyLogging. ' +\n                    'Connecting failed after %s milliseconds', this.getId(), connectingDuration);\n                callback(Errors.createClientError(ErrorCodes.ERR_CONN_CONNECT_INVALID_CLIENT_CONFIG, true), self);\n            });\n        }, (err) => {\n            const connectingDuration = timer.getDuration();\n            Logger.getInstance().error('Connection[id: %s] - authentication failed. Error: %s. ' +\n                'Connecting failed after %s milliseconds', this.getId(), err, connectingDuration);\n            callback(err, self);\n        });\n        return this;\n    };\n    /**\n     * Establishes a connection if we aren't in a fatal state.\n     *\n     * @param {Function} callback\n     *\n     * @returns {Object} the connection object.\n     */\n    this.connectAsync = async function (callback) {\n        const timer = new ExecutionTimer().start();\n        const connectingDomain = this.determineConnectionDomain();\n        Logger.getInstance().info('Connection[id: %s] - async connecting. Associated Snowflake domain: %s', this.getId(), connectingDomain);\n        // invalid callback\n        Errors.checkArgumentValid(!Util.exists(callback) || Util.isFunction(callback), ErrorCodes.ERR_CONN_CONNECT_INVALID_CALLBACK);\n        if (Util.isPrivateLink(connectionConfig.host)) {\n            this.setupOcspPrivateLink(connectionConfig.host);\n            Logger.getInstance().info('Connection[id: %s] - setting up private link', this.getId());\n        }\n        // connect to the snowflake service and provide our own callback so that\n        // the connection can be passed in when invoking the connection.connect()\n        // callback\n        const self = this;\n        if (connectionConfig.getClientStoreTemporaryCredential()) {\n            Logger.getInstance().debug('Connection[id: %s] - storing temporary credential of client', this.getId());\n            const key = Util.buildCredentialCacheKey(connectionConfig.host, connectionConfig.username, AuthenticationTypes.ID_TOKEN_AUTHENTICATOR);\n            if (GlobalConfig.getCredentialManager() === null) {\n                Logger.getInstance().debug('Connection[id: %s] - using default json credential manager', this.getId());\n                GlobalConfig.setCustomCredentialManager(new JsonCredentialManager(connectionConfig.getCredentialCacheDir()));\n            }\n            Logger.getInstance().debug('Connection[id: %s] - reading idToken using credential manager', this.getId());\n            connectionConfig.idToken = await GlobalConfig.getCredentialManager().read(key);\n        }\n        if (connectionConfig.getClientRequestMFAToken()) {\n            Logger.getInstance().debug('Connection[id: %s] - extracting mfaToken of client', this.getId());\n            const key = Util.buildCredentialCacheKey(connectionConfig.host, connectionConfig.username, AuthenticationTypes.USER_PWD_MFA_AUTHENTICATOR);\n            if (GlobalConfig.getCredentialManager() === null) {\n                Logger.getInstance().debug('Connection[id: %s] - using default json credential manager', this.getId());\n                GlobalConfig.setCustomCredentialManager(new JsonCredentialManager(connectionConfig.getCredentialCacheDir()));\n            }\n            Logger.getInstance().debug('Connection[id: %s] - reading mfaToken using credential manager', this.getId());\n            connectionConfig.mfaToken = await GlobalConfig.getCredentialManager().read(key);\n        }\n        // Get authenticator to use\n        let auth;\n        try {\n            Logger.getInstance().debug('Connection[id: %s] - retrieving authenticator', this.getId());\n            auth = Authenticator.getAuthenticator(connectionConfig, context.getHttpClient());\n            services.sf.authenticator = auth;\n        }\n        catch (error) {\n            const connectingDuration = timer.getDuration();\n            Logger.getInstance().error('Connection[id: %s] - failed to initialize authenticator. ' +\n                'Connecting failed after %s milliseconds', this.getId(), connectingDuration);\n            throw Errors.createClientError(ErrorCodes.ERR_CONN_CREATE_INVALID_AUTH_UNSUPPORTED, true);\n        }\n        try {\n            Logger.getInstance().debug('Connection[id: %s] - initializing easyLogging', this.getId());\n            await initEasyLogging(connectionConfig.clientConfigFile);\n        }\n        catch (err) {\n            const connectingDuration = timer.getDuration();\n            Logger.getInstance().error('Connection[id: %s] - failed to initialize easyLogging. ' +\n                'Connecting failed after %s milliseconds', this.getId(), connectingDuration);\n            throw Errors.createClientError(ErrorCodes.ERR_CONN_CONNECT_INVALID_CLIENT_CONFIG, true);\n        }\n        let body = null;\n        try {\n            Logger.getInstance().debug('Connection[id: %s] - using authentication type: %s', this.getId(), connectionConfig.getAuthenticator());\n            Logger.getInstance().debug('Connection[id: %s] - trying to authenticate', this.getId());\n            await auth.authenticate(connectionConfig.getAuthenticator(), connectionConfig.getServiceName(), connectionConfig.account, connectionConfig.username);\n            Logger.getInstance().info('Connection[id: %s] - authentication successful using: %s', this.getId(), connectionConfig.getAuthenticator());\n            // JSON for connection\n            body = Authenticator.formAuthJSON(connectionConfig.getAuthenticator(), connectionConfig.account, connectionConfig.username, connectionConfig.getClientType(), connectionConfig.getClientVersion(), connectionConfig.getClientEnvironment());\n            // Update JSON body with the authentication values\n            auth.updateBody(body);\n        }\n        catch (authErr) {\n            const connectingDuration = timer.getDuration();\n            Logger.getInstance().info('Connection[id: %s] - failed to connect async after %s milliseconds.' +\n                'Failed during authentication. Error: %s', this.getId(), connectingDuration, authErr);\n            Logger.getInstance().error('Connection[id: %s] - failed during authentication. Error: %s', this.getId(), authErr);\n            callback(authErr);\n            return this;\n        }\n        try {\n            // Request connection\n            Logger.getInstance().debug('Connection[id: %s] - connecting through service', this.getId());\n            services.sf.connect({\n                callback: connectCallback(self, callback),\n                json: body,\n            });\n            // return the connection to facilitate chaining\n            const connectingDuration = timer.getDuration();\n            Logger.getInstance().info('Connection[id: %s] - connected successfully after %s milliseconds', this.getId(), connectingDuration);\n        }\n        catch (callbackErr) {\n            const connectingDuration = timer.getDuration();\n            Logger.getInstance().info('Connection[id: %s] - failed to connect async after %s milliseconds.' +\n                'Error: Unexpected error from calling connectCallback function in snowflake service - %s', this.getId(), connectingDuration, callbackErr);\n            callback(callbackErr);\n            return this;\n        }\n        return this;\n    };\n    /**\n     * Executes a statement.\n     *\n     * @param {Object} options\n     *\n     * @returns {Object}\n     */\n    this.execute = function (options) {\n        Logger.getInstance().trace('Connection[id: %s] - execute called with options.', this.getId());\n        return Statement.createStatementPreExec(options, services, connectionConfig);\n    };\n    /**\n     * Fetches the result of a previously issued statement.\n     *\n     * @param {Object} options\n     *\n     * @returns {Object}\n     */\n    this.fetchResult = function (options) {\n        Logger.getInstance().trace('Connection[id: %s] - fetchResult called with options', this.getId());\n        return Statement.createStatementPostExec(options, services, connectionConfig);\n    };\n    /**\n     * Immediately terminates the connection without waiting for currently\n     * executing statements to complete.\n     *\n     * @param {Function} callback\n     *\n     * @returns {Object} the connection object.\n     */\n    this.destroy = function (callback) {\n        // invalid callback\n        Logger.getInstance().trace('Connection[id: %s] - destroy called', this.getId());\n        Errors.checkArgumentValid(!Util.exists(callback) || Util.isFunction(callback), ErrorCodes.ERR_CONN_DESTROY_INVALID_CALLBACK);\n        // log out of the snowflake service and provide our own callback so that\n        // the connection can be passed in when invoking the connection.destroy()\n        // callback\n        Logger.getInstance().trace('Connection[id: %s] - destroying through service', this.getId());\n        const self = this;\n        services.sf.destroy({\n            callback: function (err) {\n                if (Util.exists(self.keepalive)) {\n                    clearInterval(self.keepalive);\n                    Logger.getInstance().trace('Connection[id: %s] - keepAlive interval cleared', self.getId());\n                }\n                if (Util.isFunction(callback)) {\n                    callback(Errors.externalize(err), self);\n                }\n            },\n        });\n        Logger.getInstance().trace('Connection[id: %s] - connection destroyed successfully', this.getId());\n        // return the connection to facilitate chaining\n        return this;\n    };\n    /**\n     * Gets the response containing the status of the query based on queryId.\n     *\n     * @param {String} queryId\n     *\n     * @returns {Object} the query response\n     */\n    async function getQueryResponse(queryId) {\n        Logger.getInstance().trace('Connection[id: %s] - requested query response for Query[id: %s]', id, queryId);\n        // Check if queryId exists and is valid uuid\n        Errors.checkArgumentExists(Util.exists(queryId), ErrorCodes.ERR_CONN_FETCH_RESULT_MISSING_QUERY_ID);\n        Errors.checkArgumentValid(queryIdRegex.test(queryId), ErrorCodes.ERR_GET_RESPONSE_QUERY_INVALID_UUID, queryId);\n        Logger.getInstance().debug('Connection[id: %s] - Query[id: %s] is valid', id, queryId);\n        // Form the request options\n        const options = {\n            method: 'GET',\n            url: Url.format({\n                pathname: `/monitoring/queries/${queryId}`,\n            }),\n        };\n        Logger.getInstance().debug('Connection[id: %s] - fetching query response for Query[id: %s]', id, queryId);\n        const timer = new ExecutionTimer().start();\n        // Get the response containing the query status\n        const response = await services.sf.requestAsync(options);\n        const fetchingDuration = timer.getDuration();\n        Logger.getInstance().debug('Connection[id: %s] - query response for Query[id: %s] fetched successfully after: %s milliseconds', id, queryId, fetchingDuration);\n        return response['data'];\n    }\n    /**\n     * Extracts the status of the query from the query response.\n     *\n     * @param {Object} queryResponse\n     *\n     * @returns {String} the query status.\n     */\n    function extractQueryStatus(queryResponse) {\n        let status = QueryStatus.code.NO_QUERY_DATA; // default status\n        if (!queryResponse || !queryResponse['data'] || !queryResponse['data']['queries']) {\n            Logger.getInstance().trace('Connection[id: %s] - No query data found, returning NO_QUERY_DATA status', id);\n            return status;\n        }\n        const queries = queryResponse['data']['queries'];\n        if (queries.length > 0) {\n            status = queries[0]['status'];\n        }\n        Logger.getInstance().trace('Connection[id: %s] - Extracted query status: %s', id, status);\n        return status;\n    }\n    /**\n     * Gets the status of the query based on queryId.\n     *\n     * @param {String} queryId\n     *\n     * @returns {String} the query status.\n     */\n    this.getQueryStatus = async function (queryId) {\n        Logger.getInstance().trace('Connection[id: %s] - getQueryStatus called for Query[id: %s]', this.getId(), queryId);\n        return extractQueryStatus(await getQueryResponse(queryId));\n    };\n    /**\n     * Gets the status of the query based on queryId and throws if there's an error.\n     *\n     * @param {String} queryId\n     *\n     * @returns {String} the query status.\n     */\n    this.getQueryStatusThrowIfError = async function (queryId) {\n        Logger.getInstance().trace('Connection[id: %s] - getQueryStatusThrowIfError called for Query[id: %s]', this.getId(), queryId);\n        const response = await getQueryResponse(queryId); // returns response['data']\n        const status = extractQueryStatus(response);\n        let sqlState = null;\n        if (this.isAnError(status)) {\n            let message = response['message'] || '';\n            const code = response['code'] || -1;\n            if (response['data']) {\n                message +=\n                    response['data']['queries'].length > 0\n                        ? response['data']['queries'][0]['errorMessage']\n                        : '';\n                sqlState = response['data']['sqlState'];\n            }\n            Logger.getInstance().debug('Connection[id: %s] - query error for Query[id: %s]. Error: %s. SQLState: %s', this.getId(), queryId, message, sqlState);\n            throw Errors.createOperationFailedError(code, response, message, sqlState);\n        }\n        return status;\n    };\n    /**\n     * Gets the results from a previously ran query based on queryId\n     *\n     * @param {Object} options\n     *\n     * @returns {Object}\n     */\n    this.getResultsFromQueryId = async function (options) {\n        const queryId = options.queryId;\n        Logger.getInstance().trace('Connection[id: %s] - getResultsFromQueryId called for Query[id: %s].', this.getId(), queryId);\n        let status, noDataCounter = 0, retryPatternPos = 0;\n        // Wait until query has finished executing\n        let queryStillExecuting = true;\n        while (queryStillExecuting) {\n            Logger.getInstance().trace('Connection[id: %s] - checking if Query[id: %s] is still executing. Retries with no data count: %d', this.getId(), queryId, noDataCounter);\n            // Check if query is still running.\n            // Trigger exception if it failed or there is no query data in the server.\n            status = await this.getQueryStatusThrowIfError(queryId);\n            queryStillExecuting = this.isStillRunning(status);\n            if (!queryStillExecuting || status === QueryStatus.code.NO_QUERY_DATA) {\n                Logger.getInstance().trace('Connection[id: %s] - end of waiting for Query[id: %s] to finish executing. ' +\n                    queryStillExecuting\n                    ? 'Query is no longer executing. '\n                    : 0, this.getId(), queryId, status);\n                break;\n            }\n            // Timeout based on query status retry rules\n            await new Promise((resolve) => {\n                setTimeout(() => resolve(), asyncRetryInMilliseconds * asyncRetryPattern[retryPatternPos]);\n            });\n            // If no data, increment the no data counter\n            if (QueryStatus.code[status] === QueryStatus.code.NO_DATA) {\n                noDataCounter++;\n                Logger.getInstance().trace('Connection[id: %s] - no data returned for Query[id: %s]. Retries with no data count: %d', this.getId(), queryId, noDataCounter);\n                // Check if retry for no data is exceeded\n                if (noDataCounter > asyncNoDataMaxRetry) {\n                    Logger.getInstance().error('Connection[id: %s] - no data returned for Query[id: %s]. Retry limit: %s reached.', this.getId(), queryId, asyncNoDataMaxRetry);\n                    throw Errors.createClientError(ErrorCodes.ERR_GET_RESULTS_QUERY_ID_NO_DATA, true, queryId);\n                }\n            }\n            if (retryPatternPos < asyncRetryPattern.length - 1) {\n                retryPatternPos++;\n            }\n        }\n        if (QueryStatus.code[status] === QueryStatus.code.NO_QUERY_DATA) {\n            Logger.getInstance().error('Connection[id: %s] - Query[id: %s] did not succeed. Final status: %s', this.getId(), queryId, status);\n            throw Errors.createClientError(ErrorCodes.ERR_GET_RESULTS_QUERY_ID_NO_DATA, true, queryId, status);\n        }\n        if (QueryStatus.code[status] !== QueryStatus.code.SUCCESS) {\n            Logger.getInstance().error('Connection[id: %s] - Query[id: %s] did not succeed. Final status: %s', this.getId(), queryId, status);\n            throw Errors.createClientError(ErrorCodes.ERR_GET_RESULTS_QUERY_ID_NOT_SUCCESS_STATUS, true, queryId, status);\n        }\n        Logger.getInstance().debug('Connection[id: %s] - Query[id: %s] succeeded. Fetching the result.', this.getId(), queryId);\n        return this.fetchResult(options);\n    };\n    /**\n     * Checks whether the given status is currently running.\n     *\n     * @param {String} status\n     *\n     * @returns {Boolean}\n     */\n    this.isStillRunning = function (status) {\n        Logger.getInstance().trace('Connection[id: %s] - checking if status %s is still running', this.getId(), status);\n        return QueryStatus.runningStatuses.includes(QueryStatus.code[status]);\n    };\n    /**\n     * Checks whether the given status means that there has been an error.\n     *\n     * @param {String} status\n     *\n     * @returns {Boolean}\n     */\n    this.isAnError = function (status) {\n        return QueryStatus.errorStatuses.includes(QueryStatus.code[status]);\n    };\n    /**\n     * Returns a serialized version of this connection.\n     *\n     * @returns {String}\n     */\n    this.serialize = function () {\n        Logger.getInstance().trace('Connection[id: %s] - serialize called', this.getId());\n        return JSON.stringify(context.getConfig());\n    };\n    EventEmitter.call(this);\n}\nUtil.inherits(Connection, EventEmitter);\nmodule.exports = Connection;\n//# sourceMappingURL=connection.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/dist/lib/connection/connection.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/dist/lib/connection/connection_config.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/snowflake-sdk/dist/lib/connection/connection_config.js ***!
  \*****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst os = __webpack_require__(/*! os */ \"os\");\nconst url = __webpack_require__(/*! url */ \"url\");\nconst Util = __webpack_require__(/*! ../util */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/util.js\");\nconst ProxyUtil = __webpack_require__(/*! ../proxy_util */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/proxy_util.js\");\nconst Errors = __webpack_require__(/*! ../errors */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/errors.js\");\nconst ConnectionConstants = __webpack_require__(/*! ../constants/connection_constants */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/constants/connection_constants.js\");\nconst path = __webpack_require__(/*! path */ \"path\");\nconst ErrorCodes = Errors.codes;\nconst NativeTypes = (__webpack_require__(/*! ./result/data_types */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/connection/result/data_types.js\").NativeTypes);\nconst GlobalConfig = __webpack_require__(/*! ../global_config */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/global_config.js\");\nconst AuthenticationTypes = __webpack_require__(/*! ../authentication/authentication_types */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/authentication/authentication_types.js\");\nconst levenshtein = __webpack_require__(/*! fastest-levenshtein */ \"(rsc)/./node_modules/fastest-levenshtein/esm/mod.js\");\nconst RowMode = __webpack_require__(/*! ./../constants/row_mode */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/constants/row_mode.js\");\nconst DataTypes = __webpack_require__(/*! ./result/data_types */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/connection/result/data_types.js\");\nconst Logger = __webpack_require__(/*! ../logger */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/logger.js\");\nconst { isSnowflakeHost } = __webpack_require__(/*! ../authentication/authentication_util */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/authentication/authentication_util.js\");\nconst WAIT_FOR_BROWSER_ACTION_TIMEOUT = 120000;\nconst SNOWFLAKE_AUTHORIZE_ENDPOINT = '/oauth/authorize';\nconst SNOWFLAKE_TOKEN_REQUEST_ENDPOINT = '/oauth/token-request';\nconst LOCAL_APPLICATION_CLIENT_CREDENTIAL = 'LOCAL_APPLICATION';\nconst DEFAULT_PARAMS = [\n    'account',\n    'application',\n    'region',\n    'host',\n    'accessUrl',\n    'username',\n    'password',\n    'authenticator',\n    'proxyHost',\n    'proxyPort',\n    'serviceName',\n    'privateKey',\n    'privateKeyPath',\n    'privateKeyPass',\n    'token',\n    'warehouse',\n    'database',\n    'schema',\n    'role',\n    'rowMode',\n    'streamResult',\n    'fetchAsString',\n    'clientSessionKeepAlive',\n    'clientSessionKeepAliveHeartbeatFrequency',\n    'jsTreatIntegerAsBigInt',\n    'sessionToken',\n    'masterToken',\n    'sessionTokenExpirationTime',\n    'masterTokenExpirationTime',\n    'agentClass',\n    'validateDefaultParameters',\n    'arrayBindingThreshold',\n    'gcsUseDownscopedCredential',\n    'forceStageBindError',\n    'includeRetryReason',\n    'disableQueryContextCache',\n    'retryTimeout',\n    'clientRequestMFAToken',\n    'clientStoreTemporaryCredential',\n    'disableConsoleLogin',\n    'forceGCPUseDownscopedCredential',\n    'representNullAsStringNull',\n    'disableSamlURLCheck',\n    'credentialCacheDir',\n    'passcodeInPassword',\n    'passcode',\n    'oauthClientId',\n    'oauthClientSecret',\n    'oauthRedirectUri',\n    'oauthAuthorizationUrl',\n    'oauthTokenRequestUrl',\n    'oauthScope',\n    'oauthChallengeMethod',\n    'oauthHttpAllowed', //only for tests\n    'workloadIdentityProvider',\n    'workloadIdentityAzureEntraIdResource',\n    'queryTag',\n    'certRevocationCheckMode',\n    'crlAllowCertificatesWithoutCrlURL',\n    'crlInMemoryCache',\n    'crlOnDiskCache',\n];\nfunction consolidateHostAndAccount(options) {\n    let dotPos = -1;\n    let realAccount = undefined;\n    let realRegion = undefined;\n    const protocol = options.protocol || 'https';\n    const port = Util.exists(options.port) ? Util.format(':%s', options.port) : '';\n    if (Util.exists(options.region)) {\n        Errors.checkArgumentValid(Util.isCorrectSubdomain(options.region), ErrorCodes.ERR_CONN_CREATE_INVALID_REGION_REGEX);\n        realRegion = options.region;\n    }\n    if (Util.exists(options.account)) {\n        Errors.checkArgumentValid(Util.isString(options.account), ErrorCodes.ERR_CONN_CREATE_INVALID_ACCOUNT);\n        Errors.checkArgumentValid(Util.isCorrectSubdomain(options.account), ErrorCodes.ERR_CONN_CREATE_INVALID_ACCOUNT_REGEX);\n        dotPos = options.account.indexOf('.');\n        realAccount = options.account;\n        if (dotPos > 0) {\n            realRegion = realAccount.substring(dotPos + 1);\n            realAccount = realAccount.substring(0, dotPos);\n        }\n    }\n    if (Util.exists(options.accessUrl)) {\n        //accessUrl is set in configuration\n        try {\n            const parsedUrl = url.parse(options.accessUrl);\n            Errors.checkArgumentValid(Util.exists(parsedUrl.hostname), ErrorCodes.ERR_CONN_CREATE_INVALID_ACCESS_URL);\n            if (!Util.exists(options.host)) {\n                options.host = parsedUrl.hostname;\n            }\n            const dotPos = parsedUrl.hostname.indexOf('.');\n            if (dotPos > 0 && !Util.exists(options.account)) {\n                realAccount = parsedUrl.hostname.substring(0, dotPos);\n            }\n        }\n        catch (e) {\n            Errors.checkArgumentValid(false, ErrorCodes.ERR_CONN_CREATE_MISSING_ACCOUNT);\n        }\n    }\n    else if (Util.exists(options.host)) {\n        //host is set in configuration\n        options.accessUrl = Util.format('%s://%s%s', protocol, options.host, port);\n        const dotPos = options.host.indexOf('.');\n        if (dotPos > 0 && !Util.exists(options.account)) {\n            realAccount = options.host.substring(0, dotPos);\n        }\n        else {\n            realAccount = options.account;\n        }\n    }\n    else if (Util.exists(options.account)) {\n        //only account() is set in configuration\n        if (options.region === 'us-west-2') {\n            options.region = '';\n        }\n        options.host = Util.constructHostname(realRegion, realAccount);\n        options.accessUrl = Util.format('%s://%s%s', protocol, options.host, port);\n    }\n    if (Util.exists(realAccount) && options.accessUrl.includes('global.snowflakecomputing')) {\n        const dashPos = realAccount.indexOf('-');\n        if (dashPos > 0) {\n            // global URL\n            realAccount = realAccount.substring(0, dashPos);\n        }\n    }\n    options.account = realAccount;\n    options.region = realRegion;\n    // check for missing accessURL\n    Errors.checkArgumentExists(Util.exists(options.account), ErrorCodes.ERR_CONN_CREATE_MISSING_ACCOUNT);\n    // check for missing account\n    Errors.checkArgumentExists(Util.exists(options.accessUrl), ErrorCodes.ERR_CONN_CREATE_MISSING_ACCESS_URL);\n}\n/**\n * A Connection configuration object that should be available to all stateful\n * objects in the driver.\n *\n * @param {Object} options\n * @param {Boolean} [validateCredentials]\n * @param {Boolean} [qaMode]\n * @param {Object} [clientInfo]\n *\n * @constructor\n */\nfunction ConnectionConfig(options, validateCredentials, qaMode, clientInfo) {\n    // if no value is specified for the validate credentials flag, default to true\n    if (!Util.exists(validateCredentials)) {\n        validateCredentials = true;\n    }\n    // check for missing options\n    Errors.checkArgumentExists(Util.exists(options), ErrorCodes.ERR_CONN_CREATE_MISSING_OPTIONS);\n    // check for invalid options\n    Errors.checkArgumentValid(Util.isObject(options), ErrorCodes.ERR_CONN_CREATE_INVALID_OPTIONS);\n    // only validate credentials if necessary\n    if (validateCredentials) {\n        const noUsernameRequiredFor = [\n            AuthenticationTypes.OAUTH_AUTHENTICATOR,\n            AuthenticationTypes.EXTERNAL_BROWSER_AUTHENTICATOR,\n            AuthenticationTypes.PROGRAMMATIC_ACCESS_TOKEN,\n            AuthenticationTypes.OAUTH_CLIENT_CREDENTIALS,\n            AuthenticationTypes.OAUTH_AUTHORIZATION_CODE,\n            AuthenticationTypes.WORKLOAD_IDENTITY,\n        ];\n        if (!options.authenticator ||\n            !noUsernameRequiredFor.includes(options.authenticator.toUpperCase())) {\n            // check for missing username\n            Errors.checkArgumentExists(Util.exists(options.username), ErrorCodes.ERR_CONN_CREATE_MISSING_USERNAME);\n        }\n        if (Util.exists(options.username)) {\n            // check for invalid username\n            Errors.checkArgumentValid(Util.isString(options.username), ErrorCodes.ERR_CONN_CREATE_INVALID_USERNAME);\n        }\n        // password is only required for default authenticator\n        if (!Util.exists(options.authenticator) ||\n            options.authenticator === AuthenticationTypes.DEFAULT_AUTHENTICATOR) {\n            // check for missing password\n            Errors.checkArgumentExists(Util.exists(options.password), ErrorCodes.ERR_CONN_CREATE_MISSING_PASSWORD);\n            // check for invalid password\n            Errors.checkArgumentValid(Util.isString(options.password), ErrorCodes.ERR_CONN_CREATE_INVALID_PASSWORD);\n        }\n        if (!Util.exists(options.authenticator) ||\n            options.authenticator === AuthenticationTypes.PROGRAMMATIC_ACCESS_TOKEN) {\n            // PASSWORD or TOKEN is needed\n            Errors.checkArgumentExists(Util.exists(options.password) || Util.exists(options.token), ErrorCodes.ERR_CONN_CREATE_MISSING_PASSWORD);\n            if (Util.exists(options.password)) {\n                // check for invalid password\n                Errors.checkArgumentValid(Util.isString(options.password), ErrorCodes.ERR_CONN_CREATE_INVALID_PASSWORD);\n            }\n            if (Util.exists(options.token)) {\n                Errors.checkArgumentValid(Util.isString(options.token), ErrorCodes.ERR_CONN_CREATE_INVALID_OAUTH_TOKEN);\n            }\n        }\n        if (options.authenticator === AuthenticationTypes.OAUTH_AUTHORIZATION_CODE) {\n            if (Util.exists(options.oauthAuthorizationUrl)) {\n                let parsedUrl;\n                try {\n                    parsedUrl = new URL(options.oauthAuthorizationUrl);\n                }\n                catch (error) {\n                    throw Errors.createInvalidParameterError(ErrorCodes.ERR_CONN_CREATE_INVALID_OUATH_AUTHORIZATION_URL);\n                }\n                Errors.checkArgumentValid(parsedUrl.protocol === 'https:' || parsedUrl.protocol === 'http:', ErrorCodes.ERR_CONN_CREATE_INVALID_OUATH_AUTHORIZATION_URL);\n            }\n            if ((options.oauthAuthorizationUrl && !isSnowflakeHost(options.oauthAuthorizationUrl)) ||\n                (options.oauthTokenRequestUrl && !isSnowflakeHost(options.oauthTokenRequestUrl))) {\n                Errors.checkArgumentValid(Util.isString(options.oauthClientId), ErrorCodes.ERR_CONN_CREATE_INVALID_OUATH_CLIENT_ID);\n                Errors.checkArgumentValid(Util.isString(options.oauthClientSecret), ErrorCodes.ERR_CONN_CREATE_INVALID_OUATH_CLIENT_SECRET);\n            }\n        }\n        if (options.authenticator === AuthenticationTypes.OAUTH_CLIENT_CREDENTIALS) {\n            if (Util.exists(options.oauthTokenRequestUrl)) {\n                let parsedUrl;\n                try {\n                    parsedUrl = new URL(options.oauthTokenRequestUrl);\n                }\n                catch (error) {\n                    throw Errors.createInvalidParameterError(ErrorCodes.ERR_CONN_CREATE_INVALID_OUATH_TOKEN_REQUEST_URL);\n                }\n                Errors.checkArgumentValid(parsedUrl.protocol === 'https:' || parsedUrl.protocol === 'http:', ErrorCodes.ERR_CONN_CREATE_INVALID_OUATH_TOKEN_REQUEST_URL);\n            }\n            Errors.checkArgumentValid(Util.isString(options.oauthClientId), ErrorCodes.ERR_CONN_CREATE_INVALID_OUATH_CLIENT_ID);\n            Errors.checkArgumentValid(Util.isString(options.oauthClientSecret), ErrorCodes.ERR_CONN_CREATE_INVALID_OUATH_CLIENT_SECRET);\n        }\n        consolidateHostAndAccount(options);\n    }\n    // check for missing accessUrl\n    Errors.checkArgumentExists(Util.exists(options.accessUrl), ErrorCodes.ERR_CONN_CREATE_MISSING_ACCESS_URL);\n    // check for invalid accessUrl\n    Errors.checkArgumentValid(Util.isString(options.accessUrl), ErrorCodes.ERR_CONN_CREATE_INVALID_ACCESS_URL);\n    const proxyHost = options.proxyHost;\n    const proxyPort = options.proxyPort;\n    const proxyUser = options.proxyUser;\n    const proxyPassword = options.proxyPassword;\n    const proxyProtocol = options.proxyProtocol || 'http';\n    const noProxy = options.noProxy;\n    const useForOCSP = options.useConnectionConfigProxyForOCSP ?? false;\n    let oauthClientId = options.oauthClientId;\n    let oauthClientSecret = options.oauthClientSecret;\n    const oauthRedirectUri = options.oauthRedirectUri;\n    const oauthAuthorizationUrl = options.oauthAuthorizationUrl;\n    const oauthTokenRequestUrl = options.oauthTokenRequestUrl;\n    const oauthChallengeMethod = options.oauthChallengeMethod;\n    const oauthScope = options.oauthScope;\n    const oauthHttpAllowed = options.oauthHttpAllowed;\n    // if we're running in node and some proxy information is specified\n    let proxy;\n    if (Util.isNode() && (Util.exists(proxyHost) || Util.exists(proxyPort))) {\n        proxy = {\n            host: proxyHost,\n            port: proxyPort,\n            user: proxyUser,\n            password: proxyPassword,\n            protocol: proxyProtocol,\n            noProxy: noProxy,\n            useForOCSP: useForOCSP,\n        };\n        ProxyUtil.validateProxy(proxy);\n    }\n    const serviceName = options.serviceName;\n    let authenticator = options.authenticator;\n    // if no value is specified for authenticator, default to Snowflake\n    if (!Util.exists(authenticator)) {\n        authenticator = AuthenticationTypes.DEFAULT_AUTHENTICATOR;\n    }\n    else {\n        authenticator = authenticator.toUpperCase();\n    }\n    let browserActionTimeout = options.browserActionTimeout;\n    if (Util.exists(options.browserActionTimeout)) {\n        Errors.checkArgumentValid(Util.number.isPositiveInteger(browserActionTimeout), ErrorCodes.ERR_CONN_CREATE_INVALID_BROWSER_TIMEOUT);\n    }\n    else {\n        browserActionTimeout = WAIT_FOR_BROWSER_ACTION_TIMEOUT;\n    }\n    const privateKey = options.privateKey;\n    if (Util.exists(options.privateKey)) {\n        Errors.checkArgumentValid(Util.isString(privateKey) && Util.isPrivateKey(privateKey), ErrorCodes.ERR_CONN_CREATE_INVALID_PRIVATE_KEY);\n    }\n    const privateKeyPath = options.privateKeyPath;\n    if (Util.exists(options.privateKeyPath)) {\n        Errors.checkArgumentValid(Util.isString(privateKeyPath), ErrorCodes.ERR_CONN_CREATE_INVALID_PRIVATE_KEY_PATH);\n    }\n    const privateKeyPass = options.privateKeyPass;\n    if (Util.exists(options.privateKeyPass)) {\n        Errors.checkArgumentValid(Util.isString(privateKeyPass), ErrorCodes.ERR_CONN_CREATE_INVALID_PRIVATE_KEY_PASS);\n    }\n    const token = options.token;\n    if (Util.exists(token)) {\n        Errors.checkArgumentValid(Util.isString(token), ErrorCodes.ERR_CONN_CREATE_INVALID_OAUTH_TOKEN);\n    }\n    const warehouse = options.warehouse;\n    const database = options.database;\n    const schema = options.schema;\n    const role = options.role;\n    // check for invalid warehouse\n    if (Util.exists(warehouse)) {\n        Errors.checkArgumentValid(Util.isString(warehouse), ErrorCodes.ERR_CONN_CREATE_INVALID_WAREHOUSE);\n    }\n    // check for invalid database\n    if (Util.exists(database)) {\n        Errors.checkArgumentValid(Util.isString(database), ErrorCodes.ERR_CONN_CREATE_INVALID_DATABASE);\n    }\n    // check for invalid schema\n    if (Util.exists(schema)) {\n        Errors.checkArgumentValid(Util.isString(schema), ErrorCodes.ERR_CONN_CREATE_INVALID_SCHEMA);\n    }\n    // check for invalid role\n    if (Util.exists(role)) {\n        Errors.checkArgumentValid(Util.isString(role), ErrorCodes.ERR_CONN_CREATE_INVALID_ROLE);\n    }\n    // check for invalid streamResult\n    const streamResult = options.streamResult;\n    if (Util.exists(streamResult)) {\n        Errors.checkArgumentValid(Util.isBoolean(streamResult), ErrorCodes.ERR_CONN_CREATE_INVALID_STREAM_RESULT);\n    }\n    // check for invalid fetchAsString\n    const fetchAsString = options.fetchAsString;\n    if (Util.exists(fetchAsString)) {\n        // check that the value is an array\n        Errors.checkArgumentValid(Util.isArray(fetchAsString), ErrorCodes.ERR_CONN_CREATE_INVALID_FETCH_AS_STRING);\n        // check that all the array elements are valid\n        const invalidValueIndex = NativeTypes.findInvalidValue(fetchAsString);\n        Errors.checkArgumentValid(invalidValueIndex === -1, ErrorCodes.ERR_CONN_CREATE_INVALID_FETCH_AS_STRING_VALUES, JSON.stringify(fetchAsString[invalidValueIndex]));\n    }\n    // Row mode is optional, can be undefined\n    const rowMode = options.rowMode;\n    if (Util.exists(rowMode)) {\n        RowMode.checkRowModeValid(rowMode);\n    }\n    // check for invalid clientSessionKeepAlive\n    const clientSessionKeepAlive = options.clientSessionKeepAlive;\n    if (Util.exists(clientSessionKeepAlive)) {\n        Errors.checkArgumentValid(Util.isBoolean(clientSessionKeepAlive), ErrorCodes.ERR_CONN_CREATE_INVALID_KEEP_ALIVE);\n    }\n    // check for invalid clientSessionKeepAliveHeartbeatFrequency\n    let clientSessionKeepAliveHeartbeatFrequency = options.clientSessionKeepAliveHeartbeatFrequency;\n    if (Util.exists(clientSessionKeepAliveHeartbeatFrequency)) {\n        Errors.checkArgumentValid(Util.isNumber(clientSessionKeepAliveHeartbeatFrequency), ErrorCodes.ERR_CONN_CREATE_INVALID_KEEP_ALIVE_HEARTBEAT_FREQ);\n        clientSessionKeepAliveHeartbeatFrequency =\n            Util.validateClientSessionKeepAliveHeartbeatFrequency(clientSessionKeepAliveHeartbeatFrequency, ConnectionConstants.HEARTBEAT_FREQUENCY_MASTER_VALIDITY);\n    }\n    const jsTreatIntegerAsBigInt = options.jsTreatIntegerAsBigInt;\n    if (Util.exists(jsTreatIntegerAsBigInt)) {\n        Errors.checkArgumentValid(Util.isBoolean(jsTreatIntegerAsBigInt), ErrorCodes.ERR_CONN_CREATE_INVALID_TREAT_INTEGER_AS_BIGINT);\n    }\n    const gcsUseDownscopedCredential = options.gcsUseDownscopedCredential;\n    if (Util.exists(gcsUseDownscopedCredential)) {\n        Errors.checkArgumentValid(Util.isBoolean(gcsUseDownscopedCredential), ErrorCodes.ERR_CONN_CREATE_INVALID_GCS_USE_DOWNSCOPED_CREDENTIAL);\n    }\n    const clientConfigFile = options.clientConfigFile;\n    if (Util.exists(clientConfigFile)) {\n        Errors.checkArgumentValid(Util.isString(clientConfigFile), ErrorCodes.ERR_CONN_CREATE_INVALID_CLIENT_CONFIG_FILE);\n    }\n    // remember if we're in qa mode\n    this._qaMode = qaMode;\n    // if a client-info argument is specified, validate it\n    const clientType = 'JavaScript';\n    let clientName;\n    let clientVersion;\n    let clientEnvironment;\n    if (Util.exists(clientInfo)) {\n        Errors.assertInternal(Util.isObject(clientInfo));\n        Errors.assertInternal(Util.isString(clientInfo.version));\n        Errors.assertInternal(Util.isObject(clientInfo.environment));\n        clientName = clientInfo.name;\n        clientVersion = clientInfo.version;\n        clientEnvironment = clientInfo.environment;\n        clientEnvironment.OS = os.platform();\n        clientEnvironment.OS_VERSION = os.release();\n        clientEnvironment.OCSP_MODE = GlobalConfig.getOcspMode();\n    }\n    const clientApplication = options.application;\n    if (Util.exists(clientApplication)) {\n        Errors.checkArgumentValid(Util.isString(clientApplication), ErrorCodes.ERR_CONN_CREATE_INVALID_APPLICATION);\n        const APPLICATION_PATTERN = new RegExp(String.raw `^[A-Za-z]([A-Za-z0-9.\\-_]){1,50}$`, 'gi');\n        Errors.checkArgumentValid(APPLICATION_PATTERN.test(clientApplication), ErrorCodes.ERR_CONN_CREATE_INVALID_APPLICATION);\n    }\n    let validateDefaultParameters = false;\n    if (Util.exists(options.validateDefaultParameters)) {\n        // check for invalid validateDefaultParameters\n        Errors.checkArgumentValid(Util.isBoolean(options.validateDefaultParameters), ErrorCodes.ERR_CONN_CREATE_INVALID_VALIDATE_DEFAULT_PARAMETERS);\n        validateDefaultParameters = options.validateDefaultParameters;\n    }\n    let bindThreshold = null;\n    if (Util.exists(options.arrayBindingThreshold)) {\n        // check for invalid arrayBindingThreshold\n        Errors.checkArgumentValid(Util.isNumber(options.arrayBindingThreshold), ErrorCodes.ERR_CONN_CREATE_INVALID_ARRAY_BINDING_THRESHOLD);\n        bindThreshold = options.arrayBindingThreshold;\n    }\n    let forceStageBindError = null;\n    if (Util.exists(options.forceStageBindError)) {\n        // check for invalid forceStageBindError\n        Errors.checkArgumentValid(Util.isNumber(options.forceStageBindError), ErrorCodes.ERR_CONN_CREATE_INVALID_FORCE_STAGE_BIND_ERROR);\n        forceStageBindError = options.forceStageBindError;\n    }\n    let disableQueryContextCache = false;\n    if (Util.exists(options.disableQueryContextCache)) {\n        Errors.checkArgumentValid(Util.isBoolean(options.disableQueryContextCache), ErrorCodes.ERR_CONN_CREATE_INVALID_DISABLED_QUERY_CONTEXT_CACHE);\n        disableQueryContextCache = options.disableQueryContextCache;\n    }\n    let retryTimeout = 300;\n    if (Util.exists(options.retryTimeout)) {\n        Errors.checkArgumentValid(Util.isNumber(options.retryTimeout), ErrorCodes.ERR_CONN_CREATE_INVALID_MAX_RETRY_TIMEOUT);\n        retryTimeout = options.retryTimeout !== 0 ? Math.max(retryTimeout, options.retryTimeout) : 0;\n    }\n    let includeRetryReason = true;\n    if (Util.exists(options.includeRetryReason)) {\n        Errors.checkArgumentValid(Util.isBoolean(options.includeRetryReason), ErrorCodes.ERR_CONN_CREATE_INVALID_INCLUDE_RETRY_REASON);\n        includeRetryReason = options.includeRetryReason;\n    }\n    let clientRequestMFAToken = false;\n    if (Util.exists(options.clientRequestMFAToken)) {\n        Errors.checkArgumentValid(Util.isBoolean(options.clientRequestMFAToken), ErrorCodes.ERR_CONN_CREATE_INVALID_CLIENT_REQUEST_MFA_TOKEN);\n        clientRequestMFAToken = options.clientRequestMFAToken;\n    }\n    let disableConsoleLogin = true;\n    if (Util.exists(options.disableConsoleLogin)) {\n        Errors.checkArgumentValid(Util.isBoolean(options.disableConsoleLogin), ErrorCodes.ERR_CONN_CREATE_INVALID_DISABLE_CONSOLE_LOGIN);\n        disableConsoleLogin = options.disableConsoleLogin;\n    }\n    if (Util.exists(options.forceGCPUseDownscopedCredential)) {\n        Errors.checkArgumentValid(Util.isBoolean(options.forceGCPUseDownscopedCredential), ErrorCodes.ERR_CONN_CREATE_INVALID_FORCE_GCP_USE_DOWNSCOPED_CREDENTIAL);\n        process.env.SNOWFLAKE_FORCE_GCP_USE_DOWNSCOPED_CREDENTIAL =\n            options.forceGCPUseDownscopedCredential;\n    }\n    else {\n        process.env.SNOWFLAKE_FORCE_GCP_USE_DOWNSCOPED_CREDENTIAL = false;\n    }\n    if (Util.exists(options.representNullAsStringNull)) {\n        Errors.checkArgumentValid(Util.isBoolean(options.representNullAsStringNull), ErrorCodes.ERR_CONN_CREATE_INVALID_REPRESENT_NULL_AS_STRING_NULL);\n        DataTypes.setIsRepresentNullAsStringNull(options.representNullAsStringNull);\n    }\n    let disableSamlURLCheck = false;\n    if (Util.exists(options.disableSamlURLCheck)) {\n        Errors.checkArgumentValid(Util.isBoolean(options.disableSamlURLCheck), ErrorCodes.ERR_CONN_CREATE_INVALID_DISABLE_SAML_URL_CHECK);\n        disableSamlURLCheck = options.disableSamlURLCheck;\n    }\n    let clientStoreTemporaryCredential = false;\n    if (Util.exists(options.clientStoreTemporaryCredential)) {\n        Errors.checkArgumentValid(Util.isBoolean(options.clientStoreTemporaryCredential), ErrorCodes.ERR_CONN_CREATE_INVALID_CLIENT_STORE_TEMPORARY_CREDENTIAL);\n        clientStoreTemporaryCredential = options.clientStoreTemporaryCredential;\n    }\n    let credentialCacheDir = null;\n    if (Util.exists(options.credentialCacheDir)) {\n        const absolutePath = path.resolve(options.credentialCacheDir);\n        Errors.checkArgumentValid(Util.validatePath(absolutePath), ErrorCodes.ERR_CONN_CREATE_INVALID_CREDENTIAL_CACHE_DIR);\n        credentialCacheDir = absolutePath;\n    }\n    let passcodeInPassword = false;\n    if (Util.exists(options.passcodeInPassword)) {\n        Errors.checkArgumentValid(Util.isBoolean(options.passcodeInPassword), ErrorCodes.ERR_CONN_CREATE_INVALID_PASSCODE_IN_PASSWORD);\n        passcodeInPassword = options.passcodeInPassword;\n    }\n    let passcode = null;\n    if (Util.exists(options.passcode)) {\n        Errors.checkArgumentValid(Util.isString(options.passcode), ErrorCodes.ERR_CONN_CREATE_INVALID_PASSCODE);\n        passcode = options.passcode;\n    }\n    if (options.queryTag) {\n        Errors.checkArgumentValid(Util.isString(options.queryTag) && options.queryTag.length <= 2000, ErrorCodes.ERR_CONN_CREATE_INVALID_QUERY_TAG);\n        this.queryTag = options.queryTag;\n    }\n    if (validateDefaultParameters) {\n        for (const [key] of Object.entries(options)) {\n            if (!DEFAULT_PARAMS.includes(key)) {\n                const result = levenshtein.closest(key, DEFAULT_PARAMS);\n                Logger.getInstance().error(`'${key}' is an unknown connection parameter. Did you mean '${result}'?`);\n            }\n        }\n    }\n    /**\n     * Returns an object that contains information about the proxy hostname, port,\n     * etc. for when http requests are made.\n     *\n     * @returns {Object}\n     */\n    this.getProxy = function () {\n        return proxy;\n    };\n    /**\n     * Returns the warehouse to automatically use once a connection has been\n     * established.\n     *\n     * @returns {String}\n     */\n    this.getWarehouse = function () {\n        return warehouse;\n    };\n    /**\n     * Returns the database to automatically use once a connection has been\n     * established.\n     *\n     * @returns {String}\n     */\n    this.getDatabase = function () {\n        return database;\n    };\n    /**\n     * Returns the schema to automatically use once a connection has been\n     * established.\n     *\n     * @returns {String}\n     */\n    this.getSchema = function () {\n        return schema;\n    };\n    /**\n     * Returns the role to automatically use once a connection has been\n     * established.\n     *\n     * @returns {String}\n     */\n    this.getRole = function () {\n        return role;\n    };\n    /**\n     * Returns the service name.\n     *\n     * @returns {String}\n     */\n    this.getServiceName = function () {\n        return serviceName;\n    };\n    /**\n     * Returns the authenticator to use for establishing a connection.\n     *\n     * @returns {String}\n     */\n    this.getAuthenticator = function () {\n        return authenticator;\n    };\n    /**\n     * Returns the timeout in millis used for authentication by external browser.\n     *\n     * @returns {String}\n     */\n    this.getBrowserActionTimeout = function () {\n        return browserActionTimeout;\n    };\n    /**\n     * Returns the private key string.\n     *\n     * @returns {String}\n     */\n    this.getPrivateKey = function () {\n        return privateKey;\n    };\n    /**\n     * Returns the private key file location.\n     *\n     * @returns {String}\n     */\n    this.getPrivateKeyPath = function () {\n        return privateKeyPath;\n    };\n    /**\n     * Returns the private key passphrase.\n     *\n     * @returns {String}\n     */\n    this.getPrivateKeyPass = function () {\n        return privateKeyPass;\n    };\n    /**\n     * Returns the OAuth token.\n     *\n     * @returns {String}\n     */\n    this.getToken = function () {\n        return token;\n    };\n    /**\n     * Returns the streamResult flag.\n     *\n     * @returns {boolean}\n     */\n    this.getStreamResult = function () {\n        return streamResult;\n    };\n    /**\n     * Returns the fetchAsString array.\n     *\n     * @returns {String[]}\n     */\n    this.getFetchAsString = function () {\n        return fetchAsString;\n    };\n    /**\n     * Returns the rowMode string value ('array', 'object' or 'object_with_renamed_duplicated_columns'). Could be null or undefined.\n     *\n     * @returns  {String}\n     */\n    this.getRowMode = function () {\n        return rowMode;\n    };\n    /**\n     * Returns the client type.\n     *\n     * @returns {String}\n     */\n    this.getClientType = function () {\n        return clientType;\n    };\n    /**\n     * Returns the client name.\n     *\n     * @returns {String}\n     */\n    this.getClientName = function () {\n        return clientName;\n    };\n    /**\n     * Returns the client version.\n     *\n     * @returns {String}\n     */\n    this.getClientVersion = function () {\n        return clientVersion;\n    };\n    /**\n     * Returns the client application.\n     *\n     * @returns {String}\n     */\n    this.getClientApplication = function () {\n        return clientApplication;\n    };\n    /**\n     * Returns a JSON object containing version information for all the various\n     * components of the runtime, e.g. node, v8, openssl, etc.\n     *\n     * @returns {Object}\n     */\n    this.getClientEnvironment = function () {\n        return clientEnvironment;\n    };\n    /**\n     * Returns the client session keep alive setting.\n     *\n     * @returns {String}\n     */\n    this.getClientSessionKeepAlive = function () {\n        return clientSessionKeepAlive;\n    };\n    /**\n     * Returns the client session keep alive heartbeat frequency setting.\n     *\n     * @returns {String}\n     */\n    this.getClientSessionKeepAliveHeartbeatFrequency = function () {\n        return clientSessionKeepAliveHeartbeatFrequency;\n    };\n    /**\n     * Returns the client treat integer as setting\n     *\n     * @returns {String}\n     */\n    this.getJsTreatIntegerAsBigInt = function () {\n        return jsTreatIntegerAsBigInt;\n    };\n    /**\n     * Returns the setting for the GCS_USE_DOWNSCOPED_CREDENTIAL session parameter\n     *\n     * @returns {String}\n     */\n    this.getGcsUseDownscopedCredential = function () {\n        return gcsUseDownscopedCredential;\n    };\n    /**\n     * Returns the bind threshold\n     *\n     * @returns {string}\n     */\n    this.getbindThreshold = function () {\n        return bindThreshold;\n    };\n    /**\n     * Returns the force stage bind error\n     *\n     * @returns {string}\n     */\n    this.getForceStageBindError = function () {\n        return forceStageBindError;\n    };\n    /**\n     * Returns whether the Retry reason is included or not in the retry url\n     *\n     * @returns {Boolean}\n     */\n    this.getIncludeRetryReason = function () {\n        return includeRetryReason;\n    };\n    /**\n     * Returns whether the Query Context Cache is enabled or not by the configuration\n     *\n     * @returns {Boolean}\n     */\n    this.getDisableQueryContextCache = function () {\n        return disableQueryContextCache;\n    };\n    /**\n     * Returns the client config file\n     *\n     * @returns {String}\n     */\n    this.getClientConfigFile = function () {\n        return clientConfigFile;\n    };\n    /**\n     * Returns the max login timeout\n     *\n     * @returns {Number}\n     */\n    this.getRetryTimeout = function () {\n        return retryTimeout;\n    };\n    this.getDisableConsoleLogin = function () {\n        return disableConsoleLogin;\n    };\n    /**\n     * Returns whether the SAML URL check is enabled or not.\n     *\n     * @returns {Boolean}\n     */\n    this.getDisableSamlURLCheck = function () {\n        return disableSamlURLCheck;\n    };\n    this.getCredentialCacheDir = function () {\n        return credentialCacheDir;\n    };\n    this.getClientRequestMFAToken = function () {\n        return clientRequestMFAToken;\n    };\n    /**\n     * Returns whether the auth token saves on the local machine or not.\n     *\n     * @returns {Boolean}\n     */\n    this.getClientStoreTemporaryCredential = function () {\n        return clientStoreTemporaryCredential;\n    };\n    this.getPasscodeInPassword = function () {\n        return passcodeInPassword;\n    };\n    this.getPasscode = function () {\n        return passcode;\n    };\n    this.getOauthClientId = function () {\n        if (!Util.isNotEmptyString(options.oauthClientId) &&\n            !Util.isNotEmptyString(options.oauthClientSecret) &&\n            authenticator === AuthenticationTypes.OAUTH_AUTHORIZATION_CODE &&\n            isSnowflakeHost(this.getOauthAuthorizationUrl()) &&\n            isSnowflakeHost(this.getOauthTokenRequestUrl())) {\n            Logger.getInstance().debug(`Using default values for oauthClientId: ${LOCAL_APPLICATION_CLIENT_CREDENTIAL}`);\n            oauthClientId = LOCAL_APPLICATION_CLIENT_CREDENTIAL;\n        }\n        return oauthClientId;\n    };\n    this.getOauthClientSecret = function () {\n        if (!options.oauthClientId &&\n            !options.oauthClientSecret &&\n            authenticator === AuthenticationTypes.OAUTH_AUTHORIZATION_CODE &&\n            isSnowflakeHost(this.getOauthAuthorizationUrl()) &&\n            isSnowflakeHost(this.getOauthTokenRequestUrl())) {\n            Logger.getInstance().debug(`Using default values for oauthClientSecret: ${LOCAL_APPLICATION_CLIENT_CREDENTIAL}`);\n            oauthClientSecret = LOCAL_APPLICATION_CLIENT_CREDENTIAL;\n        }\n        return oauthClientSecret;\n    };\n    this.getOauthAuthorizationUrl = function () {\n        return oauthAuthorizationUrl ?? options.accessUrl + SNOWFLAKE_AUTHORIZE_ENDPOINT;\n    };\n    this.getOauthTokenRequestUrl = function () {\n        return oauthTokenRequestUrl ?? options.accessUrl + SNOWFLAKE_TOKEN_REQUEST_ENDPOINT;\n    };\n    this.getOauthRedirectUri = function () {\n        return oauthRedirectUri;\n    };\n    this.getOauthScope = function () {\n        return oauthScope;\n    };\n    this.getOauthChallengeMethod = function () {\n        return oauthChallengeMethod;\n    };\n    this.getOauthHttpAllowed = function () {\n        return oauthHttpAllowed || false;\n    };\n    /**\n     * Returns attributes of Connection Config object that can be used to identify\n     * the connection, when ID is not available in the scope. This is not sufficient set,\n     * since multiple connections can be instantiated for the same config, but can be treated as a hint.\n     *\n     * @returns {string}\n     */\n    this.describeIdentityAttributes = function () {\n        return (`host: ${this.host}, account: ${this.account}, accessUrl: ${this.accessUrl}, ` +\n            `user: ${this.username}, role: ${this.getRole()}, database: ${this.getDatabase()}, ` +\n            `schema: ${this.getSchema()}, warehouse: ${this.getWarehouse()}, ` +\n            ProxyUtil.describeProxy(this.getProxy()));\n    };\n    // NOTE:\n    // Don't add new get* methods when implementing new options. Use this.optionName instead.\n    // If you need advanced logic in getter, use JS object getters.\n    //\n    // Future plan is to reduce complexity of this file by merging 3 objects into one context:\n    // defaults+options+custom getters = ConnectionConfig\n    this.username = options.username;\n    this.password = options.password;\n    this.accessUrl = options.accessUrl;\n    this.region = options.region;\n    this.account = options.account;\n    this.token = options.token;\n    this.host = options.host;\n    this.sessionToken = options.sessionToken;\n    this.masterToken = options.masterToken;\n    this.masterTokenExpirationTime = options.masterTokenExpirationTime;\n    this.sessionTokenExpirationTime = options.sessionTokenExpirationTime;\n    this.clientConfigFile = options.clientConfigFile;\n    this.openExternalBrowserCallback = options.openExternalBrowserCallback;\n    this.oauthEnableSingleUseRefreshTokens = options.oauthEnableSingleUseRefreshTokens;\n    this.workloadIdentityProvider = options.workloadIdentityProvider;\n    this.workloadIdentityAzureEntraIdResource = options.workloadIdentityAzureEntraIdResource;\n    this.crlValidatorConfig = {\n        checkMode: options.certRevocationCheckMode ?? 'DISABLED',\n        allowCertificatesWithoutCrlURL: options.crlAllowCertificatesWithoutCrlURL ?? false,\n        inMemoryCache: options.crlInMemoryCache ?? true,\n        onDiskCache: options.crlOnDiskCache ?? true,\n    };\n    // create the parameters array\n    const parameters = createParameters();\n    // create a map in which the keys are the parameter names and the values are\n    // the corresponding parameters\n    const mapParameters = {};\n    let index, length, parameter;\n    for (index = 0, length = parameters.length; index < length; index++) {\n        parameter = parameters[index];\n        mapParameters[parameter.name] = parameter;\n        // initialize the value to the default\n        parameter.value = parameter.defaultValue;\n    }\n    // for each property in the options object that matches a known parameter name\n    let propertyName, propertyValue;\n    for (propertyName in options) {\n        if (Object.prototype.hasOwnProperty.call(options, propertyName) &&\n            Object.prototype.hasOwnProperty.call(mapParameters, propertyName)) {\n            // if the parameter matching the property is external and the specified\n            // value is valid for the parameter, update the parameter value\n            propertyValue = options[propertyName];\n            parameter = mapParameters[propertyName];\n            if (parameter.external && parameter.validate(propertyValue)) {\n                parameter.value = propertyValue;\n            }\n        }\n    }\n    // save the parameters map\n    this._mapParameters = mapParameters;\n    // custom agent class, test only\n    this.agentClass = options.agentClass;\n}\n/**\n * Determines if qa-mode is on.\n *\n * @returns {Boolean}\n */\nConnectionConfig.prototype.isQaMode = function () {\n    return this._qaMode;\n};\n/**\n * Clears all credential-related information.\n */\nConnectionConfig.prototype.clearCredentials = function () {\n    // clear the password\n    this.password = null;\n    // TODO: clear passcode and other credential-related information as well\n};\nconst PARAM_TIMEOUT = 'timeout';\nconst PARAM_RESULT_PREFETCH = 'resultPrefetch';\nconst PARAM_RESULT_STREAM_INTERRUPTS = 'resultStreamInterrupts';\nconst PARAM_RESULT_CHUNK_CACHE_SIZE = 'resultChunkCacheSize';\nconst PARAM_RESULT_PROCESSING_BATCH_SIZE = 'resultProcessingBatchSize';\nconst PARAM_RESULT_PROCESSING_BATCH_DURATION = 'resultProcessingBatchDuration';\nconst PARAM_ROW_STREAM_HIGH_WATER_MARK = 'rowStreamHighWaterMark';\nconst PARAM_RETRY_LARGE_RESULT_SET_MAX_NUM_RETRIES = 'largeResultSetRetryMaxNumRetries';\nconst PARAM_RETRY_LARGE_RESULT_SET_MAX_SLEEP_TIME = 'largeResultSetRetryMaxSleepTime';\nconst PARAM_RETRY_SF_MAX_LOGIN_RETRIES = 'sfRetryMaxLoginRetries';\nconst PARAM_RETRY_SF_MAX_NUM_RETRIES = 'sfRetryMaxNumRetries';\nconst PARAM_RETRY_SF_STARTING_SLEEP_TIME = 'sfRetryStartingSleepTime';\nconst PARAM_RETRY_SF_MAX_SLEEP_TIME = 'sfRetryMaxSleepTime';\n/**\n * Creates the list of known parameters. If a parameter is marked as external,\n * its value can be overridden by adding the appropriate name-value mapping to\n * the ConnectionConfig options.\n *\n * @returns {Object[]}\n */\nfunction createParameters() {\n    const isNonNegativeInteger = Util.number.isNonNegativeInteger.bind(Util.number);\n    const isPositiveInteger = Util.number.isPositiveInteger.bind(Util.number);\n    const isNonNegativeNumber = Util.number.isNonNegative.bind(Util.number);\n    return [\n        {\n            name: PARAM_TIMEOUT,\n            defaultValue: 90 * 1000,\n            external: true,\n            validate: isPositiveInteger,\n        },\n        {\n            name: PARAM_RESULT_PREFETCH,\n            defaultValue: 2,\n            external: true,\n            validate: isPositiveInteger,\n        },\n        {\n            name: PARAM_RESULT_STREAM_INTERRUPTS,\n            defaultValue: 3,\n            validate: isPositiveInteger,\n        },\n        // for now we set chunk cache size to 1, which is same as\n        // disabling the chunk cache. Otherwise, cache will explode\n        // memory when fetching large result set\n        {\n            name: PARAM_RESULT_CHUNK_CACHE_SIZE,\n            defaultValue: 1,\n            validate: isPositiveInteger,\n        },\n        {\n            name: PARAM_RESULT_PROCESSING_BATCH_SIZE,\n            defaultValue: 1000,\n            validate: isPositiveInteger,\n        },\n        {\n            name: PARAM_RESULT_PROCESSING_BATCH_DURATION,\n            defaultValue: 100,\n            validate: isPositiveInteger,\n        },\n        {\n            name: PARAM_ROW_STREAM_HIGH_WATER_MARK,\n            defaultValue: 10,\n            validate: isPositiveInteger,\n        },\n        {\n            name: PARAM_RETRY_LARGE_RESULT_SET_MAX_NUM_RETRIES,\n            defaultValue: 10,\n            validate: isNonNegativeInteger,\n        },\n        {\n            name: PARAM_RETRY_LARGE_RESULT_SET_MAX_SLEEP_TIME,\n            defaultValue: 16,\n            validate: isNonNegativeInteger,\n        },\n        {\n            name: PARAM_RETRY_SF_MAX_LOGIN_RETRIES,\n            defaultValue: 7,\n            external: true,\n            validate: isNonNegativeInteger,\n        },\n        {\n            name: PARAM_RETRY_SF_MAX_NUM_RETRIES,\n            defaultValue: 1000,\n            validate: isNonNegativeInteger,\n        },\n        {\n            name: PARAM_RETRY_SF_STARTING_SLEEP_TIME,\n            defaultValue: 1,\n            validate: isNonNegativeNumber,\n        },\n        {\n            name: PARAM_RETRY_SF_MAX_SLEEP_TIME,\n            defaultValue: 16,\n            validate: isNonNegativeNumber,\n        },\n    ];\n}\nConnectionConfig.prototype.getTimeout = function () {\n    return this._getParameterValue(PARAM_TIMEOUT);\n};\nConnectionConfig.prototype.getResultPrefetch = function () {\n    return this._getParameterValue(PARAM_RESULT_PREFETCH);\n};\nConnectionConfig.prototype.getResultStreamInterrupts = function () {\n    return this._getParameterValue(PARAM_RESULT_STREAM_INTERRUPTS);\n};\nConnectionConfig.prototype.getResultChunkCacheSize = function () {\n    return this._getParameterValue(PARAM_RESULT_CHUNK_CACHE_SIZE);\n};\nConnectionConfig.prototype.getResultProcessingBatchSize = function () {\n    return this._getParameterValue(PARAM_RESULT_PROCESSING_BATCH_SIZE);\n};\nConnectionConfig.prototype.getResultProcessingBatchDuration = function () {\n    return this._getParameterValue(PARAM_RESULT_PROCESSING_BATCH_DURATION);\n};\nConnectionConfig.prototype.getRowStreamHighWaterMark = function () {\n    return this._getParameterValue(PARAM_ROW_STREAM_HIGH_WATER_MARK);\n};\nConnectionConfig.prototype.getRetryLargeResultSetMaxNumRetries = function () {\n    return this._getParameterValue(PARAM_RETRY_LARGE_RESULT_SET_MAX_NUM_RETRIES);\n};\nConnectionConfig.prototype.getRetryLargeResultSetMaxSleepTime = function () {\n    return this._getParameterValue(PARAM_RETRY_LARGE_RESULT_SET_MAX_SLEEP_TIME);\n};\nConnectionConfig.prototype.getRetrySfMaxNumRetries = function () {\n    return this._getParameterValue(PARAM_RETRY_SF_MAX_NUM_RETRIES);\n};\nConnectionConfig.prototype.getRetrySfMaxLoginRetries = function () {\n    return this._getParameterValue(PARAM_RETRY_SF_MAX_LOGIN_RETRIES);\n};\nConnectionConfig.prototype.getRetrySfStartingSleepTime = function () {\n    return this._getParameterValue(PARAM_RETRY_SF_STARTING_SLEEP_TIME);\n};\nConnectionConfig.prototype.getRetrySfMaxSleepTime = function () {\n    return this._getParameterValue(PARAM_RETRY_SF_MAX_SLEEP_TIME);\n};\n/**\n * Returns the value of a given connection config parameter.\n *\n * @param parameterName\n *\n * @returns {Object}\n * @private\n */\nConnectionConfig.prototype._getParameterValue = function (parameterName) {\n    const parameter = this._mapParameters[parameterName];\n    return parameter ? parameter.value : undefined;\n};\nmodule.exports = ConnectionConfig;\n//# sourceMappingURL=connection_config.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/dist/lib/connection/connection_config.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/dist/lib/connection/connection_context.js":
/*!******************************************************************************!*\
  !*** ./node_modules/snowflake-sdk/dist/lib/connection/connection_context.js ***!
  \******************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst Util = __webpack_require__(/*! ../util */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/util.js\");\nconst Errors = __webpack_require__(/*! ../errors */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/errors.js\");\nconst SfService = __webpack_require__(/*! ../services/sf */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/services/sf.js\");\nconst LargeResultSetService = __webpack_require__(/*! ../services/large_result_set */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/services/large_result_set.js\");\nconst Logger = __webpack_require__(/*! ../logger */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/logger.js\");\n/**\n * Creates a new ConnectionContext.\n *\n * @param {ConnectionConfig} connectionConfig\n * @param {Object} httpClient\n * @param {Object} config\n *\n * @constructor\n */\nfunction ConnectionContext(connectionConfig, httpClient, config) {\n    // validate input\n    Logger.getInstance().trace('Creating ConnectionContext object.');\n    Errors.assertInternal(Util.isObject(connectionConfig));\n    Errors.assertInternal(Util.isObject(httpClient));\n    // if a config object was specified, verify\n    // that it has all the information we need\n    let sfServiceConfig;\n    if (Util.exists(config)) {\n        Logger.getInstance().trace('ConnectionContext - validating received config.');\n        Errors.assertInternal(Util.isObject(config));\n        Errors.assertInternal(Util.isObject(config.services));\n        Errors.assertInternal(Util.isObject(config.services.sf));\n        sfServiceConfig = config.services.sf;\n    }\n    Logger.getInstance().debug('ConnectionContext - received data was validated.');\n    // create a map that contains all the services we'll be using\n    const services = {\n        sf: new SfService(connectionConfig, httpClient, sfServiceConfig),\n        largeResultSet: new LargeResultSetService(connectionConfig, httpClient),\n    };\n    Logger.getInstance().debug('ConnectionContext - services were instantiated.');\n    /**\n     * Returns the ConnectionConfig for use by the connection.\n     *\n     * @returns {ConnectionConfig}\n     */\n    this.getConnectionConfig = function () {\n        return connectionConfig;\n    };\n    /**\n     * Returns a map that contains all the available services.\n     *\n     * @returns {Object}\n     */\n    this.getServices = function () {\n        return services;\n    };\n    /**\n     * Returns a configuration object that can be passed as an optional argument\n     * to the ConnectionContext constructor to create a new object that has the\n     * same state as this ConnectionContext instance.\n     *\n     * @returns {Object}\n     */\n    this.getConfig = function () {\n        return {\n            services: {\n                sf: services.sf.getConfig(),\n            },\n        };\n    };\n    /**\n     * Returns instance of httpClient\n     *\n     * @returns {NodeHttpClient}\n     */\n    this.getHttpClient = function () {\n        return httpClient;\n    };\n}\nmodule.exports = ConnectionContext;\n//# sourceMappingURL=connection_context.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9kaXN0L2xpYi9jb25uZWN0aW9uL2Nvbm5lY3Rpb25fY29udGV4dC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLGFBQWEsbUJBQU8sQ0FBQyxvRUFBUztBQUM5QixlQUFlLG1CQUFPLENBQUMsd0VBQVc7QUFDbEMsa0JBQWtCLG1CQUFPLENBQUMsa0ZBQWdCO0FBQzFDLDhCQUE4QixtQkFBTyxDQUFDLDhHQUE4QjtBQUNwRSxlQUFlLG1CQUFPLENBQUMsd0VBQVc7QUFDbEM7QUFDQTtBQUNBO0FBQ0EsV0FBVyxrQkFBa0I7QUFDN0IsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvd2FuZ2hhb3RhaS9EZXNrdG9wL2VsdmVubGFiL0hUVi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9kaXN0L2xpYi9jb25uZWN0aW9uL2Nvbm5lY3Rpb25fY29udGV4dC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmNvbnN0IFV0aWwgPSByZXF1aXJlKCcuLi91dGlsJyk7XG5jb25zdCBFcnJvcnMgPSByZXF1aXJlKCcuLi9lcnJvcnMnKTtcbmNvbnN0IFNmU2VydmljZSA9IHJlcXVpcmUoJy4uL3NlcnZpY2VzL3NmJyk7XG5jb25zdCBMYXJnZVJlc3VsdFNldFNlcnZpY2UgPSByZXF1aXJlKCcuLi9zZXJ2aWNlcy9sYXJnZV9yZXN1bHRfc2V0Jyk7XG5jb25zdCBMb2dnZXIgPSByZXF1aXJlKCcuLi9sb2dnZXInKTtcbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBDb25uZWN0aW9uQ29udGV4dC5cbiAqXG4gKiBAcGFyYW0ge0Nvbm5lY3Rpb25Db25maWd9IGNvbm5lY3Rpb25Db25maWdcbiAqIEBwYXJhbSB7T2JqZWN0fSBodHRwQ2xpZW50XG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIENvbm5lY3Rpb25Db250ZXh0KGNvbm5lY3Rpb25Db25maWcsIGh0dHBDbGllbnQsIGNvbmZpZykge1xuICAgIC8vIHZhbGlkYXRlIGlucHV0XG4gICAgTG9nZ2VyLmdldEluc3RhbmNlKCkudHJhY2UoJ0NyZWF0aW5nIENvbm5lY3Rpb25Db250ZXh0IG9iamVjdC4nKTtcbiAgICBFcnJvcnMuYXNzZXJ0SW50ZXJuYWwoVXRpbC5pc09iamVjdChjb25uZWN0aW9uQ29uZmlnKSk7XG4gICAgRXJyb3JzLmFzc2VydEludGVybmFsKFV0aWwuaXNPYmplY3QoaHR0cENsaWVudCkpO1xuICAgIC8vIGlmIGEgY29uZmlnIG9iamVjdCB3YXMgc3BlY2lmaWVkLCB2ZXJpZnlcbiAgICAvLyB0aGF0IGl0IGhhcyBhbGwgdGhlIGluZm9ybWF0aW9uIHdlIG5lZWRcbiAgICBsZXQgc2ZTZXJ2aWNlQ29uZmlnO1xuICAgIGlmIChVdGlsLmV4aXN0cyhjb25maWcpKSB7XG4gICAgICAgIExvZ2dlci5nZXRJbnN0YW5jZSgpLnRyYWNlKCdDb25uZWN0aW9uQ29udGV4dCAtIHZhbGlkYXRpbmcgcmVjZWl2ZWQgY29uZmlnLicpO1xuICAgICAgICBFcnJvcnMuYXNzZXJ0SW50ZXJuYWwoVXRpbC5pc09iamVjdChjb25maWcpKTtcbiAgICAgICAgRXJyb3JzLmFzc2VydEludGVybmFsKFV0aWwuaXNPYmplY3QoY29uZmlnLnNlcnZpY2VzKSk7XG4gICAgICAgIEVycm9ycy5hc3NlcnRJbnRlcm5hbChVdGlsLmlzT2JqZWN0KGNvbmZpZy5zZXJ2aWNlcy5zZikpO1xuICAgICAgICBzZlNlcnZpY2VDb25maWcgPSBjb25maWcuc2VydmljZXMuc2Y7XG4gICAgfVxuICAgIExvZ2dlci5nZXRJbnN0YW5jZSgpLmRlYnVnKCdDb25uZWN0aW9uQ29udGV4dCAtIHJlY2VpdmVkIGRhdGEgd2FzIHZhbGlkYXRlZC4nKTtcbiAgICAvLyBjcmVhdGUgYSBtYXAgdGhhdCBjb250YWlucyBhbGwgdGhlIHNlcnZpY2VzIHdlJ2xsIGJlIHVzaW5nXG4gICAgY29uc3Qgc2VydmljZXMgPSB7XG4gICAgICAgIHNmOiBuZXcgU2ZTZXJ2aWNlKGNvbm5lY3Rpb25Db25maWcsIGh0dHBDbGllbnQsIHNmU2VydmljZUNvbmZpZyksXG4gICAgICAgIGxhcmdlUmVzdWx0U2V0OiBuZXcgTGFyZ2VSZXN1bHRTZXRTZXJ2aWNlKGNvbm5lY3Rpb25Db25maWcsIGh0dHBDbGllbnQpLFxuICAgIH07XG4gICAgTG9nZ2VyLmdldEluc3RhbmNlKCkuZGVidWcoJ0Nvbm5lY3Rpb25Db250ZXh0IC0gc2VydmljZXMgd2VyZSBpbnN0YW50aWF0ZWQuJyk7XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgQ29ubmVjdGlvbkNvbmZpZyBmb3IgdXNlIGJ5IHRoZSBjb25uZWN0aW9uLlxuICAgICAqXG4gICAgICogQHJldHVybnMge0Nvbm5lY3Rpb25Db25maWd9XG4gICAgICovXG4gICAgdGhpcy5nZXRDb25uZWN0aW9uQ29uZmlnID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gY29ubmVjdGlvbkNvbmZpZztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBtYXAgdGhhdCBjb250YWlucyBhbGwgdGhlIGF2YWlsYWJsZSBzZXJ2aWNlcy5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAgICovXG4gICAgdGhpcy5nZXRTZXJ2aWNlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHNlcnZpY2VzO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIGNvbmZpZ3VyYXRpb24gb2JqZWN0IHRoYXQgY2FuIGJlIHBhc3NlZCBhcyBhbiBvcHRpb25hbCBhcmd1bWVudFxuICAgICAqIHRvIHRoZSBDb25uZWN0aW9uQ29udGV4dCBjb25zdHJ1Y3RvciB0byBjcmVhdGUgYSBuZXcgb2JqZWN0IHRoYXQgaGFzIHRoZVxuICAgICAqIHNhbWUgc3RhdGUgYXMgdGhpcyBDb25uZWN0aW9uQ29udGV4dCBpbnN0YW5jZS5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAgICovXG4gICAgdGhpcy5nZXRDb25maWcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzZXJ2aWNlczoge1xuICAgICAgICAgICAgICAgIHNmOiBzZXJ2aWNlcy5zZi5nZXRDb25maWcoKSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGluc3RhbmNlIG9mIGh0dHBDbGllbnRcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtOb2RlSHR0cENsaWVudH1cbiAgICAgKi9cbiAgICB0aGlzLmdldEh0dHBDbGllbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBodHRwQ2xpZW50O1xuICAgIH07XG59XG5tb2R1bGUuZXhwb3J0cyA9IENvbm5lY3Rpb25Db250ZXh0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29ubmVjdGlvbl9jb250ZXh0LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/dist/lib/connection/connection_context.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/dist/lib/connection/result/chunk.js":
/*!************************************************************************!*\
  !*** ./node_modules/snowflake-sdk/dist/lib/connection/result/chunk.js ***!
  \************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst EventEmitter = (__webpack_require__(/*! events */ \"events\").EventEmitter);\nconst Util = __webpack_require__(/*! ../../util */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/util.js\");\nconst Errors = __webpack_require__(/*! ../../errors */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/errors.js\");\n/**\n * Creates a new Chunk.\n *\n * @param options\n * @constructor\n */\nfunction Chunk(options) {\n    // make sure the options object contains all the necessary information\n    Errors.assertInternal(Util.isObject(options));\n    Errors.assertInternal(Util.isObject(options.statement));\n    Errors.assertInternal(Util.isObject(options.services));\n    Errors.assertInternal(Util.isNumber(options.startIndex));\n    Errors.assertInternal(Util.isArray(options.columns));\n    Errors.assertInternal(Util.isObject(options.mapColumnNameToIndices));\n    Errors.assertInternal(Util.isObject(options.statementParameters));\n    Errors.assertInternal(Util.isString(options.resultVersion));\n    Errors.assertInternal(Util.isNumber(options.rowCount));\n    // if the result is small (i.e. not persisted on S3/Blob), there's no\n    // compressed and uncompressed size, so default to -1\n    this._compressedSize = options.compressedSize || -1;\n    this._uncompressedSize = options.uncompressedSize || -1;\n    // copy out other information from the options object and save it\n    this._statement = options.statement;\n    this._services = options.services;\n    this._startIndex = options.startIndex;\n    this._url = options.url;\n    this._columns = options.columns;\n    this._mapColumnNameToIndices = options.mapColumnNameToIndices;\n    this._chunkHeaders = options.chunkHeaders;\n    this._rowset = options.rowset;\n    // use the start index and row count to compute the end index\n    this._endIndex = this._startIndex + options.rowCount - 1;\n    // use the start and end index to build an id for this chunk\n    this._id = buildId(this._startIndex, this._endIndex);\n}\nUtil.inherits(Chunk, EventEmitter);\n/**\n * Returns the compressed size of this chunk's contents on S3/Blob.\n * A value of -1 means the contents of this chunk are not stored on S3/Blob.\n *\n * @returns {Number}\n */\nChunk.prototype.getCompressedSize = function () {\n    return this._compressedSize;\n};\n/**\n * Returns the uncompressed size of this chunk's contents on S3/Blob.\n * A value of -1 means the contents of this chunk are not stored on S3/Blob.\n *\n * @returns {Number}\n */\nChunk.prototype.getUncompressedSize = function () {\n    return this._uncompressedSize;\n};\n/**\n * Returns the row index of the first row in this chunk.\n *\n * @returns {Number}\n */\nChunk.prototype.getStartIndex = function () {\n    return this._startIndex;\n};\n/**\n * Returns the row index of the last row in this chunk.\n *\n * @returns {Number}\n */\nChunk.prototype.getEndIndex = function () {\n    return this._endIndex;\n};\n/**\n * Returns the id of this chunk.\n *\n * @returns {String}\n */\nChunk.prototype.getId = function () {\n    return this._id;\n};\n/**\n * Determines if this chunk overlaps with a given window.\n *\n * @param {Number} start The start index of the window.\n * @param {Number} end The end index of the window.\n *\n * @returns {Boolean}\n */\nChunk.prototype.overlapsWithWindow = function (start, end) {\n    const chunkStart = this._startIndex, chunkEnd = this._endIndex;\n    // check if the window overlaps with the chunk from the left or\n    // from the right or from both sides\n    return ((end <= chunkEnd && end >= chunkStart) ||\n        (start >= chunkStart && start <= chunkEnd) ||\n        (start <= chunkStart && end >= chunkEnd));\n};\n/**\n * Returns the rows in this chunk.\n *\n * @returns {Object[]}\n */\nChunk.prototype.getRows = function () {\n    // if we don't already have a valid value for the rows\n    if (!Util.isArray(this._rows)) {\n        // if we have a string version of the rowset\n        if (Util.string.isNotNullOrEmpty(this._rowsetAsString)) {\n            // add square brackets on either side and do a json-parse to get the\n            // rowset\n            this._rowset = JSON.parse('[' + this._rowsetAsString + ']');\n            // we don't need the string version of the rowset anymore\n            this._rowsetAsString = undefined;\n        }\n        // if we have a valid value for the rowset\n        if (Util.isArray(this._rowset)) {\n            // convert the rowset to an array of rows\n            this._rows = convertRowsetToRows(this._statement, this._startIndex, this._rowset, this._columns, this._mapColumnNameToIndices);\n            // clear out the rowset because we don't need it anymore\n            this._rowset = undefined;\n        }\n    }\n    return this._rows;\n};\n/**\n * Clears out the rows in this chunk if it has a valid url or if the force flag\n * is true.\n *\n * @param force\n */\nChunk.prototype.clearRows = function (force) {\n    if (Util.string.isNotNullOrEmpty(this._url) || force) {\n        // clear out all row and rowset related fields\n        this._rowsetAsString = this._rowset = this._rows = undefined;\n    }\n};\n/**\n * Updates this chunk's url.\n *\n * @param url\n */\nChunk.prototype.setUrl = function (url) {\n    this._url = url;\n};\n/**\n * Returns true if this chunk's contents are loaded, false otherwise.\n *\n * @returns {Boolean}\n */\nChunk.prototype.isLoaded = function () {\n    // the chunk is considered loaded if we have valid values for\n    // _rowsetAsString, _rowset or _rows\n    return (Util.string.isNotNullOrEmpty(this._rowsetAsString) ||\n        Util.isArray(this._rowset) ||\n        Util.isArray(this._rows));\n};\n/**\n * Returns true if this chunk is currently in the process of loading its\n * contents, false otherwise.\n *\n * @returns {Boolean}\n */\nChunk.prototype.isLoading = function () {\n    return this._isLoading;\n};\n/**\n * Loads the contents of this chunk.\n *\n * @param callback\n */\nChunk.prototype.load = function (callback) {\n    // we've started loading\n    this._isLoading = true;\n    const self = this;\n    /**\n     * Completes the chunk load.\n     *\n     * @param err\n     */\n    const completeLoad = function (err) {\n        // we're done loading\n        self._isLoading = false;\n        // emit an event to notify subscribers\n        self.emit('loadcomplete', err, self);\n        // invoke the callback if one was specified\n        if (Util.isFunction(callback)) {\n            callback(err, self);\n        }\n    };\n    // If the chunk is already loaded, complete the load asynchronously.\n    // This ensure that we are streaming chunks the right order even if the data was received before\n    // another chunk.\n    if (this.isLoaded()) {\n        process.nextTick(completeLoad);\n    }\n    else {\n        // issue a request to load the chunk's contents from S3/Blob\n        this._services.largeResultSet.getObject({\n            url: this._url,\n            headers: this._chunkHeaders,\n            callback: function (err, body) {\n                // if the request succeeded, save the\n                // body as a string version of the rowset\n                if (!err) {\n                    self._rowsetAsString = body;\n                }\n                // complete the load\n                completeLoad(err);\n            },\n        });\n    }\n};\n/**\n * Builds an id for a chunk from its start and end index.\n *\n * @param startIndex The row index of the first chunk row.\n * @param endIndex The row index of the last chunk row.\n *\n * @returns {String}\n * @private\n */\nfunction buildId(startIndex, endIndex) {\n    return Util.format('s=%d, e=%d', startIndex, endIndex);\n}\n/**\n * Converts a rowset to an array of records.\n *\n * @param statement\n * @param startIndex the chunk start index.\n * @param rowset\n * @param columns\n * @param mapColumnNameToIndices\n *\n * @returns {Array}\n * @private\n */\nfunction convertRowsetToRows(statement, startIndex, rowset, columns, mapColumnNameToIndices) {\n    // assert that rowset and columns are arrays\n    Errors.assertInternal(Util.isArray(rowset));\n    Errors.assertInternal(Util.isArray(columns));\n    ///////////////////////////////////////////////////////////////////////////\n    ////     Create functions that will be used as row methods             ////\n    ///////////////////////////////////////////////////////////////////////////\n    /**\n     * Returns the index of this row in the result.\n     *\n     * @returns {Number}\n     */\n    const getRowIndex = function () {\n        return this.rowIndex;\n    };\n    /**\n     * Returns the statement that produced this row.\n     *\n     * @returns {*}\n     */\n    const getStatement = function getStatement() {\n        return statement;\n    };\n    /**\n     * Returns the value of a column.\n     *\n     * @param {String | Number} columnIdentifier this can be either the column\n     *   name or the column index.\n     *\n     * @returns {*}\n     */\n    const getColumnValue = function getColumnValue(columnIdentifier) {\n        // resolve the column identifier to the correct column if possible\n        const column = resolveColumnIdentifierToColumn(columns, columnIdentifier, mapColumnNameToIndices);\n        return column ? column.getRowValue(this) : undefined;\n    };\n    /**\n     * Returns the value of a column as a String.\n     *\n     * @param {String | Number} columnIdentifier this can be either the column\n     *   name or the column index.\n     *\n     * @returns {*}\n     */\n    const getColumnValueAsString = function getColumnValueAsString(columnIdentifier) {\n        // resolve the column identifier to the correct column if possible\n        const column = resolveColumnIdentifierToColumn(columns, columnIdentifier, mapColumnNameToIndices);\n        return column ? column.getRowValueAsString(this) : undefined;\n    };\n    ///////////////////////////////////////////////////////////////////////////\n    ////     Convert the rowset to an array of row objects                 ////\n    ///////////////////////////////////////////////////////////////////////////\n    // create a new array to store the processed rows\n    const length = rowset.length;\n    const rows = new Array(length);\n    for (let index = 0; index < length; index++) {\n        // add a new item to the rows array\n        rows[index] = {\n            _arrayProcessedColumns: [],\n            values: rowset[index],\n            rowIndex: startIndex + index,\n            getRowIndex: getRowIndex,\n            getStatement: getStatement,\n            getColumnValue: getColumnValue,\n            getColumnValueAsString: getColumnValueAsString,\n        };\n    }\n    return rows;\n}\n/**\n * Resolves a column identifier to the corresponding column if possible. The\n * column identifier can be a column name or a column index. If an invalid\n * column identifier is specified, we return undefined.\n *\n * @param {Object[]} columns\n * @param {String | Number} columnIdentifier\n * @param {Object} mapColumnNameToIndices\n *\n * @returns {*}\n */\nfunction resolveColumnIdentifierToColumn(columns, columnIdentifier, mapColumnNameToIndices) {\n    let columnIndex;\n    // if the column identifier is a string, treat it as a column\n    // name and use it to get the index of the specified column\n    if (Util.isString(columnIdentifier)) {\n        // if a valid column name was specified, get the index of the first column\n        // with the specified name\n        if (Object.prototype.hasOwnProperty.call(mapColumnNameToIndices, columnIdentifier)) {\n            columnIndex = mapColumnNameToIndices[columnIdentifier][0];\n        }\n    }\n    else if (Util.isNumber(columnIdentifier)) {\n        // if the column identifier is a number, treat it as a column index\n        columnIndex = columnIdentifier;\n    }\n    return columns[columnIndex];\n}\nmodule.exports = Chunk;\n//# sourceMappingURL=chunk.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/dist/lib/connection/result/chunk.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/dist/lib/connection/result/chunk_cache.js":
/*!******************************************************************************!*\
  !*** ./node_modules/snowflake-sdk/dist/lib/connection/result/chunk_cache.js ***!
  \******************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst DoublyLinkedList = __webpack_require__(/*! ./doubly_linked_list */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/connection/result/doubly_linked_list.js\");\n/**\n * An LRU cache used to store chunks.\n *\n * !! This cache is not fully implemented and not used at this time !!\n *\n * @param capacity the cache size in terms of the number of chunks.\n * @constructor\n */\nfunction ChunkCache(capacity) {\n    this._capacity = capacity;\n    // create a map and a doubly linked list to track the cached chunks\n    this._map = {};\n    this._list = new DoublyLinkedList();\n}\n/**\n * Adds a chunk to the cache.\n *\n * @param chunk\n */\nChunkCache.prototype.put = function (chunk) {\n    let evictedNode;\n    let evictedChunk;\n    const map = this._map;\n    const list = this._list;\n    const chunkId = chunk.getId();\n    // if we already have the chunk in the cache, remove the corresponding node\n    // from the list\n    if (Object.prototype.hasOwnProperty.call(map, chunkId) && map[chunkId]) {\n        list.remove(map[chunkId]);\n    }\n    // append the chunk to the list and put the corresponding node in the map\n    map[chunkId] = list.insertEnd(chunk);\n    // if we've exceeded the cache capacity\n    if (list.getLength() > this._capacity) {\n        // remove the current head of the list\n        evictedNode = list.getHead();\n        list.remove(evictedNode);\n        // evict the chunk associated with the removed node\n        evictedChunk = evictedNode.getValue();\n        delete map[evictedChunk.getId()];\n        // clear the rows from the evicted chunk\n        // TODO: should the force flag be set to true here?\n        evictedChunk.clearRows();\n    }\n};\nmodule.exports = ChunkCache;\n//# sourceMappingURL=chunk_cache.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9kaXN0L2xpYi9jb25uZWN0aW9uL3Jlc3VsdC9jaHVua19jYWNoZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLHlCQUF5QixtQkFBTyxDQUFDLGlIQUFzQjtBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvd2FuZ2hhb3RhaS9EZXNrdG9wL2VsdmVubGFiL0hUVi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9kaXN0L2xpYi9jb25uZWN0aW9uL3Jlc3VsdC9jaHVua19jYWNoZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmNvbnN0IERvdWJseUxpbmtlZExpc3QgPSByZXF1aXJlKCcuL2RvdWJseV9saW5rZWRfbGlzdCcpO1xuLyoqXG4gKiBBbiBMUlUgY2FjaGUgdXNlZCB0byBzdG9yZSBjaHVua3MuXG4gKlxuICogISEgVGhpcyBjYWNoZSBpcyBub3QgZnVsbHkgaW1wbGVtZW50ZWQgYW5kIG5vdCB1c2VkIGF0IHRoaXMgdGltZSAhIVxuICpcbiAqIEBwYXJhbSBjYXBhY2l0eSB0aGUgY2FjaGUgc2l6ZSBpbiB0ZXJtcyBvZiB0aGUgbnVtYmVyIG9mIGNodW5rcy5cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBDaHVua0NhY2hlKGNhcGFjaXR5KSB7XG4gICAgdGhpcy5fY2FwYWNpdHkgPSBjYXBhY2l0eTtcbiAgICAvLyBjcmVhdGUgYSBtYXAgYW5kIGEgZG91Ymx5IGxpbmtlZCBsaXN0IHRvIHRyYWNrIHRoZSBjYWNoZWQgY2h1bmtzXG4gICAgdGhpcy5fbWFwID0ge307XG4gICAgdGhpcy5fbGlzdCA9IG5ldyBEb3VibHlMaW5rZWRMaXN0KCk7XG59XG4vKipcbiAqIEFkZHMgYSBjaHVuayB0byB0aGUgY2FjaGUuXG4gKlxuICogQHBhcmFtIGNodW5rXG4gKi9cbkNodW5rQ2FjaGUucHJvdG90eXBlLnB1dCA9IGZ1bmN0aW9uIChjaHVuaykge1xuICAgIGxldCBldmljdGVkTm9kZTtcbiAgICBsZXQgZXZpY3RlZENodW5rO1xuICAgIGNvbnN0IG1hcCA9IHRoaXMuX21hcDtcbiAgICBjb25zdCBsaXN0ID0gdGhpcy5fbGlzdDtcbiAgICBjb25zdCBjaHVua0lkID0gY2h1bmsuZ2V0SWQoKTtcbiAgICAvLyBpZiB3ZSBhbHJlYWR5IGhhdmUgdGhlIGNodW5rIGluIHRoZSBjYWNoZSwgcmVtb3ZlIHRoZSBjb3JyZXNwb25kaW5nIG5vZGVcbiAgICAvLyBmcm9tIHRoZSBsaXN0XG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtYXAsIGNodW5rSWQpICYmIG1hcFtjaHVua0lkXSkge1xuICAgICAgICBsaXN0LnJlbW92ZShtYXBbY2h1bmtJZF0pO1xuICAgIH1cbiAgICAvLyBhcHBlbmQgdGhlIGNodW5rIHRvIHRoZSBsaXN0IGFuZCBwdXQgdGhlIGNvcnJlc3BvbmRpbmcgbm9kZSBpbiB0aGUgbWFwXG4gICAgbWFwW2NodW5rSWRdID0gbGlzdC5pbnNlcnRFbmQoY2h1bmspO1xuICAgIC8vIGlmIHdlJ3ZlIGV4Y2VlZGVkIHRoZSBjYWNoZSBjYXBhY2l0eVxuICAgIGlmIChsaXN0LmdldExlbmd0aCgpID4gdGhpcy5fY2FwYWNpdHkpIHtcbiAgICAgICAgLy8gcmVtb3ZlIHRoZSBjdXJyZW50IGhlYWQgb2YgdGhlIGxpc3RcbiAgICAgICAgZXZpY3RlZE5vZGUgPSBsaXN0LmdldEhlYWQoKTtcbiAgICAgICAgbGlzdC5yZW1vdmUoZXZpY3RlZE5vZGUpO1xuICAgICAgICAvLyBldmljdCB0aGUgY2h1bmsgYXNzb2NpYXRlZCB3aXRoIHRoZSByZW1vdmVkIG5vZGVcbiAgICAgICAgZXZpY3RlZENodW5rID0gZXZpY3RlZE5vZGUuZ2V0VmFsdWUoKTtcbiAgICAgICAgZGVsZXRlIG1hcFtldmljdGVkQ2h1bmsuZ2V0SWQoKV07XG4gICAgICAgIC8vIGNsZWFyIHRoZSByb3dzIGZyb20gdGhlIGV2aWN0ZWQgY2h1bmtcbiAgICAgICAgLy8gVE9ETzogc2hvdWxkIHRoZSBmb3JjZSBmbGFnIGJlIHNldCB0byB0cnVlIGhlcmU/XG4gICAgICAgIGV2aWN0ZWRDaHVuay5jbGVhclJvd3MoKTtcbiAgICB9XG59O1xubW9kdWxlLmV4cG9ydHMgPSBDaHVua0NhY2hlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2h1bmtfY2FjaGUuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/dist/lib/connection/result/chunk_cache.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/dist/lib/connection/result/column.js":
/*!*************************************************************************!*\
  !*** ./node_modules/snowflake-sdk/dist/lib/connection/result/column.js ***!
  \*************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst Util = __webpack_require__(/*! ../../util */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/util.js\");\nconst Errors = __webpack_require__(/*! ../../errors */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/errors.js\");\nconst BigNumber = __webpack_require__(/*! bignumber.js */ \"(rsc)/./node_modules/bignumber.js/bignumber.js\");\nconst GlobalConfig = __webpack_require__(/*! ../../global_config */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/global_config.js\");\nconst Logger = __webpack_require__(/*! ../../logger */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/logger.js\");\nconst SfTimestamp = __webpack_require__(/*! ./sf_timestamp */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/connection/result/sf_timestamp.js\");\nconst DataTypes = __webpack_require__(/*! ./data_types */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/connection/result/data_types.js\");\nconst SqlTypes = (__webpack_require__(/*! ./data_types */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/connection/result/data_types.js\").SqlTypes);\nconst dateTimeFormatConverter = __webpack_require__(/*! ./datetime_format_converter */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/connection/result/datetime_format_converter.js\");\nconst bigInt = __webpack_require__(/*! big-integer */ \"(rsc)/./node_modules/big-integer/BigInteger.js\");\nconst moment = __webpack_require__(/*! moment */ \"(rsc)/./node_modules/moment/moment.js\");\nconst momentTimezone = __webpack_require__(/*! moment-timezone */ \"(rsc)/./node_modules/moment-timezone/index.js\");\nconst util = __webpack_require__(/*! ../../util */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/util.js\");\n/**\n * Creates a new Column.\n *\n * @param {Object} options\n * @param {Number} index\n * @param {Object} statementParameters\n * @param {String} resultVersion\n *\n * @constructor\n */\nfunction Column(options, index, statementParameters, resultVersion) {\n    const name = options.overriddenName || options.name;\n    const nullable = options.nullable;\n    const scale = options.scale;\n    const type = options.type;\n    const precision = options.precision;\n    const fieldsMetadata = options.fields;\n    /**\n     * Returns the name of this column.\n     *\n     * @return {String}\n     */\n    this.getName = function () {\n        return name;\n    };\n    /**\n     * Returns the index of this column.\n     *\n     * @return {Number}\n     */\n    this.getIndex = function () {\n        return index;\n    };\n    /**\n     * Returns the id of this column.\n     *\n     * @return {Number}\n     */\n    this.getId = function () {\n        // use the index as the id for now\n        return index;\n    };\n    /**\n     * Determines if this column is nullable.\n     *\n     * @returns {Boolean}\n     */\n    this.isNullable = function () {\n        return nullable;\n    };\n    /**\n     * Returns the scale associated with this column.\n     *\n     * @returns {Number}\n     */\n    this.getScale = function () {\n        return scale;\n    };\n    /**\n     * Returns the type associated with this column.\n     *\n     * @returns {String}\n     */\n    this.getType = function () {\n        return type;\n    };\n    /**\n     * Returns the precision associated with this column\n     *\n     * @returns {Number}\n     */\n    this.getPrecision = function () {\n        return precision;\n    };\n    // add methods that make it easy to check if the column is of a specific type\n    this.isString = createFnIsColumnOfType(type, SqlTypes.isString, SqlTypes);\n    this.isBinary = createFnIsColumnOfType(type, SqlTypes.isBinary, SqlTypes);\n    this.isNumber = createFnIsColumnOfType(type, SqlTypes.isNumber, SqlTypes);\n    this.isBoolean = createFnIsColumnOfType(type, SqlTypes.isBoolean, SqlTypes);\n    this.isDate = createFnIsColumnOfType(type, SqlTypes.isDate, SqlTypes);\n    this.isTime = createFnIsColumnOfType(type, SqlTypes.isTime, SqlTypes);\n    this.isTimestamp = createFnIsColumnOfType(type, SqlTypes.isTimestamp, SqlTypes);\n    this.isTimestampLtz = createFnIsColumnOfType(type, SqlTypes.isTimestampLtz, SqlTypes);\n    this.isTimestampNtz = createFnIsColumnOfType(type, SqlTypes.isTimestampNtz, SqlTypes);\n    this.isTimestampTz = createFnIsColumnOfType(type, SqlTypes.isTimestampTz, SqlTypes);\n    this.isVariant = createFnIsColumnOfType(type, (type) => SqlTypes.isVariant(type, fieldsMetadata), SqlTypes);\n    this.isObject = createFnIsColumnOfType(type, (type) => SqlTypes.isObject(type, fieldsMetadata), SqlTypes);\n    this.isArray = createFnIsColumnOfType(type, (type) => SqlTypes.isArray(type, fieldsMetadata), SqlTypes);\n    this.isMap = createFnIsColumnOfType(type, (type) => SqlTypes.isMap(type, fieldsMetadata), SqlTypes);\n    let convert;\n    let toString;\n    let toValue;\n    let format;\n    if (this.isNumber()) {\n        const integerAs = statementParameters['JS_TREAT_INTEGER_AS_BIGINT'];\n        if (!integerAs) {\n            convert = convertRawNumber;\n        }\n        else {\n            if (this.getScale() > 0 || this.getType() === SqlTypes.values.REAL) {\n                convert = convertRawNumber;\n            }\n            else {\n                // This is an integer so represent it as a big int\n                convert = convertRawBigInt;\n            }\n        }\n        toValue = toValueFromNumber;\n        toString = toStringFromNumber;\n    }\n    else if (this.isTime()) {\n        convert = convertRawTime;\n        toValue = toValueFromTime;\n        toString = toStringFromTime;\n        format = statementParameters['TIME_OUTPUT_FORMAT'];\n    }\n    else {\n        toValue = noop;\n        if (this.isBoolean()) {\n            convert = convertRawBoolean;\n            toString = toStringFromBoolean;\n        }\n        else if (this.isDate()) {\n            convert = convertRawDate;\n            toString = toStringFromDate;\n            format = statementParameters['DATE_OUTPUT_FORMAT'];\n        }\n        else if (this.isTimestamp()) {\n            if (this.isTimestampLtz()) {\n                convert = convertRawTimestampLtz;\n                toString = toStringFromTimestamp;\n                format = statementParameters['TIMESTAMP_LTZ_OUTPUT_FORMAT'];\n            }\n            else if (this.isTimestampNtz()) {\n                convert = convertRawTimestampNtz;\n                toString = toStringFromTimestamp;\n                format = statementParameters['TIMESTAMP_NTZ_OUTPUT_FORMAT'];\n            }\n            else if (this.isTimestampTz()) {\n                convert = convertRawTimestampTz;\n                toString = toStringFromTimestamp;\n                format = statementParameters['TIMESTAMP_TZ_OUTPUT_FORMAT'];\n            }\n            // if we don't have a type-specific timezone, use the default format\n            if (!format) {\n                format = statementParameters['TIMESTAMP_OUTPUT_FORMAT'];\n            }\n        }\n        else if (this.isBinary()) {\n            convert = convertRawBinary;\n            toString = toStringFromBinary;\n            format = statementParameters['BINARY_OUTPUT_FORMAT'];\n        }\n        else if (this.isVariant()) {\n            convert = convertRawVariant;\n            toString = toStringFromRawValue;\n        }\n        else if (this.isObject()) {\n            convert = convertRawStructuredType(convertJsonObject);\n            toString = toStringFromRawValue;\n        }\n        else if (this.isArray()) {\n            convert = convertRawStructuredType(convertJsonArray);\n            toString = toStringFromRawValue;\n        }\n        else if (this.isMap()) {\n            convert = convertRawStructuredType(convertJsonMap);\n            toString = toStringFromRawValue;\n        }\n        else {\n            // column is of type string, so leave value as is\n            convert = noop;\n            toString = toStringFromString;\n        }\n    }\n    // create a private context to pass to the extract function\n    const context = {\n        convert: convert,\n        toValue: toValue,\n        toString: toString,\n        format: format,\n        resultVersion: resultVersion,\n        statementParameters: statementParameters,\n        fieldsMetadata: fieldsMetadata,\n    };\n    /**\n     * Returns the value of this column in a row.\n     *\n     * @param {Object} row\n     *\n     * @returns {*}\n     */\n    this.getRowValue = function (row) {\n        return extractFromRow.call(this, row, context, false);\n    };\n    /**\n     * Returns the value of this in a row as a String.\n     *\n     * @param {Object} row\n     *\n     * @returns {String}\n     */\n    this.getRowValueAsString = function (row) {\n        return extractFromRow.call(this, row, context, true);\n    };\n}\n/**\n * Returns a function that can be used to determine if a column is of a given\n * type.\n *\n * @param {String} columnType the column type.\n * @param {Function} columnComparisonFn the column comparison function.\n * @param {Object} scope the scope in which to invoke the column comparison\n *   function.\n *\n * @returns {Function}\n */\nfunction createFnIsColumnOfType(columnType, columnComparisonFn, scope) {\n    return function () {\n        return columnComparisonFn.call(scope, columnType);\n    };\n}\n/**\n * Converts a raw column value of type Number. The returned value is an object\n * that contains the raw string version of the value as well as the\n * post-processed version of the value obtained after casting to Number.\n *\n * @param {String} rawColumnValue\n *\n * @returns {Object}\n */\nfunction convertRawNumber(rawColumnValue) {\n    return {\n        raw: rawColumnValue,\n        processed: Number(rawColumnValue),\n    };\n}\n/**\n * Converts a raw column value that is an integer. The returned value is an object\n * that contains the raw string version of the value as well as the post-processed\n * version of the value obtained after casting to bigInt\n *\n * @param rawColumnValue\n * @returns {{processed: bigInt.BigInteger, raw: *}}\n */\nfunction convertRawBigInt(rawColumnValue) {\n    return {\n        raw: rawColumnValue,\n        processed: bigInt(rawColumnValue),\n    };\n}\n/**\n * Converts a raw column value of type Boolean to a boolean (true, false,\n * or null).\n *\n * @param {String} rawColumnValue\n *\n * @returns {Boolean}\n */\nfunction convertRawBoolean(rawColumnValue) {\n    let ret;\n    if (rawColumnValue === true ||\n        rawColumnValue === '1' ||\n        rawColumnValue.toUpperCase() === 'TRUE') {\n        ret = true;\n    }\n    else if (rawColumnValue === false ||\n        rawColumnValue === '0' ||\n        rawColumnValue.toUpperCase() === 'FALSE') {\n        ret = false;\n    }\n    else {\n        throw new Error(`Value could not be converted to boolean: ${rawColumnValue}`);\n    }\n    return ret;\n}\n/**\n * Converts a raw column value of structured type object to javascript Object\n *\n * @param {Object} json\n * @param {Object} context\n *\n * @returns {Object}\n */\nfunction convertJsonObject(json, context) {\n    if (context.fieldsMetadata) {\n        context.fieldsMetadata = context.fieldsMetadata.reduce(function (map, obj) {\n            map[obj.name] = obj;\n            return map;\n        }, {});\n        const result = {};\n        Object.keys(json).forEach(function (key) {\n            const fieldMetadata = context.fieldsMetadata[key];\n            result[key] = mapStructuredTypeValue(json[key], context, fieldMetadata);\n        });\n        return result;\n    }\n    else {\n        return json;\n    }\n}\n/**\n * Converts a raw column value of structured type array to javascript Object\n *\n * @param {Object} json\n * @param {Object} context\n *\n * @returns {Object}\n */\nfunction convertJsonArray(json, context) {\n    if (context.fieldsMetadata) {\n        const result = [];\n        json.forEach(function (value) {\n            result.push(mapStructuredTypeValue(value, context, context.fieldsMetadata[0]));\n        });\n        return result;\n    }\n    else {\n        return json;\n    }\n}\n/**\n * Converts a raw column value of structured type map to javascript Object\n *\n * @param {Object} json\n * @param {Object} context\n *\n * @returns {Object}\n */\nfunction convertJsonMap(json, context) {\n    if (Array.isArray(context.fieldsMetadata) && context.fieldsMetadata.length === 2) {\n        const result = new Map();\n        const keyMetadata = context.fieldsMetadata[0];\n        const valueMetadata = context.fieldsMetadata[1];\n        Object.keys(json).forEach(function (key) {\n            const convertedKey = mapStructuredTypeValue(key, context, keyMetadata);\n            const convertedValue = mapStructuredTypeValue(json[key], context, valueMetadata);\n            result.set(convertedKey, convertedValue);\n        });\n        return result;\n    }\n    else {\n        return json;\n    }\n}\n/**\n * Converts a raw column value of structured type OBJECT to javascript Object\n *\n * @param {String} rawColumnValue\n * @param {Object} column\n * @param {Object} context\n *\n * @returns {Object}\n */\nconst convertRawStructuredType = (convertJsonFn) => (rawColumnValue, column, context) => {\n    if (Util.string.isNotNullOrEmpty(rawColumnValue)) {\n        try {\n            const json = JSON.parse(rawColumnValue);\n            return convertJsonFn(json, context);\n        }\n        catch (jsonParseError) {\n            Logger.getInstance().debug('Column %s raw value cannot be parsed as JSON: %s ', column.name, jsonParseError.message);\n            throw new Error(util.format('Column [%s] raw value cannot be parsed as JSON: %s ', column.name, jsonParseError.message));\n        }\n    }\n    else {\n        throw new Error(util.format('Column %s raw value is null or empty ', column.name));\n    }\n};\nfunction mapStructuredTypeValue(columnValue, context, metadataField) {\n    const formatLtz = context.statementParameters['TIMESTAMP_LTZ_OUTPUT_FORMAT'] ??\n        context.statementParameters['TIMESTAMP_OUTPUT_FORMAT'];\n    const formatTz = context.statementParameters['TIMESTAMP_TZ_OUTPUT_FORMAT'] ??\n        context.statementParameters['TIMESTAMP_OUTPUT_FORMAT'];\n    const formatNtz = context.statementParameters['TIMESTAMP_NTZ_OUTPUT_FORMAT'];\n    let value;\n    switch (metadataField.type) {\n        case 'text':\n            value = columnValue;\n            break;\n        case 'real':\n            value = toValueFromNumber(convertRawNumber(columnValue));\n            break;\n        case 'fixed':\n            value = toValueFromNumber(convertRawNumber(columnValue));\n            break;\n        case 'boolean':\n            value = convertRawBoolean(columnValue);\n            break;\n        case 'timestamp_ltz':\n            value = convertTimestampTzString(columnValue, formatLtz, context.statementParameters['TIMEZONE'], metadataField.scale).toSfDate();\n            break;\n        case 'timestamp_ntz':\n            value = convertTimestampNtzString(columnValue, formatNtz, moment.tz.zone('UTC'), metadataField.scale).toSfDate();\n            break;\n        case 'timestamp_tz':\n            value = convertTimestampTzString(columnValue, formatTz, context.statementParameters['TIMEZONE'], metadataField.scale).toSfDate();\n            break;\n        case 'date': {\n            context.format = context.statementParameters['DATE_OUTPUT_FORMAT'];\n            value = convertDateString(columnValue, context.format);\n            break;\n        }\n        case 'time':\n            context.format = context.statementParameters['TIME_OUTPUT_FORMAT'];\n            value = convertTimeString(columnValue, context.format, moment.tz.zone('UTC'), metadataField.scale).toSfTime();\n            break;\n        case 'binary':\n            context.format = context.statementParameters['BINARY_OUTPUT_FORMAT'];\n            value = convertRawBinary(columnValue, this, context).toJSON().data;\n            break;\n        case 'object': {\n            const internalContext = {\n                convert: convertRawStructuredType(convertJsonObject),\n                toValue: noop,\n                toString: toString,\n                format: toStringFromRawValue,\n                resultVersion: context.resultVersion,\n                statementParameters: context.statementParameters,\n                fieldsMetadata: metadataField.fields,\n            };\n            value = convertJsonObject(columnValue, internalContext);\n            break;\n        }\n        case 'array': {\n            const internalArrayContext = {\n                convert: convertRawStructuredType(convertJsonArray),\n                toValue: noop,\n                toString: toString,\n                format: toStringFromRawValue,\n                resultVersion: context.resultVersion,\n                statementParameters: context.statementParameters,\n                fieldsMetadata: metadataField.fields,\n            };\n            value = convertJsonArray(columnValue, internalArrayContext);\n            break;\n        }\n        case 'map': {\n            const internalMapContext = {\n                convert: convertRawStructuredType(convertJsonMap),\n                toValue: noop,\n                toString: toString,\n                format: toStringFromRawValue,\n                resultVersion: context.resultVersion,\n                statementParameters: context.statementParameters,\n                fieldsMetadata: metadataField.fields,\n            };\n            value = convertJsonMap(columnValue, internalMapContext);\n            break;\n        }\n        default:\n            Logger.getInstance().info(`Column type not supported: ${context.fieldsMetadata.type}`);\n            throw new Error(`Column type not supported: ${context.fieldsMetadata.type}`);\n    }\n    return value;\n}\nconst convertTimestampTzString = function (stringValue, formatSql, timezone, scale) {\n    const formatMoment = dateTimeFormatConverter.convertSnowflakeFormatToMomentFormat(formatSql, scale);\n    const epochSeconds = momentTimezone(stringValue, formatMoment).unix();\n    return new SfTimestamp(epochSeconds, 0, scale, timezone, formatSql);\n};\nconst convertTimestampNtzString = function (stringValue, formatSql, timezone, scale) {\n    const formatMoment = dateTimeFormatConverter.convertSnowflakeFormatToMomentFormat(formatSql, scale);\n    const epochSeconds = momentTimezone.utc(stringValue, formatMoment).unix();\n    return new SfTimestamp(epochSeconds, 0, scale, timezone, formatSql);\n};\nconst convertDateString = function (stringValue, formatSql) {\n    const formatMoment = dateTimeFormatConverter.convertSnowflakeFormatToMomentFormat(formatSql, 0);\n    const epochSeconds = momentTimezone.utc(stringValue, formatMoment).unix();\n    const date = new SfTimestamp(epochSeconds, // convert to seconds\n    0, // no nano seconds\n    0, // no scale required\n    'UTC', // use utc as the timezone\n    context.format);\n    date._valueAsString = stringValue;\n    return date.toSfDate();\n};\nconst convertTimeString = function (stringValue, formatSql, timezone, scale) {\n    const formatMoment = dateTimeFormatConverter.convertSnowflakeFormatToMomentFormat(formatSql, scale);\n    const moment = momentTimezone(stringValue, formatMoment);\n    const epochSeconds = moment.hours() * 3600 + moment.minutes() * 60 + moment.seconds();\n    const time = new SfTimestamp(epochSeconds, 0, scale, timezone, formatSql);\n    time._valueAsString = stringValue;\n    return time;\n};\n/**\n * Converts a raw column value of type Date to a Snowflake Date.\n *\n * @param {String} rawColumnValue\n * @param {Object} column\n * @param {Object} context\n *\n * @returns {Date}\n */\nfunction convertRawDate(rawColumnValue, column, context) {\n    return new SfTimestamp(Number(rawColumnValue) * 86400, // convert to seconds\n    0, // no nano seconds\n    0, // no scale required\n    'UTC', // use utc as the timezone\n    context.format).toSfDate();\n}\n/**\n * Converts a raw column value of type Time to a Snowflake Time.\n *\n * @param {String} rawColumnValue\n * @param {Object} column\n * @param {Object} context\n *\n * @returns {Object}\n */\nfunction convertRawTime(rawColumnValue, column, context) {\n    const columnScale = column.getScale();\n    // the values might be big so use BigNumber to do arithmetic\n    const valFracSecsBig = new BigNumber(rawColumnValue).times(Math.pow(10, columnScale));\n    return convertRawTimestampHelper(valFracSecsBig, columnScale, 'UTC', context.format).toSfTime();\n}\n/**\n * Converts a raw column value of type TIMESTAMP_LTZ to a Snowflake Date.\n *\n * @param {String} rawColumnValue\n * @param {Object} column\n * @param {Object} context\n *\n * @returns {Date}\n */\nfunction convertRawTimestampLtz(rawColumnValue, column, context) {\n    const columnScale = column.getScale();\n    // the values might be big so use BigNumber to do arithmetic\n    const valFracSecsBig = new BigNumber(rawColumnValue).times(Math.pow(10, columnScale));\n    // create a new snowflake date\n    return convertRawTimestampHelper(valFracSecsBig, columnScale, context.statementParameters['TIMEZONE'], context.format).toSfDate();\n}\n/**\n * Converts a raw column value of type TIMESTAMP_NTZ to a Snowflake Date.\n *\n * @param {String} rawColumnValue\n * @param {Object} column\n * @param {Object} context\n *\n * @returns {Date}\n */\nfunction convertRawTimestampNtz(rawColumnValue, column, context) {\n    const columnScale = column.getScale();\n    // the values might be big so use BigNumber to do arithmetic\n    const valFracSecsBig = new BigNumber(rawColumnValue).times(Math.pow(10, columnScale));\n    // create a new snowflake date\n    return convertRawTimestampHelper(valFracSecsBig, columnScale, 'UTC', // it's _ntz, so use UTC for timezone\n    context.format).toSfDate();\n}\n/**\n * Converts a raw column value of type TIMESTAMP_TZ to a Snowflake Date.\n *\n * @param {String} rawColumnValue\n * @param {Object} column\n * @param {Object} context\n *\n * @returns {Date}\n */\nfunction convertRawTimestampTz(rawColumnValue, column, context) {\n    let valFracSecsBig;\n    let valFracSecsWithTzBig;\n    let timezoneBig;\n    let timezone;\n    let timestampAndTZIndex;\n    // compute the scale factor\n    const columnScale = column.getScale();\n    const scaleFactor = Math.pow(10, columnScale);\n    const resultVersion = context.resultVersion;\n    if (resultVersion === '0' || resultVersion === undefined) {\n        // the values might be big so use BigNumber to do arithmetic\n        valFracSecsBig = new BigNumber(rawColumnValue).times(scaleFactor);\n        // for _tz, the timezone is baked into the value\n        valFracSecsWithTzBig = valFracSecsBig;\n        // extract everything but the lowest 14 bits to get the fractional seconds\n        valFracSecsBig = valFracSecsWithTzBig.dividedBy(16384).integerValue(BigNumber.ROUND_FLOOR);\n        // extract the lowest 14 bits to get the timezone\n        if (valFracSecsWithTzBig.isGreaterThanOrEqualTo(0)) {\n            timezoneBig = valFracSecsWithTzBig.modulo(16384);\n        }\n        else {\n            timezoneBig = valFracSecsWithTzBig.modulo(16384).plus(16384);\n        }\n    }\n    else {\n        // split the value into number of seconds and timezone index\n        timestampAndTZIndex = rawColumnValue.split(' ');\n        // the values might be big so use BigNumber to do arithmetic\n        valFracSecsBig = new BigNumber(timestampAndTZIndex[0]).times(scaleFactor);\n        timezoneBig = new BigNumber(timestampAndTZIndex[1]);\n    }\n    timezone = timezoneBig.toNumber();\n    // assert that timezone is valid\n    Errors.assertInternal(timezone >= 0 && timezone <= 2880);\n    // subtract 24 hours from the timezone to map [0, 48] to\n    // [-24, 24], and convert the result to a number\n    timezone = timezone - 1440;\n    // create a new snowflake date\n    return convertRawTimestampHelper(valFracSecsBig, columnScale, timezone, context.format).toSfDate();\n}\n/**\n * Helper function for the convertRawTimestamp*() functions.\n * Returns an instance of SfTimestamp.\n *\n * @param {Object} epochFracSecsBig\n * @param {Number} scale\n * @param {String | Number} timezone\n * @param {String} format\n *\n * @returns {Object}\n */\nfunction convertRawTimestampHelper(epochFracSecsBig, scale, timezone, format) {\n    // compute the scale factor\n    const scaleFactor = Math.pow(10, scale);\n    // split the value into epoch seconds + nanoseconds; for example,\n    // 1365148923.123456789 will be split into 1365148923 (epoch seconds)\n    // and 123456789 (nano seconds)\n    const valSecBig = epochFracSecsBig.dividedBy(scaleFactor).integerValue(BigNumber.ROUND_FLOOR);\n    const fractionsBig = epochFracSecsBig.minus(valSecBig.times(scaleFactor));\n    const valSecNanoBig = fractionsBig.times(Math.pow(10, 9 - scale));\n    // create a new snowflake date from the information\n    return new SfTimestamp(valSecBig.toNumber(), valSecNanoBig.toNumber(), scale, timezone, format);\n}\n/**\n * Converts a raw column value of type Variant to a JavaScript value.\n *\n * @param {String} rawColumnValue\n *\n * @returns {Object | Array}\n */\nfunction convertRawVariant(rawColumnValue) {\n    // if the input is a non-empty string, convert it to a json object\n    if (Util.string.isNotNullOrEmpty(rawColumnValue)) {\n        try {\n            return GlobalConfig.jsonColumnVariantParser(rawColumnValue);\n        }\n        catch (jsonParseError) {\n            try {\n                return GlobalConfig.xmlColumnVariantParser(rawColumnValue);\n            }\n            catch (xmlParseError) {\n                Logger.getInstance().debug('Variant cannot be parsed neither as JSON: %s nor as XML: %s', jsonParseError.message, xmlParseError.message);\n                throw new Errors.VariantParseError(jsonParseError, xmlParseError);\n            }\n        }\n    }\n}\n/**\n * Converts a raw column value of type Binary to a Buffer.\n *\n * @param {String} rawColumnValue\n * @param {Object} column\n * @param {Object} context\n *\n * @returns {Buffer}\n */\nfunction convertRawBinary(rawColumnValue, column, context) {\n    // Ensure the format is valid.\n    const format = context.format.toUpperCase();\n    Errors.assertInternal(format === 'HEX' || format === 'BASE64');\n    // Decode hex string sent by GS.\n    const buffer = Buffer.from(rawColumnValue, 'HEX');\n    if (format === 'HEX') {\n        buffer.toStringSf = function () {\n            // The raw value is already an uppercase hex string, so just return it.\n            // Note that buffer.toString(\"HEX\") returns a lowercase hex string, but we\n            // want upper case.\n            return rawColumnValue;\n        };\n    }\n    else {\n        buffer.toStringSf = function () {\n            return this.toString('BASE64');\n        };\n    }\n    buffer.getFormat = function () {\n        return format;\n    };\n    return buffer;\n}\n/**\n * Returns the input value as is.\n *\n * @param {*} value\n *\n * @returns {*}\n */\nfunction noop(value) {\n    return value;\n}\n/**\n * The toValue() function for a column of type Number.\n *\n * @param {*} columnValue\n *\n * @returns {Number}\n */\nfunction toValueFromNumber(columnValue) {\n    return columnValue ? columnValue.processed : columnValue;\n}\n/**\n * The toValue() function for a column of type Time.\n *\n * @param {*} columnValue\n *\n * @returns {String}\n */\nfunction toValueFromTime(columnValue) {\n    // there's no native javascript type that can be used to represent time, so\n    // just convert to string\n    return toStringFromTime(columnValue);\n}\n/**\n * The toString() function for a column of type Number.\n *\n * @param {Number} columnValue\n *\n * @returns {String}\n */\nfunction toStringFromNumber(columnValue) {\n    return columnValue !== null ? columnValue.raw : DataTypes.getNullValue();\n}\n/**\n * The toString() function for a column of type Boolean.\n *\n * @param {Boolean} columnValue\n *\n * @returns {String}\n */\nfunction toStringFromBoolean(columnValue) {\n    return columnValue !== null ? String(columnValue).toUpperCase() : DataTypes.getNullValue();\n}\n/**\n * The toString() function for a column of type Date.\n *\n * @param {Date} columnValue\n *\n * @returns {String}\n */\nfunction toStringFromDate(columnValue) {\n    return columnValue !== null ? columnValue.toJSON() : DataTypes.getNullValue();\n}\n/**\n * The toString() function for a column of type Time.\n *\n * @param {Object} columnValue\n *\n * @returns {String}\n */\nfunction toStringFromTime(columnValue) {\n    return columnValue !== null ? columnValue.toJSON() : DataTypes.getNullValue();\n}\n/**\n * The toString() function for a column of type Timestamp.\n *\n * @param {Date} columnValue\n *\n * @returns {String}\n */\nfunction toStringFromTimestamp(columnValue) {\n    return columnValue !== null ? columnValue.toJSON() : DataTypes.getNullValue();\n}\n/**\n * The toString() function for a column of type Variant.\n *\n * @param {Object} columnValue\n *\n * @returns {String}\n */\nfunction toStringFromRawValue(columnValue) {\n    return columnValue !== null ? JSON.stringify(columnValue) : DataTypes.getNullValue();\n}\n/**\n * The toString() function for a column of type String.\n *\n * @param {String} columnValue\n *\n * @returns {String}\n */\nfunction toStringFromString(columnValue) {\n    return columnValue !== null ? columnValue : DataTypes.getNullValue();\n}\n/**\n * The toString() function for a column of type Binary.\n *\n * @param {Buffer} columnValue\n *\n * @returns {String}\n */\nfunction toStringFromBinary(columnValue) {\n    return columnValue !== null ? columnValue.toStringSf() : DataTypes.getNullValue();\n}\n/**\n * Extracts the value of a column from a given row.\n *\n * @param {Object} row\n * @param {Object} context\n * @param {Boolean} asString\n *\n * @returns {*}\n */\nfunction extractFromRow(row, context, asString) {\n    const map = row._arrayProcessedColumns;\n    const values = row.values;\n    // get the value\n    const columnIndex = this.getIndex();\n    let ret = values[columnIndex];\n    // if we want the value as a string, and the column is of type variant, and we\n    // haven't already processed the value before, we don't need to process the\n    // value, so only process if none of the aforementioned conditions are true\n    if (!(asString && this.isVariant() && !map[columnIndex])) {\n        // if the column value has not been processed yet, process it, put it back\n        // in the values array, and remember that the value has been processed\n        if (!map[columnIndex]) {\n            if (ret !== null) {\n                ret = values[columnIndex] = context.convert(values[columnIndex], this, context);\n            }\n            map[columnIndex] = true;\n        }\n        // use the appropriate extraction function depending on whether\n        // we want the value or a string representation of the value\n        const extractFn = !asString ? context.toValue : context.toString;\n        ret = extractFn(ret);\n    }\n    return ret;\n}\nmodule.exports = Column;\n//# sourceMappingURL=column.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/dist/lib/connection/result/column.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/dist/lib/connection/result/data_types.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/snowflake-sdk/dist/lib/connection/result/data_types.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nconst Util = __webpack_require__(/*! ../../util */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/util.js\");\nconst Errors = __webpack_require__(/*! ../../errors */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/errors.js\");\nconst sqlTypes = {\n    values: {\n        TEXT: 'text',\n        BINARY: 'binary',\n        BOOLEAN: 'boolean',\n        FIXED: 'fixed',\n        REAL: 'real',\n        DATE: 'date',\n        TIME: 'time',\n        TIMESTAMP_LTZ: 'timestamp_ltz',\n        TIMESTAMP_NTZ: 'timestamp_ntz',\n        TIMESTAMP_TZ: 'timestamp_tz',\n        VARIANT: 'variant',\n        OBJECT: 'object',\n        ARRAY: 'array',\n        MAP: 'map',\n    },\n    /**\n     * Determines if a column's SQL type is String.\n     *\n     * @param {Object} sqlType\n     *\n     * @returns {Boolean}\n     */\n    isString: function (sqlType) {\n        return sqlType === this.values.TEXT;\n    },\n    /**\n     * Determines if a column's SQL type is Binary.\n     *\n     * @param {Object} sqlType\n     *\n     * @returns {Boolean}\n     */\n    isBinary: function (sqlType) {\n        return sqlType === this.values.BINARY;\n    },\n    /**\n     * Determines if a column's SQL type is Boolean.\n     *\n     * @param {Object} sqlType\n     *\n     * @returns {Boolean}\n     */\n    isBoolean: function (sqlType) {\n        return sqlType === this.values.BOOLEAN;\n    },\n    /**\n     * Determines if a column's SQL type is Number.\n     *\n     * @param {Object} sqlType\n     *\n     * @returns {Boolean}\n     */\n    isNumber: function (sqlType) {\n        return sqlType === this.values.FIXED || sqlType === this.values.REAL;\n    },\n    /**\n     * Determines if a column's SQL type is Date.\n     *\n     * @param {Object} sqlType\n     *\n     * @returns {Boolean}\n     */\n    isDate: function (sqlType) {\n        return sqlType === this.values.DATE;\n    },\n    /**\n     * Determines if a column's SQL type is Time.\n     *\n     * @param {Object} sqlType\n     *\n     * @returns {Boolean}\n     */\n    isTime: function (sqlType) {\n        return sqlType === this.values.TIME;\n    },\n    /**\n     * Determines if a column's SQL type is Timestamp.\n     *\n     * @param {Object} sqlType\n     *\n     * @returns {Boolean}\n     */\n    isTimestamp: function (sqlType) {\n        return (sqlType === this.values.TIMESTAMP_LTZ ||\n            sqlType === this.values.TIMESTAMP_NTZ ||\n            sqlType === this.values.TIMESTAMP_TZ);\n    },\n    /**\n     * Determines if a column's SQL type is TIMESTAMP_LTZ.\n     *\n     * @param {Object} sqlType\n     *\n     * @returns {Boolean}\n     */\n    isTimestampLtz: function (sqlType) {\n        return sqlType === this.values.TIMESTAMP_LTZ;\n    },\n    /**\n     * Determines if a column's SQL type is TIMESTAMP_NTZ.\n     *\n     * @param {Object} sqlType\n     *\n     * @returns {Boolean}\n     */\n    isTimestampNtz: function (sqlType) {\n        return sqlType === this.values.TIMESTAMP_NTZ;\n    },\n    /**\n     * Determines if a column's SQL type is TIMESTAMP_TZ.\n     *\n     * @param {Object} sqlType\n     *\n     * @returns {Boolean}\n     */\n    isTimestampTz: function (sqlType) {\n        return sqlType === this.values.TIMESTAMP_TZ;\n    },\n    /**\n     * Determines if a column's SQL type is Variant.\n     *\n     * @param {Object} sqlType\n     *\n     * @returns {Boolean}\n     */\n    isVariant: function (sqlType, fieldsMetadata) {\n        return (sqlType === this.values.VARIANT ||\n            (sqlType === this.values.OBJECT && fieldsMetadata == null) ||\n            (sqlType === this.values.ARRAY && fieldsMetadata == null) ||\n            (sqlType === this.values.MAP && fieldsMetadata == null));\n    },\n    /**\n     * Determines if a column's SQL type is Object.\n     *\n     * @param {Object} sqlType\n     *\n     * @returns {Boolean}\n     */\n    isObject: function (sqlType, fieldsMetadata) {\n        return sqlType === this.values.OBJECT && fieldsMetadata != null;\n    },\n    /**\n     * Determines if a column's SQL type is Array.\n     *\n     * @param {Object} sqlType\n     *\n     * @returns {Boolean}\n     */\n    isArray: function (sqlType, fieldsMetadata) {\n        return sqlType === this.values.ARRAY && fieldsMetadata != null;\n    },\n    /**\n     * Determines if a column's SQL type is Map.\n     *\n     * @param {Object} sqlType\n     *\n     * @returns {Boolean}\n     */\n    isMap: function (sqlType, fieldsMetadata) {\n        return sqlType === this.values.MAP && fieldsMetadata != null;\n    },\n};\nconst nativeTypes = {\n    values: {\n        STRING: 'STRING',\n        BOOLEAN: 'BOOLEAN',\n        NUMBER: 'NUMBER',\n        DATE: 'DATE',\n        JSON: 'JSON',\n        BUFFER: 'BUFFER',\n        OBJECT: 'OBJECT',\n        ARRAY: 'ARRAY',\n        MAP: 'MAP',\n    },\n    /**\n     * Determines if a given value is a valid native type.\n     *\n     * @param {*} value\n     *\n     * @returns {boolean}\n     */\n    isValidValue: function (value) {\n        return !!this.values[Util.isString(value) ? value.toUpperCase() : value];\n    },\n    /**\n     * Given an array of strings, returns the index of the first element that\n     * represents an invalid native type. If the values are all valid, a value of\n     * -1 is returned.\n     *\n     * @param {String[]} nativeTypes\n     *\n     * @returns {Number}\n     */\n    findInvalidValue: function (nativeTypes) {\n        // validate input\n        Errors.assertInternal(Util.isArray(nativeTypes));\n        // find the index of the first invalid value\n        let invalidValueIndex = -1;\n        for (let index = 0, length = nativeTypes.length; index < length; index++) {\n            if (!this.isValidValue(nativeTypes[index])) {\n                invalidValueIndex = index;\n                break;\n            }\n        }\n        return invalidValueIndex;\n    },\n};\nlet isRepresentNullAsStringNull = true;\nexports.setIsRepresentNullAsStringNull = function (option) {\n    isRepresentNullAsStringNull = option;\n};\nexports.getNullValue = function () {\n    return isRepresentNullAsStringNull ? 'NULL' : null;\n};\nconst sqlTypeValues = sqlTypes.values;\nconst nativeTypeValues = nativeTypes.values;\nconst MAP_SQL_TO_NATIVE = {};\nMAP_SQL_TO_NATIVE[sqlTypeValues.TEXT] = nativeTypeValues.STRING;\nMAP_SQL_TO_NATIVE[sqlTypeValues.BINARY] = nativeTypeValues.BUFFER;\nMAP_SQL_TO_NATIVE[sqlTypeValues.BOOLEAN] = nativeTypeValues.BOOLEAN;\nMAP_SQL_TO_NATIVE[sqlTypeValues.FIXED] = nativeTypeValues.NUMBER;\nMAP_SQL_TO_NATIVE[sqlTypeValues.REAL] = nativeTypeValues.NUMBER;\nMAP_SQL_TO_NATIVE[sqlTypeValues.DATE] = nativeTypeValues.DATE;\nMAP_SQL_TO_NATIVE[sqlTypeValues.TIME] = nativeTypeValues.STRING;\nMAP_SQL_TO_NATIVE[sqlTypeValues.TIMESTAMP_LTZ] = nativeTypeValues.DATE;\nMAP_SQL_TO_NATIVE[sqlTypeValues.TIMESTAMP_NTZ] = nativeTypeValues.DATE;\nMAP_SQL_TO_NATIVE[sqlTypeValues.TIMESTAMP_TZ] = nativeTypeValues.DATE;\nMAP_SQL_TO_NATIVE[sqlTypeValues.VARIANT] = nativeTypeValues.JSON;\nMAP_SQL_TO_NATIVE[sqlTypeValues.OBJECT] = nativeTypeValues.OBJECT;\nMAP_SQL_TO_NATIVE[sqlTypeValues.ARRAY] = nativeTypeValues.ARRAY;\nMAP_SQL_TO_NATIVE[sqlTypeValues.MAP] = nativeTypeValues.MAP;\nexports.SqlTypes = sqlTypes;\nexports.NativeTypes = nativeTypes;\n/**\n * Given a SQL type, returns the corresponding native type.\n *\n * @param {String} sqlType\n *\n * @returns {String}\n */\nexports.toNativeType = function (sqlType) {\n    return MAP_SQL_TO_NATIVE[sqlType];\n};\n//# sourceMappingURL=data_types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/dist/lib/connection/result/data_types.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/dist/lib/connection/result/datetime_format_converter.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/snowflake-sdk/dist/lib/connection/result/datetime_format_converter.js ***!
  \********************************************************************************************/
/***/ ((module) => {

"use strict";
eval("\n/**\n * The map of symbols for datatime representation in Snowflake and in Moment.js formatting.\n * The order of tags is important Please don't change it\n */\nfunction formatTagsMap() {\n    return [\n        // proper mappings\n        ['YYYY', 'YYYY'],\n        ['YY', 'YY'],\n        ['MM', 'MM'],\n        ['MON', 'MMM'],\n        ['DD', 'DD'],\n        ['DY', 'ddd'],\n        ['HH24', 'HH'],\n        ['HH12', 'hh'],\n        ['HH', 'HH'],\n        ['AM', 'A'],\n        ['PM', 'A'],\n        ['MI', 'mm'],\n        ['SS', 'ss'],\n        ['TZH:TZM', 'Z'],\n        ['TZHTZM', 'ZZ'],\n        // special code needed\n        ['TZH', ''],\n        ['TZM', ''],\n        ['FF', ''],\n    ];\n}\nfunction convertSnowflakeFormatToMomentFormat(formatSql, scale) {\n    const tags = formatTagsMap();\n    // get an upper-case version of the input sql format\n    const formatSqlUpper = formatSql.toUpperCase();\n    // iterate over the format string\n    const length = formatSql.length;\n    let formatMoment = '';\n    for (let pos = 0; pos < length;) {\n        let tag = null;\n        let out = null;\n        // at each position, check if there's a tag at that position; if so, use\n        // 'out' as the replacement\n        for (let index = 0; index < tags.length; index++) {\n            if (formatSqlUpper.substr(pos).indexOf(tags[index][0]) === 0) {\n                tag = tags[index][0];\n                out = tags[index][1];\n                break;\n            }\n        }\n        // if we didn't find a match, just insert the character after escaping it\n        // (by wrapping it in square brackets)\n        if (out === null) {\n            formatMoment += formatSql[pos];\n            pos++;\n        }\n        else {\n            // we found one of our special tags\n            if (out === '') {\n                if (tag === 'TZH') {\n                    out = 'Z';\n                }\n                else if (tag === 'FF') {\n                    // if 'FF' is followed by a digit, use the digit as the scale\n                    let digit = null;\n                    if (pos + tag.length < length) {\n                        const matches = formatSql[pos + tag.length].match(/[0-9]/);\n                        if (matches) {\n                            digit = matches[0];\n                        }\n                    }\n                    if (digit !== null) {\n                        pos++; // skip the digit as well\n                    }\n                    // if we need to include fractional seconds\n                    if (scale > 0) {\n                        // divide the nanoSeconds to get the requested number of\n                        // meaningful digits\n                        // pad with the appropriate number of leading zeros\n                        out = new Array(9).join('S').substr(-scale);\n                    }\n                }\n            }\n            // append the 'out' text to the moment format and update the position\n            formatMoment += out;\n            pos += tag.length;\n        }\n    }\n    return formatMoment;\n}\nmodule.exports.formatTagsMap = formatTagsMap;\nmodule.exports.convertSnowflakeFormatToMomentFormat = convertSnowflakeFormatToMomentFormat;\n//# sourceMappingURL=datetime_format_converter.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9kaXN0L2xpYi9jb25uZWN0aW9uL3Jlc3VsdC9kYXRldGltZV9mb3JtYXRfY29udmVydGVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixhQUFhO0FBQ25DO0FBQ0E7QUFDQSxzRUFBc0U7QUFDdEU7QUFDQSw0QkFBNEIscUJBQXFCO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEI7QUFDNUIsbURBQW1EO0FBQ25EIiwic291cmNlcyI6WyIvVXNlcnMvd2FuZ2hhb3RhaS9EZXNrdG9wL2VsdmVubGFiL0hUVi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9kaXN0L2xpYi9jb25uZWN0aW9uL3Jlc3VsdC9kYXRldGltZV9mb3JtYXRfY29udmVydGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiBUaGUgbWFwIG9mIHN5bWJvbHMgZm9yIGRhdGF0aW1lIHJlcHJlc2VudGF0aW9uIGluIFNub3dmbGFrZSBhbmQgaW4gTW9tZW50LmpzIGZvcm1hdHRpbmcuXG4gKiBUaGUgb3JkZXIgb2YgdGFncyBpcyBpbXBvcnRhbnQgUGxlYXNlIGRvbid0IGNoYW5nZSBpdFxuICovXG5mdW5jdGlvbiBmb3JtYXRUYWdzTWFwKCkge1xuICAgIHJldHVybiBbXG4gICAgICAgIC8vIHByb3BlciBtYXBwaW5nc1xuICAgICAgICBbJ1lZWVknLCAnWVlZWSddLFxuICAgICAgICBbJ1lZJywgJ1lZJ10sXG4gICAgICAgIFsnTU0nLCAnTU0nXSxcbiAgICAgICAgWydNT04nLCAnTU1NJ10sXG4gICAgICAgIFsnREQnLCAnREQnXSxcbiAgICAgICAgWydEWScsICdkZGQnXSxcbiAgICAgICAgWydISDI0JywgJ0hIJ10sXG4gICAgICAgIFsnSEgxMicsICdoaCddLFxuICAgICAgICBbJ0hIJywgJ0hIJ10sXG4gICAgICAgIFsnQU0nLCAnQSddLFxuICAgICAgICBbJ1BNJywgJ0EnXSxcbiAgICAgICAgWydNSScsICdtbSddLFxuICAgICAgICBbJ1NTJywgJ3NzJ10sXG4gICAgICAgIFsnVFpIOlRaTScsICdaJ10sXG4gICAgICAgIFsnVFpIVFpNJywgJ1paJ10sXG4gICAgICAgIC8vIHNwZWNpYWwgY29kZSBuZWVkZWRcbiAgICAgICAgWydUWkgnLCAnJ10sXG4gICAgICAgIFsnVFpNJywgJyddLFxuICAgICAgICBbJ0ZGJywgJyddLFxuICAgIF07XG59XG5mdW5jdGlvbiBjb252ZXJ0U25vd2ZsYWtlRm9ybWF0VG9Nb21lbnRGb3JtYXQoZm9ybWF0U3FsLCBzY2FsZSkge1xuICAgIGNvbnN0IHRhZ3MgPSBmb3JtYXRUYWdzTWFwKCk7XG4gICAgLy8gZ2V0IGFuIHVwcGVyLWNhc2UgdmVyc2lvbiBvZiB0aGUgaW5wdXQgc3FsIGZvcm1hdFxuICAgIGNvbnN0IGZvcm1hdFNxbFVwcGVyID0gZm9ybWF0U3FsLnRvVXBwZXJDYXNlKCk7XG4gICAgLy8gaXRlcmF0ZSBvdmVyIHRoZSBmb3JtYXQgc3RyaW5nXG4gICAgY29uc3QgbGVuZ3RoID0gZm9ybWF0U3FsLmxlbmd0aDtcbiAgICBsZXQgZm9ybWF0TW9tZW50ID0gJyc7XG4gICAgZm9yIChsZXQgcG9zID0gMDsgcG9zIDwgbGVuZ3RoOykge1xuICAgICAgICBsZXQgdGFnID0gbnVsbDtcbiAgICAgICAgbGV0IG91dCA9IG51bGw7XG4gICAgICAgIC8vIGF0IGVhY2ggcG9zaXRpb24sIGNoZWNrIGlmIHRoZXJlJ3MgYSB0YWcgYXQgdGhhdCBwb3NpdGlvbjsgaWYgc28sIHVzZVxuICAgICAgICAvLyAnb3V0JyBhcyB0aGUgcmVwbGFjZW1lbnRcbiAgICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHRhZ3MubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgICAgICBpZiAoZm9ybWF0U3FsVXBwZXIuc3Vic3RyKHBvcykuaW5kZXhPZih0YWdzW2luZGV4XVswXSkgPT09IDApIHtcbiAgICAgICAgICAgICAgICB0YWcgPSB0YWdzW2luZGV4XVswXTtcbiAgICAgICAgICAgICAgICBvdXQgPSB0YWdzW2luZGV4XVsxXTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBpZiB3ZSBkaWRuJ3QgZmluZCBhIG1hdGNoLCBqdXN0IGluc2VydCB0aGUgY2hhcmFjdGVyIGFmdGVyIGVzY2FwaW5nIGl0XG4gICAgICAgIC8vIChieSB3cmFwcGluZyBpdCBpbiBzcXVhcmUgYnJhY2tldHMpXG4gICAgICAgIGlmIChvdXQgPT09IG51bGwpIHtcbiAgICAgICAgICAgIGZvcm1hdE1vbWVudCArPSBmb3JtYXRTcWxbcG9zXTtcbiAgICAgICAgICAgIHBvcysrO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gd2UgZm91bmQgb25lIG9mIG91ciBzcGVjaWFsIHRhZ3NcbiAgICAgICAgICAgIGlmIChvdXQgPT09ICcnKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRhZyA9PT0gJ1RaSCcpIHtcbiAgICAgICAgICAgICAgICAgICAgb3V0ID0gJ1onO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0YWcgPT09ICdGRicpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgJ0ZGJyBpcyBmb2xsb3dlZCBieSBhIGRpZ2l0LCB1c2UgdGhlIGRpZ2l0IGFzIHRoZSBzY2FsZVxuICAgICAgICAgICAgICAgICAgICBsZXQgZGlnaXQgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICBpZiAocG9zICsgdGFnLmxlbmd0aCA8IGxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWF0Y2hlcyA9IGZvcm1hdFNxbFtwb3MgKyB0YWcubGVuZ3RoXS5tYXRjaCgvWzAtOV0vKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXRjaGVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlnaXQgPSBtYXRjaGVzWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChkaWdpdCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9zKys7IC8vIHNraXAgdGhlIGRpZ2l0IGFzIHdlbGxcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBpZiB3ZSBuZWVkIHRvIGluY2x1ZGUgZnJhY3Rpb25hbCBzZWNvbmRzXG4gICAgICAgICAgICAgICAgICAgIGlmIChzY2FsZSA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRpdmlkZSB0aGUgbmFub1NlY29uZHMgdG8gZ2V0IHRoZSByZXF1ZXN0ZWQgbnVtYmVyIG9mXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBtZWFuaW5nZnVsIGRpZ2l0c1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gcGFkIHdpdGggdGhlIGFwcHJvcHJpYXRlIG51bWJlciBvZiBsZWFkaW5nIHplcm9zXG4gICAgICAgICAgICAgICAgICAgICAgICBvdXQgPSBuZXcgQXJyYXkoOSkuam9pbignUycpLnN1YnN0cigtc2NhbGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gYXBwZW5kIHRoZSAnb3V0JyB0ZXh0IHRvIHRoZSBtb21lbnQgZm9ybWF0IGFuZCB1cGRhdGUgdGhlIHBvc2l0aW9uXG4gICAgICAgICAgICBmb3JtYXRNb21lbnQgKz0gb3V0O1xuICAgICAgICAgICAgcG9zICs9IHRhZy5sZW5ndGg7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZvcm1hdE1vbWVudDtcbn1cbm1vZHVsZS5leHBvcnRzLmZvcm1hdFRhZ3NNYXAgPSBmb3JtYXRUYWdzTWFwO1xubW9kdWxlLmV4cG9ydHMuY29udmVydFNub3dmbGFrZUZvcm1hdFRvTW9tZW50Rm9ybWF0ID0gY29udmVydFNub3dmbGFrZUZvcm1hdFRvTW9tZW50Rm9ybWF0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0ZXRpbWVfZm9ybWF0X2NvbnZlcnRlci5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/dist/lib/connection/result/datetime_format_converter.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/dist/lib/connection/result/doubly_linked_list.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/snowflake-sdk/dist/lib/connection/result/doubly_linked_list.js ***!
  \*************************************************************************************/
/***/ ((module) => {

"use strict";
eval("\nfunction DoublyLinkedList() {\n    this._length = 0;\n    this._head = null;\n    this._tail = null;\n}\n/**\n * Returns the length of the list.\n *\n * @returns {number}\n */\nDoublyLinkedList.prototype.getLength = function () {\n    return this._length;\n};\n/**\n * Returns the first element in the list.\n *\n * @returns {Object}\n */\nDoublyLinkedList.prototype.getHead = function () {\n    return this._head;\n};\n/**\n * Returns the last element in the list.\n *\n * @returns {Object}\n */\nDoublyLinkedList.prototype.getTail = function () {\n    return this._tail;\n};\n/**\n * Inserts a value at the end of the list.\n *\n * @param value\n *\n * @returns {Object} the node that was inserted into the list.\n */\nDoublyLinkedList.prototype.insertEnd = function (value) {\n    // create a node from the specified value\n    const node = new Node(value, null, null);\n    // if there are no element in the list yet\n    if (this._length === 0) {\n        this._head = node;\n        this._tail = node;\n    }\n    else {\n        // add the node to the end\n        this._tail.setNext(node);\n        node.setPrev(this._tail);\n        this._tail = node;\n    }\n    // increment the length\n    this._length++;\n    // return the node that was created\n    return node;\n};\n/**\n * Removes a given node from the list.\n *\n * @param node\n */\nDoublyLinkedList.prototype.remove = function (node) {\n    // if no node was specified, we have nothing to do\n    if (!node) {\n        return;\n    }\n    // if we're removing the first element in the list, adjust the head,\n    // otherwise connect the node's previous to its next\n    if (node.getPrev() === null) {\n        this._head = node.getNext();\n    }\n    else {\n        node.getPrev().setNext(node.getNext());\n    }\n    // if we're removing the last element in the list, adjust the tail,\n    // otherwise connect the node's next to its previous\n    if (node.getNext() === null) {\n        this._tail = node.getPrev();\n    }\n    else {\n        node.getNext().setPrev(node.getPrev());\n    }\n    // decrement the length\n    this._length--;\n};\nfunction Node(value, prev, next) {\n    this._value = value;\n    this._prev = prev;\n    this._next = next;\n}\nNode.prototype.getValue = function () {\n    return this._value;\n};\nNode.prototype.getPrev = function () {\n    return this._prev;\n};\nNode.prototype.setPrev = function (prev) {\n    this._prev = prev;\n};\nNode.prototype.getNext = function () {\n    return this._next;\n};\nNode.prototype.setNext = function (next) {\n    this._next = next;\n};\nmodule.exports = DoublyLinkedList;\n//# sourceMappingURL=doubly_linked_list.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9kaXN0L2xpYi9jb25uZWN0aW9uL3Jlc3VsdC9kb3VibHlfbGlua2VkX2xpc3QuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvd2FuZ2hhb3RhaS9EZXNrdG9wL2VsdmVubGFiL0hUVi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9kaXN0L2xpYi9jb25uZWN0aW9uL3Jlc3VsdC9kb3VibHlfbGlua2VkX2xpc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5mdW5jdGlvbiBEb3VibHlMaW5rZWRMaXN0KCkge1xuICAgIHRoaXMuX2xlbmd0aCA9IDA7XG4gICAgdGhpcy5faGVhZCA9IG51bGw7XG4gICAgdGhpcy5fdGFpbCA9IG51bGw7XG59XG4vKipcbiAqIFJldHVybnMgdGhlIGxlbmd0aCBvZiB0aGUgbGlzdC5cbiAqXG4gKiBAcmV0dXJucyB7bnVtYmVyfVxuICovXG5Eb3VibHlMaW5rZWRMaXN0LnByb3RvdHlwZS5nZXRMZW5ndGggPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2xlbmd0aDtcbn07XG4vKipcbiAqIFJldHVybnMgdGhlIGZpcnN0IGVsZW1lbnQgaW4gdGhlIGxpc3QuXG4gKlxuICogQHJldHVybnMge09iamVjdH1cbiAqL1xuRG91Ymx5TGlua2VkTGlzdC5wcm90b3R5cGUuZ2V0SGVhZCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5faGVhZDtcbn07XG4vKipcbiAqIFJldHVybnMgdGhlIGxhc3QgZWxlbWVudCBpbiB0aGUgbGlzdC5cbiAqXG4gKiBAcmV0dXJucyB7T2JqZWN0fVxuICovXG5Eb3VibHlMaW5rZWRMaXN0LnByb3RvdHlwZS5nZXRUYWlsID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLl90YWlsO1xufTtcbi8qKlxuICogSW5zZXJ0cyBhIHZhbHVlIGF0IHRoZSBlbmQgb2YgdGhlIGxpc3QuXG4gKlxuICogQHBhcmFtIHZhbHVlXG4gKlxuICogQHJldHVybnMge09iamVjdH0gdGhlIG5vZGUgdGhhdCB3YXMgaW5zZXJ0ZWQgaW50byB0aGUgbGlzdC5cbiAqL1xuRG91Ymx5TGlua2VkTGlzdC5wcm90b3R5cGUuaW5zZXJ0RW5kID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgLy8gY3JlYXRlIGEgbm9kZSBmcm9tIHRoZSBzcGVjaWZpZWQgdmFsdWVcbiAgICBjb25zdCBub2RlID0gbmV3IE5vZGUodmFsdWUsIG51bGwsIG51bGwpO1xuICAgIC8vIGlmIHRoZXJlIGFyZSBubyBlbGVtZW50IGluIHRoZSBsaXN0IHlldFxuICAgIGlmICh0aGlzLl9sZW5ndGggPT09IDApIHtcbiAgICAgICAgdGhpcy5faGVhZCA9IG5vZGU7XG4gICAgICAgIHRoaXMuX3RhaWwgPSBub2RlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgLy8gYWRkIHRoZSBub2RlIHRvIHRoZSBlbmRcbiAgICAgICAgdGhpcy5fdGFpbC5zZXROZXh0KG5vZGUpO1xuICAgICAgICBub2RlLnNldFByZXYodGhpcy5fdGFpbCk7XG4gICAgICAgIHRoaXMuX3RhaWwgPSBub2RlO1xuICAgIH1cbiAgICAvLyBpbmNyZW1lbnQgdGhlIGxlbmd0aFxuICAgIHRoaXMuX2xlbmd0aCsrO1xuICAgIC8vIHJldHVybiB0aGUgbm9kZSB0aGF0IHdhcyBjcmVhdGVkXG4gICAgcmV0dXJuIG5vZGU7XG59O1xuLyoqXG4gKiBSZW1vdmVzIGEgZ2l2ZW4gbm9kZSBmcm9tIHRoZSBsaXN0LlxuICpcbiAqIEBwYXJhbSBub2RlXG4gKi9cbkRvdWJseUxpbmtlZExpc3QucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgLy8gaWYgbm8gbm9kZSB3YXMgc3BlY2lmaWVkLCB3ZSBoYXZlIG5vdGhpbmcgdG8gZG9cbiAgICBpZiAoIW5vZGUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBpZiB3ZSdyZSByZW1vdmluZyB0aGUgZmlyc3QgZWxlbWVudCBpbiB0aGUgbGlzdCwgYWRqdXN0IHRoZSBoZWFkLFxuICAgIC8vIG90aGVyd2lzZSBjb25uZWN0IHRoZSBub2RlJ3MgcHJldmlvdXMgdG8gaXRzIG5leHRcbiAgICBpZiAobm9kZS5nZXRQcmV2KCkgPT09IG51bGwpIHtcbiAgICAgICAgdGhpcy5faGVhZCA9IG5vZGUuZ2V0TmV4dCgpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgbm9kZS5nZXRQcmV2KCkuc2V0TmV4dChub2RlLmdldE5leHQoKSk7XG4gICAgfVxuICAgIC8vIGlmIHdlJ3JlIHJlbW92aW5nIHRoZSBsYXN0IGVsZW1lbnQgaW4gdGhlIGxpc3QsIGFkanVzdCB0aGUgdGFpbCxcbiAgICAvLyBvdGhlcndpc2UgY29ubmVjdCB0aGUgbm9kZSdzIG5leHQgdG8gaXRzIHByZXZpb3VzXG4gICAgaWYgKG5vZGUuZ2V0TmV4dCgpID09PSBudWxsKSB7XG4gICAgICAgIHRoaXMuX3RhaWwgPSBub2RlLmdldFByZXYoKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIG5vZGUuZ2V0TmV4dCgpLnNldFByZXYobm9kZS5nZXRQcmV2KCkpO1xuICAgIH1cbiAgICAvLyBkZWNyZW1lbnQgdGhlIGxlbmd0aFxuICAgIHRoaXMuX2xlbmd0aC0tO1xufTtcbmZ1bmN0aW9uIE5vZGUodmFsdWUsIHByZXYsIG5leHQpIHtcbiAgICB0aGlzLl92YWx1ZSA9IHZhbHVlO1xuICAgIHRoaXMuX3ByZXYgPSBwcmV2O1xuICAgIHRoaXMuX25leHQgPSBuZXh0O1xufVxuTm9kZS5wcm90b3R5cGUuZ2V0VmFsdWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xufTtcbk5vZGUucHJvdG90eXBlLmdldFByZXYgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3ByZXY7XG59O1xuTm9kZS5wcm90b3R5cGUuc2V0UHJldiA9IGZ1bmN0aW9uIChwcmV2KSB7XG4gICAgdGhpcy5fcHJldiA9IHByZXY7XG59O1xuTm9kZS5wcm90b3R5cGUuZ2V0TmV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5fbmV4dDtcbn07XG5Ob2RlLnByb3RvdHlwZS5zZXROZXh0ID0gZnVuY3Rpb24gKG5leHQpIHtcbiAgICB0aGlzLl9uZXh0ID0gbmV4dDtcbn07XG5tb2R1bGUuZXhwb3J0cyA9IERvdWJseUxpbmtlZExpc3Q7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kb3VibHlfbGlua2VkX2xpc3QuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/dist/lib/connection/result/doubly_linked_list.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/dist/lib/connection/result/result.js":
/*!*************************************************************************!*\
  !*** ./node_modules/snowflake-sdk/dist/lib/connection/result/result.js ***!
  \*************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst EventEmitter = (__webpack_require__(/*! events */ \"events\").EventEmitter);\nconst Util = __webpack_require__(/*! ../../util */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/util.js\");\nconst Errors = __webpack_require__(/*! ../../errors */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/errors.js\");\nconst Chunk = __webpack_require__(/*! ./chunk */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/connection/result/chunk.js\");\nconst ResultStream = __webpack_require__(/*! ./result_stream */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/connection/result/result_stream.js\");\nconst ChunkCache = __webpack_require__(/*! ./chunk_cache */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/connection/result/chunk_cache.js\");\nconst Column = __webpack_require__(/*! ./column */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/connection/result/column.js\");\nconst StatementType = __webpack_require__(/*! ./statement_type */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/connection/result/statement_type.js\");\nconst ColumnNamesCreator = __webpack_require__(/*! ./unique_column_name_creator */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/connection/result/unique_column_name_creator.js\");\nconst RowMode = __webpack_require__(/*! ../../constants/row_mode */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/constants/row_mode.js\");\nconst Logger = (__webpack_require__(/*! ../../logger */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/logger.js\")[\"default\"]);\nconst ExecutionTimer = __webpack_require__(/*! ../../logger/execution_timer */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/logger/execution_timer.js\");\n/**\n * Creates a new Result.\n *\n * @param {Object} options\n * @constructor\n */\nfunction Result(options) {\n    let chunkHeaders;\n    let length;\n    let index;\n    let parameter;\n    let mapColumnNameToIndices;\n    let columns;\n    let column;\n    let version;\n    // assert that options is a valid object that contains a response, statement,\n    // services and connection config\n    Errors.assertInternal(Util.isObject(options));\n    Errors.assertInternal(Util.isObject(options.response));\n    Errors.assertInternal(Util.isObject(options.statement));\n    Errors.assertInternal(Util.isObject(options.services));\n    Errors.assertInternal(Util.isObject(options.connectionConfig));\n    // save the statement, services and connection config\n    this._statement = options.statement;\n    this._services = options.services;\n    this._connectionConfig = options.connectionConfig;\n    const data = options.response.data;\n    this._queryId = data.queryId;\n    this._version = version = String(data.version); // don't rely on the version being a number\n    this._returnedRows = data.returned;\n    this._totalRows = data.total;\n    this._statementTypeId = data.statementTypeId;\n    this._queryContext = data.queryContext;\n    // if no chunk headers were specified, but a query-result-master-key (qrmk)\n    // was specified, build the chunk headers from the qrmk\n    chunkHeaders = data.chunkHeaders;\n    if (!Util.isObject(chunkHeaders) && Util.isString(data.qrmk)) {\n        chunkHeaders = {\n            'x-amz-server-side-encryption-customer-algorithm': 'AES256',\n            'x-amz-server-side-encryption-customer-key': data.qrmk,\n        };\n    }\n    this._chunkHeaders = chunkHeaders;\n    // build a session state object from the response data; this can be used to\n    // get the values of the current role, current warehouse, current database,\n    // etc.\n    this._sessionState = createSessionState(data);\n    // convert the parameters array to a map\n    const parametersMap = {};\n    const parametersArray = data.parameters || [];\n    for (index = 0, length = parametersArray.length; index < length; index++) {\n        parameter = parametersArray[index];\n        parametersMap[parameter.name] = parameter.value;\n    }\n    // save the parameters array\n    this._parametersArray = parametersArray;\n    // TODO: add timezone related information to columns\n    // create columns from the rowtype array returned in the result\n    const rowtype = data.rowtype;\n    const numColumns = rowtype.length;\n    this._columns = columns = new Array(numColumns);\n    // convert the rowtype array to an array of columns and build an inverted\n    // index map in which the keys are the column names and the values are the\n    // indices of the columns with the corresponding names\n    this._mapColumnNameToIndices = mapColumnNameToIndices = {};\n    const rowMode = options.rowMode;\n    if (rowMode === RowMode.OBJECT_WITH_RENAMED_DUPLICATED_COLUMNS) {\n        ColumnNamesCreator.addOverridenNamesForDuplicatedColumns(rowtype);\n    }\n    Logger().trace(`Mapping columns in resultset (total: ${numColumns})`);\n    for (let index = 0; index < numColumns; index++) {\n        // create a new column and add it to the columns array\n        columns[index] = column = new Column(rowtype[index], index, parametersMap, version);\n        // if we don't already have an index array for a column with this name,\n        // create a new one, otherwise just append to the existing array of indices\n        mapColumnNameToIndices[column.getName()] = mapColumnNameToIndices[column.getName()] || [];\n        mapColumnNameToIndices[column.getName()].push(index);\n    }\n    Logger().trace('Finished mapping columns.');\n    // create chunks\n    //TODO SNOW-2090883 chunks or rowset should verified on containing data\n    this._chunks = createChunks(data.chunks, data.rowset, this._columns, this._mapColumnNameToIndices, this._chunkHeaders, parametersMap, this._version, this._statement, this._services);\n    this.getQueryContext = function () {\n        return this._queryContext;\n    };\n    /* Disable the ChunkCache until the implementation is complete.\n     *\n     *   // create a chunk cache and save a reference to it in case we need to\n     *   // TODO: should we be clearing the cache at some point, e.g. when the result\n     *   // is destroyed?\n     *   this._chunkCache = createChunkCache(\n     *   this._chunks,\n     *   this._connectionConfig.getResultChunkCacheSize());\n     */\n}\nUtil.inherits(Result, EventEmitter);\n/**\n * Refreshes the result by updating the chunk urls.\n *\n * @param response\n */\nResult.prototype.refresh = function (response) {\n    const chunks = this._chunks;\n    const chunkCfgs = response.data.chunks;\n    for (let index = 0, length = chunks.length; index < length; index++) {\n        chunks[index].setUrl(chunkCfgs[index].url);\n    }\n};\n/**\n * TODO\n *\n * @param chunks\n * @param capacity\n *\n * @returns {ChunkCache}\n */\n// eslint-disable-next-line no-unused-vars\nfunction createChunkCache(chunks, capacity) {\n    let index;\n    let length;\n    // create a chunk cache\n    const chunkCache = new ChunkCache(capacity);\n    // every time a chunk is loaded, add it to the cache\n    // TODO: should the caching be based on most recently 'used' or most recently\n    // 'loaded'?\n    const onLoadComplete = function (err, chunk) {\n        if (!err) {\n            chunkCache.put(chunk);\n        }\n    };\n    // subscribe to the 'loadcomplete' event on all the chunks\n    for (index = 0, length = chunks.length; index < length; index++) {\n        chunks[index].on('loadcomplete', onLoadComplete);\n    }\n    // TODO: do we need to unsubscribe from the loadcomplete event at some point?\n    return chunkCache;\n}\n/**\n * Creates a session state object from the values of the current role, current\n * warehouse, etc., returned in the result response.\n *\n * @param responseData\n *\n * @returns {Object}\n */\nfunction createSessionState(responseData) {\n    const currentRole = responseData.finalRoleName;\n    const currentWarehouse = responseData.finalWarehouseName;\n    const currentDatabaseProvider = responseData.databaseProvider;\n    const currentDatabase = responseData.finalDatabaseName;\n    const currentSchema = responseData.finalSchemaName;\n    return {\n        getCurrentRole: function () {\n            return currentRole;\n        },\n        getCurrentWarehouse: function () {\n            return currentWarehouse;\n        },\n        getCurrentDatabaseProvider: function () {\n            return currentDatabaseProvider;\n        },\n        getCurrentDatabase: function () {\n            return currentDatabase;\n        },\n        getCurrentSchema: function () {\n            return currentSchema;\n        },\n    };\n}\n/**\n * Creates an array of Chunk instances from the chunk-related information in the\n * result response.\n *\n * @param chunkCfgs\n * @param rowset\n * @param columns\n * @param mapColumnNameToIndices\n * @param chunkHeaders\n * @param statementParameters\n * @param resultVersion\n * @param statement\n * @param services\n *\n * @returns {Chunk}\n */\nfunction createChunks(chunkCfgs, rowset, columns, mapColumnNameToIndices, chunkHeaders, statementParameters, resultVersion, statement, services) {\n    let startIndex;\n    let index;\n    let chunkCfg;\n    // if we don't have any chunks, or if some records were returned inline,\n    // fabricate a config object for the first chunk\n    chunkCfgs = chunkCfgs || [];\n    if (!chunkCfgs || rowset.length > 0) {\n        chunkCfgs.unshift({\n            rowCount: rowset.length,\n            url: null,\n            rowset: rowset,\n        });\n    }\n    const chunks = new Array(chunkCfgs.length);\n    Logger().trace(`Downloading ${chunkCfgs.length} chunks`);\n    // loop over the chunk config objects and build Chunk instances out of them\n    startIndex = 0;\n    const length = chunkCfgs.length;\n    for (index = 0; index < length; index++) {\n        chunkCfg = chunkCfgs[index];\n        // augment the chunk config object with additional information\n        chunkCfg.statement = statement;\n        chunkCfg.services = services;\n        chunkCfg.startIndex = startIndex;\n        chunkCfg.columns = columns;\n        chunkCfg.mapColumnNameToIndices = mapColumnNameToIndices;\n        chunkCfg.chunkHeaders = chunkHeaders;\n        chunkCfg.statementParameters = statementParameters;\n        chunkCfg.resultVersion = resultVersion;\n        // increment the start index for the next chunk\n        startIndex += chunkCfg.rowCount;\n        // create a new Chunk from the config object, and add it to the chunks array\n        chunks[index] = new Chunk(chunkCfg);\n    }\n    return chunks;\n}\n/**\n * Returns the chunks in this result that overlap with a specified window.\n *\n * @param {Number} start the start index of the window.\n * @param {Number} end the end index of the window.\n *\n * @returns {Chunk[]}\n */\nResult.prototype.findOverlappingChunks = function (start, end) {\n    return findOverlappingChunks(this._chunks, start, end);\n};\n/**\n * Fetches the rows from the result.\n *\n * @param {Object} options\n *\n * @returns {EventEmitter}\n */\nResult.prototype.fetchRows = function (options) {\n    // validate options\n    Errors.assertInternal(Util.isObject(options));\n    Errors.assertInternal(Util.isFunction(options.each));\n    // if no value was specified for the start index or if the specified start\n    // index is negative, default to 0, otherwise truncate the fractional part\n    let start = options.startIndex;\n    start = !Util.isNumber(start) || start < 0 ? 0 : Math.floor(start);\n    // if no value was specified for the end index or if the end index is larger\n    // than the row index of the last row, default to the index of the last row,\n    // otherwise truncate the fractional part\n    const returnedRows = this.getReturnedRows();\n    let end = options.endIndex;\n    end = !Util.isNumber(end) || end >= returnedRows ? returnedRows - 1 : Math.floor(end);\n    // create an EventEmitter that will be returned to the\n    // caller to track progress of the fetch-rows operation\n    const operation = new EventEmitter();\n    // define a function to asynchronously complete the operation\n    const asyncComplete = function (err, continueCallback) {\n        process.nextTick(function () {\n            operation.emit('complete', err, continueCallback);\n        });\n    };\n    // if the start index is greater than the end index, asynchronously\n    // complete the operation and return the operation\n    if (start > end) {\n        // the operation is now complete\n        asyncComplete();\n        return operation;\n    }\n    const connectionConfig = this._connectionConfig;\n    // create a context object to store the state of the operation; we could store\n    // the state in the operation itself, but it would be good to keep this state\n    // private\n    const context = {\n        maxNumRowsToProcess: end - start + 1,\n        numRowsProcessed: 0,\n        rowBatchSize: connectionConfig.getResultProcessingBatchSize(),\n        rowBatchDuration: connectionConfig.getResultProcessingBatchDuration(),\n    };\n    // identify the chunks needed to get the requested rows, and create a stream\n    // to read their contents\n    const resultStream = new ResultStream({\n        chunks: findOverlappingChunks(this._chunks, start, end),\n        prefetchSize: connectionConfig.getResultPrefetch(),\n    });\n    // subscribe to the stream's 'close' event\n    resultStream.on('close', function (err, continueCallback) {\n        // the operation is now complete\n        asyncComplete(err, continueCallback);\n    });\n    // subscribe to the stream's 'data' event\n    resultStream.on('data', function (chunk) {\n        // start processing the chunk rows\n        processChunk(chunk);\n    });\n    /**\n     * Processes the rows in a given chunk.\n     *\n     * @param {Object} chunk\n     */\n    const processChunk = function (chunk) {\n        // get all the rows in the current chunk that overlap with the requested\n        // window\n        Logger().debug(`Start Processing chunks`);\n        const timer = new ExecutionTimer().start();\n        const chunkStart = chunk.getStartIndex();\n        const chunkEnd = chunk.getEndIndex();\n        const rows = chunk\n            .getRows()\n            .slice(Math.max(chunkStart, start) - chunkStart, Math.min(chunkEnd, end) + 1 - chunkStart);\n        let rowIndex = 0;\n        const rowsLength = rows.length;\n        // create a function that can be called to batch-process rows\n        const processRows = function () {\n            // get the start position and start time\n            const startIndex = rowIndex;\n            const startTime = Date.now();\n            const each = options.each;\n            let stoppedProcessingRows;\n            while (rowIndex < rowsLength) {\n                // invoke the each() callback on the current row\n                const ret = each(rows[rowIndex++]);\n                context.numRowsProcessed++;\n                // if the callback returned false, stop processing rows\n                if (ret === false) {\n                    stoppedProcessingRows = true;\n                    break;\n                }\n                // use the current position and current time to check if we've been\n                // processing rows for too long; if so, leave the rest for the next\n                // tick of the event loop\n                if (rowIndex - startIndex >= context.rowBatchSize &&\n                    Date.now() - startTime > context.rowBatchDuration) {\n                    process.nextTick(processRows);\n                    break;\n                }\n            }\n            // if there are no more rows for us to process in this chunk\n            if (!(rowIndex < rowsLength) || stoppedProcessingRows) {\n                // if we exhausted all the rows in this chunk and we haven't yet\n                // processed all the rows we want to process, ask the result stream to\n                // do another read\n                if (!(rowIndex < rowsLength) && context.numRowsProcessed !== context.maxNumRowsToProcess) {\n                    resultStream.read();\n                }\n                else {\n                    // we've either processed all the rows we wanted to process or we\n                    // were told to stop processing rows by the each() callback; either\n                    // way, close the result stream to complete the operation\n                    resultStream.asyncClose();\n                }\n            }\n        };\n        // start processing rows\n        processRows();\n        timer.stop();\n        Logger().debug(`Finished processing Chunks: Processed ${rowsLength} rows in ${timer.getDuration()} ms`);\n    };\n    // start reading from the stream in the next tick of the event loop\n    process.nextTick(function () {\n        resultStream.read();\n    });\n    return operation;\n};\n/**\n * Given a sorted array of chunks, returns a sub-array that overlaps with a\n * specified window.\n *\n * @param chunks\n * @param windowStart\n * @param windowEnd\n *\n * @returns {Array}\n */\nfunction findOverlappingChunks(chunks, windowStart, windowEnd) {\n    const overlappingChunks = [];\n    if (chunks.length !== 0) {\n        // get the index of the first chunk that overlaps with the specified window\n        let index = findFirstOverlappingChunk(chunks, windowStart, windowEnd);\n        // iterate over the chunks starting with the first overlapping chunk and\n        // keep going until there's no overlap\n        for (let length = chunks.length; index < length; index++) {\n            const chunk = chunks[index];\n            if (chunk.overlapsWithWindow(windowStart, windowEnd)) {\n                overlappingChunks.push(chunk);\n            }\n            else {\n                // no future chunks will overlap because the chunks array is sorted\n                break;\n            }\n        }\n    }\n    return overlappingChunks;\n}\n/**\n * Given a sorted array of chunks, returns the index of the first chunk in the\n * array that overlaps with a specified window.\n *\n * @param chunks\n * @param windowStartIndex\n * @param windowEndIndex\n *\n * @returns {number}\n */\nfunction findFirstOverlappingChunk(chunks, windowStartIndex, windowEndIndex) {\n    const helper = function (chunks, chunkIndexLeft, chunkIndexRight, windowStartIndex, windowEndIndex) {\n        let result;\n        let middleChunkEndIndex;\n        // initialize the return value to -1\n        result = -1;\n        // compute the index of the middle chunk and get the middle chunk\n        const chunkIndexMiddle = Math.floor((chunkIndexLeft + chunkIndexRight) / 2);\n        const middleChunk = chunks[chunkIndexMiddle];\n        // if we have two or fewer chunks\n        if (chunkIndexMiddle === chunkIndexLeft || chunkIndexMiddle === chunkIndexRight) {\n            // if we have just one chunk, and it overlaps with the specified window,\n            // we've found the chunk we were looking for\n            if (chunkIndexLeft === chunkIndexRight) {\n                if (middleChunk.overlapsWithWindow(windowStartIndex, windowEndIndex)) {\n                    result = chunkIndexLeft;\n                }\n            }\n            else {\n                // we just have two chunks left to check\n                // if the first chunk overlaps with the specified window, that's the\n                // chunk we were looking for\n                if (chunks[chunkIndexLeft].overlapsWithWindow(windowStartIndex, windowEndIndex)) {\n                    result = chunkIndexLeft;\n                }\n                else if (chunks[chunkIndexRight].overlapsWithWindow(windowStartIndex, windowEndIndex)) {\n                    // otherwise, if the second chunk overlaps with the specified window,\n                    // that's the chunk we were looking for\n                    result = chunkIndexRight;\n                }\n            }\n            return result;\n        }\n        // if the middle chunk does not overlap with the specified window\n        if (!middleChunk.overlapsWithWindow(windowStartIndex, windowEndIndex)) {\n            middleChunkEndIndex = middleChunk.getEndIndex();\n            // if the window is to the right of the middle chunk,\n            // recurse on the right half\n            if (windowStartIndex > middleChunkEndIndex) {\n                return helper(chunks, chunkIndexMiddle, chunkIndexRight, windowStartIndex, windowEndIndex);\n            }\n            else {\n                // recurse on the left half\n                return helper(chunks, chunkIndexLeft, chunkIndexMiddle, windowStartIndex, windowEndIndex);\n            }\n        }\n        else {\n            // if the middle chunk overlaps but the chunk before it does not, the\n            // middle chunk is the one we were looking\n            if (chunkIndexMiddle === 0 ||\n                !chunks[chunkIndexMiddle - 1].overlapsWithWindow(windowStartIndex, windowEndIndex)) {\n                return chunkIndexMiddle;\n            }\n            else {\n                // recurse on the left half\n                return helper(chunks, chunkIndexLeft, chunkIndexMiddle, windowStartIndex, windowEndIndex);\n            }\n        }\n    };\n    return helper(chunks, 0, chunks.length - 1, windowStartIndex, windowEndIndex);\n}\n/**\n * Returns the columns in this result.\n *\n * @returns {Object[]}\n */\nResult.prototype.getColumns = function () {\n    return this._columns;\n};\n/**\n * Given a column identifier, returns the corresponding column. The column\n * identifier can be either the column name (String) or the column index\n * (Number). If a column name is specified and there is more than one column\n * with that name, the first column with the specified name will be returned.\n *\n * @param {String | Number} columnIdentifier\n *\n * @returns {Object}\n */\nResult.prototype.getColumn = function (columnIdentifier) {\n    let columnIndex;\n    // if the column identifier is a string, treat it as a column\n    // name and use it to get the index of the specified column\n    if (Util.isString(columnIdentifier)) {\n        // if a valid column name was specified, get the index of the first column\n        // with the specified name\n        if (Object.prototype.hasOwnProperty.call(this._mapColumnNameToIndices, columnIdentifier)) {\n            columnIndex = this._mapColumnNameToIndices[columnIdentifier][0];\n        }\n    }\n    else if (Util.isNumber(columnIdentifier)) {\n        // if the column identifier is a number, treat it as a column index\n        columnIndex = columnIdentifier;\n    }\n    return this._columns[columnIndex];\n};\n/**\n * Returns the statement id generated by the server for the statement that\n * produced this result.\n *\n * Should use getQueryId instead.\n * @deprecated\n * @returns {string}\n */\nResult.prototype.getStatementId = function () {\n    return this._queryId;\n};\n/**\n * Returns the query id generated by the server for the statement that\n * produced this result.\n *\n * @returns {string}\n */\nResult.prototype.getQueryId = function () {\n    return this._queryId;\n};\n/**\n * Returns the number of rows in this result.\n *\n * @returns {number}\n */\nResult.prototype.getReturnedRows = function () {\n    return this._returnedRows;\n};\n/**\n * Returns the number of rows updated by the statement that produced this\n * result. If the statement isn't a DML, we return -1.\n *\n * @returns {Number}\n */\nResult.prototype.getNumUpdatedRows = function () {\n    // initialize if necessary\n    if (!this._numUpdatedRows) {\n        let numUpdatedRows = -1;\n        // the updated-rows metric only applies to dml's\n        const statementTypeId = this._statementTypeId;\n        if (StatementType.isDml(statementTypeId)) {\n            if (StatementType.isInsert(statementTypeId) ||\n                StatementType.isUpdate(statementTypeId) ||\n                StatementType.isDelete(statementTypeId) ||\n                StatementType.isMerge(statementTypeId) ||\n                StatementType.isMultiTableInsert(statementTypeId)) {\n                const chunks = this._chunks;\n                const columns = this._columns;\n                // if the statement is a dml, the result should be small,\n                // meaning we only have one chunk\n                Errors.assertInternal(Util.isArray(chunks) && chunks.length === 1);\n                // add up the values in all the columns\n                numUpdatedRows = 0;\n                const rows = chunks[0].getRows();\n                for (let rowIndex = 0, rowsLength = rows.length; rowIndex < rowsLength; rowIndex++) {\n                    const row = rows[rowIndex];\n                    for (let colIndex = 0, colsLength = columns.length; colIndex < colsLength; colIndex++) {\n                        numUpdatedRows += Number(row.getColumnValue(columns[colIndex].getId()));\n                    }\n                }\n            }\n            // TODO: handle 'copy' and 'unload'\n        }\n        this._numUpdatedRows = numUpdatedRows;\n    }\n    return this._numUpdatedRows;\n};\n/**\n * Returns the number of rows we would have had in this result if the value of\n * the ROWS_PER_RESULTSET parameter was 0 at the time this statement was\n * executed.\n *\n * @returns {number}\n */\nResult.prototype.getTotalRows = function () {\n    return this._totalRows;\n};\n/**\n * Returns the parameters associated with this result. These parameters contain\n * directives about how to consume and present the result.\n *\n * @returns {Object[]}\n */\nResult.prototype.getParametersArray = function () {\n    return this._parametersArray;\n};\n/**\n * Returns an object that contains information about the values of the current\n * warehouse, current database, and any other session-related state when the\n * statement that produced this result finished executing.\n *\n * @returns {Object}\n */\nResult.prototype.getSessionState = function () {\n    return this._sessionState;\n};\n/**\n * Returns the version associated with this result.\n *\n * @returns {string}\n */\nResult.prototype.getVersion = function () {\n    return this._version;\n};\nmodule.exports = Result;\n//# sourceMappingURL=result.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/dist/lib/connection/result/result.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/dist/lib/connection/result/result_stream.js":
/*!********************************************************************************!*\
  !*** ./node_modules/snowflake-sdk/dist/lib/connection/result/result_stream.js ***!
  \********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst EventEmitter = (__webpack_require__(/*! events */ \"events\").EventEmitter);\nconst Util = __webpack_require__(/*! ../../util */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/util.js\");\nconst Errors = __webpack_require__(/*! ../../errors */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/errors.js\");\n/**\n * Creates a stream-like object that can be used to read the contents of an\n * array of chunks with the ability to prefetch chunks as we go. Every time the\n * contents of a new chunk become available, a 'data' event is fired. When there\n * are no more chunks to read, a 'close' event is fired to indicate that the\n * read operation is complete. If no chunks are specified in the options, the\n * stream asynchronously fires a 'close' event after it is returned.\n *\n * @param {Object} [options] An options object with the following properties:\n *   {Object[]} chunks       - The chunks to read.\n *   {Number}   prefetchSize - The number of chunks to prefetch every time a new\n *     chunk is read.\n *\n * @constructor\n */\nfunction ResultStream(options) {\n    // options should be an object\n    Errors.assertInternal(Util.isObject(options));\n    const chunks = options.chunks;\n    const prefetchSize = options.prefetchSize;\n    // chunks should be an array\n    Errors.assertInternal(Util.isArray(chunks));\n    // prefetch size should be non-negative\n    Errors.assertInternal(Util.isNumber(prefetchSize) && prefetchSize >= 0);\n    // Current chunk being streamed. Start with the first chunk.\n    let currChunk = 0;\n    const self = this;\n    /**\n     * Called when a chunk fires a 'loadcomplete' event.\n     *\n     * @param {Error} err\n     * @param {Chunk} chunk\n     */\n    const onLoadComplete = function (err, chunk) {\n        // unsubscribe from the 'loadcomplete' event\n        chunk.removeListener('loadcomplete', onLoadComplete);\n        // if the chunk load succeeded\n        if (!err) {\n            // Move on to the next chunk\n            currChunk++;\n            // emit an event to signal that new data is available\n            self.emit('data', chunk);\n        }\n        else {\n            // close the stream with an error; also, include a callback when emitting\n            // the event in case someone wants to fix the problem and ask us to\n            // continue from where we got interrupted\n            close(self, err, doLoad);\n        }\n    };\n    /**\n     * Identifies the next chunk to load and issues requests to fetch both its\n     * contents plus the contents of the next few chunks. If there are no more\n     * chunks to load, a 'close' event is fired on the stream to notify\n     * subscribers that all the chunks have been successfully read.\n     */\n    const doLoad = function () {\n        // All chunks were loaded, we're done\n        if (currChunk >= chunks.length) {\n            self.asyncClose();\n        }\n        else {\n            // Subscribe to the loadcomplete event on the current chunk being streamed to ensure the\n            // rows are returned in the correct order and not in the order chunk data are received\n            chunks[currChunk].on('loadcomplete', onLoadComplete);\n            // Fire off requests to load all the chunks in the buffer that aren't already loading\n            let chunk, index;\n            for (index = currChunk; index < chunks.length && index <= currChunk + prefetchSize; index++) {\n                chunk = chunks[index];\n                if (!chunk.isLoading()) {\n                    chunk.load();\n                }\n            }\n        }\n    };\n    /**\n     * Reads the next chunk of data in the result stream.\n     */\n    this.read = function () {\n        // TODO: if there are no more chunks to read, should we raise an error?\n        // TODO: what if we're already in the middle of a read?\n        // read the next chunk\n        doLoad();\n    };\n}\nUtil.inherits(ResultStream, EventEmitter);\n/**\n * Asynchronously closes this stream.\n *\n * @returns {ResultStream}\n */\nResultStream.prototype.asyncClose = function () {\n    // schedule an operation to close the stream in\n    // the next tick of the event loop\n    const self = this;\n    process.nextTick(function () {\n        close(self);\n    });\n    return this;\n};\n/**\n * Closes a given result stream.\n *\n * @param {ResultStream} stream The stream to close.\n * @param {Error} [err] The error, if any, to fire with the close event.\n * @param {Function} [callback] The callback, if any, to fire with the close\n *   event. This is in case someone wants to fix the problem and ask the stream\n *   to resume from the point of interruption.\n */\nfunction close(stream, err, callback) {\n    stream.emit('close', err, callback);\n}\nmodule.exports = ResultStream;\n//# sourceMappingURL=result_stream.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9kaXN0L2xpYi9jb25uZWN0aW9uL3Jlc3VsdC9yZXN1bHRfc3RyZWFtLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IscUJBQXFCLDBEQUE4QjtBQUNuRCxhQUFhLG1CQUFPLENBQUMsdUVBQVk7QUFDakMsZUFBZSxtQkFBTyxDQUFDLDJFQUFjO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsTUFBTSxVQUFVO0FBQ2hCLE1BQU0sVUFBVTtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QixlQUFlLE9BQU87QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0NBQStDO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLDREQUE0RDtBQUNoRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsY0FBYztBQUN6QixXQUFXLE9BQU87QUFDbEIsV0FBVyxVQUFVO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy93YW5naGFvdGFpL0Rlc2t0b3AvZWx2ZW5sYWIvSFRWL25vZGVfbW9kdWxlcy9zbm93Zmxha2Utc2RrL2Rpc3QvbGliL2Nvbm5lY3Rpb24vcmVzdWx0L3Jlc3VsdF9zdHJlYW0uanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXI7XG5jb25zdCBVdGlsID0gcmVxdWlyZSgnLi4vLi4vdXRpbCcpO1xuY29uc3QgRXJyb3JzID0gcmVxdWlyZSgnLi4vLi4vZXJyb3JzJyk7XG4vKipcbiAqIENyZWF0ZXMgYSBzdHJlYW0tbGlrZSBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCB0byByZWFkIHRoZSBjb250ZW50cyBvZiBhblxuICogYXJyYXkgb2YgY2h1bmtzIHdpdGggdGhlIGFiaWxpdHkgdG8gcHJlZmV0Y2ggY2h1bmtzIGFzIHdlIGdvLiBFdmVyeSB0aW1lIHRoZVxuICogY29udGVudHMgb2YgYSBuZXcgY2h1bmsgYmVjb21lIGF2YWlsYWJsZSwgYSAnZGF0YScgZXZlbnQgaXMgZmlyZWQuIFdoZW4gdGhlcmVcbiAqIGFyZSBubyBtb3JlIGNodW5rcyB0byByZWFkLCBhICdjbG9zZScgZXZlbnQgaXMgZmlyZWQgdG8gaW5kaWNhdGUgdGhhdCB0aGVcbiAqIHJlYWQgb3BlcmF0aW9uIGlzIGNvbXBsZXRlLiBJZiBubyBjaHVua3MgYXJlIHNwZWNpZmllZCBpbiB0aGUgb3B0aW9ucywgdGhlXG4gKiBzdHJlYW0gYXN5bmNocm9ub3VzbHkgZmlyZXMgYSAnY2xvc2UnIGV2ZW50IGFmdGVyIGl0IGlzIHJldHVybmVkLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gQW4gb3B0aW9ucyBvYmplY3Qgd2l0aCB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gKiAgIHtPYmplY3RbXX0gY2h1bmtzICAgICAgIC0gVGhlIGNodW5rcyB0byByZWFkLlxuICogICB7TnVtYmVyfSAgIHByZWZldGNoU2l6ZSAtIFRoZSBudW1iZXIgb2YgY2h1bmtzIHRvIHByZWZldGNoIGV2ZXJ5IHRpbWUgYSBuZXdcbiAqICAgICBjaHVuayBpcyByZWFkLlxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBSZXN1bHRTdHJlYW0ob3B0aW9ucykge1xuICAgIC8vIG9wdGlvbnMgc2hvdWxkIGJlIGFuIG9iamVjdFxuICAgIEVycm9ycy5hc3NlcnRJbnRlcm5hbChVdGlsLmlzT2JqZWN0KG9wdGlvbnMpKTtcbiAgICBjb25zdCBjaHVua3MgPSBvcHRpb25zLmNodW5rcztcbiAgICBjb25zdCBwcmVmZXRjaFNpemUgPSBvcHRpb25zLnByZWZldGNoU2l6ZTtcbiAgICAvLyBjaHVua3Mgc2hvdWxkIGJlIGFuIGFycmF5XG4gICAgRXJyb3JzLmFzc2VydEludGVybmFsKFV0aWwuaXNBcnJheShjaHVua3MpKTtcbiAgICAvLyBwcmVmZXRjaCBzaXplIHNob3VsZCBiZSBub24tbmVnYXRpdmVcbiAgICBFcnJvcnMuYXNzZXJ0SW50ZXJuYWwoVXRpbC5pc051bWJlcihwcmVmZXRjaFNpemUpICYmIHByZWZldGNoU2l6ZSA+PSAwKTtcbiAgICAvLyBDdXJyZW50IGNodW5rIGJlaW5nIHN0cmVhbWVkLiBTdGFydCB3aXRoIHRoZSBmaXJzdCBjaHVuay5cbiAgICBsZXQgY3VyckNodW5rID0gMDtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICAvKipcbiAgICAgKiBDYWxsZWQgd2hlbiBhIGNodW5rIGZpcmVzIGEgJ2xvYWRjb21wbGV0ZScgZXZlbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0Vycm9yfSBlcnJcbiAgICAgKiBAcGFyYW0ge0NodW5rfSBjaHVua1xuICAgICAqL1xuICAgIGNvbnN0IG9uTG9hZENvbXBsZXRlID0gZnVuY3Rpb24gKGVyciwgY2h1bmspIHtcbiAgICAgICAgLy8gdW5zdWJzY3JpYmUgZnJvbSB0aGUgJ2xvYWRjb21wbGV0ZScgZXZlbnRcbiAgICAgICAgY2h1bmsucmVtb3ZlTGlzdGVuZXIoJ2xvYWRjb21wbGV0ZScsIG9uTG9hZENvbXBsZXRlKTtcbiAgICAgICAgLy8gaWYgdGhlIGNodW5rIGxvYWQgc3VjY2VlZGVkXG4gICAgICAgIGlmICghZXJyKSB7XG4gICAgICAgICAgICAvLyBNb3ZlIG9uIHRvIHRoZSBuZXh0IGNodW5rXG4gICAgICAgICAgICBjdXJyQ2h1bmsrKztcbiAgICAgICAgICAgIC8vIGVtaXQgYW4gZXZlbnQgdG8gc2lnbmFsIHRoYXQgbmV3IGRhdGEgaXMgYXZhaWxhYmxlXG4gICAgICAgICAgICBzZWxmLmVtaXQoJ2RhdGEnLCBjaHVuayk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBjbG9zZSB0aGUgc3RyZWFtIHdpdGggYW4gZXJyb3I7IGFsc28sIGluY2x1ZGUgYSBjYWxsYmFjayB3aGVuIGVtaXR0aW5nXG4gICAgICAgICAgICAvLyB0aGUgZXZlbnQgaW4gY2FzZSBzb21lb25lIHdhbnRzIHRvIGZpeCB0aGUgcHJvYmxlbSBhbmQgYXNrIHVzIHRvXG4gICAgICAgICAgICAvLyBjb250aW51ZSBmcm9tIHdoZXJlIHdlIGdvdCBpbnRlcnJ1cHRlZFxuICAgICAgICAgICAgY2xvc2Uoc2VsZiwgZXJyLCBkb0xvYWQpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBJZGVudGlmaWVzIHRoZSBuZXh0IGNodW5rIHRvIGxvYWQgYW5kIGlzc3VlcyByZXF1ZXN0cyB0byBmZXRjaCBib3RoIGl0c1xuICAgICAqIGNvbnRlbnRzIHBsdXMgdGhlIGNvbnRlbnRzIG9mIHRoZSBuZXh0IGZldyBjaHVua3MuIElmIHRoZXJlIGFyZSBubyBtb3JlXG4gICAgICogY2h1bmtzIHRvIGxvYWQsIGEgJ2Nsb3NlJyBldmVudCBpcyBmaXJlZCBvbiB0aGUgc3RyZWFtIHRvIG5vdGlmeVxuICAgICAqIHN1YnNjcmliZXJzIHRoYXQgYWxsIHRoZSBjaHVua3MgaGF2ZSBiZWVuIHN1Y2Nlc3NmdWxseSByZWFkLlxuICAgICAqL1xuICAgIGNvbnN0IGRvTG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gQWxsIGNodW5rcyB3ZXJlIGxvYWRlZCwgd2UncmUgZG9uZVxuICAgICAgICBpZiAoY3VyckNodW5rID49IGNodW5rcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHNlbGYuYXN5bmNDbG9zZSgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gU3Vic2NyaWJlIHRvIHRoZSBsb2FkY29tcGxldGUgZXZlbnQgb24gdGhlIGN1cnJlbnQgY2h1bmsgYmVpbmcgc3RyZWFtZWQgdG8gZW5zdXJlIHRoZVxuICAgICAgICAgICAgLy8gcm93cyBhcmUgcmV0dXJuZWQgaW4gdGhlIGNvcnJlY3Qgb3JkZXIgYW5kIG5vdCBpbiB0aGUgb3JkZXIgY2h1bmsgZGF0YSBhcmUgcmVjZWl2ZWRcbiAgICAgICAgICAgIGNodW5rc1tjdXJyQ2h1bmtdLm9uKCdsb2FkY29tcGxldGUnLCBvbkxvYWRDb21wbGV0ZSk7XG4gICAgICAgICAgICAvLyBGaXJlIG9mZiByZXF1ZXN0cyB0byBsb2FkIGFsbCB0aGUgY2h1bmtzIGluIHRoZSBidWZmZXIgdGhhdCBhcmVuJ3QgYWxyZWFkeSBsb2FkaW5nXG4gICAgICAgICAgICBsZXQgY2h1bmssIGluZGV4O1xuICAgICAgICAgICAgZm9yIChpbmRleCA9IGN1cnJDaHVuazsgaW5kZXggPCBjaHVua3MubGVuZ3RoICYmIGluZGV4IDw9IGN1cnJDaHVuayArIHByZWZldGNoU2l6ZTsgaW5kZXgrKykge1xuICAgICAgICAgICAgICAgIGNodW5rID0gY2h1bmtzW2luZGV4XTtcbiAgICAgICAgICAgICAgICBpZiAoIWNodW5rLmlzTG9hZGluZygpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNodW5rLmxvYWQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJlYWRzIHRoZSBuZXh0IGNodW5rIG9mIGRhdGEgaW4gdGhlIHJlc3VsdCBzdHJlYW0uXG4gICAgICovXG4gICAgdGhpcy5yZWFkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBUT0RPOiBpZiB0aGVyZSBhcmUgbm8gbW9yZSBjaHVua3MgdG8gcmVhZCwgc2hvdWxkIHdlIHJhaXNlIGFuIGVycm9yP1xuICAgICAgICAvLyBUT0RPOiB3aGF0IGlmIHdlJ3JlIGFscmVhZHkgaW4gdGhlIG1pZGRsZSBvZiBhIHJlYWQ/XG4gICAgICAgIC8vIHJlYWQgdGhlIG5leHQgY2h1bmtcbiAgICAgICAgZG9Mb2FkKCk7XG4gICAgfTtcbn1cblV0aWwuaW5oZXJpdHMoUmVzdWx0U3RyZWFtLCBFdmVudEVtaXR0ZXIpO1xuLyoqXG4gKiBBc3luY2hyb25vdXNseSBjbG9zZXMgdGhpcyBzdHJlYW0uXG4gKlxuICogQHJldHVybnMge1Jlc3VsdFN0cmVhbX1cbiAqL1xuUmVzdWx0U3RyZWFtLnByb3RvdHlwZS5hc3luY0Nsb3NlID0gZnVuY3Rpb24gKCkge1xuICAgIC8vIHNjaGVkdWxlIGFuIG9wZXJhdGlvbiB0byBjbG9zZSB0aGUgc3RyZWFtIGluXG4gICAgLy8gdGhlIG5leHQgdGljayBvZiB0aGUgZXZlbnQgbG9vcFxuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICBjbG9zZShzZWxmKTtcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcztcbn07XG4vKipcbiAqIENsb3NlcyBhIGdpdmVuIHJlc3VsdCBzdHJlYW0uXG4gKlxuICogQHBhcmFtIHtSZXN1bHRTdHJlYW19IHN0cmVhbSBUaGUgc3RyZWFtIHRvIGNsb3NlLlxuICogQHBhcmFtIHtFcnJvcn0gW2Vycl0gVGhlIGVycm9yLCBpZiBhbnksIHRvIGZpcmUgd2l0aCB0aGUgY2xvc2UgZXZlbnQuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2tdIFRoZSBjYWxsYmFjaywgaWYgYW55LCB0byBmaXJlIHdpdGggdGhlIGNsb3NlXG4gKiAgIGV2ZW50LiBUaGlzIGlzIGluIGNhc2Ugc29tZW9uZSB3YW50cyB0byBmaXggdGhlIHByb2JsZW0gYW5kIGFzayB0aGUgc3RyZWFtXG4gKiAgIHRvIHJlc3VtZSBmcm9tIHRoZSBwb2ludCBvZiBpbnRlcnJ1cHRpb24uXG4gKi9cbmZ1bmN0aW9uIGNsb3NlKHN0cmVhbSwgZXJyLCBjYWxsYmFjaykge1xuICAgIHN0cmVhbS5lbWl0KCdjbG9zZScsIGVyciwgY2FsbGJhY2spO1xufVxubW9kdWxlLmV4cG9ydHMgPSBSZXN1bHRTdHJlYW07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXN1bHRfc3RyZWFtLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/dist/lib/connection/result/result_stream.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/dist/lib/connection/result/row_stream.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/snowflake-sdk/dist/lib/connection/result/row_stream.js ***!
  \*****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst Readable = (__webpack_require__(/*! stream */ \"stream\").Readable);\nconst Util = __webpack_require__(/*! ../../util */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/util.js\");\nconst Errors = __webpack_require__(/*! ../../errors */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/errors.js\");\nconst ResultStream = __webpack_require__(/*! ./result_stream */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/connection/result/result_stream.js\");\nconst DataTypes = __webpack_require__(/*! ./data_types */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/connection/result/data_types.js\");\nconst RowMode = __webpack_require__(/*! ./../../constants/row_mode */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/constants/row_mode.js\");\n/**\n * Creates a stream that can be used to read a statement result row by row.\n *\n * @param {Object} statement\n * @param {Object} context\n * @param {Object} options\n * @constructor\n */\nfunction RowStream(statement, context, options) {\n    // validate non-user-specified arguments\n    Errors.assertInternal(Util.exists(statement));\n    Errors.assertInternal(Util.exists(context));\n    // call Readable constructor\n    Readable.call(this, {\n        objectMode: true,\n        highWaterMark: context.connectionConfig.getRowStreamHighWaterMark(),\n    });\n    // extract streaming options\n    let start, end, fetchAsString, rowMode;\n    if (Util.isObject(options)) {\n        start = options.start;\n        end = options.end;\n        fetchAsString = options.fetchAsString;\n    }\n    // if a fetchAsString value is not specified in the stream options, try the\n    // statement and connection options (in that order)\n    if (!Util.exists(fetchAsString)) {\n        fetchAsString = context.fetchAsString;\n    }\n    if (!Util.exists(fetchAsString)) {\n        fetchAsString = context.connectionConfig.getFetchAsString();\n    }\n    if (!Util.exists(rowMode)) {\n        rowMode = context.rowMode || context.connectionConfig.getRowMode();\n    }\n    let resultStream = null, numResultStreamInterrupts = 0;\n    let rowBuffer = null, rowIndex = 0;\n    let columns, mapColumnIdToExtractFnName;\n    let initialized = false;\n    let previousChunk = null;\n    const self = this;\n    /**\n     * Reads the next row in the result.\n     *\n     * @private\n     */\n    this._read = function () {\n        // if the stream has been initialized, just read the next row\n        if (initialized) {\n            readNextRow();\n        }\n        else if (context.isFetchingResult) {\n            // if we're still fetching the result, wait for the operation to complete\n            context.on('statement-complete', init);\n        }\n        else if (context.result || isStatementErrorFatal(context)) {\n            // if we have a result or a fatal error, call init() in the next tick of\n            // the event loop\n            process.nextTick(init);\n        }\n        else {\n            if (typeof context.multiResultIds === 'undefined') {\n                // fetch the result again and call init() upon completion of the operation\n                context.refresh(init);\n            }\n            else {\n                //do nothing\n            }\n        }\n    };\n    /**\n     * Initializes this stream.\n     */\n    const init = function init() {\n        // the stream has now been initialized\n        initialized = true;\n        // if we have a result\n        if (context.result) {\n            // if no value was specified for the start index or if the specified start\n            // index is negative, default to 0, otherwise truncate the fractional part\n            start = !Util.isNumber(start) || start < 0 ? 0 : Math.floor(start);\n            // if no value was specified for the end index or if the end index is\n            // larger than the row index of the last row, default to the index of the\n            // last row, otherwise truncate the fractional part\n            const returnedRows = context.result.getReturnedRows();\n            end = !Util.isNumber(end) || end >= returnedRows ? returnedRows - 1 : Math.floor(end);\n            // find all the chunks that overlap with the specified range\n            const overlappingChunks = context.result.findOverlappingChunks(start, end);\n            // if no chunks overlap or start is greater than end, we're done\n            if (overlappingChunks.length === 0 || start > end) {\n                process.nextTick(close);\n            }\n            else {\n                // create a result stream from the overlapping chunks\n                resultStream = new ResultStream({\n                    chunks: overlappingChunks,\n                    prefetchSize: context.connectionConfig.getResultPrefetch(),\n                });\n                readNextRow();\n            }\n        }\n        else {\n            close(context.resultError);\n        }\n    };\n    /**\n     * Processes the row buffer.\n     */\n    const processRowBuffer = function processRowBuffer() {\n        // get the row to add to the read queue\n        let row = rowBuffer[rowIndex++];\n        // if we just read the last row in the row buffer, clear the row buffer and\n        // reset the row index so that we load the next chunk in the result stream\n        // when _read() is called\n        if (rowIndex === rowBuffer.length) {\n            rowBuffer = null;\n            rowIndex = 0;\n        }\n        // initialize the columns and column-related maps if necessary\n        if (!columns) {\n            columns = statement.getColumns();\n        }\n        if (!mapColumnIdToExtractFnName) {\n            mapColumnIdToExtractFnName = buildMapColumnExtractFnNames(columns, fetchAsString);\n        }\n        // add the next row to the read queue\n        process.nextTick(function () {\n            // check if there are still rows available in the rowBuffer\n            if (rowBuffer && rowIndex > 0) {\n                rowIndex--; // decrement the index to include the previous row in the while loop\n                // push() data to readable stream until highWaterMark threshold is reached or all rows are pushed\n                while (rowIndex < rowBuffer.length) {\n                    row = rowBuffer[rowIndex++];\n                    // if buffer has reached the threshold based on the highWaterMark value then\n                    // push() will return false and pause sending data to the buffer until the data is read from the buffer\n                    if (!self.push(externalizeRow(row, columns, mapColumnIdToExtractFnName, rowMode))) {\n                        break;\n                    }\n                }\n                // check if all rows in rowBuffer has been pushed to the readable stream\n                if (rowIndex === rowBuffer.length) {\n                    // reset the buffer and index\n                    rowBuffer = null;\n                    rowIndex = 0;\n                }\n            }\n            else {\n                // No more rows left in the buffer\n                // Push the last row in the buffer\n                self.push(externalizeRow(row, columns, mapColumnIdToExtractFnName, rowMode));\n            }\n        });\n    };\n    /**\n     * Called when the result stream reads a new chunk.\n     *\n     * @param {Chunk} chunk\n     */\n    const onResultStreamData = function onResultStreamData(chunk) {\n        // unsubscribe from the result stream's 'data' and 'close' events\n        resultStream.removeListener('data', onResultStreamData);\n        resultStream.removeListener('close', onResultStreamClose);\n        // get all the rows in the chunk that overlap with the requested window,\n        // and use the resulting array as the new row buffer\n        const chunkStart = chunk.getStartIndex();\n        const chunkEnd = chunk.getEndIndex();\n        rowBuffer = chunk\n            .getRows()\n            .slice(Math.max(chunkStart, start) - chunkStart, Math.min(chunkEnd, end) + 1 - chunkStart);\n        // reset the row index\n        rowIndex = 0;\n        // process the row buffer\n        processRowBuffer();\n        if (previousChunk && previousChunk !== chunk) {\n            previousChunk.clearRows();\n        }\n        previousChunk = chunk;\n    };\n    /**\n     * Called when there are no more chunks to read in the result stream or an\n     * error is encountered while trying to read the next chunk.\n     *\n     * @param err\n     * @param continueCallback\n     */\n    const onResultStreamClose = function onResultStreamClose(err, continueCallback) {\n        // if the error is retryable and\n        // the result stream hasn't been closed too many times\n        if (isResultStreamErrorRetryable(err) &&\n            numResultStreamInterrupts < context.connectionConfig.getResultStreamInterrupts()) {\n            numResultStreamInterrupts++;\n            // fetch the statement result again\n            context.refresh(function () {\n                if (context.resultError) {\n                    close(context.resultError);\n                }\n                else {\n                    continueCallback();\n                }\n            });\n        }\n        else {\n            close(err);\n        }\n    };\n    /**\n     * Closes the row stream.\n     *\n     * @param {Error} [err]\n     */\n    const close = function (err) {\n        // if we have a result stream, stop listening to events on it\n        if (resultStream) {\n            resultStream.removeListener('data', onResultStreamData);\n            resultStream.removeListener('close', onResultStreamClose);\n        }\n        // we're done, so time to clean up\n        rowBuffer = null;\n        rowIndex = 0;\n        resultStream = null;\n        numResultStreamInterrupts = 0;\n        if (previousChunk) {\n            previousChunk.clearRows();\n            previousChunk = null;\n        }\n        if (err) {\n            emitError(err);\n        }\n        else {\n            self.push(null);\n        }\n    };\n    /**\n     * Called when we're ready to read the next row in the result.\n     */\n    const readNextRow = function readNextRow() {\n        // if we have a row buffer, process it\n        if (rowBuffer) {\n            processRowBuffer();\n        }\n        else {\n            // subscribe to the result stream's 'data' and 'close' events\n            resultStream.on('data', onResultStreamData);\n            resultStream.on('close', onResultStreamClose);\n            // issue a request to fetch the next chunk in the result stream\n            resultStream.read();\n        }\n    };\n    /**\n     * Externalizes an error and emits it.\n     *\n     * @param {Error} err\n     */\n    const emitError = function emitError(err) {\n        self.emit('error', Errors.externalize(err));\n    };\n}\nUtil.inherits(RowStream, Readable);\n/**\n * Determines if a statement error is fatal.\n *\n * @returns {Boolean}\n * @param context\n */\nfunction isStatementErrorFatal(context) {\n    const error = context.resultError;\n    return ((Errors.isOperationFailedError(error) && error.sqlState) ||\n        isFileUploadError(error, context.type));\n}\nfunction isFileUploadError(error, contextType) {\n    return error && contextType === 'FILE_PRE_EXEC';\n}\n/**\n * Determines if a result stream error is a retryable error.\n *\n * @param {Error} error\n * @returns {Boolean}\n */\nfunction isResultStreamErrorRetryable(error) {\n    return ((Errors.isLargeResultSetError(error) && error.response && error.response.statusCode === 403) ||\n        (error && (error.code === 'ECONNRESET' || error.code === 'ETIMEDOUT')));\n}\n/**\n * Builds a map in which the keys are column ids and the values are the names of\n * the extract functions to use when retrieving row values for the corresponding\n * columns.\n *\n * @param {Object[]} columns\n * @param {String[]} fetchAsString the native types that should be retrieved as\n *   strings.\n *\n * @returns {Object}\n */\nfunction buildMapColumnExtractFnNames(columns, fetchAsString) {\n    const fnNameGetColumnValue = 'getColumnValue';\n    const fnNameGetColumnValueAsString = 'getColumnValueAsString';\n    let index, length, column;\n    const mapColumnIdToExtractFnName = {};\n    // if no native types need to be retrieved as strings, extract values normally\n    if (!Util.exists(fetchAsString)) {\n        for (index = 0, length = columns.length; index < length; index++) {\n            column = columns[index];\n            mapColumnIdToExtractFnName[column.getId()] = fnNameGetColumnValue;\n        }\n    }\n    else {\n        // build a map that contains all the native types that need to be\n        // retrieved as strings when extracting column values from rows\n        const nativeTypesMap = {};\n        for (index = 0, length = fetchAsString.length; index < length; index++) {\n            nativeTypesMap[fetchAsString[index].toUpperCase()] = true;\n        }\n        // for each column, pick the appropriate extract function\n        // based on whether the value needs to be retrieved as a string\n        for (index = 0, length = columns.length; index < length; index++) {\n            column = columns[index];\n            mapColumnIdToExtractFnName[column.getId()] = nativeTypesMap[DataTypes.toNativeType(column.getType())]\n                ? fnNameGetColumnValueAsString\n                : fnNameGetColumnValue;\n        }\n    }\n    return mapColumnIdToExtractFnName;\n}\n/**\n * Converts an internal representation of a result row to a format appropriate\n * for consumption by the outside world.\n *\n * @param {Object} row\n * @param {Object[]} columns\n * @param {Object} [mapColumnIdToExtractFnName]\n * @param {String?} rowMode - string value ('array', 'object' or 'object_with_renamed_duplicated_columns'). Default is 'object' when parameter isn't set.\n *\n * @returns {Object}\n */\nfunction externalizeRow(row, columns, mapColumnIdToExtractFnName, rowMode) {\n    const isArrayRowMode = rowMode === RowMode.ARRAY;\n    const externalizedRow = isArrayRowMode ? [] : {};\n    for (let index = 0, length = columns.length; index < length; index++) {\n        const column = columns[index];\n        const extractFnName = mapColumnIdToExtractFnName[column.getId()];\n        externalizedRow[isArrayRowMode ? index : column.getName()] = row[extractFnName](column.getId());\n    }\n    return externalizedRow;\n}\nmodule.exports = RowStream;\n//# sourceMappingURL=row_stream.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/dist/lib/connection/result/row_stream.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/dist/lib/connection/result/sf_timestamp.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/snowflake-sdk/dist/lib/connection/result/sf_timestamp.js ***!
  \*******************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst Moment = __webpack_require__(/*! moment-timezone */ \"(rsc)/./node_modules/moment-timezone/index.js\");\nconst Util = __webpack_require__(/*! ../../util */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/util.js\");\nconst datetimeFormatConverter = __webpack_require__(/*! ./datetime_format_converter */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/connection/result/datetime_format_converter.js\");\n/**\n * Creates a new SfTimestamp instance.\n *\n * @param {Number} epochSeconds the epoch time in seconds.\n * @param {Number} nanoSeconds the number of nano seconds (incremental, not\n *   epoch).\n * @param {Number} scale the precision for the fractional part of the timestamp.\n * @param {String | Number} [timezone] the timezone name as a string\n *   (e.g. 'America/New_York') or the timezone offset in minutes (e.g. -240).\n * @param {String} [format] the SQL format to use to format the timestamp.\n * @constructor\n */ function SfTimestamp(epochSeconds, nanoSeconds, scale, timezone, format) {\n    // pick reasonable defaults for the inputs if needed\n    epochSeconds = Util.isNumber(epochSeconds) ? epochSeconds : 0;\n    nanoSeconds = Util.isNumber(nanoSeconds) ? nanoSeconds : 0;\n    scale = Util.isNumber(scale) ? scale : 0;\n    format = Util.isString(format) ? format : '';\n    // save any information we'll need later\n    this.epochSeconds = epochSeconds;\n    this.nanoSeconds = nanoSeconds;\n    this.scale = scale;\n    this.timezone = timezone;\n    this.format = format;\n    // Milliseconds are truncated to avoid rounding issues, and the decimal part is not useful since Moment only supports milliseconds precision\n    const milliseconds = Math.trunc(nanoSeconds / 1000000);\n    let moment = Moment(epochSeconds * 1000 + milliseconds);\n    // set the moment's timezone\n    if (Util.isString(timezone)) {\n        moment = moment.tz(timezone);\n    } else if (Util.isNumber(timezone)) {\n        moment = moment.utcOffset(timezone);\n    }\n    // save the moment\n    this.moment = moment;\n}\n/**\n * Returns a string representing the specified SfTimestamp instance.\n *\n * @returns {String}\n */ SfTimestamp.prototype.toString = function() {\n    // use cached value if possible\n    if (this._valueAsString) {\n        return this._valueAsString;\n    }\n    const moment = this.moment;\n    const nanoSeconds = this.nanoSeconds;\n    let scale = this.scale;\n    const formatSql = this.format;\n    // get an upper-case version of the input sql format\n    const formatSqlUpper = formatSql.toUpperCase();\n    const tags = datetimeFormatConverter.formatTagsMap();\n    // iterate over the format string\n    const length = formatSql.length;\n    let formatMoment = '';\n    for(let pos = 0; pos < length;){\n        let tag = null;\n        let out = null;\n        // at each position, check if there's a tag at that position; if so, use\n        // 'out' as the replacement\n        for(let index = 0; index < tags.length; index++){\n            if (formatSqlUpper.substr(pos).indexOf(tags[index][0]) === 0) {\n                tag = tags[index][0];\n                out = tags[index][1];\n                break;\n            }\n        }\n        // if we didn't find a match, just insert the character after escaping it\n        // (by wrapping it in square brackets)\n        if (out === null) {\n            formatMoment += '[' + formatSql[pos] + ']';\n            pos++;\n        } else {\n            // we found one of our special tags\n            if (out === '') {\n                if (tag === 'TZH') {\n                    // format the moment to get the timezone string and extract the\n                    // hours; for example, '-0700' will be converted to '-07'\n                    out = moment.format('ZZ').substr(0, 3);\n                } else if (tag === 'TZM') {\n                    // format the moment to get the timezone string and extract the\n                    // minutes; for example, '-0700' will be converted to '00\n                    out = moment.format('ZZ').substr(3);\n                } else if (tag === 'FF') {\n                    // if 'FF' is followed by a digit, use the digit as the scale\n                    let digit = null;\n                    if (pos + tag.length < length) {\n                        const matches = formatSql[pos + tag.length].match(/[0-9]/);\n                        if (matches) {\n                            digit = matches[0];\n                        }\n                    }\n                    if (digit !== null) {\n                        scale = digit;\n                        pos++; // skip the digit as well\n                    }\n                    // if we need to include fractional seconds\n                    if (scale > 0) {\n                        // divide the nanoSeconds to get the requested number of\n                        // meaningful digits\n                        const scaled = Math.floor(nanoSeconds / Math.pow(10, 9 - scale));\n                        // pad with the appropriate number of leading zeros\n                        out = (new Array(9).join('0') + scaled).substr(-scale);\n                    }\n                }\n            }\n            // append the 'out' text to the moment format and update the position\n            formatMoment += out;\n            pos += tag.length;\n        }\n    }\n    // format the moment and cache the result\n    const timezone = this.timezone.name || this.timezone;\n    if (timezone) {\n        if (typeof timezone === 'number') {\n            this._valueAsString = moment.utcOffset(timezone).format(formatMoment);\n        } else {\n            this._valueAsString = moment.tz(timezone).format(formatMoment);\n        }\n    } else {\n        this._valueAsString = moment.format(formatMoment);\n    }\n    return this._valueAsString;\n};\n/**\n * Converts this SfTimestamp to an SfDate that's just a normal JavaScript Date\n * with some additional methods like getEpochSeconds(), getNanoSeconds(),\n * getTimezone(), etc.\n *\n * @returns {Date}\n */ SfTimestamp.prototype.toSfDate = function() {\n    // create a Date from the moment\n    const date = this.moment.toDate();\n    const self = this;\n    date.getEpochSeconds = function() {\n        return self.epochSeconds;\n    };\n    date.getNanoSeconds = function() {\n        return self.nanoSeconds;\n    };\n    date.getScale = function() {\n        return self.scale;\n    };\n    date.getTimezone = function() {\n        return self.timezone;\n    };\n    date.getFormat = function() {\n        return self.format;\n    };\n    date.toJSON = function() {\n        return self.toString();\n    };\n    return date;\n};\n/**\n * Converts this SfTimestamp to an SfTime, which is just a JavaScript Object\n * with some methods: getMidnightSeconds(), getNanoSeconds(), etc.\n *\n * @returns {Object}\n */ SfTimestamp.prototype.toSfTime = function() {\n    const self = this;\n    return {\n        getMidnightSeconds: function() {\n            return self.epochSeconds;\n        },\n        getNanoSeconds: function() {\n            return self.nanoSeconds;\n        },\n        getScale: function() {\n            return self.scale;\n        },\n        getFormat: function() {\n            return self.format;\n        },\n        toJSON: function() {\n            return self.toString();\n        }\n    };\n};\nmodule.exports = SfTimestamp; //# sourceMappingURL=sf_timestamp.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9kaXN0L2xpYi9jb25uZWN0aW9uL3Jlc3VsdC9zZl90aW1lc3RhbXAuanMiLCJtYXBwaW5ncyI6IjtBQUFBLE1BQU0sTUFBTSxHQUFHLG1CQUFPLENBQUMsc0VBQWlCLENBQUMsQ0FBQztBQUMxQyxNQUFNLElBQUksR0FBRyxtQkFBTyxDQUFDLHVFQUFZLENBQUMsQ0FBQztBQUNuQyxNQUFNLHVCQUF1QixHQUFHLG1CQUFPLENBQUMsK0hBQTZCLENBQUMsQ0FBQztBQUN2RTs7Ozs7Ozs7Ozs7R0FXRyxDQUNILFNBQVMsV0FBVyxDQUFDLFlBQVksRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxNQUFNO0lBQ3JFLG9EQUFvRDtJQUNwRCxZQUFZLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDOUQsV0FBVyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzNELEtBQUssR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN6QyxNQUFNLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7SUFFN0Msd0NBQXdDO0lBQ3hDLElBQUksQ0FBQyxZQUFZLEdBQUcsWUFBWSxDQUFDO0lBQ2pDLElBQUksQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDO0lBQy9CLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO0lBQ25CLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO0lBQ3pCLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO0lBRXJCLDRJQUE0STtJQUM1SSxNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsR0FBRyxPQUFPLENBQUMsQ0FBQztJQUN2RCxJQUFJLE1BQU0sR0FBRyxNQUFNLENBQUMsWUFBWSxHQUFHLElBQUksR0FBRyxZQUFZLENBQUMsQ0FBQztJQUV4RCw0QkFBNEI7SUFDNUIsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUM7UUFDNUIsTUFBTSxHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDL0IsQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDO1FBQ25DLE1BQU0sR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3RDLENBQUM7SUFFRCxrQkFBa0I7SUFDbEIsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7QUFDdkIsQ0FBQztBQUVEOzs7O0dBSUcsQ0FDSCxXQUFXLENBQUMsU0FBUyxDQUFDLFFBQVEsR0FBRztJQUMvQiwrQkFBK0I7SUFDL0IsSUFBSSxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7UUFDeEIsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDO0lBQzdCLENBQUM7SUFFRCxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQzNCLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUM7SUFDckMsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztJQUN2QixNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBRTlCLG9EQUFvRDtJQUNwRCxNQUFNLGNBQWMsR0FBRyxTQUFTLENBQUMsV0FBVyxFQUFFLENBQUM7SUFFL0MsTUFBTSxJQUFJLEdBQUcsdUJBQXVCLENBQUMsYUFBYSxFQUFFLENBQUM7SUFFckQsaUNBQWlDO0lBQ2pDLE1BQU0sTUFBTSxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUM7SUFDaEMsSUFBSSxZQUFZLEdBQUcsRUFBRSxDQUFDO0lBQ3RCLElBQUssSUFBSSxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxNQUFNLEVBQUksQ0FBQztRQUNqQyxJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUM7UUFDZixJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUM7UUFFZix3RUFBd0U7UUFDeEUsMkJBQTJCO1FBQzNCLElBQUssSUFBSSxLQUFLLEdBQUcsQ0FBQyxFQUFFLEtBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxDQUFFLENBQUM7WUFDakQsSUFBSSxjQUFjLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQztnQkFDN0QsR0FBRyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDckIsR0FBRyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDckIsTUFBTTtZQUNSLENBQUM7UUFDSCxDQUFDO1FBRUQseUVBQXlFO1FBQ3pFLHNDQUFzQztRQUN0QyxJQUFJLEdBQUcsS0FBSyxJQUFJLEVBQUUsQ0FBQztZQUNqQixZQUFZLElBQUksR0FBRyxHQUFHLFNBQVMsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUM7WUFDM0MsR0FBRyxFQUFFLENBQUM7UUFDUixDQUFDLE1BQU0sQ0FBQztZQUNOLG1DQUFtQztZQUNuQyxJQUFJLEdBQUcsS0FBSyxFQUFFLEVBQUUsQ0FBQztnQkFDZixJQUFJLEdBQUcsS0FBSyxLQUFLLEVBQUUsQ0FBQztvQkFDbEIsK0RBQStEO29CQUMvRCx5REFBeUQ7b0JBQ3pELEdBQUcsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBQ3pDLENBQUMsTUFBTSxJQUFJLEdBQUcsS0FBSyxLQUFLLEVBQUUsQ0FBQztvQkFDekIsK0RBQStEO29CQUMvRCx5REFBeUQ7b0JBQ3pELEdBQUcsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDdEMsQ0FBQyxNQUFNLElBQUksR0FBRyxLQUFLLElBQUksRUFBRSxDQUFDO29CQUN4Qiw2REFBNkQ7b0JBQzdELElBQUksS0FBSyxHQUFHLElBQUksQ0FBQztvQkFDakIsSUFBSSxHQUFHLEdBQUcsR0FBRyxDQUFDLE1BQU0sR0FBRyxNQUFNLEVBQUUsQ0FBQzt3QkFDOUIsTUFBTSxPQUFPLEdBQUcsU0FBUyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO3dCQUMzRCxJQUFJLE9BQU8sRUFBRSxDQUFDOzRCQUNaLEtBQUssR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7d0JBQ3JCLENBQUM7b0JBQ0gsQ0FBQztvQkFDRCxJQUFJLEtBQUssS0FBSyxJQUFJLEVBQUUsQ0FBQzt3QkFDbkIsS0FBSyxHQUFHLEtBQUssQ0FBQzt3QkFDZCxHQUFHLEVBQUUsQ0FBQyxDQUFDLHlCQUF5QjtvQkFDbEMsQ0FBQztvQkFFRCwyQ0FBMkM7b0JBQzNDLElBQUksS0FBSyxHQUFHLENBQUMsRUFBRSxDQUFDO3dCQUNkLHdEQUF3RDt3QkFDeEQsb0JBQW9CO3dCQUNwQixNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQzt3QkFFakUsbURBQW1EO3dCQUNuRCxHQUFHLEdBQUcsQ0FBQyxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsT0FBTSxDQUFDLE1BQU8sQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO29CQUN6RCxDQUFDO2dCQUNILENBQUM7WUFDSCxDQUFDO1lBRUQscUVBQXFFO1lBQ3JFLFlBQVksSUFBSSxHQUFHLENBQUM7WUFDcEIsR0FBRyxJQUFJLEdBQUcsQ0FBQyxNQUFNLENBQUM7UUFDcEIsQ0FBQztJQUNILENBQUM7SUFDRCx5Q0FBeUM7SUFDekMsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUNyRCxJQUFJLFFBQVEsRUFBRSxDQUFDO1FBQ2IsSUFBSSxPQUFPLFFBQVEsS0FBSyxRQUFRLEVBQUUsQ0FBQztZQUNqQyxJQUFJLENBQUMsY0FBYyxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ3hFLENBQUMsTUFBTSxDQUFDO1lBQ04sSUFBSSxDQUFDLGNBQWMsR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUNqRSxDQUFDO0lBQ0gsQ0FBQyxNQUFNLENBQUM7UUFDTixJQUFJLENBQUMsY0FBYyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDcEQsQ0FBQztJQUNELE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQztBQUM3QixDQUFDLENBQUM7QUFFRjs7Ozs7O0dBTUcsQ0FDSCxXQUFXLENBQUMsU0FBUyxDQUFDLFFBQVEsR0FBRztJQUMvQixnQ0FBZ0M7SUFDaEMsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUVsQyxNQUFNLElBQUksR0FBRyxJQUFJLENBQUM7SUFFbEIsSUFBSSxDQUFDLGVBQWUsR0FBRztRQUNyQixPQUFPLElBQUksQ0FBQyxZQUFZLENBQUM7SUFDM0IsQ0FBQyxDQUFDO0lBRUYsSUFBSSxDQUFDLGNBQWMsR0FBRztRQUNwQixPQUFPLElBQUksQ0FBQyxXQUFXLENBQUM7SUFDMUIsQ0FBQyxDQUFDO0lBRUYsSUFBSSxDQUFDLFFBQVEsR0FBRztRQUNkLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztJQUNwQixDQUFDLENBQUM7SUFFRixJQUFJLENBQUMsV0FBVyxHQUFHO1FBQ2pCLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUN2QixDQUFDLENBQUM7SUFFRixJQUFJLENBQUMsU0FBUyxHQUFHO1FBQ2YsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3JCLENBQUMsQ0FBQztJQUVGLElBQUksQ0FBQyxNQUFNLEdBQUc7UUFDWixPQUFPLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUN6QixDQUFDLENBQUM7SUFFRixPQUFPLElBQUksQ0FBQztBQUNkLENBQUMsQ0FBQztBQUVGOzs7OztHQUtHLENBQ0gsV0FBVyxDQUFDLFNBQVMsQ0FBQyxRQUFRLEdBQUc7SUFDL0IsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDO0lBQ2xCLE9BQU87UUFDTCxrQkFBa0IsRUFBRTtZQUNsQixPQUFPLElBQUksQ0FBQyxZQUFZLENBQUM7UUFDM0IsQ0FBQztRQUNELGNBQWMsRUFBRTtZQUNkLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQztRQUMxQixDQUFDO1FBQ0QsUUFBUSxFQUFFO1lBQ1IsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQ3BCLENBQUM7UUFDRCxTQUFTLEVBQUU7WUFDVCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDckIsQ0FBQztRQUNELE1BQU0sRUFBRTtZQUNOLE9BQU8sSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ3pCLENBQUM7S0FDRixDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE9BQU8sR0FBRyxXQUFXLENBQUMiLCJzb3VyY2VzIjpbIi9Vc2Vycy9saWIvY29ubmVjdGlvbi9yZXN1bHQvc2ZfdGltZXN0YW1wLmpzIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/dist/lib/connection/result/sf_timestamp.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/dist/lib/connection/result/statement_type.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/snowflake-sdk/dist/lib/connection/result/statement_type.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nexports.isDml = function (statementTypeId) {\n    return statementTypeId >= 0x3000 && statementTypeId < 0x4000;\n};\nexports.isInsert = function (statementTypeId) {\n    return statementTypeId === 0x3100;\n};\nexports.isUpdate = function (statementTypeId) {\n    return statementTypeId === 0x3200;\n};\nexports.isDelete = function (statementTypeId) {\n    return statementTypeId === 0x3300;\n};\nexports.isMerge = function (statementTypeId) {\n    return statementTypeId === 0x3400;\n};\nexports.isMultiTableInsert = function (statementTypeId) {\n    return statementTypeId === 0x3500;\n};\nexports.isDdl = function (statementTypeId) {\n    return statementTypeId >= 0x6000;\n};\n//# sourceMappingURL=statement_type.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9kaXN0L2xpYi9jb25uZWN0aW9uL3Jlc3VsdC9zdGF0ZW1lbnRfdHlwZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLGFBQWE7QUFDYjtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy93YW5naGFvdGFpL0Rlc2t0b3AvZWx2ZW5sYWIvSFRWL25vZGVfbW9kdWxlcy9zbm93Zmxha2Utc2RrL2Rpc3QvbGliL2Nvbm5lY3Rpb24vcmVzdWx0L3N0YXRlbWVudF90eXBlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuZXhwb3J0cy5pc0RtbCA9IGZ1bmN0aW9uIChzdGF0ZW1lbnRUeXBlSWQpIHtcbiAgICByZXR1cm4gc3RhdGVtZW50VHlwZUlkID49IDB4MzAwMCAmJiBzdGF0ZW1lbnRUeXBlSWQgPCAweDQwMDA7XG59O1xuZXhwb3J0cy5pc0luc2VydCA9IGZ1bmN0aW9uIChzdGF0ZW1lbnRUeXBlSWQpIHtcbiAgICByZXR1cm4gc3RhdGVtZW50VHlwZUlkID09PSAweDMxMDA7XG59O1xuZXhwb3J0cy5pc1VwZGF0ZSA9IGZ1bmN0aW9uIChzdGF0ZW1lbnRUeXBlSWQpIHtcbiAgICByZXR1cm4gc3RhdGVtZW50VHlwZUlkID09PSAweDMyMDA7XG59O1xuZXhwb3J0cy5pc0RlbGV0ZSA9IGZ1bmN0aW9uIChzdGF0ZW1lbnRUeXBlSWQpIHtcbiAgICByZXR1cm4gc3RhdGVtZW50VHlwZUlkID09PSAweDMzMDA7XG59O1xuZXhwb3J0cy5pc01lcmdlID0gZnVuY3Rpb24gKHN0YXRlbWVudFR5cGVJZCkge1xuICAgIHJldHVybiBzdGF0ZW1lbnRUeXBlSWQgPT09IDB4MzQwMDtcbn07XG5leHBvcnRzLmlzTXVsdGlUYWJsZUluc2VydCA9IGZ1bmN0aW9uIChzdGF0ZW1lbnRUeXBlSWQpIHtcbiAgICByZXR1cm4gc3RhdGVtZW50VHlwZUlkID09PSAweDM1MDA7XG59O1xuZXhwb3J0cy5pc0RkbCA9IGZ1bmN0aW9uIChzdGF0ZW1lbnRUeXBlSWQpIHtcbiAgICByZXR1cm4gc3RhdGVtZW50VHlwZUlkID49IDB4NjAwMDtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdGF0ZW1lbnRfdHlwZS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/dist/lib/connection/result/statement_type.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/dist/lib/connection/result/unique_column_name_creator.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/snowflake-sdk/dist/lib/connection/result/unique_column_name_creator.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nconst resultContainsDuplicatedColumns = (rowtype) => {\n    const columnNames = rowtype.map((rt) => rt.name);\n    return columnNames.length !== new Set(columnNames).size;\n};\nfunction addOverriddenNamesForDuplicatedColumns(rowtype) {\n    //Prepare renamed columns for duplicates if row mode was set to 'object_with_renamed_duplicated_columns'\n    if (resultContainsDuplicatedColumns(rowtype)) {\n        const columnNames = new Set(rowtype.map((el) => el.name));\n        const quntityOfColumnNames = new Map();\n        for (let index = 0; index < rowtype.length; index++) {\n            const columnName = rowtype[index].name;\n            if (columnName) {\n                if (quntityOfColumnNames.has(columnName)) {\n                    let times = quntityOfColumnNames.get(columnName) + 1;\n                    let newColumnName = columnName + '_' + times;\n                    while (columnNames.has(newColumnName)) {\n                        times += 1;\n                        newColumnName = columnName + '_' + times;\n                    }\n                    quntityOfColumnNames.set(columnName, times);\n                    rowtype[index].overriddenName = newColumnName;\n                    columnNames.add(newColumnName);\n                }\n                else {\n                    quntityOfColumnNames.set(columnName, 1);\n                }\n            }\n        }\n    }\n}\nexports.addOverridenNamesForDuplicatedColumns = addOverriddenNamesForDuplicatedColumns;\n//# sourceMappingURL=unique_column_name_creator.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9kaXN0L2xpYi9jb25uZWN0aW9uL3Jlc3VsdC91bmlxdWVfY29sdW1uX25hbWVfY3JlYXRvci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0Qix3QkFBd0I7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QztBQUM3QyIsInNvdXJjZXMiOlsiL1VzZXJzL3dhbmdoYW90YWkvRGVza3RvcC9lbHZlbmxhYi9IVFYvbm9kZV9tb2R1bGVzL3Nub3dmbGFrZS1zZGsvZGlzdC9saWIvY29ubmVjdGlvbi9yZXN1bHQvdW5pcXVlX2NvbHVtbl9uYW1lX2NyZWF0b3IuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCByZXN1bHRDb250YWluc0R1cGxpY2F0ZWRDb2x1bW5zID0gKHJvd3R5cGUpID0+IHtcbiAgICBjb25zdCBjb2x1bW5OYW1lcyA9IHJvd3R5cGUubWFwKChydCkgPT4gcnQubmFtZSk7XG4gICAgcmV0dXJuIGNvbHVtbk5hbWVzLmxlbmd0aCAhPT0gbmV3IFNldChjb2x1bW5OYW1lcykuc2l6ZTtcbn07XG5mdW5jdGlvbiBhZGRPdmVycmlkZGVuTmFtZXNGb3JEdXBsaWNhdGVkQ29sdW1ucyhyb3d0eXBlKSB7XG4gICAgLy9QcmVwYXJlIHJlbmFtZWQgY29sdW1ucyBmb3IgZHVwbGljYXRlcyBpZiByb3cgbW9kZSB3YXMgc2V0IHRvICdvYmplY3Rfd2l0aF9yZW5hbWVkX2R1cGxpY2F0ZWRfY29sdW1ucydcbiAgICBpZiAocmVzdWx0Q29udGFpbnNEdXBsaWNhdGVkQ29sdW1ucyhyb3d0eXBlKSkge1xuICAgICAgICBjb25zdCBjb2x1bW5OYW1lcyA9IG5ldyBTZXQocm93dHlwZS5tYXAoKGVsKSA9PiBlbC5uYW1lKSk7XG4gICAgICAgIGNvbnN0IHF1bnRpdHlPZkNvbHVtbk5hbWVzID0gbmV3IE1hcCgpO1xuICAgICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgcm93dHlwZS5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbHVtbk5hbWUgPSByb3d0eXBlW2luZGV4XS5uYW1lO1xuICAgICAgICAgICAgaWYgKGNvbHVtbk5hbWUpIHtcbiAgICAgICAgICAgICAgICBpZiAocXVudGl0eU9mQ29sdW1uTmFtZXMuaGFzKGNvbHVtbk5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCB0aW1lcyA9IHF1bnRpdHlPZkNvbHVtbk5hbWVzLmdldChjb2x1bW5OYW1lKSArIDE7XG4gICAgICAgICAgICAgICAgICAgIGxldCBuZXdDb2x1bW5OYW1lID0gY29sdW1uTmFtZSArICdfJyArIHRpbWVzO1xuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoY29sdW1uTmFtZXMuaGFzKG5ld0NvbHVtbk5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aW1lcyArPSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3Q29sdW1uTmFtZSA9IGNvbHVtbk5hbWUgKyAnXycgKyB0aW1lcztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBxdW50aXR5T2ZDb2x1bW5OYW1lcy5zZXQoY29sdW1uTmFtZSwgdGltZXMpO1xuICAgICAgICAgICAgICAgICAgICByb3d0eXBlW2luZGV4XS5vdmVycmlkZGVuTmFtZSA9IG5ld0NvbHVtbk5hbWU7XG4gICAgICAgICAgICAgICAgICAgIGNvbHVtbk5hbWVzLmFkZChuZXdDb2x1bW5OYW1lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHF1bnRpdHlPZkNvbHVtbk5hbWVzLnNldChjb2x1bW5OYW1lLCAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLmFkZE92ZXJyaWRlbk5hbWVzRm9yRHVwbGljYXRlZENvbHVtbnMgPSBhZGRPdmVycmlkZGVuTmFtZXNGb3JEdXBsaWNhdGVkQ29sdW1ucztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVuaXF1ZV9jb2x1bW5fbmFtZV9jcmVhdG9yLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/dist/lib/connection/result/unique_column_name_creator.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/dist/lib/connection/statement.js":
/*!*********************************************************************!*\
  !*** ./node_modules/snowflake-sdk/dist/lib/connection/statement.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nconst { v4: uuidv4 } = __webpack_require__(/*! uuid */ \"(rsc)/./node_modules/snowflake-sdk/node_modules/uuid/dist/esm-node/index.js\");\nconst Url = __webpack_require__(/*! url */ \"url\");\nconst QueryString = __webpack_require__(/*! querystring */ \"querystring\");\nconst EventEmitter = (__webpack_require__(/*! events */ \"events\").EventEmitter);\nconst Util = __webpack_require__(/*! ../util */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/util.js\");\nconst Result = __webpack_require__(/*! ./result/result */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/connection/result/result.js\");\nconst Parameters = __webpack_require__(/*! ../parameters */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/parameters.js\");\nconst RowStream = __webpack_require__(/*! ./result/row_stream */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/connection/result/row_stream.js\");\nconst Errors = __webpack_require__(/*! ../errors */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/errors.js\");\nconst ErrorCodes = Errors.codes;\nconst Logger = __webpack_require__(/*! ../logger */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/logger.js\");\nconst NativeTypes = (__webpack_require__(/*! ./result/data_types */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/connection/result/data_types.js\").NativeTypes);\nconst FileTransferAgent = __webpack_require__(/*! ../file_transfer_agent/file_transfer_agent */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/file_transfer_agent/file_transfer_agent.js\");\nconst Bind = __webpack_require__(/*! ./bind_uploader */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/connection/bind_uploader.js\");\nconst RowMode = __webpack_require__(/*! ./../constants/row_mode */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/constants/row_mode.js\");\nconst states = {\n    FETCHING: 'fetching',\n    COMPLETE: 'complete',\n};\nconst statementTypes = {\n    ROW_PRE_EXEC: 'ROW_PRE_EXEC',\n    ROW_POST_EXEC: 'ROW_POST_EXEC',\n    FILE_PRE_EXEC: 'FILE_PRE_EXEC',\n    FILE_POST_EXEC: 'FILE_POST_EXEC',\n};\nconst queryCodes = {\n    QUERY_IN_PROGRESS: '333333', // GS code: the query is in progress\n    QUERY_IN_PROGRESS_ASYNC: '333334', // GS code: the query is detached\n};\nexports.createContext = function (options, services, connectionConfig) {\n    // create a statement context for a pre-exec statement\n    const context = createContextPreExec(options, services, connectionConfig);\n    context.type = statementTypes.FILE_PRE_EXEC;\n    // A hackish way to extend context with BaseStatement\n    new BaseStatement(options, context, services, connectionConfig);\n    // add the result request headers to the context\n    context.resultRequestHeaders = buildResultRequestHeadersFile();\n    return context;\n};\n/**\n * Check the type of command to execute.\n *\n * @param {Object} options\n * @param {Object} services\n * @param {Object} connectionConfig\n *\n * @returns {Object}\n */\nexports.createStatementPreExec = function (options, services, connectionConfig) {\n    Logger.getInstance().debug('--createStatementPreExec');\n    // create a statement context for a pre-exec statement\n    const context = createContextPreExec(options, services, connectionConfig);\n    if (options.sqlText &&\n        (Util.isPutCommand(options.sqlText) || Util.isGetCommand(options.sqlText))) {\n        if (options.fileStream) {\n            context.fileStream = options.fileStream;\n            options.fileStream = null;\n        }\n        return createFileStatementPreExec(options, context, services, connectionConfig);\n    }\n    const numBinds = countBinding(context.binds);\n    Logger.getInstance().debug('numBinds = %d', numBinds);\n    let threshold = Parameters.getValue(Parameters.names.CLIENT_STAGE_ARRAY_BINDING_THRESHOLD);\n    if (connectionConfig.getbindThreshold()) {\n        threshold = connectionConfig.getbindThreshold();\n    }\n    Logger.getInstance().debug('threshold = %d', threshold);\n    // check array binding,\n    if (numBinds > threshold) {\n        return createStageStatementpreExec(options, context, services, connectionConfig);\n    }\n    else {\n        return createRowStatementPreExec(options, context, services, connectionConfig);\n    }\n};\n/**\n * Executes a statement and returns a statement object that can be used to fetch\n * its result.\n *\n * @param {Object} statementOptions\n * @param {Object} statementContext\n * @param {Object} services\n * @param {Object} connectionConfig\n *\n * @returns {Object}\n */\nfunction createRowStatementPreExec(statementOptions, statementContext, services, connectionConfig) {\n    // set the statement type\n    statementContext.type = statementTypes.ROW_PRE_EXEC;\n    return new RowStatementPreExec(statementOptions, statementContext, services, connectionConfig);\n}\n/**\n * Creates a statement object that can be used to fetch the result of a\n * previously executed statement.\n *\n * @param {Object} statementOptions\n * @param {Object} services\n * @param {Object} connectionConfig\n *\n * @returns {Object}\n */\nexports.createStatementPostExec = function (statementOptions, services, connectionConfig) {\n    // check for missing options\n    Errors.checkArgumentExists(Util.exists(statementOptions), ErrorCodes.ERR_CONN_FETCH_RESULT_MISSING_OPTIONS);\n    // check for invalid options\n    Errors.checkArgumentValid(Util.isObject(statementOptions), ErrorCodes.ERR_CONN_FETCH_RESULT_INVALID_OPTIONS);\n    // check for missing query id\n    Errors.checkArgumentExists(Util.exists(statementOptions.queryId), ErrorCodes.ERR_CONN_FETCH_RESULT_MISSING_QUERY_ID);\n    // check for invalid query id\n    Errors.checkArgumentValid(Util.isString(statementOptions.queryId), ErrorCodes.ERR_CONN_FETCH_RESULT_INVALID_QUERY_ID);\n    // check for invalid complete callback\n    const complete = statementOptions.complete;\n    if (Util.exists(complete)) {\n        Errors.checkArgumentValid(Util.isFunction(complete), ErrorCodes.ERR_CONN_FETCH_RESULT_INVALID_COMPLETE);\n    }\n    // check for invalid streamResult\n    if (Util.exists(statementOptions.streamResult)) {\n        Errors.checkArgumentValid(Util.isBoolean(statementOptions.streamResult), ErrorCodes.ERR_CONN_FETCH_RESULT_INVALID_STREAM_RESULT);\n    }\n    // check for invalid fetchAsString\n    const fetchAsString = statementOptions.fetchAsString;\n    if (Util.exists(fetchAsString)) {\n        // check that the value is an array\n        Errors.checkArgumentValid(Util.isArray(fetchAsString), ErrorCodes.ERR_CONN_FETCH_RESULT_INVALID_FETCH_AS_STRING);\n        // check that all the array elements are valid\n        const invalidValueIndex = NativeTypes.findInvalidValue(fetchAsString);\n        Errors.checkArgumentValid(invalidValueIndex === -1, ErrorCodes.ERR_CONN_FETCH_RESULT_INVALID_FETCH_AS_STRING_VALUES, JSON.stringify(fetchAsString[invalidValueIndex]));\n    }\n    const rowMode = statementOptions.rowMode;\n    if (Util.exists(rowMode)) {\n        RowMode.checkRowModeValid(rowMode);\n    }\n    const cwd = statementOptions.cwd;\n    if (Util.exists(cwd)) {\n        Errors.checkArgumentValid(Util.isString(cwd), ErrorCodes.ERR_CONN_FETCH_RESULT_INVALID_CWD);\n    }\n    // validate non-user-specified arguments\n    Errors.assertInternal(Util.isObject(services));\n    Errors.assertInternal(Util.isObject(connectionConfig));\n    // create a statement context\n    const statementContext = createStatementContext();\n    statementContext.queryId = statementOptions.queryId;\n    statementContext.complete = complete;\n    statementContext.streamResult = statementOptions.streamResult;\n    statementContext.fetchAsString = statementOptions.fetchAsString;\n    statementContext.multiResultIds = statementOptions.multiResultIds;\n    statementContext.multiSqlTexts = statementOptions.multiSqlTexts;\n    statementContext.multiCurId = statementOptions.multiCurId;\n    statementContext.rowMode = statementOptions.rowMode;\n    statementContext.cwd = statementOptions.cwd;\n    statementContext.sqlText = statementOptions.sqlText;\n    // set the statement type\n    statementContext.type =\n        statementContext.type === statementTypes.ROW_PRE_EXEC\n            ? statementTypes.ROW_POST_EXEC\n            : statementTypes.FILE_POST_EXEC;\n    return new StatementPostExec(statementOptions, statementContext, services, connectionConfig);\n};\n/**\n * Creates a new statement context object.\n *\n * @returns {Object}\n */\nfunction createStatementContext() {\n    return new EventEmitter();\n}\n/**\n * Creates a statement object that can be used to execute a PUT or GET file\n * operation.\n *\n * @param {Object} statementOptions\n * @param {Object} statementContext\n * @param {Object} services\n * @param {Object} connectionConfig\n *\n * @returns {Object}\n */\nfunction createFileStatementPreExec(statementOptions, statementContext, services, connectionConfig) {\n    // set the statement type\n    statementContext.type = statementTypes.FILE_PRE_EXEC;\n    return new FileStatementPreExec(statementOptions, statementContext, services, connectionConfig);\n}\n/**\n * Creates a statement object that can be used to execute stage binding\n * operation.\n *\n * @param {Object} statementOptions\n * @param {Object} statementContext\n * @param {Object} services\n * @param {Object} connectionConfig\n *\n * @returns {Object}\n */\nfunction createStageStatementpreExec(statementOptions, statementContext, services, connectionConfig) {\n    return new StageBindingStatementPreExec(statementOptions, statementContext, services, connectionConfig);\n}\n/**\n * Creates a statement context object for pre-exec statement.\n *\n * @param {Object} statementOptions\n * @param {Object} services\n * @param {Object} connectionConfig\n *\n * @returns {Object}\n */\nfunction createContextPreExec(statementOptions, services, connectionConfig) {\n    // check for missing options\n    Errors.checkArgumentExists(Util.exists(statementOptions), ErrorCodes.ERR_CONN_EXEC_STMT_MISSING_OPTIONS);\n    // check for invalid options\n    Errors.checkArgumentValid(Util.isObject(statementOptions), ErrorCodes.ERR_CONN_EXEC_STMT_INVALID_OPTIONS);\n    if (!Util.exists(statementOptions.requestId)) {\n        // check for missing sql text\n        Errors.checkArgumentExists(Util.exists(statementOptions.sqlText), ErrorCodes.ERR_CONN_EXEC_STMT_MISSING_SQL_TEXT);\n        // check for invalid sql text\n        Errors.checkArgumentValid(Util.isString(statementOptions.sqlText), ErrorCodes.ERR_CONN_EXEC_STMT_INVALID_SQL_TEXT);\n    }\n    // check for invalid complete callback\n    const complete = statementOptions.complete;\n    if (Util.exists(complete)) {\n        Errors.checkArgumentValid(Util.isFunction(complete), ErrorCodes.ERR_CONN_EXEC_STMT_INVALID_COMPLETE);\n    }\n    // check for invalid streamResult\n    if (Util.exists(statementOptions.streamResult)) {\n        Errors.checkArgumentValid(Util.isBoolean(statementOptions.streamResult), ErrorCodes.ERR_CONN_EXEC_STMT_INVALID_STREAM_RESULT);\n    }\n    // check for invalid fetchAsString\n    const fetchAsString = statementOptions.fetchAsString;\n    if (Util.exists(fetchAsString)) {\n        // check that the value is an array\n        Errors.checkArgumentValid(Util.isArray(fetchAsString), ErrorCodes.ERR_CONN_EXEC_STMT_INVALID_FETCH_AS_STRING);\n        // check that all the array elements are valid\n        const invalidValueIndex = NativeTypes.findInvalidValue(fetchAsString);\n        Errors.checkArgumentValid(invalidValueIndex === -1, ErrorCodes.ERR_CONN_EXEC_STMT_INVALID_FETCH_AS_STRING_VALUES, JSON.stringify(fetchAsString[invalidValueIndex]));\n    }\n    // check for invalid requestId\n    if (Util.exists(statementOptions.requestId)) {\n        Errors.checkArgumentValid(Util.isString(statementOptions.requestId), ErrorCodes.ERR_CONN_EXEC_STMT_INVALID_REQUEST_ID);\n    }\n    // if parameters are specified, make sure the specified value is an object\n    if (Util.exists(statementOptions.parameters)) {\n        Errors.checkArgumentValid(Util.isObject(statementOptions.parameters), ErrorCodes.ERR_CONN_EXEC_STMT_INVALID_PARAMETERS);\n    }\n    // if binds are specified\n    const binds = statementOptions.binds;\n    if (Util.exists(binds)) {\n        // make sure the specified value is an array\n        Errors.checkArgumentValid(Util.isArray(binds), ErrorCodes.ERR_CONN_EXEC_STMT_INVALID_BINDS);\n        // make sure everything in the binds array is stringifiable\n        for (let index = 0, length = binds.length; index < length; index++) {\n            Errors.checkArgumentValid(JSON.stringify(binds[index]) !== undefined, ErrorCodes.ERR_CONN_EXEC_STMT_INVALID_BIND_VALUES, binds[index]);\n        }\n    }\n    // if an internal option is specified, make sure it's boolean\n    if (Util.exists(statementOptions.internal)) {\n        Errors.checkArgumentValid(Util.isBoolean(statementOptions.internal), ErrorCodes.ERR_CONN_EXEC_STMT_INVALID_INTERNAL);\n    }\n    const rowMode = statementOptions.rowMode;\n    if (Util.exists(rowMode)) {\n        RowMode.checkRowModeValid(rowMode);\n    }\n    // if an asyncExec flag is specified, make sure it's boolean\n    if (Util.exists(statementOptions.asyncExec)) {\n        Errors.checkArgumentValid(Util.isBoolean(statementOptions.asyncExec), ErrorCodes.ERR_CONN_EXEC_STMT_INVALID_ASYNC_EXEC);\n    }\n    // if a describeOnly flag is specified, make sure it's boolean\n    if (Util.exists(statementOptions.describeOnly)) {\n        Errors.checkArgumentValid(Util.isBoolean(statementOptions.describeOnly), ErrorCodes.ERR_CONN_EXEC_STMT_INVALID_DESCRIBE_ONLY);\n    }\n    // create a statement context\n    const statementContext = createStatementContext();\n    statementContext.sqlText = statementOptions.sqlText;\n    statementContext.complete = complete;\n    statementContext.streamResult = statementOptions.streamResult;\n    statementContext.fetchAsString = statementOptions.fetchAsString;\n    statementContext.multiResultIds = statementOptions.multiResultIds;\n    statementContext.multiCurId = statementOptions.multiCurId;\n    statementContext.rowMode = statementOptions.rowMode;\n    statementContext.asyncExec = statementOptions.asyncExec;\n    // if a binds array is specified, add it to the statement context\n    if (Util.exists(statementOptions.binds)) {\n        statementContext.binds = statementOptions.binds;\n    }\n    // if parameters are specified, add them to the statement context\n    if (Util.exists(statementOptions.parameters)) {\n        statementContext.parameters = statementOptions.parameters;\n    }\n    // if the internal flag is specified, add it to the statement context\n    if (Util.exists(statementOptions.internal)) {\n        statementContext.internal = statementOptions.internal;\n    }\n    if (Util.exists(statementOptions.cwd)) {\n        statementContext.cwd = statementOptions.cwd;\n    }\n    // if the describeOnly flag is specified, add it to the statement context\n    if (Util.exists(statementOptions.describeOnly)) {\n        statementContext.describeOnly = statementOptions.describeOnly;\n    }\n    // validate non-user-specified arguments\n    Errors.assertInternal(Util.isObject(services));\n    Errors.assertInternal(Util.isObject(connectionConfig));\n    if (connectionConfig.queryTag) {\n        statementOptions.parameters = statementOptions.parameters || {};\n        statementOptions.parameters.QUERY_TAG = connectionConfig.queryTag;\n    }\n    // use request id passed by user\n    if (statementOptions.requestId) {\n        statementContext.requestId = statementOptions.requestId;\n        statementContext.resubmitRequest = true;\n    }\n    else {\n        // use a random uuid for the statement request id\n        statementContext.requestId = uuidv4();\n    }\n    return statementContext;\n}\n/**\n * Creates a new BaseStatement.\n *\n * @param statementOptions\n * @param context\n * @param services\n * @param connectionConfig\n * @constructor\n */\nfunction BaseStatement(statementOptions, context, services, connectionConfig) {\n    // call super\n    EventEmitter.call(this);\n    // validate input\n    Errors.assertInternal(Util.isObject(statementOptions));\n    Errors.assertInternal(Util.isObject(context));\n    context.services = services;\n    context.connectionConfig = connectionConfig;\n    context.isFetchingResult = true;\n    context.rowMode = statementOptions.rowMode || connectionConfig.getRowMode();\n    // TODO: add the parameters map to the statement context\n    const statement = this;\n    /**\n     * Returns this statement's SQL text.\n     *\n     * @returns {String}\n     */\n    this.getSqlText = function () {\n        return context.sqlText;\n    };\n    /**\n     * Returns the current status of this statement.\n     *\n     * @returns {String}\n     */\n    this.getStatus = function () {\n        return context.isFetchingResult ? states.FETCHING : states.COMPLETE;\n    };\n    /**\n     * Returns the columns produced by this statement.\n     *\n     * @returns {Object[]}\n     */\n    this.getColumns = function () {\n        return context.result ? context.result.getColumns() : undefined;\n    };\n    /**\n     * Given a column identifier, returns the corresponding column. The column\n     * identifier can be either the column name (String) or the column index\n     * (Number). If a column is specified and there is more than one column with\n     * that name, the first column with the specified name will be returned.\n     *\n     * @param {String | Number} columnIdentifier\n     *\n     * @returns {Object}\n     */\n    this.getColumn = function (columnIdentifier) {\n        return context.result ? context.result.getColumn(columnIdentifier) : undefined;\n    };\n    /**\n     * Returns the number of rows returned by this statement.\n     *\n     * @returns {Number}\n     */\n    this.getNumRows = function () {\n        return context.result ? context.result.getReturnedRows() : undefined;\n    };\n    /**\n     * Returns the number of rows updated by this statement.\n     *\n     * @returns {Number}\n     */\n    this.getNumUpdatedRows = function () {\n        return context.result ? context.result.getNumUpdatedRows() : undefined;\n    };\n    /**\n     * Returns an object that contains information about the values of the\n     * current warehouse, current database, etc., when this statement finished\n     * executing.\n     *\n     * @returns {Object}\n     */\n    this.getSessionState = function () {\n        return context.result ? context.result.getSessionState() : undefined;\n    };\n    /**\n     * Returns the request id that was used when the statement was issued.\n     *\n     * @returns {String}\n     */\n    this.getRequestId = function () {\n        return context.requestId;\n    };\n    /**\n     * Returns the query id generated by the server for this statement.\n     * If the statement is still executing and we don't know the query id\n     * yet, this method will return undefined.\n     *\n     * Should use getQueryId instead.\n     * @deprecated\n     * @returns {String}\n     */\n    this.getStatementId = function () {\n        return context.queryId;\n    };\n    /**\n     * Returns the query id generated by the server for this statement.\n     * If the statement is still executing and we don't know the query id\n     * yet, this method will return undefined.\n     *\n     * @returns {String}\n     */\n    this.getQueryId = function () {\n        return context.queryId;\n    };\n    /**\n     * Cancels this statement if possible.\n     *\n     * @param {Function} [callback]\n     */\n    this.cancel = function (callback) {\n        sendCancelStatement(context, statement, callback);\n    };\n    //Integration Testing purpose.\n    this.getQueryContextCacheSize = function () {\n        return services.sf.getQueryContextCacheSize();\n    };\n    this.getQueryContextDTOSize = function () {\n        return services.sf.getQueryContextDTO().entries.length;\n    };\n    /**\n     * Issues a request to get the statement result again.\n     *\n     * @param {Function} callback\n     */\n    context.refresh = function (callback) {\n        // pick the appropriate function to get the result based on whether we\n        // have the query id or request id (we should have at least one)\n        const sendRequestFn = context.queryId ? sendRequestPostExec : sendRequestPreExec;\n        // the current result error might be transient,\n        // so issue a request to get the result again\n        sendRequestFn(context, function (err, body) {\n            // refresh the result\n            context.onStatementRequestComp(err, body);\n            // if a callback was specified, invoke it\n            if (Util.isFunction(callback)) {\n                callback(context);\n            }\n        });\n    };\n    /**\n     * Called when the statement request is complete.\n     *\n     * @param err\n     * @param body\n     */\n    context.onStatementRequestComp = async function (err, body) {\n        // if we already have a result or a result error, we invoked the complete\n        // callback once, so don't invoke it again\n        const suppressComplete = context.result || context.resultError;\n        // clear the previous result error\n        context.resultError = null;\n        // if there was no error, call the success function\n        if (!err) {\n            await context.onStatementRequestSucc(body);\n        }\n        else {\n            // save the error\n            context.resultError = err;\n            // if we don't have a query id and we got a response from GS, extract\n            // the query id from the data\n            if (!context.queryId && Errors.isOperationFailedError(err) && err.data) {\n                context.queryId = err.data.queryId;\n            }\n        }\n        // we're no longer fetching the result\n        context.isFetchingResult = false;\n        if (!suppressComplete) {\n            // emit a complete event\n            context.emit('statement-complete', Errors.externalize(err), statement);\n            // if a complete function was specified, invoke it\n            if (Util.exists(context.complete)) {\n                invokeStatementComplete(statement, context);\n            }\n        }\n        else {\n            Logger.getInstance().debug('refreshed result of statement with %s', context.requestId\n                ? Util.format('request id = %s', context.requestId)\n                : Util.format('query id = %s', context.queryId));\n        }\n    };\n    /**\n     * Called when the statement request is successful. Subclasses must provide\n     * their own implementation.\n     */\n    context.onStatementRequestSucc = function () { };\n}\nUtil.inherits(BaseStatement, EventEmitter);\n/**\n * Invokes the statement complete callback.\n *\n * @param {Object} statement\n * @param {Object} context\n */\nfunction invokeStatementComplete(statement, context) {\n    // find out if the result will be streamed;\n    // if a value is not specified, get it from the connection\n    let streamResult = context.streamResult;\n    if (!Util.exists(streamResult)) {\n        streamResult = context.connectionConfig.getStreamResult();\n    }\n    // if the result will be streamed later or in asyncExec mode,\n    // invoke the complete callback right away\n    if (streamResult) {\n        context.complete(Errors.externalize(context.resultError), statement);\n    }\n    else if (context.asyncExec) {\n        // return the result object with the query ID inside.\n        context.complete(null, statement, context.result);\n    }\n    else {\n        process.nextTick(function () {\n            // aggregate all the rows into an array and pass this\n            // array to the complete callback as the last argument\n            const rows = [];\n            statement\n                .streamRows()\n                .on('readable', function () {\n                // read only when data is available\n                let row;\n                // while there are rows available to read, push row to results array\n                while ((row = this.read()) !== null) {\n                    rows.push(row);\n                }\n            })\n                .on('end', function () {\n                context.complete(null, statement, rows);\n            })\n                .on('error', function (err) {\n                context.complete(Errors.externalize(err), statement);\n            });\n        });\n    }\n}\n/**\n * Creates a new RowStatementPreExec instance.\n *\n * @param {Object} statementOptions\n * @param {Object} context\n * @param {Object} services\n * @param {Object} connectionConfig\n * @constructor\n */\nfunction RowStatementPreExec(statementOptions, context, services, connectionConfig) {\n    Logger.getInstance().debug('RowStatementPreExec');\n    // call super\n    BaseStatement.apply(this, [statementOptions, context, services, connectionConfig]);\n    // add the result request headers to the context\n    context.resultRequestHeaders = buildResultRequestHeadersRow();\n    /**\n     * Called when the request to get the statement result is successful.\n     *\n     * @param {Object} body\n     */\n    context.onStatementRequestSucc = createOnStatementRequestSuccRow(this, context);\n    /**\n     * Fetches the rows in this statement's result and invokes the each()\n     * callback on each row. If start and end values are specified, the each()\n     * callback will only be invoked on rows in the specified range.\n     *\n     * @param {Object} options\n     */\n    this.fetchRows = createFnFetchRows(this, context);\n    /**\n     * Streams the rows in this statement's result. If start and end values are\n     * specified, only rows in the specified range are streamed.\n     *\n     * @param {Object} options\n     */\n    this.streamRows = createFnStreamRows(this, context);\n    // send a request to execute the statement\n    sendRequestPreExec(context, context.onStatementRequestComp);\n}\nUtil.inherits(RowStatementPreExec, BaseStatement);\n/**\n * Creates a function that can be used by row statements to process the response\n * when the request is successful.\n *\n * @param statement\n * @param context\n * @returns {Function}\n */\nfunction createOnStatementRequestSuccRow(statement, context) {\n    return function (body) {\n        // if we don't already have a result\n        if (!context.result) {\n            if (body.code === queryCodes.QUERY_IN_PROGRESS_ASYNC) {\n                context.result = {\n                    queryId: body.data.queryId,\n                };\n                return;\n            }\n            if (body.data.resultIds != null && body.data.resultIds.length > 0) {\n                //multi statements\n                this._resultIds = body.data.resultIds.split(',');\n                context.isMulti = true;\n                context.multiResultIds = this._resultIds;\n                context.multiSqlTexts = context.sqlText.split(';');\n                context.multiCurId = 0;\n                context.sqlText = context.multiSqlTexts[context.multiCurId];\n                context.queryId = this._resultIds[context.multiCurId];\n                exports.createStatementPostExec(context, context.services, context.connectionConfig);\n            }\n            else {\n                // build a result from the response\n                context.result = new Result({\n                    response: body,\n                    statement: statement,\n                    services: context.services,\n                    connectionConfig: context.connectionConfig,\n                    rowMode: context.rowMode,\n                });\n                context.queryId = context.result.getQueryId();\n                this.services.sf.deserializeQueryContext(context.result.getQueryContext());\n            }\n        }\n        else {\n            // refresh the existing result\n            context.result.refresh(body);\n        }\n        if (context.isMulti == null || context.isMulti === false) {\n            // only update the parameters if the statement isn't a post-exec statement\n            if (context.type !== statementTypes.ROW_POST_EXEC ||\n                context.type !== statementTypes.FILE_POST_EXEC) {\n                Parameters.update(context.result.getParametersArray());\n            }\n        }\n    };\n}\n/**\n * Creates a new FileStatementPreExec instance.\n *\n * @param {Object} statementOptions\n * @param {Object} context\n * @param {Object} services\n * @param {Object} connectionConfig\n * @constructor\n */\nfunction FileStatementPreExec(statementOptions, context, services, connectionConfig) {\n    // call super\n    BaseStatement.apply(this, [statementOptions, context, services, connectionConfig]);\n    // add the result request headers to the context\n    context.resultRequestHeaders = buildResultRequestHeadersFile();\n    /**\n     * Called when the statement request is successful.\n     *\n     * @param {Object} body\n     */\n    context.onStatementRequestSucc = async function (body) {\n        await executeFileTransferRequest(context, body, this);\n    };\n    /**\n     * Streams the rows in this statement's result. If start and end values are\n     * specified, only rows in the specified range are streamed.\n     *\n     * @param {Object} options\n     */\n    this.streamRows = createFnStreamRows(this, context);\n    this.hasNext = hasNextResult(this, context);\n    this.NextResult = createNextReuslt(this, context);\n    /**\n     * Returns the file metadata generated by the statement.\n     *\n     * @returns {Object}\n     */\n    this.getFileMetadata = function () {\n        return context.fileMetadata;\n    };\n    // send a request to execute the file statement\n    sendRequestPreExec(context, context.onStatementRequestComp);\n}\nasync function executeFileTransferRequest(context, body, statement, fileTransferAgent) {\n    context.fileMetadata = body;\n    const fta = fileTransferAgent ?? new FileTransferAgent(context);\n    await fta.execute();\n    try {\n        // build a result from the response\n        const result = fta.result();\n        // init result and meta\n        body.data = {\n            rowset: result.rowset,\n            returned: result.rowset.length,\n            rowtype: result.rowtype,\n            parameters: [],\n        };\n        context.result = new Result({\n            response: body,\n            statement: statement,\n            services: context.services,\n            connectionConfig: context.connectionConfig,\n        });\n    }\n    catch (error) {\n        context.resultError = error;\n    }\n}\nexports.executeFileTransferRequest = executeFileTransferRequest;\nUtil.inherits(FileStatementPreExec, BaseStatement);\n/**\n * Creates a new StageBindingStatementPreExec instance.\n *\n * @param {Object} statementOptions\n * @param {Object} context\n * @param {Object} services\n * @param {Object} connectionConfig\n * @constructor\n */\nfunction StageBindingStatementPreExec(statementOptions, context, services, connectionConfig) {\n    // call super\n    BaseStatement.apply(this, arguments);\n    // add the result request headers to the context\n    context.resultRequestHeaders = buildResultRequestHeadersFile();\n    /**\n     * Called when the statement request is successful. Subclasses must provide\n     * their own implementation.\n     */\n    context.onStatementRequestSucc = function () {\n        //do nothing\n    };\n    /**\n     * Called the stage binding request\n     *\n     * @param {Object} options\n     * @param {Object} context\n     * @param {Object} services\n     * @param {Object} connectionConfig\n     */\n    this.StageBindingRequest = async function (options, context, services, connectionConfig) {\n        try {\n            const bindUploaderRequestId = uuidv4();\n            const bind = new Bind.BindUploader(options, services, connectionConfig, bindUploaderRequestId);\n            context.bindStage = Bind.GetStageName(bindUploaderRequestId);\n            await bind.Upload(context.binds);\n            return createRowStatementPreExec(options, context, services, connectionConfig);\n        }\n        catch (error) {\n            context.bindStage = null;\n            return createRowStatementPreExec(options, context, services, connectionConfig);\n        }\n    };\n    /**\n     * Fetches the rows in this statement's result and invokes the each()\n     * callback on each row. If start and end values are specified, the each()\n     * callback will only be invoked on rows in the specified range.\n     *\n     * @param {Object} options\n     */\n    this.fetchRows = createFnFetchRows(this, context);\n    /**\n     * Streams the rows in this statement's result. If start and end values are\n     * specified, only rows in the specified range are streamed.\n     *\n     * @param {Object} options\n     */\n    this.streamRows = createFnStreamRows(this, context);\n    this.hasNext = hasNextResult(this, context);\n    this.NextResult = createNextReuslt(this, context);\n    this.StageBindingRequest(statementOptions, context, services, connectionConfig);\n}\nUtil.inherits(StageBindingStatementPreExec, BaseStatement);\n/**\n * Creates a new StatementPostExec instance.\n *\n * @param {Object} statementOptions\n * @param {Object} context\n * @param {Object} services\n * @param {Object} connectionConfig\n * @constructor\n */\nfunction StatementPostExec(statementOptions, context, services, connectionConfig) {\n    // call super\n    BaseStatement.apply(this, [statementOptions, context, services, connectionConfig]);\n    // add the result request headers to the context\n    context.resultRequestHeaders = buildResultRequestHeadersRow();\n    /**\n     * Called when the statement request is successful.\n     *\n     * @param {Object} body\n     */\n    context.onStatementRequestSucc = createOnStatementRequestSuccRow(this, context);\n    /**\n     * Fetches the rows in this statement's result and invokes the each()\n     * callback on each row. If startIndex and endIndex values are specified, the\n     * each() callback will only be invoked on rows in the requested range. The\n     * end() callback will be invoked when either all the requested rows have been\n     * successfully processed, or if an error was encountered while trying to\n     * fetch the requested rows.\n     *\n     * @param {Object} options\n     */\n    this.fetchRows = createFnFetchRows(this, context);\n    /**\n     * Streams the rows in this statement's result. If start and end values are\n     * specified, only rows in the specified range are streamed.\n     *\n     * @param {Object} options\n     */\n    this.streamRows = createFnStreamRows(this, context);\n    this.hasNext = hasNextResult(this, context);\n    this.NextResult = createNextReuslt(this, context);\n    // send a request to fetch the result\n    sendRequestPostExec(context, context.onStatementRequestComp);\n}\nUtil.inherits(StatementPostExec, BaseStatement);\n/**\n * Creates a function that fetches the rows in a statement's result and\n * invokes the each() callback on each row. If start and end values are\n * specified, the each() callback will only be invoked on rows in the\n * specified range.\n *\n * @param statement\n * @param context\n */\nfunction createFnFetchRows(statement, context) {\n    return function (options) {\n        // check for missing options\n        Errors.checkArgumentExists(Util.exists(options), ErrorCodes.ERR_STMT_FETCH_ROWS_MISSING_OPTIONS);\n        // check for invalid options\n        Errors.checkArgumentValid(Util.isObject(options), ErrorCodes.ERR_STMT_FETCH_ROWS_INVALID_OPTIONS);\n        // check for missing each()\n        Errors.checkArgumentExists(Util.exists(options.each), ErrorCodes.ERR_STMT_FETCH_ROWS_MISSING_EACH);\n        // check for invalid each()\n        Errors.checkArgumentValid(Util.isFunction(options.each), ErrorCodes.ERR_STMT_FETCH_ROWS_INVALID_EACH);\n        // check for missing end()\n        Errors.checkArgumentExists(Util.exists(options.end), ErrorCodes.ERR_STMT_FETCH_ROWS_MISSING_END);\n        // check for invalid end()\n        Errors.checkArgumentValid(Util.isFunction(options.end), ErrorCodes.ERR_STMT_FETCH_ROWS_INVALID_END);\n        const rowMode = options.rowMode;\n        if (Util.exists(rowMode)) {\n            RowMode.checkRowModeValid(rowMode);\n        }\n        // if we're still trying to fetch the result, create an error of our own\n        // and invoke the end() callback\n        if (context.isFetchingResult) {\n            process.nextTick(function () {\n                options.end(Errors.createClientError(ErrorCodes.ERR_STMT_FETCH_ROWS_FETCHING_RESULT).externalize(), statement);\n            });\n        }\n        else if (context.resultError) {\n            // if there was an error the last time we tried to get the result\n            // if we have a fatal error, end the fetch rows operation since we're not\n            // going to be able to get any rows, either because the statement failed\n            // or because the result's been purged\n            if (Errors.isOperationFailedError(context.resultError) && context.resultError.sqlState) {\n                process.nextTick(function () {\n                    endFetchRows(options, statement, context);\n                });\n            }\n            else {\n                context.refresh(function () {\n                    // if there was no error, fetch rows from the result\n                    if (!context.resultError) {\n                        fetchRowsFromResult(options, statement, context);\n                    }\n                    else {\n                        // give up because it's unlikely we'll succeed if we retry again\n                        endFetchRows(options, statement, context);\n                    }\n                });\n            }\n        }\n        else {\n            fetchRowsFromResult(options, statement, context);\n        }\n    };\n}\n/**\n * Creates a function that streams the rows in a statement's result. If start\n * and end values are specified, only rows in the specified range are streamed.\n *\n * @param statement\n * @param context\n */\nfunction createFnStreamRows(statement, context) {\n    return function (options) {\n        // if some options are specified\n        if (Util.exists(options)) {\n            // check for invalid options\n            Errors.checkArgumentValid(Util.isObject(options), ErrorCodes.ERR_STMT_FETCH_ROWS_INVALID_OPTIONS);\n            // check for invalid start\n            if (Util.exists(options.start)) {\n                Errors.checkArgumentValid(Util.isNumber(options.start), ErrorCodes.ERR_STMT_STREAM_ROWS_INVALID_START);\n            }\n            // check for invalid end\n            if (Util.exists(options.end)) {\n                Errors.checkArgumentValid(Util.isNumber(options.end), ErrorCodes.ERR_STMT_STREAM_ROWS_INVALID_END);\n            }\n            // check for invalid fetchAsString\n            const fetchAsString = options.fetchAsString;\n            if (Util.exists(fetchAsString)) {\n                // check that the value is an array\n                Errors.checkArgumentValid(Util.isArray(fetchAsString), ErrorCodes.ERR_STMT_STREAM_ROWS_INVALID_FETCH_AS_STRING);\n                // check that all the array elements are valid\n                const invalidValueIndex = NativeTypes.findInvalidValue(fetchAsString);\n                Errors.checkArgumentValid(invalidValueIndex === -1, ErrorCodes.ERR_STMT_STREAM_ROWS_INVALID_FETCH_AS_STRING_VALUES, JSON.stringify(fetchAsString[invalidValueIndex]));\n            }\n            const rowMode = context.rowMode;\n            if (Util.exists(rowMode)) {\n                RowMode.checkRowModeValid(rowMode);\n            }\n        }\n        return new RowStream(statement, context, options);\n    };\n}\n/**\n * Ends the fetchRows() operation.\n *\n * @param {Object} options the options passed to fetchRows().\n * @param {Object} statement\n * @param {Object} context\n */\nfunction endFetchRows(options, statement, context) {\n    options.end(Errors.externalize(context.resultError), statement);\n}\n/**\n * Fetches rows from the statement's result.\n *\n * @param {Object} options the options passed to fetchRows().\n * @param {Object} statement\n * @param {Object} context\n */\nfunction fetchRowsFromResult(options, statement, context) {\n    let numInterrupts = 0;\n    // forward to the result to get a FetchRowsOperation object\n    const operation = context.result.fetchRows(options);\n    // subscribe to the operation's 'complete' event\n    operation.on('complete', function (err, continueCallback) {\n        // we want to retry if the error is retryable and the\n        // result stream hasn't been closed too many times\n        if (Errors.isLargeResultSetError(err) &&\n            err.response &&\n            err.response.statusCode === 403 &&\n            numInterrupts < context.connectionConfig.getResultStreamInterrupts()) {\n            // increment the interrupt counter\n            numInterrupts++;\n            // issue a request to fetch the result again\n            sendRequestPostExec(context, function (err, body) {\n                // refresh the result\n                context.onStatementRequestComp(err, body);\n                // if there was no error, continue from where we got interrupted\n                if (!err) {\n                    continueCallback();\n                }\n            });\n        }\n        else {\n            endFetchRows(options, statement, context);\n        }\n    });\n}\n/**\n * Issues a request to cancel a statement.\n *\n * @param {Object} statementContext\n * @param {Object} statement\n * @param {Function} callback\n */\nfunction sendCancelStatement(statementContext, statement, callback) {\n    let url;\n    let json;\n    // use different rest endpoints based on whether the query id is available\n    if (statementContext.queryId) {\n        url = '/queries/' + statementContext.queryId + '/abort-request';\n    }\n    else {\n        url = '/queries/v1/abort-request';\n        json = {\n            requestId: statementContext.requestId,\n        };\n    }\n    // issue a request to cancel the statement\n    statementContext.services.sf.request({\n        method: 'POST',\n        url: url,\n        json: json,\n        callback: function (err) {\n            // if a callback was specified, invoke it\n            if (Util.isFunction(callback)) {\n                callback(Errors.externalize(err), statement);\n            }\n        },\n    });\n}\n/**\n * Issues a request to get the result of a statement that hasn't been previously\n * executed.\n *\n * @param statementContext\n * @param onResultAvailable\n */\nfunction sendRequestPreExec(statementContext, onResultAvailable) {\n    // get the request headers\n    const headers = statementContext.resultRequestHeaders;\n    // build the basic json for the request\n    const json = {\n        disableOfflineChunks: false,\n    };\n    json.sqlText = statementContext.sqlText;\n    if (statementContext.resubmitRequest && !json.sqlText) {\n        json.sqlText =\n            `SELECT 'Error retrieving query results for request id: ${statementContext.requestId}, ` +\n                \"please use RESULT_SCAN instead' AS ErrorMessage;\";\n    }\n    Logger.getInstance().debug('context.bindStage=' + statementContext.bindStage);\n    if (Util.exists(statementContext.bindStage)) {\n        json.bindStage = statementContext.bindStage;\n    }\n    else if (Util.exists(statementContext.binds)) {\n        // if binds are specified, build a binds map and include it in the request\n        json.bindings = buildBindsMap(statementContext.binds);\n    }\n    // include statement parameters if a value was specified\n    if (Util.exists(statementContext.parameters)) {\n        json.parameters = statementContext.parameters;\n        Logger.getInstance().debug('context.parameters=' + statementContext.parameters);\n    }\n    // include the internal flag if a value was specified\n    if (Util.exists(statementContext.internal)) {\n        json.isInternal = statementContext.internal;\n    }\n    if (!statementContext.disableQueryContextCache) {\n        json.queryContextDTO = statementContext.services.sf.getQueryContextDTO();\n    }\n    // include the asyncExec flag if a value was specified\n    if (Util.exists(statementContext.asyncExec)) {\n        json.asyncExec = statementContext.asyncExec;\n    }\n    // include describeOnly flag if a value was specified\n    if (Util.exists(statementContext.describeOnly)) {\n        json.describeOnly = statementContext.describeOnly;\n    }\n    // use the snowflake service to issue the request\n    sendSfRequest(statementContext, {\n        method: 'POST',\n        headers: headers,\n        url: Url.format({\n            pathname: '/queries/v1/query-request',\n            search: QueryString.stringify({\n                requestId: statementContext.requestId,\n            }),\n        }),\n        json: json,\n        callback: buildResultRequestCallback(statementContext, headers, onResultAvailable),\n    }, true);\n}\nthis.sendRequest = function (statementContext, onResultAvailable) {\n    // get the request headers\n    const headers = statementContext.resultRequestHeaders;\n    // build the basic json for the request\n    const json = {\n        disableOfflineChunks: false,\n        sqlText: statementContext.sqlText,\n    };\n    Logger.getInstance().debug('context.bindStage=' + statementContext.bindStage);\n    if (Util.exists(statementContext.bindStage)) {\n        json.bindStage = statementContext.bindStage;\n    }\n    else if (Util.exists(statementContext.binds)) {\n        // if binds are specified, build a binds map and include it in the request\n        json.bindings = buildBindsMap(statementContext.binds);\n    }\n    // include statement parameters if a value was specified\n    if (Util.exists(statementContext.parameters)) {\n        json.parameters = statementContext.parameters;\n    }\n    // include the internal flag if a value was specified\n    if (Util.exists(statementContext.internal)) {\n        json.isInternal = statementContext.internal;\n    }\n    if (!statementContext.disableQueryContextCache) {\n        json.queryContextDTO = statementContext.services.sf.getQueryContextDTO();\n    }\n    let options = {\n        method: 'POST',\n        headers: headers,\n        url: Url.format({\n            pathname: '/queries/v1/query-request',\n            search: QueryString.stringify({\n                requestId: statementContext.requestId,\n            }),\n        }),\n        json: json,\n        callback: buildResultRequestCallback(statementContext, headers, onResultAvailable),\n    };\n    const sf = statementContext.services.sf;\n    // clone the options\n    options = Util.apply({}, options);\n    return new Promise((resolve) => {\n        resolve(sf.postAsync(options));\n    });\n};\n/**\n * Converts a bind variables array to a map that can be included in the\n * POST-body when issuing a pre-exec statement request.\n *\n * @param bindsArray\n *\n * @returns {Object}\n */\nfunction buildBindsMap(bindsArray) {\n    const bindsMap = {};\n    const isArrayBinding = bindsArray.length > 0 && Util.isArray(bindsArray[0]);\n    const singleArray = isArrayBinding ? bindsArray[0] : bindsArray;\n    for (let index = 0, length = singleArray.length; index < length; index++) {\n        let value = singleArray[index];\n        // pick the appropriate logical data type based on the bind value\n        let type;\n        if (Util.isBoolean(value)) {\n            type = 'BOOLEAN';\n        }\n        else if (Util.isObject(value) || Util.isArray(value)) {\n            type = 'VARIANT';\n        }\n        else if (Util.isNumber(value)) {\n            if (Number(value) === value && value % 1 === 0) {\n                // if value is integer\n                type = 'FIXED';\n            }\n            else {\n                type = 'REAL';\n            }\n        }\n        else {\n            type = 'TEXT';\n        }\n        // convert non-null values to a string if necessary; we don't convert null\n        // because the client might want to run something like\n        //   sql text = update t set name = :1 where id = 1;, binds = [null]\n        // and converting null to a string would result in us executing\n        //   sql text = update t set name = 'null' where id = 1;\n        // instead of\n        //   sql text = update t set name = null where id = 1;\n        if (!isArrayBinding) {\n            if (value !== null && !Util.isString(value)) {\n                if (value instanceof Date) {\n                    value = value.toJSON();\n                }\n                else {\n                    value = JSON.stringify(value);\n                }\n            }\n        }\n        else {\n            value = [];\n            for (let rowIndex = 0; rowIndex < bindsArray.length; rowIndex++) {\n                let value0 = bindsArray[rowIndex][index];\n                if (value0 !== null && !Util.isString(value0)) {\n                    if (value0 instanceof Date) {\n                        value0 = value0.toJSON();\n                    }\n                    else {\n                        value0 = JSON.stringify(value0);\n                    }\n                }\n                value.push(value0);\n            }\n        }\n        // add an entry for the bind variable to the map\n        bindsMap[index + 1] = {\n            type: type,\n            value: value,\n        };\n    }\n    return bindsMap;\n}\n/**\n * Issues a request to get the result of a statement that has been previously\n * executed.\n *\n * @param statementContext\n * @param onResultAvailable\n */\nfunction sendRequestPostExec(statementContext, onResultAvailable) {\n    // get the request headers\n    const headers = statementContext.resultRequestHeaders;\n    // use the snowflake service to issue the request\n    sendSfRequest(statementContext, {\n        method: 'GET',\n        headers: headers,\n        url: Url.format({\n            pathname: '/queries/' + statementContext.queryId + '/result',\n            search: QueryString.stringify({\n                disableOfflineChunks: false,\n            }),\n        }),\n        callback: buildResultRequestCallback(statementContext, headers, onResultAvailable),\n    });\n}\n/**\n * Issues a statement-related request using the Snowflake service.\n *\n * @param {Object} statementContext the statement context.\n * @param {Object} options the request options.\n * @param {Boolean} [appendQueryParamOnRetry] whether retry=true should be\n *   appended to the url if the request is retried.\n */\nfunction sendSfRequest(statementContext, options, appendQueryParamOnRetry) {\n    const sf = statementContext.services.sf;\n    const connectionConfig = statementContext.connectionConfig;\n    // clone the options\n    options = Util.apply({}, options);\n    // get the original url and callback\n    const urlOrig = options.url;\n    const callbackOrig = options.callback;\n    let numRetries = 0;\n    const maxNumRetries = connectionConfig.getRetrySfMaxNumRetries();\n    let sleep = connectionConfig.getRetrySfStartingSleepTime();\n    let lastStatusCodeForRetry;\n    // create a function to send the request\n    const sendRequest = function () {\n        // if this is a retry and a query parameter should be appended to the url on\n        // retry, update the url\n        if (numRetries > 0 && appendQueryParamOnRetry) {\n            const retryOption = {\n                url: urlOrig,\n                retryCount: numRetries,\n                retryReason: lastStatusCodeForRetry,\n                includeRetryReason: connectionConfig.getIncludeRetryReason(),\n            };\n            options.url = Util.url.appendRetryParam(retryOption);\n        }\n        sf.request(options);\n    };\n    // replace the specified callback with a new one that retries\n    options.callback = async function (err) {\n        // if we haven't exceeded the maximum number of retries yet and the server\n        // came back with a retryable error code\n        if (numRetries < maxNumRetries &&\n            err &&\n            Util.isRetryableHttpError(err.response, false)) {\n            // increment the retry count\n            numRetries++;\n            lastStatusCodeForRetry = err.response ? err.response.statusCode : 0;\n            // use exponential backoff with decorrelated jitter to compute the\n            // next sleep time.\n            const cap = connectionConfig.getRetrySfMaxSleepTime();\n            sleep = Util.nextSleepTime(1, cap, sleep);\n            Logger.getInstance().debug('Retrying statement with request id %s, retry count = %s', statementContext.requestId, numRetries);\n            // wait the appropriate amount of time before retrying the request\n            setTimeout(sendRequest, sleep * 1000);\n        }\n        else {\n            // invoke the original callback\n            await callbackOrig.apply(this, arguments);\n        }\n    };\n    // issue the request\n    sendRequest();\n}\n/**\n * Builds a callback for use in an exec-statement or fetch-result request.\n *\n * @param statementContext\n * @param headers\n * @param onResultAvailable\n *\n * @returns {Function}\n */\nfunction buildResultRequestCallback(statementContext, headers, onResultAvailable) {\n    const callback = async function (err, body) {\n        if (err) {\n            await onResultAvailable.call(null, err, null);\n        }\n        else {\n            // extract the query id from the response and save it\n            statementContext.queryId = body.data.queryId;\n            // if the result is not ready yet, extract the result url from the response\n            // and issue a GET request to try to fetch the result again unless asyncExec is enabled.\n            if (body &&\n                (body.code === queryCodes.QUERY_IN_PROGRESS ||\n                    body.code === queryCodes.QUERY_IN_PROGRESS_ASYNC)) {\n                if (statementContext.asyncExec) {\n                    await onResultAvailable.call(null, err, body);\n                    return;\n                }\n                // extract the result url from the response and try to get the result\n                // again\n                sendSfRequest(statementContext, {\n                    method: 'GET',\n                    headers: headers,\n                    url: body.data.getResultUrl,\n                    callback: callback,\n                });\n            }\n            else {\n                await onResultAvailable.call(null, err, body);\n            }\n        }\n    };\n    return callback;\n}\n/**\n * Builds the request headers for a row statement request.\n *\n * @returns {Object}\n */\nfunction buildResultRequestHeadersRow() {\n    return {\n        Accept: 'application/snowflake',\n    };\n}\n/**\n * Builds the request headers for a file statement request.\n *\n * @returns {Object}\n */\nfunction buildResultRequestHeadersFile() {\n    return {\n        Accept: 'application/json',\n    };\n}\n/**\n * Count number of bindings\n *\n * @returns {int}\n */\nfunction countBinding(binds) {\n    if (!Util.isArray(binds)) {\n        return 0;\n    }\n    Logger.getInstance().debug('-- binds.length= %d', binds.length);\n    let count = 0;\n    for (let index = 0; index < binds.length; index++) {\n        if (binds[index] != null && Util.isArray(binds[index])) {\n            count += binds[index].length;\n        }\n    }\n    return count;\n}\nfunction hasNextResult(statement, context) {\n    return function () {\n        return context.multiResultIds != null && context.multiCurId + 1 < context.multiResultIds.length;\n    };\n}\nfunction createNextReuslt(statement, context) {\n    return function () {\n        if (hasNextResult(statement, context)) {\n            context.multiCurId++;\n            context.queryId = context.multiResultIds[context.multiCurId];\n            context.sqlText = context.multiSqlTexts[context.multiCurId];\n            exports.createStatementPostExec(context, context.services, context.connectionConfig);\n        }\n    };\n}\n//# sourceMappingURL=statement.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/dist/lib/connection/statement.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/dist/lib/constants/connection_constants.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/snowflake-sdk/dist/lib/constants/connection_constants.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nexports.HEARTBEAT_FREQUENCY_MASTER_VALIDITY = 14400;\n//# sourceMappingURL=connection_constants.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9kaXN0L2xpYi9jb25zdGFudHMvY29ubmVjdGlvbl9jb25zdGFudHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiwyQ0FBMkM7QUFDM0MiLCJzb3VyY2VzIjpbIi9Vc2Vycy93YW5naGFvdGFpL0Rlc2t0b3AvZWx2ZW5sYWIvSFRWL25vZGVfbW9kdWxlcy9zbm93Zmxha2Utc2RrL2Rpc3QvbGliL2NvbnN0YW50cy9jb25uZWN0aW9uX2NvbnN0YW50cy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmV4cG9ydHMuSEVBUlRCRUFUX0ZSRVFVRU5DWV9NQVNURVJfVkFMSURJVFkgPSAxNDQwMDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbm5lY3Rpb25fY29uc3RhbnRzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/dist/lib/constants/connection_constants.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/dist/lib/constants/error_messages.js":
/*!*************************************************************************!*\
  !*** ./node_modules/snowflake-sdk/dist/lib/constants/error_messages.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n// 400001\nexports[400001] = 'An internal error has occurred. Please contact Snowflake support.';\nexports[400002] = 'You are using an unsupported version of Node.js. Please use %s or above.';\n// 401001\nexports[401001] = 'Network error. Could not reach Snowflake.';\nexports[401002] = 'Request to Snowflake failed.';\nexports[401003] = 'Snowflake responded with non-JSON content.';\nexports[401004] = 'Request to Snowflake failed.  Invalid token';\n// 402001\nexports[402001] = 'Network error. Could not reach S3/Blob.';\nexports[402002] = 'Request to S3/Blob failed.';\n// 403001\nexports[403001] =\n    'Invalid logLevel. The specified value must be one of these five levels: error, warn, debug, info and trace.';\nexports[403002] = 'Invalid disableOCSPChecks option. The specified value must be a boolean.';\nexports[403003] =\n    'Invalid OCSP mode. The specified value must be FAIL_CLOSED, FAIL_OPEN, or INSECURE_MODE.';\nexports[403004] = 'Invalid custom JSON parser. The specified value must be a function.';\nexports[403005] = 'Invalid custom XML parser. The specified value must be a function.';\nexports[403006] = 'Invalid keep alive value. The specified value must be a boolean.';\nexports[403007] =\n    'Invalid custom credential manager value. The specified value must be an object, and it should have three methods: write, read, remove';\nexports[403008] = 'Invalid useEnvProxy value. The specified value must be a boolean.';\n// 404001\nexports[404001] = 'Connection options must be specified.';\nexports[404002] = 'Invalid connection options. The specified value must be an object.';\nexports[404003] = 'A user name must be specified.';\nexports[404004] = 'Invalid user name. The specified value must be a string.';\nexports[404005] = 'A password must be specified.';\nexports[404006] = 'Invalid password. The specified value must be a string.';\nexports[404007] = 'An account must be specified.';\nexports[404008] = 'Invalid account. The specified value must be a string.';\nexports[404009] = 'An accessUrl must be specified.';\nexports[404010] = 'Invalid accessUrl. The specified value must be a string.';\nexports[404011] = 'Invalid warehouse. The specified value must be a string.';\nexports[404012] = 'Invalid database. The specified value must be a string.';\nexports[404013] = 'Invalid schema. The specified value must be a string.';\nexports[404014] = 'Invalid role. The specified value must be a string.';\nexports[404015] = 'A proxyHost must be specified';\nexports[404016] = 'Invalid proxyHost. The specified value must be a string.';\nexports[404017] = 'A proxyPort must be specified.';\nexports[404018] = 'Invalid proxyPort. The specified value must be a number.';\nexports[404019] = 'Invalid streamResult flag. The specified value must be a boolean.';\nexports[404020] = 'Invalid fetchAsString option. The specified value must be an Array.';\nexports[404021] =\n    'Invalid fetchAsString type: %s. The supported types are: String, Boolean, Number, Date, Buffer, and JSON.';\nexports[404022] = 'Invalid region. The specified value must be a string.';\nexports[404023] = 'Invalid clientSessionKeepAlive. The specified value must be a boolean.';\nexports[404024] =\n    'Invalid clientSessionKeepAliveHeartbeatFrequency. The specified value must be a number.';\nexports[404025] = 'Invalid jsTreatIntegerAsBigInt. The specified value must be a boolean';\nexports[404026] =\n    'Invalid private key. The specified value must be a string in pem format of type pkcs8';\nexports[404027] = 'Invalid private key file location. The specified value must be a string';\nexports[404028] = 'Invalid private key passphrase. The specified value must be a string';\nexports[404029] = 'Invalid oauth token. The specified value must be a string';\nexports[404030] =\n    'Invalid validate default parameters value. The specified value must be a boolean';\nexports[404031] =\n    'Invalid application value. The specified value must be a string that starts with a letter and a length between 1-50';\nexports[404032] = 'A proxyUser must be specified';\nexports[404033] = 'Invalid proxyUser. The specified value must be a string.';\nexports[404034] = 'A proxyPassword must be specified.';\nexports[404035] = 'Invalid proxyPassword. The specified value must be a string.';\nexports[404036] = 'Invalid noProxy. The specified value must be a string.';\nexports[404037] = 'Invalid arrayBindingThreshold. The specified value must be a number.';\nexports[404038] = 'Invalid gcsUseDownscopedCredential. The specified value must be a boolean.';\nexports[404039] = 'Invalid forceStageBindError. The specified value must be a number.';\nexports[404040] = 'Invalid browser timeout value. The specified value must be a positive number.';\nexports[404041] = 'Invalid disableQueryContextCache. The specified value must be a boolean.';\nexports[404042] = 'Invalid includeRetryReason. The specified value must be a boolean.';\nexports[404043] = 'Invalid clientConfigFile value. The specified value must be a string.';\nexports[404044] = 'Invalid retryTimeout value. The specified value must be a number.';\nexports[404045] = 'Invalid account. The specified value must be a valid subdomain string.';\nexports[404046] = 'Invalid region. The specified value must be a valid subdomain string.';\nexports[404047] = 'Invalid disableConsoleLogin. The specified value must be a boolean';\nexports[404048] = 'Invalid disableGCPTokenUpload. The specified value must be a boolean';\nexports[404048] = 'Invalid forceGCPUseDownscopedCredential. The specified value must be a boolean';\nexports[404049] = 'Invalid clientStoreTemporaryCredential. The specified value must be a boolean.';\nexports[404050] = 'Invalid representNullAsStringNull. The specified value must be a boolean';\nexports[404051] = 'Invalid disableSamlURLCheck. The specified value must be a boolean';\nexports[404052] = 'Invalid clientRequestMFAToken. The specified value must be a boolean.';\nexports[404053] = 'A host must be specified.';\nexports[404054] = 'Invalid host. The specified value must be a string.';\nexports[404055] = 'Invalid passcodeInPassword. The specified value must be a boolean';\nexports[404056] = 'Invalid passcode. The specified value must be a string';\nexports[404057] = 'A password or token must be specified.';\nexports[404058] =\n    'Invalid oauth authorization URL. The specified value must be a valid URL starting with the https or http protocol.';\nexports[404059] = 'Invalid oauth client id. The specified value must not be an empty string';\nexports[404060] = 'Invalid oauth client secret. The specified value must not be an empty string';\nexports[404061] =\n    'Invalid oauth token request URL. The specified value must be a valid URL starting with the https or http protocol.';\nexports[404062] = 'Invalid authenticator: WORKLOAD_IDENTITY parameters. %s';\nexports[404063] = 'Invalid query tag. The specified value must be a string;';\n// 405001\nexports[405001] = 'Invalid callback. The specified value must be a function.';\n// 405501\nexports[405501] = 'Connection already in progress.';\nexports[405502] = 'Already connected.';\nexports[405503] = 'Connection already terminated. Cannot connect again.';\nexports[405504] =\n    'connect() does not work with external browser or okta authenticators, call connectAsync() instead';\nexports[405505] = 'Configuration from client config file failed';\nexports[405506] = 'Wrong authorization type';\nexports[405507] = 'Authenticator not allowed';\n// 406001\nexports[406001] = 'Invalid callback. The specified value must be a function.';\n// 406501\nexports[406501] = 'Not connected, so nothing to destroy.';\nexports[406502] = 'Already disconnected.';\n// 407001\nexports[407001] = 'Unable to perform operation because a connection was never established.';\nexports[407002] = 'Unable to perform operation using terminated connection.';\n// 408001\nexports[408001] = 'A serializedConnection must be specified.';\nexports[408002] = 'Invalid serializedConnection. The specified value must be a string.';\nexports[408003] =\n    \"Invalid serializedConnection. The value must be a string obtained by calling another connection's serialize() method.\";\n// 409001\nexports[409001] = 'Execute options must be specified.';\nexports[409002] = 'Invalid execute options. The specified value must be an object.';\nexports[409003] = 'A sqlText value must be specified.';\nexports[409004] = 'Invalid sqlText. The specified value must be a string.';\nexports[409005] = 'Invalid internal flag. The specified value must be a boolean.';\nexports[409006] = 'Invalid parameters. The specified value must be an object.';\nexports[409007] = 'Invalid binds. The specified value must be an array.';\nexports[409008] = 'Invalid bind variable: %s. Only stringifiable values are supported.';\nexports[409009] = 'Invalid complete callback. The specified value must be a function.';\nexports[409010] = 'Invalid streamResult flag. The specified value must be a boolean.';\nexports[409011] = 'Invalid fetchAsString value. The specified value must be an Array.';\nexports[409012] =\n    'Invalid fetchAsString type: %s. The supported types are: String, Boolean, Number, Date, Buffer, and JSON.';\nexports[409013] = 'Invalid requestId. The specified value must be a string.';\nexports[409014] = 'Invalid asyncExec. The specified value must be a boolean.';\nexports[409015] = 'Invalid describeOnly. The specified value must be a boolean.';\n// 410001\nexports[410001] = 'Fetch-result options must be specified.';\nexports[410002] = 'Invalid options. The specified value must be an object.';\nexports[410003] = 'A query id/statement id must be specified.';\nexports[410004] = 'Invalid query id/statement id. The specified value must be a string.';\nexports[410005] = 'Invalid complete callback. The specified value must be a function.';\nexports[410006] = 'Invalid streamResult flag. The specified value must be a boolean.';\nexports[410007] = 'Invalid fetchAsString value. The specified value must be an Array.';\nexports[410008] =\n    'Invalid fetchAsString type: %s. The supported types are: String, Boolean, Number, Date, Buffer, and JSON.';\nexports[410009] =\n    'Invalid cwd (current working directory) type: %s. The specified value must be a string.';\n// 411001\nexports[411001] = 'Invalid options. The specified value must be an object.';\nexports[411002] = 'Invalid start index. The specified value must be a number.';\nexports[411003] = 'Invalid end index. The specified value must be a number.';\nexports[411004] = 'Invalid fetchAsString value. The specified value must be an Array.';\nexports[411005] =\n    'Invalid fetchAsString type: %s. The supported types are: String, Boolean, Number, Date, Buffer, and JSON.';\nexports[411006] =\n    'Invalid row mode value. The specified value should be array or object or object_with_renamed_duplicated_columns';\nexports[412001] = 'Certificate is REVOKED.';\nexports[412002] = 'Certificate status is UNKNOWN.';\nexports[412003] = 'Not recognize signature algorithm.';\nexports[412004] = 'Invalid signature.';\nexports[412005] = 'No OCSP response data is attached.';\nexports[412006] = 'Invalid validity.';\nexports[412007] = 'Could not verify the certificate revocation status.';\nexports[412008] = 'Not two elements are in the cache.';\nexports[412009] = 'Cache entry expired.';\nexports[412010] = 'Failed to parse OCSP response.';\nexports[412011] = 'Invalid Signing Certificate validity.';\nexports[412012] = 'Timeout OCSP responder.';\nexports[412013] = 'Timeout OCSP Cache server.';\nexports[412014] = 'Failed to obtain OCSP response: %s';\nexports[413001] = 'CRL validation failed.';\n// 450001\nexports[450001] = 'Fetch-row options must be specified.';\nexports[450002] = 'Invalid options. The specified value must be an object.';\nexports[450003] = 'An each() callback must be specified.';\nexports[450004] = 'Invalid each() callback. The specified value must be a function.';\nexports[450005] = 'An end() callback must be specified.';\nexports[450006] = 'Invalid end() callback. The specified value must be a function.';\nexports[450007] = 'Operation failed because the statement is still in progress.';\n// 460001\nexports[460001] = 'Invalid queryId: %s';\nexports[460002] = 'Cannot retrieve data. No information returned from server for query %s';\nexports[460003] = 'Status of query %s is %s, results are unavailable';\n//# sourceMappingURL=error_messages.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9kaXN0L2xpYi9jb25zdGFudHMvZXJyb3JfbWVzc2FnZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLGVBQWU7QUFDZixlQUFlO0FBQ2Y7QUFDQSxlQUFlO0FBQ2YsZUFBZTtBQUNmLGVBQWU7QUFDZixlQUFlO0FBQ2Y7QUFDQSxlQUFlO0FBQ2YsZUFBZTtBQUNmO0FBQ0EsZUFBZTtBQUNmO0FBQ0EsZUFBZTtBQUNmLGVBQWU7QUFDZjtBQUNBLGVBQWU7QUFDZixlQUFlO0FBQ2YsZUFBZTtBQUNmLGVBQWU7QUFDZjtBQUNBLGVBQWU7QUFDZjtBQUNBLGVBQWU7QUFDZixlQUFlO0FBQ2YsZUFBZTtBQUNmLGVBQWU7QUFDZixlQUFlO0FBQ2YsZUFBZTtBQUNmLGVBQWU7QUFDZixlQUFlO0FBQ2YsZUFBZTtBQUNmLGVBQWU7QUFDZixlQUFlO0FBQ2YsZUFBZTtBQUNmLGVBQWU7QUFDZixlQUFlO0FBQ2YsZUFBZTtBQUNmLGVBQWU7QUFDZixlQUFlO0FBQ2YsZUFBZTtBQUNmLGVBQWU7QUFDZixlQUFlO0FBQ2YsZUFBZTtBQUNmO0FBQ0EsZUFBZTtBQUNmLGVBQWU7QUFDZixlQUFlO0FBQ2Y7QUFDQSxlQUFlO0FBQ2YsZUFBZTtBQUNmO0FBQ0EsZUFBZTtBQUNmLGVBQWU7QUFDZixlQUFlO0FBQ2YsZUFBZTtBQUNmO0FBQ0EsZUFBZTtBQUNmO0FBQ0EsZUFBZTtBQUNmLGVBQWU7QUFDZixlQUFlO0FBQ2YsZUFBZTtBQUNmLGVBQWU7QUFDZixlQUFlO0FBQ2YsZUFBZTtBQUNmLGVBQWU7QUFDZixlQUFlO0FBQ2YsZUFBZTtBQUNmLGVBQWU7QUFDZixlQUFlO0FBQ2YsZUFBZTtBQUNmLGVBQWU7QUFDZixlQUFlO0FBQ2YsZUFBZTtBQUNmLGVBQWU7QUFDZixlQUFlO0FBQ2YsZUFBZTtBQUNmLGVBQWU7QUFDZixlQUFlO0FBQ2YsZUFBZTtBQUNmLGVBQWU7QUFDZixlQUFlO0FBQ2YsZUFBZTtBQUNmLGVBQWU7QUFDZixlQUFlO0FBQ2YsZUFBZTtBQUNmO0FBQ0EsZUFBZTtBQUNmLGVBQWU7QUFDZixlQUFlO0FBQ2Y7QUFDQSxlQUFlO0FBQ2YsZUFBZSw0REFBNEQ7QUFDM0U7QUFDQSxlQUFlO0FBQ2Y7QUFDQSxlQUFlO0FBQ2YsZUFBZTtBQUNmLGVBQWU7QUFDZixlQUFlO0FBQ2Y7QUFDQSxlQUFlO0FBQ2YsZUFBZTtBQUNmLGVBQWU7QUFDZjtBQUNBLGVBQWU7QUFDZjtBQUNBLGVBQWU7QUFDZixlQUFlO0FBQ2Y7QUFDQSxlQUFlO0FBQ2YsZUFBZTtBQUNmO0FBQ0EsZUFBZTtBQUNmLGVBQWU7QUFDZixlQUFlO0FBQ2Y7QUFDQTtBQUNBLGVBQWU7QUFDZixlQUFlO0FBQ2YsZUFBZTtBQUNmLGVBQWU7QUFDZixlQUFlO0FBQ2YsZUFBZTtBQUNmLGVBQWU7QUFDZixlQUFlO0FBQ2YsZUFBZTtBQUNmLGVBQWU7QUFDZixlQUFlO0FBQ2YsZUFBZTtBQUNmO0FBQ0EsZUFBZTtBQUNmLGVBQWU7QUFDZixlQUFlO0FBQ2Y7QUFDQSxlQUFlO0FBQ2YsZUFBZTtBQUNmLGVBQWU7QUFDZixlQUFlO0FBQ2YsZUFBZTtBQUNmLGVBQWU7QUFDZixlQUFlO0FBQ2YsZUFBZTtBQUNmO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQSxlQUFlO0FBQ2YsZUFBZTtBQUNmLGVBQWU7QUFDZixlQUFlO0FBQ2YsZUFBZTtBQUNmO0FBQ0EsZUFBZTtBQUNmO0FBQ0EsZUFBZTtBQUNmLGVBQWU7QUFDZixlQUFlO0FBQ2YsZUFBZTtBQUNmLGVBQWU7QUFDZixlQUFlO0FBQ2YsZUFBZTtBQUNmLGVBQWU7QUFDZixlQUFlO0FBQ2YsZUFBZTtBQUNmLGVBQWU7QUFDZixlQUFlO0FBQ2YsZUFBZTtBQUNmLGVBQWU7QUFDZixlQUFlO0FBQ2Y7QUFDQSxlQUFlO0FBQ2YsZUFBZTtBQUNmLGVBQWU7QUFDZixlQUFlO0FBQ2YsZUFBZTtBQUNmLGVBQWU7QUFDZixlQUFlO0FBQ2Y7QUFDQSxlQUFlO0FBQ2YsZUFBZTtBQUNmLGVBQWU7QUFDZiIsInNvdXJjZXMiOlsiL1VzZXJzL3dhbmdoYW90YWkvRGVza3RvcC9lbHZlbmxhYi9IVFYvbm9kZV9tb2R1bGVzL3Nub3dmbGFrZS1zZGsvZGlzdC9saWIvY29uc3RhbnRzL2Vycm9yX21lc3NhZ2VzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy8gNDAwMDAxXG5leHBvcnRzWzQwMDAwMV0gPSAnQW4gaW50ZXJuYWwgZXJyb3IgaGFzIG9jY3VycmVkLiBQbGVhc2UgY29udGFjdCBTbm93Zmxha2Ugc3VwcG9ydC4nO1xuZXhwb3J0c1s0MDAwMDJdID0gJ1lvdSBhcmUgdXNpbmcgYW4gdW5zdXBwb3J0ZWQgdmVyc2lvbiBvZiBOb2RlLmpzLiBQbGVhc2UgdXNlICVzIG9yIGFib3ZlLic7XG4vLyA0MDEwMDFcbmV4cG9ydHNbNDAxMDAxXSA9ICdOZXR3b3JrIGVycm9yLiBDb3VsZCBub3QgcmVhY2ggU25vd2ZsYWtlLic7XG5leHBvcnRzWzQwMTAwMl0gPSAnUmVxdWVzdCB0byBTbm93Zmxha2UgZmFpbGVkLic7XG5leHBvcnRzWzQwMTAwM10gPSAnU25vd2ZsYWtlIHJlc3BvbmRlZCB3aXRoIG5vbi1KU09OIGNvbnRlbnQuJztcbmV4cG9ydHNbNDAxMDA0XSA9ICdSZXF1ZXN0IHRvIFNub3dmbGFrZSBmYWlsZWQuICBJbnZhbGlkIHRva2VuJztcbi8vIDQwMjAwMVxuZXhwb3J0c1s0MDIwMDFdID0gJ05ldHdvcmsgZXJyb3IuIENvdWxkIG5vdCByZWFjaCBTMy9CbG9iLic7XG5leHBvcnRzWzQwMjAwMl0gPSAnUmVxdWVzdCB0byBTMy9CbG9iIGZhaWxlZC4nO1xuLy8gNDAzMDAxXG5leHBvcnRzWzQwMzAwMV0gPVxuICAgICdJbnZhbGlkIGxvZ0xldmVsLiBUaGUgc3BlY2lmaWVkIHZhbHVlIG11c3QgYmUgb25lIG9mIHRoZXNlIGZpdmUgbGV2ZWxzOiBlcnJvciwgd2FybiwgZGVidWcsIGluZm8gYW5kIHRyYWNlLic7XG5leHBvcnRzWzQwMzAwMl0gPSAnSW52YWxpZCBkaXNhYmxlT0NTUENoZWNrcyBvcHRpb24uIFRoZSBzcGVjaWZpZWQgdmFsdWUgbXVzdCBiZSBhIGJvb2xlYW4uJztcbmV4cG9ydHNbNDAzMDAzXSA9XG4gICAgJ0ludmFsaWQgT0NTUCBtb2RlLiBUaGUgc3BlY2lmaWVkIHZhbHVlIG11c3QgYmUgRkFJTF9DTE9TRUQsIEZBSUxfT1BFTiwgb3IgSU5TRUNVUkVfTU9ERS4nO1xuZXhwb3J0c1s0MDMwMDRdID0gJ0ludmFsaWQgY3VzdG9tIEpTT04gcGFyc2VyLiBUaGUgc3BlY2lmaWVkIHZhbHVlIG11c3QgYmUgYSBmdW5jdGlvbi4nO1xuZXhwb3J0c1s0MDMwMDVdID0gJ0ludmFsaWQgY3VzdG9tIFhNTCBwYXJzZXIuIFRoZSBzcGVjaWZpZWQgdmFsdWUgbXVzdCBiZSBhIGZ1bmN0aW9uLic7XG5leHBvcnRzWzQwMzAwNl0gPSAnSW52YWxpZCBrZWVwIGFsaXZlIHZhbHVlLiBUaGUgc3BlY2lmaWVkIHZhbHVlIG11c3QgYmUgYSBib29sZWFuLic7XG5leHBvcnRzWzQwMzAwN10gPVxuICAgICdJbnZhbGlkIGN1c3RvbSBjcmVkZW50aWFsIG1hbmFnZXIgdmFsdWUuIFRoZSBzcGVjaWZpZWQgdmFsdWUgbXVzdCBiZSBhbiBvYmplY3QsIGFuZCBpdCBzaG91bGQgaGF2ZSB0aHJlZSBtZXRob2RzOiB3cml0ZSwgcmVhZCwgcmVtb3ZlJztcbmV4cG9ydHNbNDAzMDA4XSA9ICdJbnZhbGlkIHVzZUVudlByb3h5IHZhbHVlLiBUaGUgc3BlY2lmaWVkIHZhbHVlIG11c3QgYmUgYSBib29sZWFuLic7XG4vLyA0MDQwMDFcbmV4cG9ydHNbNDA0MDAxXSA9ICdDb25uZWN0aW9uIG9wdGlvbnMgbXVzdCBiZSBzcGVjaWZpZWQuJztcbmV4cG9ydHNbNDA0MDAyXSA9ICdJbnZhbGlkIGNvbm5lY3Rpb24gb3B0aW9ucy4gVGhlIHNwZWNpZmllZCB2YWx1ZSBtdXN0IGJlIGFuIG9iamVjdC4nO1xuZXhwb3J0c1s0MDQwMDNdID0gJ0EgdXNlciBuYW1lIG11c3QgYmUgc3BlY2lmaWVkLic7XG5leHBvcnRzWzQwNDAwNF0gPSAnSW52YWxpZCB1c2VyIG5hbWUuIFRoZSBzcGVjaWZpZWQgdmFsdWUgbXVzdCBiZSBhIHN0cmluZy4nO1xuZXhwb3J0c1s0MDQwMDVdID0gJ0EgcGFzc3dvcmQgbXVzdCBiZSBzcGVjaWZpZWQuJztcbmV4cG9ydHNbNDA0MDA2XSA9ICdJbnZhbGlkIHBhc3N3b3JkLiBUaGUgc3BlY2lmaWVkIHZhbHVlIG11c3QgYmUgYSBzdHJpbmcuJztcbmV4cG9ydHNbNDA0MDA3XSA9ICdBbiBhY2NvdW50IG11c3QgYmUgc3BlY2lmaWVkLic7XG5leHBvcnRzWzQwNDAwOF0gPSAnSW52YWxpZCBhY2NvdW50LiBUaGUgc3BlY2lmaWVkIHZhbHVlIG11c3QgYmUgYSBzdHJpbmcuJztcbmV4cG9ydHNbNDA0MDA5XSA9ICdBbiBhY2Nlc3NVcmwgbXVzdCBiZSBzcGVjaWZpZWQuJztcbmV4cG9ydHNbNDA0MDEwXSA9ICdJbnZhbGlkIGFjY2Vzc1VybC4gVGhlIHNwZWNpZmllZCB2YWx1ZSBtdXN0IGJlIGEgc3RyaW5nLic7XG5leHBvcnRzWzQwNDAxMV0gPSAnSW52YWxpZCB3YXJlaG91c2UuIFRoZSBzcGVjaWZpZWQgdmFsdWUgbXVzdCBiZSBhIHN0cmluZy4nO1xuZXhwb3J0c1s0MDQwMTJdID0gJ0ludmFsaWQgZGF0YWJhc2UuIFRoZSBzcGVjaWZpZWQgdmFsdWUgbXVzdCBiZSBhIHN0cmluZy4nO1xuZXhwb3J0c1s0MDQwMTNdID0gJ0ludmFsaWQgc2NoZW1hLiBUaGUgc3BlY2lmaWVkIHZhbHVlIG11c3QgYmUgYSBzdHJpbmcuJztcbmV4cG9ydHNbNDA0MDE0XSA9ICdJbnZhbGlkIHJvbGUuIFRoZSBzcGVjaWZpZWQgdmFsdWUgbXVzdCBiZSBhIHN0cmluZy4nO1xuZXhwb3J0c1s0MDQwMTVdID0gJ0EgcHJveHlIb3N0IG11c3QgYmUgc3BlY2lmaWVkJztcbmV4cG9ydHNbNDA0MDE2XSA9ICdJbnZhbGlkIHByb3h5SG9zdC4gVGhlIHNwZWNpZmllZCB2YWx1ZSBtdXN0IGJlIGEgc3RyaW5nLic7XG5leHBvcnRzWzQwNDAxN10gPSAnQSBwcm94eVBvcnQgbXVzdCBiZSBzcGVjaWZpZWQuJztcbmV4cG9ydHNbNDA0MDE4XSA9ICdJbnZhbGlkIHByb3h5UG9ydC4gVGhlIHNwZWNpZmllZCB2YWx1ZSBtdXN0IGJlIGEgbnVtYmVyLic7XG5leHBvcnRzWzQwNDAxOV0gPSAnSW52YWxpZCBzdHJlYW1SZXN1bHQgZmxhZy4gVGhlIHNwZWNpZmllZCB2YWx1ZSBtdXN0IGJlIGEgYm9vbGVhbi4nO1xuZXhwb3J0c1s0MDQwMjBdID0gJ0ludmFsaWQgZmV0Y2hBc1N0cmluZyBvcHRpb24uIFRoZSBzcGVjaWZpZWQgdmFsdWUgbXVzdCBiZSBhbiBBcnJheS4nO1xuZXhwb3J0c1s0MDQwMjFdID1cbiAgICAnSW52YWxpZCBmZXRjaEFzU3RyaW5nIHR5cGU6ICVzLiBUaGUgc3VwcG9ydGVkIHR5cGVzIGFyZTogU3RyaW5nLCBCb29sZWFuLCBOdW1iZXIsIERhdGUsIEJ1ZmZlciwgYW5kIEpTT04uJztcbmV4cG9ydHNbNDA0MDIyXSA9ICdJbnZhbGlkIHJlZ2lvbi4gVGhlIHNwZWNpZmllZCB2YWx1ZSBtdXN0IGJlIGEgc3RyaW5nLic7XG5leHBvcnRzWzQwNDAyM10gPSAnSW52YWxpZCBjbGllbnRTZXNzaW9uS2VlcEFsaXZlLiBUaGUgc3BlY2lmaWVkIHZhbHVlIG11c3QgYmUgYSBib29sZWFuLic7XG5leHBvcnRzWzQwNDAyNF0gPVxuICAgICdJbnZhbGlkIGNsaWVudFNlc3Npb25LZWVwQWxpdmVIZWFydGJlYXRGcmVxdWVuY3kuIFRoZSBzcGVjaWZpZWQgdmFsdWUgbXVzdCBiZSBhIG51bWJlci4nO1xuZXhwb3J0c1s0MDQwMjVdID0gJ0ludmFsaWQganNUcmVhdEludGVnZXJBc0JpZ0ludC4gVGhlIHNwZWNpZmllZCB2YWx1ZSBtdXN0IGJlIGEgYm9vbGVhbic7XG5leHBvcnRzWzQwNDAyNl0gPVxuICAgICdJbnZhbGlkIHByaXZhdGUga2V5LiBUaGUgc3BlY2lmaWVkIHZhbHVlIG11c3QgYmUgYSBzdHJpbmcgaW4gcGVtIGZvcm1hdCBvZiB0eXBlIHBrY3M4JztcbmV4cG9ydHNbNDA0MDI3XSA9ICdJbnZhbGlkIHByaXZhdGUga2V5IGZpbGUgbG9jYXRpb24uIFRoZSBzcGVjaWZpZWQgdmFsdWUgbXVzdCBiZSBhIHN0cmluZyc7XG5leHBvcnRzWzQwNDAyOF0gPSAnSW52YWxpZCBwcml2YXRlIGtleSBwYXNzcGhyYXNlLiBUaGUgc3BlY2lmaWVkIHZhbHVlIG11c3QgYmUgYSBzdHJpbmcnO1xuZXhwb3J0c1s0MDQwMjldID0gJ0ludmFsaWQgb2F1dGggdG9rZW4uIFRoZSBzcGVjaWZpZWQgdmFsdWUgbXVzdCBiZSBhIHN0cmluZyc7XG5leHBvcnRzWzQwNDAzMF0gPVxuICAgICdJbnZhbGlkIHZhbGlkYXRlIGRlZmF1bHQgcGFyYW1ldGVycyB2YWx1ZS4gVGhlIHNwZWNpZmllZCB2YWx1ZSBtdXN0IGJlIGEgYm9vbGVhbic7XG5leHBvcnRzWzQwNDAzMV0gPVxuICAgICdJbnZhbGlkIGFwcGxpY2F0aW9uIHZhbHVlLiBUaGUgc3BlY2lmaWVkIHZhbHVlIG11c3QgYmUgYSBzdHJpbmcgdGhhdCBzdGFydHMgd2l0aCBhIGxldHRlciBhbmQgYSBsZW5ndGggYmV0d2VlbiAxLTUwJztcbmV4cG9ydHNbNDA0MDMyXSA9ICdBIHByb3h5VXNlciBtdXN0IGJlIHNwZWNpZmllZCc7XG5leHBvcnRzWzQwNDAzM10gPSAnSW52YWxpZCBwcm94eVVzZXIuIFRoZSBzcGVjaWZpZWQgdmFsdWUgbXVzdCBiZSBhIHN0cmluZy4nO1xuZXhwb3J0c1s0MDQwMzRdID0gJ0EgcHJveHlQYXNzd29yZCBtdXN0IGJlIHNwZWNpZmllZC4nO1xuZXhwb3J0c1s0MDQwMzVdID0gJ0ludmFsaWQgcHJveHlQYXNzd29yZC4gVGhlIHNwZWNpZmllZCB2YWx1ZSBtdXN0IGJlIGEgc3RyaW5nLic7XG5leHBvcnRzWzQwNDAzNl0gPSAnSW52YWxpZCBub1Byb3h5LiBUaGUgc3BlY2lmaWVkIHZhbHVlIG11c3QgYmUgYSBzdHJpbmcuJztcbmV4cG9ydHNbNDA0MDM3XSA9ICdJbnZhbGlkIGFycmF5QmluZGluZ1RocmVzaG9sZC4gVGhlIHNwZWNpZmllZCB2YWx1ZSBtdXN0IGJlIGEgbnVtYmVyLic7XG5leHBvcnRzWzQwNDAzOF0gPSAnSW52YWxpZCBnY3NVc2VEb3duc2NvcGVkQ3JlZGVudGlhbC4gVGhlIHNwZWNpZmllZCB2YWx1ZSBtdXN0IGJlIGEgYm9vbGVhbi4nO1xuZXhwb3J0c1s0MDQwMzldID0gJ0ludmFsaWQgZm9yY2VTdGFnZUJpbmRFcnJvci4gVGhlIHNwZWNpZmllZCB2YWx1ZSBtdXN0IGJlIGEgbnVtYmVyLic7XG5leHBvcnRzWzQwNDA0MF0gPSAnSW52YWxpZCBicm93c2VyIHRpbWVvdXQgdmFsdWUuIFRoZSBzcGVjaWZpZWQgdmFsdWUgbXVzdCBiZSBhIHBvc2l0aXZlIG51bWJlci4nO1xuZXhwb3J0c1s0MDQwNDFdID0gJ0ludmFsaWQgZGlzYWJsZVF1ZXJ5Q29udGV4dENhY2hlLiBUaGUgc3BlY2lmaWVkIHZhbHVlIG11c3QgYmUgYSBib29sZWFuLic7XG5leHBvcnRzWzQwNDA0Ml0gPSAnSW52YWxpZCBpbmNsdWRlUmV0cnlSZWFzb24uIFRoZSBzcGVjaWZpZWQgdmFsdWUgbXVzdCBiZSBhIGJvb2xlYW4uJztcbmV4cG9ydHNbNDA0MDQzXSA9ICdJbnZhbGlkIGNsaWVudENvbmZpZ0ZpbGUgdmFsdWUuIFRoZSBzcGVjaWZpZWQgdmFsdWUgbXVzdCBiZSBhIHN0cmluZy4nO1xuZXhwb3J0c1s0MDQwNDRdID0gJ0ludmFsaWQgcmV0cnlUaW1lb3V0IHZhbHVlLiBUaGUgc3BlY2lmaWVkIHZhbHVlIG11c3QgYmUgYSBudW1iZXIuJztcbmV4cG9ydHNbNDA0MDQ1XSA9ICdJbnZhbGlkIGFjY291bnQuIFRoZSBzcGVjaWZpZWQgdmFsdWUgbXVzdCBiZSBhIHZhbGlkIHN1YmRvbWFpbiBzdHJpbmcuJztcbmV4cG9ydHNbNDA0MDQ2XSA9ICdJbnZhbGlkIHJlZ2lvbi4gVGhlIHNwZWNpZmllZCB2YWx1ZSBtdXN0IGJlIGEgdmFsaWQgc3ViZG9tYWluIHN0cmluZy4nO1xuZXhwb3J0c1s0MDQwNDddID0gJ0ludmFsaWQgZGlzYWJsZUNvbnNvbGVMb2dpbi4gVGhlIHNwZWNpZmllZCB2YWx1ZSBtdXN0IGJlIGEgYm9vbGVhbic7XG5leHBvcnRzWzQwNDA0OF0gPSAnSW52YWxpZCBkaXNhYmxlR0NQVG9rZW5VcGxvYWQuIFRoZSBzcGVjaWZpZWQgdmFsdWUgbXVzdCBiZSBhIGJvb2xlYW4nO1xuZXhwb3J0c1s0MDQwNDhdID0gJ0ludmFsaWQgZm9yY2VHQ1BVc2VEb3duc2NvcGVkQ3JlZGVudGlhbC4gVGhlIHNwZWNpZmllZCB2YWx1ZSBtdXN0IGJlIGEgYm9vbGVhbic7XG5leHBvcnRzWzQwNDA0OV0gPSAnSW52YWxpZCBjbGllbnRTdG9yZVRlbXBvcmFyeUNyZWRlbnRpYWwuIFRoZSBzcGVjaWZpZWQgdmFsdWUgbXVzdCBiZSBhIGJvb2xlYW4uJztcbmV4cG9ydHNbNDA0MDUwXSA9ICdJbnZhbGlkIHJlcHJlc2VudE51bGxBc1N0cmluZ051bGwuIFRoZSBzcGVjaWZpZWQgdmFsdWUgbXVzdCBiZSBhIGJvb2xlYW4nO1xuZXhwb3J0c1s0MDQwNTFdID0gJ0ludmFsaWQgZGlzYWJsZVNhbWxVUkxDaGVjay4gVGhlIHNwZWNpZmllZCB2YWx1ZSBtdXN0IGJlIGEgYm9vbGVhbic7XG5leHBvcnRzWzQwNDA1Ml0gPSAnSW52YWxpZCBjbGllbnRSZXF1ZXN0TUZBVG9rZW4uIFRoZSBzcGVjaWZpZWQgdmFsdWUgbXVzdCBiZSBhIGJvb2xlYW4uJztcbmV4cG9ydHNbNDA0MDUzXSA9ICdBIGhvc3QgbXVzdCBiZSBzcGVjaWZpZWQuJztcbmV4cG9ydHNbNDA0MDU0XSA9ICdJbnZhbGlkIGhvc3QuIFRoZSBzcGVjaWZpZWQgdmFsdWUgbXVzdCBiZSBhIHN0cmluZy4nO1xuZXhwb3J0c1s0MDQwNTVdID0gJ0ludmFsaWQgcGFzc2NvZGVJblBhc3N3b3JkLiBUaGUgc3BlY2lmaWVkIHZhbHVlIG11c3QgYmUgYSBib29sZWFuJztcbmV4cG9ydHNbNDA0MDU2XSA9ICdJbnZhbGlkIHBhc3Njb2RlLiBUaGUgc3BlY2lmaWVkIHZhbHVlIG11c3QgYmUgYSBzdHJpbmcnO1xuZXhwb3J0c1s0MDQwNTddID0gJ0EgcGFzc3dvcmQgb3IgdG9rZW4gbXVzdCBiZSBzcGVjaWZpZWQuJztcbmV4cG9ydHNbNDA0MDU4XSA9XG4gICAgJ0ludmFsaWQgb2F1dGggYXV0aG9yaXphdGlvbiBVUkwuIFRoZSBzcGVjaWZpZWQgdmFsdWUgbXVzdCBiZSBhIHZhbGlkIFVSTCBzdGFydGluZyB3aXRoIHRoZSBodHRwcyBvciBodHRwIHByb3RvY29sLic7XG5leHBvcnRzWzQwNDA1OV0gPSAnSW52YWxpZCBvYXV0aCBjbGllbnQgaWQuIFRoZSBzcGVjaWZpZWQgdmFsdWUgbXVzdCBub3QgYmUgYW4gZW1wdHkgc3RyaW5nJztcbmV4cG9ydHNbNDA0MDYwXSA9ICdJbnZhbGlkIG9hdXRoIGNsaWVudCBzZWNyZXQuIFRoZSBzcGVjaWZpZWQgdmFsdWUgbXVzdCBub3QgYmUgYW4gZW1wdHkgc3RyaW5nJztcbmV4cG9ydHNbNDA0MDYxXSA9XG4gICAgJ0ludmFsaWQgb2F1dGggdG9rZW4gcmVxdWVzdCBVUkwuIFRoZSBzcGVjaWZpZWQgdmFsdWUgbXVzdCBiZSBhIHZhbGlkIFVSTCBzdGFydGluZyB3aXRoIHRoZSBodHRwcyBvciBodHRwIHByb3RvY29sLic7XG5leHBvcnRzWzQwNDA2Ml0gPSAnSW52YWxpZCBhdXRoZW50aWNhdG9yOiBXT1JLTE9BRF9JREVOVElUWSBwYXJhbWV0ZXJzLiAlcyc7XG5leHBvcnRzWzQwNDA2M10gPSAnSW52YWxpZCBxdWVyeSB0YWcuIFRoZSBzcGVjaWZpZWQgdmFsdWUgbXVzdCBiZSBhIHN0cmluZzsnO1xuLy8gNDA1MDAxXG5leHBvcnRzWzQwNTAwMV0gPSAnSW52YWxpZCBjYWxsYmFjay4gVGhlIHNwZWNpZmllZCB2YWx1ZSBtdXN0IGJlIGEgZnVuY3Rpb24uJztcbi8vIDQwNTUwMVxuZXhwb3J0c1s0MDU1MDFdID0gJ0Nvbm5lY3Rpb24gYWxyZWFkeSBpbiBwcm9ncmVzcy4nO1xuZXhwb3J0c1s0MDU1MDJdID0gJ0FscmVhZHkgY29ubmVjdGVkLic7XG5leHBvcnRzWzQwNTUwM10gPSAnQ29ubmVjdGlvbiBhbHJlYWR5IHRlcm1pbmF0ZWQuIENhbm5vdCBjb25uZWN0IGFnYWluLic7XG5leHBvcnRzWzQwNTUwNF0gPVxuICAgICdjb25uZWN0KCkgZG9lcyBub3Qgd29yayB3aXRoIGV4dGVybmFsIGJyb3dzZXIgb3Igb2t0YSBhdXRoZW50aWNhdG9ycywgY2FsbCBjb25uZWN0QXN5bmMoKSBpbnN0ZWFkJztcbmV4cG9ydHNbNDA1NTA1XSA9ICdDb25maWd1cmF0aW9uIGZyb20gY2xpZW50IGNvbmZpZyBmaWxlIGZhaWxlZCc7XG5leHBvcnRzWzQwNTUwNl0gPSAnV3JvbmcgYXV0aG9yaXphdGlvbiB0eXBlJztcbmV4cG9ydHNbNDA1NTA3XSA9ICdBdXRoZW50aWNhdG9yIG5vdCBhbGxvd2VkJztcbi8vIDQwNjAwMVxuZXhwb3J0c1s0MDYwMDFdID0gJ0ludmFsaWQgY2FsbGJhY2suIFRoZSBzcGVjaWZpZWQgdmFsdWUgbXVzdCBiZSBhIGZ1bmN0aW9uLic7XG4vLyA0MDY1MDFcbmV4cG9ydHNbNDA2NTAxXSA9ICdOb3QgY29ubmVjdGVkLCBzbyBub3RoaW5nIHRvIGRlc3Ryb3kuJztcbmV4cG9ydHNbNDA2NTAyXSA9ICdBbHJlYWR5IGRpc2Nvbm5lY3RlZC4nO1xuLy8gNDA3MDAxXG5leHBvcnRzWzQwNzAwMV0gPSAnVW5hYmxlIHRvIHBlcmZvcm0gb3BlcmF0aW9uIGJlY2F1c2UgYSBjb25uZWN0aW9uIHdhcyBuZXZlciBlc3RhYmxpc2hlZC4nO1xuZXhwb3J0c1s0MDcwMDJdID0gJ1VuYWJsZSB0byBwZXJmb3JtIG9wZXJhdGlvbiB1c2luZyB0ZXJtaW5hdGVkIGNvbm5lY3Rpb24uJztcbi8vIDQwODAwMVxuZXhwb3J0c1s0MDgwMDFdID0gJ0Egc2VyaWFsaXplZENvbm5lY3Rpb24gbXVzdCBiZSBzcGVjaWZpZWQuJztcbmV4cG9ydHNbNDA4MDAyXSA9ICdJbnZhbGlkIHNlcmlhbGl6ZWRDb25uZWN0aW9uLiBUaGUgc3BlY2lmaWVkIHZhbHVlIG11c3QgYmUgYSBzdHJpbmcuJztcbmV4cG9ydHNbNDA4MDAzXSA9XG4gICAgXCJJbnZhbGlkIHNlcmlhbGl6ZWRDb25uZWN0aW9uLiBUaGUgdmFsdWUgbXVzdCBiZSBhIHN0cmluZyBvYnRhaW5lZCBieSBjYWxsaW5nIGFub3RoZXIgY29ubmVjdGlvbidzIHNlcmlhbGl6ZSgpIG1ldGhvZC5cIjtcbi8vIDQwOTAwMVxuZXhwb3J0c1s0MDkwMDFdID0gJ0V4ZWN1dGUgb3B0aW9ucyBtdXN0IGJlIHNwZWNpZmllZC4nO1xuZXhwb3J0c1s0MDkwMDJdID0gJ0ludmFsaWQgZXhlY3V0ZSBvcHRpb25zLiBUaGUgc3BlY2lmaWVkIHZhbHVlIG11c3QgYmUgYW4gb2JqZWN0Lic7XG5leHBvcnRzWzQwOTAwM10gPSAnQSBzcWxUZXh0IHZhbHVlIG11c3QgYmUgc3BlY2lmaWVkLic7XG5leHBvcnRzWzQwOTAwNF0gPSAnSW52YWxpZCBzcWxUZXh0LiBUaGUgc3BlY2lmaWVkIHZhbHVlIG11c3QgYmUgYSBzdHJpbmcuJztcbmV4cG9ydHNbNDA5MDA1XSA9ICdJbnZhbGlkIGludGVybmFsIGZsYWcuIFRoZSBzcGVjaWZpZWQgdmFsdWUgbXVzdCBiZSBhIGJvb2xlYW4uJztcbmV4cG9ydHNbNDA5MDA2XSA9ICdJbnZhbGlkIHBhcmFtZXRlcnMuIFRoZSBzcGVjaWZpZWQgdmFsdWUgbXVzdCBiZSBhbiBvYmplY3QuJztcbmV4cG9ydHNbNDA5MDA3XSA9ICdJbnZhbGlkIGJpbmRzLiBUaGUgc3BlY2lmaWVkIHZhbHVlIG11c3QgYmUgYW4gYXJyYXkuJztcbmV4cG9ydHNbNDA5MDA4XSA9ICdJbnZhbGlkIGJpbmQgdmFyaWFibGU6ICVzLiBPbmx5IHN0cmluZ2lmaWFibGUgdmFsdWVzIGFyZSBzdXBwb3J0ZWQuJztcbmV4cG9ydHNbNDA5MDA5XSA9ICdJbnZhbGlkIGNvbXBsZXRlIGNhbGxiYWNrLiBUaGUgc3BlY2lmaWVkIHZhbHVlIG11c3QgYmUgYSBmdW5jdGlvbi4nO1xuZXhwb3J0c1s0MDkwMTBdID0gJ0ludmFsaWQgc3RyZWFtUmVzdWx0IGZsYWcuIFRoZSBzcGVjaWZpZWQgdmFsdWUgbXVzdCBiZSBhIGJvb2xlYW4uJztcbmV4cG9ydHNbNDA5MDExXSA9ICdJbnZhbGlkIGZldGNoQXNTdHJpbmcgdmFsdWUuIFRoZSBzcGVjaWZpZWQgdmFsdWUgbXVzdCBiZSBhbiBBcnJheS4nO1xuZXhwb3J0c1s0MDkwMTJdID1cbiAgICAnSW52YWxpZCBmZXRjaEFzU3RyaW5nIHR5cGU6ICVzLiBUaGUgc3VwcG9ydGVkIHR5cGVzIGFyZTogU3RyaW5nLCBCb29sZWFuLCBOdW1iZXIsIERhdGUsIEJ1ZmZlciwgYW5kIEpTT04uJztcbmV4cG9ydHNbNDA5MDEzXSA9ICdJbnZhbGlkIHJlcXVlc3RJZC4gVGhlIHNwZWNpZmllZCB2YWx1ZSBtdXN0IGJlIGEgc3RyaW5nLic7XG5leHBvcnRzWzQwOTAxNF0gPSAnSW52YWxpZCBhc3luY0V4ZWMuIFRoZSBzcGVjaWZpZWQgdmFsdWUgbXVzdCBiZSBhIGJvb2xlYW4uJztcbmV4cG9ydHNbNDA5MDE1XSA9ICdJbnZhbGlkIGRlc2NyaWJlT25seS4gVGhlIHNwZWNpZmllZCB2YWx1ZSBtdXN0IGJlIGEgYm9vbGVhbi4nO1xuLy8gNDEwMDAxXG5leHBvcnRzWzQxMDAwMV0gPSAnRmV0Y2gtcmVzdWx0IG9wdGlvbnMgbXVzdCBiZSBzcGVjaWZpZWQuJztcbmV4cG9ydHNbNDEwMDAyXSA9ICdJbnZhbGlkIG9wdGlvbnMuIFRoZSBzcGVjaWZpZWQgdmFsdWUgbXVzdCBiZSBhbiBvYmplY3QuJztcbmV4cG9ydHNbNDEwMDAzXSA9ICdBIHF1ZXJ5IGlkL3N0YXRlbWVudCBpZCBtdXN0IGJlIHNwZWNpZmllZC4nO1xuZXhwb3J0c1s0MTAwMDRdID0gJ0ludmFsaWQgcXVlcnkgaWQvc3RhdGVtZW50IGlkLiBUaGUgc3BlY2lmaWVkIHZhbHVlIG11c3QgYmUgYSBzdHJpbmcuJztcbmV4cG9ydHNbNDEwMDA1XSA9ICdJbnZhbGlkIGNvbXBsZXRlIGNhbGxiYWNrLiBUaGUgc3BlY2lmaWVkIHZhbHVlIG11c3QgYmUgYSBmdW5jdGlvbi4nO1xuZXhwb3J0c1s0MTAwMDZdID0gJ0ludmFsaWQgc3RyZWFtUmVzdWx0IGZsYWcuIFRoZSBzcGVjaWZpZWQgdmFsdWUgbXVzdCBiZSBhIGJvb2xlYW4uJztcbmV4cG9ydHNbNDEwMDA3XSA9ICdJbnZhbGlkIGZldGNoQXNTdHJpbmcgdmFsdWUuIFRoZSBzcGVjaWZpZWQgdmFsdWUgbXVzdCBiZSBhbiBBcnJheS4nO1xuZXhwb3J0c1s0MTAwMDhdID1cbiAgICAnSW52YWxpZCBmZXRjaEFzU3RyaW5nIHR5cGU6ICVzLiBUaGUgc3VwcG9ydGVkIHR5cGVzIGFyZTogU3RyaW5nLCBCb29sZWFuLCBOdW1iZXIsIERhdGUsIEJ1ZmZlciwgYW5kIEpTT04uJztcbmV4cG9ydHNbNDEwMDA5XSA9XG4gICAgJ0ludmFsaWQgY3dkIChjdXJyZW50IHdvcmtpbmcgZGlyZWN0b3J5KSB0eXBlOiAlcy4gVGhlIHNwZWNpZmllZCB2YWx1ZSBtdXN0IGJlIGEgc3RyaW5nLic7XG4vLyA0MTEwMDFcbmV4cG9ydHNbNDExMDAxXSA9ICdJbnZhbGlkIG9wdGlvbnMuIFRoZSBzcGVjaWZpZWQgdmFsdWUgbXVzdCBiZSBhbiBvYmplY3QuJztcbmV4cG9ydHNbNDExMDAyXSA9ICdJbnZhbGlkIHN0YXJ0IGluZGV4LiBUaGUgc3BlY2lmaWVkIHZhbHVlIG11c3QgYmUgYSBudW1iZXIuJztcbmV4cG9ydHNbNDExMDAzXSA9ICdJbnZhbGlkIGVuZCBpbmRleC4gVGhlIHNwZWNpZmllZCB2YWx1ZSBtdXN0IGJlIGEgbnVtYmVyLic7XG5leHBvcnRzWzQxMTAwNF0gPSAnSW52YWxpZCBmZXRjaEFzU3RyaW5nIHZhbHVlLiBUaGUgc3BlY2lmaWVkIHZhbHVlIG11c3QgYmUgYW4gQXJyYXkuJztcbmV4cG9ydHNbNDExMDA1XSA9XG4gICAgJ0ludmFsaWQgZmV0Y2hBc1N0cmluZyB0eXBlOiAlcy4gVGhlIHN1cHBvcnRlZCB0eXBlcyBhcmU6IFN0cmluZywgQm9vbGVhbiwgTnVtYmVyLCBEYXRlLCBCdWZmZXIsIGFuZCBKU09OLic7XG5leHBvcnRzWzQxMTAwNl0gPVxuICAgICdJbnZhbGlkIHJvdyBtb2RlIHZhbHVlLiBUaGUgc3BlY2lmaWVkIHZhbHVlIHNob3VsZCBiZSBhcnJheSBvciBvYmplY3Qgb3Igb2JqZWN0X3dpdGhfcmVuYW1lZF9kdXBsaWNhdGVkX2NvbHVtbnMnO1xuZXhwb3J0c1s0MTIwMDFdID0gJ0NlcnRpZmljYXRlIGlzIFJFVk9LRUQuJztcbmV4cG9ydHNbNDEyMDAyXSA9ICdDZXJ0aWZpY2F0ZSBzdGF0dXMgaXMgVU5LTk9XTi4nO1xuZXhwb3J0c1s0MTIwMDNdID0gJ05vdCByZWNvZ25pemUgc2lnbmF0dXJlIGFsZ29yaXRobS4nO1xuZXhwb3J0c1s0MTIwMDRdID0gJ0ludmFsaWQgc2lnbmF0dXJlLic7XG5leHBvcnRzWzQxMjAwNV0gPSAnTm8gT0NTUCByZXNwb25zZSBkYXRhIGlzIGF0dGFjaGVkLic7XG5leHBvcnRzWzQxMjAwNl0gPSAnSW52YWxpZCB2YWxpZGl0eS4nO1xuZXhwb3J0c1s0MTIwMDddID0gJ0NvdWxkIG5vdCB2ZXJpZnkgdGhlIGNlcnRpZmljYXRlIHJldm9jYXRpb24gc3RhdHVzLic7XG5leHBvcnRzWzQxMjAwOF0gPSAnTm90IHR3byBlbGVtZW50cyBhcmUgaW4gdGhlIGNhY2hlLic7XG5leHBvcnRzWzQxMjAwOV0gPSAnQ2FjaGUgZW50cnkgZXhwaXJlZC4nO1xuZXhwb3J0c1s0MTIwMTBdID0gJ0ZhaWxlZCB0byBwYXJzZSBPQ1NQIHJlc3BvbnNlLic7XG5leHBvcnRzWzQxMjAxMV0gPSAnSW52YWxpZCBTaWduaW5nIENlcnRpZmljYXRlIHZhbGlkaXR5Lic7XG5leHBvcnRzWzQxMjAxMl0gPSAnVGltZW91dCBPQ1NQIHJlc3BvbmRlci4nO1xuZXhwb3J0c1s0MTIwMTNdID0gJ1RpbWVvdXQgT0NTUCBDYWNoZSBzZXJ2ZXIuJztcbmV4cG9ydHNbNDEyMDE0XSA9ICdGYWlsZWQgdG8gb2J0YWluIE9DU1AgcmVzcG9uc2U6ICVzJztcbmV4cG9ydHNbNDEzMDAxXSA9ICdDUkwgdmFsaWRhdGlvbiBmYWlsZWQuJztcbi8vIDQ1MDAwMVxuZXhwb3J0c1s0NTAwMDFdID0gJ0ZldGNoLXJvdyBvcHRpb25zIG11c3QgYmUgc3BlY2lmaWVkLic7XG5leHBvcnRzWzQ1MDAwMl0gPSAnSW52YWxpZCBvcHRpb25zLiBUaGUgc3BlY2lmaWVkIHZhbHVlIG11c3QgYmUgYW4gb2JqZWN0Lic7XG5leHBvcnRzWzQ1MDAwM10gPSAnQW4gZWFjaCgpIGNhbGxiYWNrIG11c3QgYmUgc3BlY2lmaWVkLic7XG5leHBvcnRzWzQ1MDAwNF0gPSAnSW52YWxpZCBlYWNoKCkgY2FsbGJhY2suIFRoZSBzcGVjaWZpZWQgdmFsdWUgbXVzdCBiZSBhIGZ1bmN0aW9uLic7XG5leHBvcnRzWzQ1MDAwNV0gPSAnQW4gZW5kKCkgY2FsbGJhY2sgbXVzdCBiZSBzcGVjaWZpZWQuJztcbmV4cG9ydHNbNDUwMDA2XSA9ICdJbnZhbGlkIGVuZCgpIGNhbGxiYWNrLiBUaGUgc3BlY2lmaWVkIHZhbHVlIG11c3QgYmUgYSBmdW5jdGlvbi4nO1xuZXhwb3J0c1s0NTAwMDddID0gJ09wZXJhdGlvbiBmYWlsZWQgYmVjYXVzZSB0aGUgc3RhdGVtZW50IGlzIHN0aWxsIGluIHByb2dyZXNzLic7XG4vLyA0NjAwMDFcbmV4cG9ydHNbNDYwMDAxXSA9ICdJbnZhbGlkIHF1ZXJ5SWQ6ICVzJztcbmV4cG9ydHNbNDYwMDAyXSA9ICdDYW5ub3QgcmV0cmlldmUgZGF0YS4gTm8gaW5mb3JtYXRpb24gcmV0dXJuZWQgZnJvbSBzZXJ2ZXIgZm9yIHF1ZXJ5ICVzJztcbmV4cG9ydHNbNDYwMDAzXSA9ICdTdGF0dXMgb2YgcXVlcnkgJXMgaXMgJXMsIHJlc3VsdHMgYXJlIHVuYXZhaWxhYmxlJztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVycm9yX21lc3NhZ2VzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/dist/lib/constants/error_messages.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/dist/lib/constants/gs_errors.js":
/*!********************************************************************!*\
  !*** ./node_modules/snowflake-sdk/dist/lib/constants/gs_errors.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nconst code = {};\ncode.INCORRECT_USERNAME_PASSWORD = '390100';\ncode.SESSION_TOKEN_INVALID = '390104';\ncode.GONE_SESSION = '390111';\ncode.SESSION_TOKEN_EXPIRED = '390112';\ncode.OAUTH_TOKEN_EXPIRED = '390318';\ncode.MASTER_TOKEN_EXPIRED = '390114';\ncode.ID_TOKEN_INVALID = '390195';\nexports.code = code;\n//# sourceMappingURL=gs_errors.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9kaXN0L2xpYi9jb25zdGFudHMvZ3NfZXJyb3JzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWiIsInNvdXJjZXMiOlsiL1VzZXJzL3dhbmdoYW90YWkvRGVza3RvcC9lbHZlbmxhYi9IVFYvbm9kZV9tb2R1bGVzL3Nub3dmbGFrZS1zZGsvZGlzdC9saWIvY29uc3RhbnRzL2dzX2Vycm9ycy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmNvbnN0IGNvZGUgPSB7fTtcbmNvZGUuSU5DT1JSRUNUX1VTRVJOQU1FX1BBU1NXT1JEID0gJzM5MDEwMCc7XG5jb2RlLlNFU1NJT05fVE9LRU5fSU5WQUxJRCA9ICczOTAxMDQnO1xuY29kZS5HT05FX1NFU1NJT04gPSAnMzkwMTExJztcbmNvZGUuU0VTU0lPTl9UT0tFTl9FWFBJUkVEID0gJzM5MDExMic7XG5jb2RlLk9BVVRIX1RPS0VOX0VYUElSRUQgPSAnMzkwMzE4JztcbmNvZGUuTUFTVEVSX1RPS0VOX0VYUElSRUQgPSAnMzkwMTE0JztcbmNvZGUuSURfVE9LRU5fSU5WQUxJRCA9ICczOTAxOTUnO1xuZXhwb3J0cy5jb2RlID0gY29kZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdzX2Vycm9ycy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/dist/lib/constants/gs_errors.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/dist/lib/constants/query_status.js":
/*!***********************************************************************!*\
  !*** ./node_modules/snowflake-sdk/dist/lib/constants/query_status.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nconst code = {};\ncode.RUNNING = 'RUNNING';\ncode.ABORTING = 'ABORTING';\ncode.SUCCESS = 'SUCCESS';\ncode.FAILED_WITH_ERROR = 'FAILED_WITH_ERROR';\ncode.ABORTED = 'ABORTED';\ncode.QUEUED = 'QUEUED';\ncode.FAILED_WITH_INCIDENT = 'FAILED_WITH_INCIDENT';\ncode.DISCONNECTED = 'DISCONNECTED';\ncode.RESUMING_WAREHOUSE = 'RESUMING_WAREHOUSE';\n// purposeful typo.Is present in QueryDTO.java\ncode.QUEUED_REPARING_WAREHOUSE = 'QUEUED_REPARING_WAREHOUSE';\ncode.RESTARTED = 'RESTARTED';\ncode.BLOCKED = 'BLOCKED';\ncode.NO_DATA = 'NO_DATA';\ncode.NO_QUERY_DATA = 'NO_QUERY_DATA';\n// All running query statuses\nconst runningStatuses = [\n    code.RUNNING,\n    code.RESUMING_WAREHOUSE,\n    code.QUEUED,\n    code.QUEUED_REPARING_WAREHOUSE,\n    code.NO_DATA,\n];\n// All error query statuses\nconst errorStatuses = [\n    code.ABORTING,\n    code.FAILED_WITH_ERROR,\n    code.ABORTED,\n    code.FAILED_WITH_INCIDENT,\n    code.DISCONNECTED,\n    code.BLOCKED,\n];\nexports.code = code;\nexports.runningStatuses = runningStatuses;\nexports.errorStatuses = errorStatuses;\n//# sourceMappingURL=query_status.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9kaXN0L2xpYi9jb25zdGFudHMvcXVlcnlfc3RhdHVzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaLHVCQUF1QjtBQUN2QixxQkFBcUI7QUFDckIiLCJzb3VyY2VzIjpbIi9Vc2Vycy93YW5naGFvdGFpL0Rlc2t0b3AvZWx2ZW5sYWIvSFRWL25vZGVfbW9kdWxlcy9zbm93Zmxha2Utc2RrL2Rpc3QvbGliL2NvbnN0YW50cy9xdWVyeV9zdGF0dXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBjb2RlID0ge307XG5jb2RlLlJVTk5JTkcgPSAnUlVOTklORyc7XG5jb2RlLkFCT1JUSU5HID0gJ0FCT1JUSU5HJztcbmNvZGUuU1VDQ0VTUyA9ICdTVUNDRVNTJztcbmNvZGUuRkFJTEVEX1dJVEhfRVJST1IgPSAnRkFJTEVEX1dJVEhfRVJST1InO1xuY29kZS5BQk9SVEVEID0gJ0FCT1JURUQnO1xuY29kZS5RVUVVRUQgPSAnUVVFVUVEJztcbmNvZGUuRkFJTEVEX1dJVEhfSU5DSURFTlQgPSAnRkFJTEVEX1dJVEhfSU5DSURFTlQnO1xuY29kZS5ESVNDT05ORUNURUQgPSAnRElTQ09OTkVDVEVEJztcbmNvZGUuUkVTVU1JTkdfV0FSRUhPVVNFID0gJ1JFU1VNSU5HX1dBUkVIT1VTRSc7XG4vLyBwdXJwb3NlZnVsIHR5cG8uSXMgcHJlc2VudCBpbiBRdWVyeURUTy5qYXZhXG5jb2RlLlFVRVVFRF9SRVBBUklOR19XQVJFSE9VU0UgPSAnUVVFVUVEX1JFUEFSSU5HX1dBUkVIT1VTRSc7XG5jb2RlLlJFU1RBUlRFRCA9ICdSRVNUQVJURUQnO1xuY29kZS5CTE9DS0VEID0gJ0JMT0NLRUQnO1xuY29kZS5OT19EQVRBID0gJ05PX0RBVEEnO1xuY29kZS5OT19RVUVSWV9EQVRBID0gJ05PX1FVRVJZX0RBVEEnO1xuLy8gQWxsIHJ1bm5pbmcgcXVlcnkgc3RhdHVzZXNcbmNvbnN0IHJ1bm5pbmdTdGF0dXNlcyA9IFtcbiAgICBjb2RlLlJVTk5JTkcsXG4gICAgY29kZS5SRVNVTUlOR19XQVJFSE9VU0UsXG4gICAgY29kZS5RVUVVRUQsXG4gICAgY29kZS5RVUVVRURfUkVQQVJJTkdfV0FSRUhPVVNFLFxuICAgIGNvZGUuTk9fREFUQSxcbl07XG4vLyBBbGwgZXJyb3IgcXVlcnkgc3RhdHVzZXNcbmNvbnN0IGVycm9yU3RhdHVzZXMgPSBbXG4gICAgY29kZS5BQk9SVElORyxcbiAgICBjb2RlLkZBSUxFRF9XSVRIX0VSUk9SLFxuICAgIGNvZGUuQUJPUlRFRCxcbiAgICBjb2RlLkZBSUxFRF9XSVRIX0lOQ0lERU5ULFxuICAgIGNvZGUuRElTQ09OTkVDVEVELFxuICAgIGNvZGUuQkxPQ0tFRCxcbl07XG5leHBvcnRzLmNvZGUgPSBjb2RlO1xuZXhwb3J0cy5ydW5uaW5nU3RhdHVzZXMgPSBydW5uaW5nU3RhdHVzZXM7XG5leHBvcnRzLmVycm9yU3RhdHVzZXMgPSBlcnJvclN0YXR1c2VzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cXVlcnlfc3RhdHVzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/dist/lib/constants/query_status.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/dist/lib/constants/row_mode.js":
/*!*******************************************************************!*\
  !*** ./node_modules/snowflake-sdk/dist/lib/constants/row_mode.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nconst Errors = __webpack_require__(/*! ../errors */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/errors.js\");\nconst ErrorCodes = Errors.codes;\nconst ARRAY = 'array';\nconst OBJECT = 'object';\nconst OBJECT_WITH_RENAMED_DUPLICATED_COLUMNS = 'object_with_renamed_duplicated_columns';\nconst isValidRowMode = (rowMode) => [ARRAY, OBJECT, OBJECT_WITH_RENAMED_DUPLICATED_COLUMNS].includes(rowMode);\nconst checkRowModeValid = (rowMode) => {\n    Errors.checkArgumentValid(isValidRowMode(rowMode), ErrorCodes.ERR_STMT_STREAM_ROWS_INVALID_ROW_MODE, JSON.stringify(rowMode));\n};\nexports.ARRAY = ARRAY;\nexports.OBJECT = OBJECT;\nexports.OBJECT_WITH_RENAMED_DUPLICATED_COLUMNS = OBJECT_WITH_RENAMED_DUPLICATED_COLUMNS;\nexports.isValidRowMode = isValidRowMode;\nexports.checkRowModeValid = checkRowModeValid;\n//# sourceMappingURL=row_mode.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9kaXN0L2xpYi9jb25zdGFudHMvcm93X21vZGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixlQUFlLG1CQUFPLENBQUMsd0VBQVc7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixjQUFjO0FBQ2QsOENBQThDO0FBQzlDLHNCQUFzQjtBQUN0Qix5QkFBeUI7QUFDekIiLCJzb3VyY2VzIjpbIi9Vc2Vycy93YW5naGFvdGFpL0Rlc2t0b3AvZWx2ZW5sYWIvSFRWL25vZGVfbW9kdWxlcy9zbm93Zmxha2Utc2RrL2Rpc3QvbGliL2NvbnN0YW50cy9yb3dfbW9kZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmNvbnN0IEVycm9ycyA9IHJlcXVpcmUoJy4uL2Vycm9ycycpO1xuY29uc3QgRXJyb3JDb2RlcyA9IEVycm9ycy5jb2RlcztcbmNvbnN0IEFSUkFZID0gJ2FycmF5JztcbmNvbnN0IE9CSkVDVCA9ICdvYmplY3QnO1xuY29uc3QgT0JKRUNUX1dJVEhfUkVOQU1FRF9EVVBMSUNBVEVEX0NPTFVNTlMgPSAnb2JqZWN0X3dpdGhfcmVuYW1lZF9kdXBsaWNhdGVkX2NvbHVtbnMnO1xuY29uc3QgaXNWYWxpZFJvd01vZGUgPSAocm93TW9kZSkgPT4gW0FSUkFZLCBPQkpFQ1QsIE9CSkVDVF9XSVRIX1JFTkFNRURfRFVQTElDQVRFRF9DT0xVTU5TXS5pbmNsdWRlcyhyb3dNb2RlKTtcbmNvbnN0IGNoZWNrUm93TW9kZVZhbGlkID0gKHJvd01vZGUpID0+IHtcbiAgICBFcnJvcnMuY2hlY2tBcmd1bWVudFZhbGlkKGlzVmFsaWRSb3dNb2RlKHJvd01vZGUpLCBFcnJvckNvZGVzLkVSUl9TVE1UX1NUUkVBTV9ST1dTX0lOVkFMSURfUk9XX01PREUsIEpTT04uc3RyaW5naWZ5KHJvd01vZGUpKTtcbn07XG5leHBvcnRzLkFSUkFZID0gQVJSQVk7XG5leHBvcnRzLk9CSkVDVCA9IE9CSkVDVDtcbmV4cG9ydHMuT0JKRUNUX1dJVEhfUkVOQU1FRF9EVVBMSUNBVEVEX0NPTFVNTlMgPSBPQkpFQ1RfV0lUSF9SRU5BTUVEX0RVUExJQ0FURURfQ09MVU1OUztcbmV4cG9ydHMuaXNWYWxpZFJvd01vZGUgPSBpc1ZhbGlkUm93TW9kZTtcbmV4cG9ydHMuY2hlY2tSb3dNb2RlVmFsaWQgPSBjaGVja1Jvd01vZGVWYWxpZDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJvd19tb2RlLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/dist/lib/constants/row_mode.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/dist/lib/constants/sf_params.js":
/*!********************************************************************!*\
  !*** ./node_modules/snowflake-sdk/dist/lib/constants/sf_params.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nexports.paramsNames = Object.freeze({\n    SF_REQUEST_GUID: 'request_guid',\n    SF_REQUEST_ID: 'requestId',\n    SF_TOKEN: 'token',\n    SF_WAREHOUSE_NAME: 'warehouse',\n    SF_DB_NAME: 'databaseName',\n    SF_SCHEMA_NAME: 'schemaName',\n});\n//# sourceMappingURL=sf_params.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9kaXN0L2xpYi9jb25zdGFudHMvc2ZfcGFyYW1zLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCIsInNvdXJjZXMiOlsiL1VzZXJzL3dhbmdoYW90YWkvRGVza3RvcC9lbHZlbmxhYi9IVFYvbm9kZV9tb2R1bGVzL3Nub3dmbGFrZS1zZGsvZGlzdC9saWIvY29uc3RhbnRzL3NmX3BhcmFtcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmV4cG9ydHMucGFyYW1zTmFtZXMgPSBPYmplY3QuZnJlZXplKHtcbiAgICBTRl9SRVFVRVNUX0dVSUQ6ICdyZXF1ZXN0X2d1aWQnLFxuICAgIFNGX1JFUVVFU1RfSUQ6ICdyZXF1ZXN0SWQnLFxuICAgIFNGX1RPS0VOOiAndG9rZW4nLFxuICAgIFNGX1dBUkVIT1VTRV9OQU1FOiAnd2FyZWhvdXNlJyxcbiAgICBTRl9EQl9OQU1FOiAnZGF0YWJhc2VOYW1lJyxcbiAgICBTRl9TQ0hFTUFfTkFNRTogJ3NjaGVtYU5hbWUnLFxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zZl9wYXJhbXMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/dist/lib/constants/sf_params.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/dist/lib/core.js":
/*!*****************************************************!*\
  !*** ./node_modules/snowflake-sdk/dist/lib/core.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst Util = __webpack_require__(/*! ./util */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/util.js\");\nconst Errors = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/errors.js\");\nconst ErrorCodes = Errors.codes;\nconst Connection = __webpack_require__(/*! ./connection/connection */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/connection/connection.js\");\nconst ConnectionConfig = __webpack_require__(/*! ./connection/connection_config */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/connection/connection_config.js\");\nconst ConnectionContext = __webpack_require__(/*! ./connection/connection_context */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/connection/connection_context.js\");\nconst GenericPool = __webpack_require__(/*! generic-pool */ \"(rsc)/./node_modules/generic-pool/index.js\");\nconst Logger = __webpack_require__(/*! ./logger */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/logger.js\");\nconst LoggerCore = __webpack_require__(/*! ./logger/core */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/logger/core.js\");\nconst DataTypes = __webpack_require__(/*! ./connection/result/data_types */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/connection/result/data_types.js\");\nconst GlobalConfig = __webpack_require__(/*! ./global_config */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/global_config.js\");\nconst GlobalConfigTyped = (__webpack_require__(/*! ./global_config_typed */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/global_config_typed.js\")[\"default\"]);\nconst { loadConnectionConfiguration } = __webpack_require__(/*! ./configuration/connection_configuration */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/configuration/connection_configuration.js\");\n/**\n * Creates a new instance of the Snowflake core module.\n *\n * @param {Object} options\n *\n * @returns {Object}\n * @constructor\n */\nfunction Core(options) {\n    // validate input\n    Errors.assertInternal(Util.isObject(options));\n    Errors.assertInternal(Util.exists(options.httpClient || options.httpClientClass));\n    Errors.assertInternal(Util.exists(options.loggerClass));\n    // set the logger instance\n    Logger.setInstance(new options.loggerClass());\n    Logger.getInstance().trace('Logger was initialized.');\n    // if a connection class is specified, it must be an object or function\n    let connectionClass = options.connectionClass;\n    if (Util.exists(connectionClass)) {\n        Errors.assertInternal(Util.isObject(connectionClass) || Util.isFunction(connectionClass));\n        Logger.getInstance().debug('Connection class provided in driver core options will be used.');\n    }\n    else {\n        // fall back to Connection\n        connectionClass = Connection;\n        Logger.getInstance().debug('Connection class was not overridden. Default connection class will be used.');\n    }\n    const qaMode = options.qaMode;\n    const clientInfo = options.client;\n    const ocspModes = GlobalConfig.ocspModes;\n    /**\n     * Creates a new Connection instance.\n     *\n     * @param {Object} connectionOptions\n     * @param {Object} [config]\n     *\n     * @returns {Object}\n     */\n    const createConnection = function createConnection(connectionOptions, config) {\n        // create a new ConnectionConfig and skip credential-validation if a config\n        // object has been specified; this is because if a config object has been\n        // specified, we're trying to deserialize a connection and the account name,\n        // username and password don't need to be specified because the config\n        // object already contains the tokens we need\n        // Alternatively, if the connectionOptions includes token information then we will use that\n        // instead of the username/password\n        Logger.getInstance().info('Creating new connection object');\n        if (connectionOptions == null) {\n            Logger.getInstance().info('Connection options were not specified. Loading connection configuration.');\n            try {\n                connectionOptions = loadConnectionConfiguration();\n            }\n            catch (error) {\n                Logger.getInstance().error('Unable to load the connection configuration. Error: %s', error.message);\n                Errors.checkArgumentExists(Util.exists(connectionOptions), ErrorCodes.ERR_CONN_CREATE_MISSING_OPTIONS);\n            }\n        }\n        const validateCredentials = !config && connectionOptions && !connectionOptions.sessionToken;\n        const connectionConfig = new ConnectionConfig(connectionOptions, validateCredentials, qaMode, clientInfo);\n        Logger.getInstance().debug('Connection configuration object created');\n        // if an http client was specified in the options passed to the module, use\n        // it, otherwise create a new HttpClient\n        const httpClient = options.httpClient || new options.httpClientClass(connectionConfig);\n        Logger.getInstance().debug('HttpClient setup finished');\n        const connection = new connectionClass(new ConnectionContext(connectionConfig, httpClient, config));\n        Logger.getInstance().info('Connection[id: %s] - connection object created successfully.', connection.getId());\n        return connection;\n    };\n    const instance = {\n        ocspModes: ocspModes,\n        ErrorCode: ErrorCodes,\n        /**\n         * Creates a connection object that can be used to communicate with\n         * Snowflake.\n         *\n         * @param {Object} options\n         *\n         * @returns {Object}\n         */\n        createConnection: function (options) {\n            return createConnection(options);\n        },\n        /**\n         * Creates a connection pool for Snowflake connections\n         *\n         * @param {Object} connectionOptions\n         * @param {Object} poolOptions\n         *\n         * @returns {Object}\n         */\n        createPool: function (connectionOptions, poolOptions) {\n            return createPool(connectionOptions, poolOptions);\n        },\n        /**\n         * Deserializes a serialized connection.\n         *\n         * @param {Object} options\n         * @param {String} serializedConnection\n         *\n         * @returns {Object}\n         */\n        deserializeConnection: function (options, serializedConnection) {\n            // check for missing serializedConfig\n            Logger.getInstance().trace('Deserializing connection');\n            Errors.checkArgumentExists(Util.exists(serializedConnection), ErrorCodes.ERR_CONN_DESERIALIZE_MISSING_CONFIG);\n            // check for invalid serializedConfig\n            Errors.checkArgumentValid(Util.isString(serializedConnection), ErrorCodes.ERR_CONN_DESERIALIZE_INVALID_CONFIG_TYPE);\n            Logger.getInstance().debug('Deserializing connection from string object');\n            // try to json-parse serializedConfig\n            let config;\n            try {\n                config = JSON.parse(serializedConnection);\n            }\n            finally {\n                // if serializedConfig can't be parsed to json, throw an error\n                Errors.checkArgumentValid(Util.isObject(config), ErrorCodes.ERR_CONN_DESERIALIZE_INVALID_CONFIG_FORM);\n            }\n            Logger.getInstance().debug('Connection deserialized successfully');\n            return createConnection(options, config);\n        },\n        /**\n         * Serializes a given connection.\n         *\n         * @param {Object} connection\n         *\n         * @returns {String} a serialized version of the connection.\n         */\n        serializeConnection: function (connection) {\n            Logger.getInstance().trace('Connection[id: %s] - serializing connection.', connection.getId());\n            return connection ? connection.serialize() : connection;\n        },\n        /**\n         * Configures this instance of the Snowflake core module.\n         *\n         * @param {Object} options\n         */\n        configure: function (options) {\n            Logger.getInstance().debug('Configuring Snowflake core module.');\n            const logLevel = extractLogLevel(options);\n            const logFilePath = options.logFilePath;\n            const additionalLogToConsole = options.additionalLogToConsole;\n            if (logLevel != null || logFilePath) {\n                Logger.getInstance().configure({\n                    level: logLevel,\n                    filePath: logFilePath,\n                    additionalLogToConsole: additionalLogToConsole,\n                });\n                Logger.getInstance().info('Configuring logger with level: %s, filePath: %s, additionalLogToConsole: %s', logLevel, logFilePath, additionalLogToConsole);\n            }\n            GlobalConfigTyped.setValues(options);\n            const disableOCSPChecks = options.disableOCSPChecks;\n            if (Util.exists(disableOCSPChecks)) {\n                // check that the specified value is a boolean\n                Errors.checkArgumentValid(Util.isBoolean(disableOCSPChecks), ErrorCodes.ERR_GLOBAL_CONFIGURE_INVALID_DISABLE_OCSP_CHECKS);\n                GlobalConfig.setDisableOCSPChecks(disableOCSPChecks);\n                Logger.getInstance().debug('Setting disableOCSPChecks to value from core options: %s', disableOCSPChecks);\n            }\n            const ocspFailOpen = options.ocspFailOpen;\n            if (Util.exists(ocspFailOpen)) {\n                Errors.checkArgumentValid(Util.isBoolean(ocspFailOpen), ErrorCodes.ERR_GLOBAL_CONFIGURE_INVALID_OCSP_MODE);\n                GlobalConfig.setOcspFailOpen(ocspFailOpen);\n                Logger.getInstance().debug('Setting ocspFailOpen to value from core options: %s ', ocspFailOpen);\n            }\n            const jsonColumnVariantParser = options.jsonColumnVariantParser;\n            if (Util.exists(jsonColumnVariantParser)) {\n                Errors.checkArgumentValid(Util.isFunction(jsonColumnVariantParser), ErrorCodes.ERR_GLOBAL_CONFIGURE_INVALID_JSON_PARSER);\n                GlobalConfig.setJsonColumnVariantParser(jsonColumnVariantParser);\n                Logger.getInstance().debug('Setting JSON Column Variant Parser to value from core options');\n            }\n            const xmlColumnVariantParser = options.xmlColumnVariantParser;\n            const xmlParserConfig = options.xmlParserConfig;\n            if (Util.exists(xmlColumnVariantParser)) {\n                Errors.checkArgumentValid(Util.isFunction(xmlColumnVariantParser), ErrorCodes.ERR_GLOBAL_CONFIGURE_INVALID_XML_PARSER);\n                GlobalConfig.setXmlColumnVariantParser(xmlColumnVariantParser);\n                Logger.getInstance().debug('Setting XML Column Variant Parser to value from core options');\n            }\n            else if (Util.exists(xmlParserConfig)) {\n                GlobalConfig.createXmlColumnVariantParserWithParameters(xmlParserConfig);\n                Logger.getInstance().debug('Creating XML Column Variant Parser with parameters from core options');\n            }\n            const keepAlive = options.keepAlive;\n            if (Util.exists(keepAlive)) {\n                Errors.checkArgumentValid(Util.isBoolean(keepAlive), ErrorCodes.ERR_GLOBAL_CONFIGURE_INVALID_KEEP_ALIVE);\n                GlobalConfig.setKeepAlive(keepAlive);\n                Logger.getInstance().debug('Setting keepAlive to value from core options: %s', keepAlive);\n            }\n            const useEnvProxy = options.useEnvProxy;\n            if (Util.exists(useEnvProxy)) {\n                Errors.checkArgumentValid(Util.isBoolean(useEnvProxy), ErrorCodes.ERR_GLOBAL_CONFIGURE_INVALID_USE_ENV_PROXY);\n                GlobalConfig.setEnvProxy(useEnvProxy);\n            }\n            const customCredentialManager = options.customCredentialManager;\n            if (Util.exists(customCredentialManager)) {\n                Errors.checkArgumentValid(Util.isObject(customCredentialManager), ErrorCodes.ERR_GLOBAL_CONFIGURE_INVALID_CUSTOM_CREDENTIAL_MANAGER);\n                GlobalConfig.setCustomCredentialManager(customCredentialManager);\n                Logger.getInstance().debug('Setting customCredentialManager to value from core options %s', customCredentialManager);\n            }\n        },\n    };\n    function extractLogLevel(options) {\n        const logTag = options.logLevel;\n        if (Util.exists(logTag)) {\n            Errors.checkArgumentValid(LoggerCore.isValidLogTag(logTag), ErrorCodes.ERR_GLOBAL_CONFIGURE_INVALID_LOG_LEVEL);\n            return LoggerCore.logTagToLevel(logTag);\n        }\n        return null;\n    }\n    // add some read-only constants\n    const nativeTypeValues = DataTypes.NativeTypes.values;\n    Object.defineProperties(instance, {\n        STRING: { value: nativeTypeValues.STRING },\n        BOOLEAN: { value: nativeTypeValues.BOOLEAN },\n        NUMBER: { value: nativeTypeValues.NUMBER },\n        DATE: { value: nativeTypeValues.DATE },\n        OBJECT: { value: nativeTypeValues.OBJECT },\n        ARRAY: { value: nativeTypeValues.ARRAY },\n        MAP: { value: nativeTypeValues.MAP },\n        JSON: { value: nativeTypeValues.JSON },\n    });\n    /**\n     * Factory for Snowflake connections based on Generic Pool\n     *\n     * @param {Object} connectionOptions\n     *\n     * @returns {null}\n     */\n    function ConnectionFactory(connectionOptions) {\n        /**\n         * Creates a new connection instance.\n         *\n         * @returns {Object}\n         */\n        this.create = function () {\n            Logger.getInstance().debug('Creating new connection from factory.');\n            const connection = new createConnection(connectionOptions);\n            return new Promise((resolve, reject) => {\n                connection.connect(function (err, conn) {\n                    if (err) {\n                        Logger.getInstance().error('Connection[id: %s] - Unable to connect. Error: %s', conn.getId(), err.message);\n                        reject(new Error(err.message));\n                    }\n                    else {\n                        Logger.getInstance().debug('Connection[id: %s] - connected successfully. Callback called.', conn.getId());\n                        resolve(conn);\n                    }\n                });\n            });\n        };\n        /**\n         * Destroys the specified connection instance.\n         *\n         * @param {Object} connection\n         *\n         * @returns {Object}\n         */\n        this.destroy = function (connection) {\n            Logger.getInstance().debug('Destroying connection instance.');\n            return new Promise((resolve) => {\n                connection.destroy(function (err, conn) {\n                    if (err) {\n                        Logger.getInstance().error('Connection[id: %s] - disconnecting failed with error: %s', conn.getId(), err.message);\n                    }\n                    else {\n                        Logger.getInstance().debug('Connection[id: %s] - connection disconnected successfully. Callback called.', conn.getId());\n                    }\n                    resolve();\n                });\n            });\n        };\n        /**\n         * Returns the status of the connection.\n         *\n         * @param {Object} connection\n         *\n         * @returns {Boolean}\n         */\n        this.validate = async function (connection) {\n            Logger.getInstance().debug('Connection[id: %s] - validating connection instance', connection.getId());\n            return await connection.isValidAsync();\n        };\n    }\n    /**\n     * Creates a connection pool for Snowflake connections\n     *\n     * @param {Object} connectionOptions\n     * @param {Object} poolOptions\n     *\n     * @returns {Object}\n     */\n    const createPool = function createPool(connectionOptions, poolOptions) {\n        Logger.getInstance().info('Creating connection pool with provided options');\n        const connectionPool = GenericPool.createPool(new ConnectionFactory(connectionOptions), poolOptions);\n        Logger.getInstance().debug('Base for connection pool created');\n        // avoid infinite loop if factory creation fails\n        connectionPool.on('factoryCreateError', function (err) {\n            Logger.getInstance().error('Connection pool factory creation failed: %s', err.message);\n            const clientResourceRequest = connectionPool._waitingClientsQueue.dequeue();\n            if (clientResourceRequest) {\n                clientResourceRequest.reject(err);\n            }\n        });\n        Logger.getInstance().info('Connection pool object created successfully');\n        return connectionPool;\n    };\n    return instance;\n}\nmodule.exports = Core;\n//# sourceMappingURL=core.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/dist/lib/core.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/dist/lib/disk_cache.js":
/*!***********************************************************!*\
  !*** ./node_modules/snowflake-sdk/dist/lib/disk_cache.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getDefaultCacheDir = getDefaultCacheDir;\nexports.isFileNotFoundError = isFileNotFoundError;\nexports.createCacheDirIfNotExists = createCacheDirIfNotExists;\nexports.writeCacheFile = writeCacheFile;\nconst path_1 = __importDefault(__webpack_require__(/*! path */ \"path\"));\nconst promises_1 = __importDefault(__webpack_require__(/*! fs/promises */ \"fs/promises\"));\nconst os_1 = __importDefault(__webpack_require__(/*! os */ \"os\"));\n// NOTE:\n// Besides this file, there are other entrypoints implementing reading/writing cache files:\n// - global_config.js\n// - authentication/secure_storage/json_credential_manager.js\n//\n// We should refactor the code so every place is using utils from this file\nfunction getDefaultCacheDir() {\n    switch (process.platform) {\n        case 'win32':\n            return path_1.default.join(os_1.default.homedir(), 'AppData', 'Local', 'Snowflake', 'Caches');\n        case 'linux':\n            return path_1.default.join(os_1.default.homedir(), '.cache', 'snowflake');\n        case 'darwin':\n            return path_1.default.join(os_1.default.homedir(), 'Library');\n        default:\n            throw new Error(`Unsupported platform: ${process.platform}`);\n    }\n}\nfunction isFileNotFoundError(error) {\n    return error && typeof error === 'object' && 'code' in error && error.code === 'ENOENT';\n}\nasync function createCacheDirIfNotExists(cacheDir) {\n    const options = { recursive: true };\n    if (process.platform !== 'win32') {\n        options.mode = 0o755;\n    }\n    await promises_1.default.mkdir(cacheDir, options);\n    if (process.platform !== 'win32') {\n        await promises_1.default.chmod(cacheDir, 0o700);\n    }\n}\nasync function writeCacheFile(filePath, content) {\n    const dirName = path_1.default.dirname(filePath);\n    await createCacheDirIfNotExists(dirName);\n    await promises_1.default.writeFile(filePath, content);\n    if (process.platform !== 'win32') {\n        await promises_1.default.chmod(filePath, 0o600);\n    }\n}\n//# sourceMappingURL=disk_cache.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9kaXN0L2xpYi9kaXNrX2NhY2hlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsMEJBQTBCO0FBQzFCLDJCQUEyQjtBQUMzQixpQ0FBaUM7QUFDakMsc0JBQXNCO0FBQ3RCLCtCQUErQixtQkFBTyxDQUFDLGtCQUFNO0FBQzdDLG1DQUFtQyxtQkFBTyxDQUFDLGdDQUFhO0FBQ3hELDZCQUE2QixtQkFBTyxDQUFDLGNBQUk7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscURBQXFELGlCQUFpQjtBQUN0RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL3dhbmdoYW90YWkvRGVza3RvcC9lbHZlbmxhYi9IVFYvbm9kZV9tb2R1bGVzL3Nub3dmbGFrZS1zZGsvZGlzdC9saWIvZGlza19jYWNoZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0RGVmYXVsdENhY2hlRGlyID0gZ2V0RGVmYXVsdENhY2hlRGlyO1xuZXhwb3J0cy5pc0ZpbGVOb3RGb3VuZEVycm9yID0gaXNGaWxlTm90Rm91bmRFcnJvcjtcbmV4cG9ydHMuY3JlYXRlQ2FjaGVEaXJJZk5vdEV4aXN0cyA9IGNyZWF0ZUNhY2hlRGlySWZOb3RFeGlzdHM7XG5leHBvcnRzLndyaXRlQ2FjaGVGaWxlID0gd3JpdGVDYWNoZUZpbGU7XG5jb25zdCBwYXRoXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcInBhdGhcIikpO1xuY29uc3QgcHJvbWlzZXNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiZnMvcHJvbWlzZXNcIikpO1xuY29uc3Qgb3NfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwib3NcIikpO1xuLy8gTk9URTpcbi8vIEJlc2lkZXMgdGhpcyBmaWxlLCB0aGVyZSBhcmUgb3RoZXIgZW50cnlwb2ludHMgaW1wbGVtZW50aW5nIHJlYWRpbmcvd3JpdGluZyBjYWNoZSBmaWxlczpcbi8vIC0gZ2xvYmFsX2NvbmZpZy5qc1xuLy8gLSBhdXRoZW50aWNhdGlvbi9zZWN1cmVfc3RvcmFnZS9qc29uX2NyZWRlbnRpYWxfbWFuYWdlci5qc1xuLy9cbi8vIFdlIHNob3VsZCByZWZhY3RvciB0aGUgY29kZSBzbyBldmVyeSBwbGFjZSBpcyB1c2luZyB1dGlscyBmcm9tIHRoaXMgZmlsZVxuZnVuY3Rpb24gZ2V0RGVmYXVsdENhY2hlRGlyKCkge1xuICAgIHN3aXRjaCAocHJvY2Vzcy5wbGF0Zm9ybSkge1xuICAgICAgICBjYXNlICd3aW4zMic6XG4gICAgICAgICAgICByZXR1cm4gcGF0aF8xLmRlZmF1bHQuam9pbihvc18xLmRlZmF1bHQuaG9tZWRpcigpLCAnQXBwRGF0YScsICdMb2NhbCcsICdTbm93Zmxha2UnLCAnQ2FjaGVzJyk7XG4gICAgICAgIGNhc2UgJ2xpbnV4JzpcbiAgICAgICAgICAgIHJldHVybiBwYXRoXzEuZGVmYXVsdC5qb2luKG9zXzEuZGVmYXVsdC5ob21lZGlyKCksICcuY2FjaGUnLCAnc25vd2ZsYWtlJyk7XG4gICAgICAgIGNhc2UgJ2Rhcndpbic6XG4gICAgICAgICAgICByZXR1cm4gcGF0aF8xLmRlZmF1bHQuam9pbihvc18xLmRlZmF1bHQuaG9tZWRpcigpLCAnTGlicmFyeScpO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbnN1cHBvcnRlZCBwbGF0Zm9ybTogJHtwcm9jZXNzLnBsYXRmb3JtfWApO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGlzRmlsZU5vdEZvdW5kRXJyb3IoZXJyb3IpIHtcbiAgICByZXR1cm4gZXJyb3IgJiYgdHlwZW9mIGVycm9yID09PSAnb2JqZWN0JyAmJiAnY29kZScgaW4gZXJyb3IgJiYgZXJyb3IuY29kZSA9PT0gJ0VOT0VOVCc7XG59XG5hc3luYyBmdW5jdGlvbiBjcmVhdGVDYWNoZURpcklmTm90RXhpc3RzKGNhY2hlRGlyKSB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHsgcmVjdXJzaXZlOiB0cnVlIH07XG4gICAgaWYgKHByb2Nlc3MucGxhdGZvcm0gIT09ICd3aW4zMicpIHtcbiAgICAgICAgb3B0aW9ucy5tb2RlID0gMG83NTU7XG4gICAgfVxuICAgIGF3YWl0IHByb21pc2VzXzEuZGVmYXVsdC5ta2RpcihjYWNoZURpciwgb3B0aW9ucyk7XG4gICAgaWYgKHByb2Nlc3MucGxhdGZvcm0gIT09ICd3aW4zMicpIHtcbiAgICAgICAgYXdhaXQgcHJvbWlzZXNfMS5kZWZhdWx0LmNobW9kKGNhY2hlRGlyLCAwbzcwMCk7XG4gICAgfVxufVxuYXN5bmMgZnVuY3Rpb24gd3JpdGVDYWNoZUZpbGUoZmlsZVBhdGgsIGNvbnRlbnQpIHtcbiAgICBjb25zdCBkaXJOYW1lID0gcGF0aF8xLmRlZmF1bHQuZGlybmFtZShmaWxlUGF0aCk7XG4gICAgYXdhaXQgY3JlYXRlQ2FjaGVEaXJJZk5vdEV4aXN0cyhkaXJOYW1lKTtcbiAgICBhd2FpdCBwcm9taXNlc18xLmRlZmF1bHQud3JpdGVGaWxlKGZpbGVQYXRoLCBjb250ZW50KTtcbiAgICBpZiAocHJvY2Vzcy5wbGF0Zm9ybSAhPT0gJ3dpbjMyJykge1xuICAgICAgICBhd2FpdCBwcm9taXNlc18xLmRlZmF1bHQuY2htb2QoZmlsZVBhdGgsIDBvNjAwKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kaXNrX2NhY2hlLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/dist/lib/disk_cache.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/dist/lib/error_code.js":
/*!***********************************************************!*\
  !*** ./node_modules/snowflake-sdk/dist/lib/error_code.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nvar ErrorCode;\n(function (ErrorCode) {\n    ErrorCode[ErrorCode[\"ERR_INTERNAL_ASSERT_FAILED\"] = 400001] = \"ERR_INTERNAL_ASSERT_FAILED\";\n    ErrorCode[ErrorCode[\"ERR_UNSUPPORTED_NODE_JS_VERSION\"] = 400002] = \"ERR_UNSUPPORTED_NODE_JS_VERSION\";\n    // 401001\n    ErrorCode[ErrorCode[\"ERR_SF_NETWORK_COULD_NOT_CONNECT\"] = 401001] = \"ERR_SF_NETWORK_COULD_NOT_CONNECT\";\n    ErrorCode[ErrorCode[\"ERR_SF_RESPONSE_FAILURE\"] = 401002] = \"ERR_SF_RESPONSE_FAILURE\";\n    ErrorCode[ErrorCode[\"ERR_SF_RESPONSE_NOT_JSON\"] = 401003] = \"ERR_SF_RESPONSE_NOT_JSON\";\n    ErrorCode[ErrorCode[\"ERR_SF_RESPONSE_INVALID_TOKEN\"] = 401004] = \"ERR_SF_RESPONSE_INVALID_TOKEN\";\n    // 402001\n    ErrorCode[ErrorCode[\"ERR_LARGE_RESULT_SET_NETWORK_COULD_NOT_CONNECT\"] = 402001] = \"ERR_LARGE_RESULT_SET_NETWORK_COULD_NOT_CONNECT\";\n    ErrorCode[ErrorCode[\"ERR_LARGE_RESULT_SET_RESPONSE_FAILURE\"] = 402002] = \"ERR_LARGE_RESULT_SET_RESPONSE_FAILURE\";\n    // 403001\n    ErrorCode[ErrorCode[\"ERR_GLOBAL_CONFIGURE_INVALID_LOG_LEVEL\"] = 403001] = \"ERR_GLOBAL_CONFIGURE_INVALID_LOG_LEVEL\";\n    ErrorCode[ErrorCode[\"ERR_GLOBAL_CONFIGURE_INVALID_DISABLE_OCSP_CHECKS\"] = 403002] = \"ERR_GLOBAL_CONFIGURE_INVALID_DISABLE_OCSP_CHECKS\";\n    ErrorCode[ErrorCode[\"ERR_GLOBAL_CONFIGURE_INVALID_OCSP_MODE\"] = 403003] = \"ERR_GLOBAL_CONFIGURE_INVALID_OCSP_MODE\";\n    ErrorCode[ErrorCode[\"ERR_GLOBAL_CONFIGURE_INVALID_JSON_PARSER\"] = 403004] = \"ERR_GLOBAL_CONFIGURE_INVALID_JSON_PARSER\";\n    ErrorCode[ErrorCode[\"ERR_GLOBAL_CONFIGURE_INVALID_XML_PARSER\"] = 403005] = \"ERR_GLOBAL_CONFIGURE_INVALID_XML_PARSER\";\n    ErrorCode[ErrorCode[\"ERR_GLOBAL_CONFIGURE_INVALID_KEEP_ALIVE\"] = 403006] = \"ERR_GLOBAL_CONFIGURE_INVALID_KEEP_ALIVE\";\n    ErrorCode[ErrorCode[\"ERR_GLOBAL_CONFIGURE_INVALID_CUSTOM_CREDENTIAL_MANAGER\"] = 403007] = \"ERR_GLOBAL_CONFIGURE_INVALID_CUSTOM_CREDENTIAL_MANAGER\";\n    ErrorCode[ErrorCode[\"ERR_GLOBAL_CONFIGURE_INVALID_USE_ENV_PROXY\"] = 403008] = \"ERR_GLOBAL_CONFIGURE_INVALID_USE_ENV_PROXY\";\n    // 404001\n    ErrorCode[ErrorCode[\"ERR_CONN_CREATE_MISSING_OPTIONS\"] = 404001] = \"ERR_CONN_CREATE_MISSING_OPTIONS\";\n    ErrorCode[ErrorCode[\"ERR_CONN_CREATE_INVALID_OPTIONS\"] = 404002] = \"ERR_CONN_CREATE_INVALID_OPTIONS\";\n    ErrorCode[ErrorCode[\"ERR_CONN_CREATE_MISSING_USERNAME\"] = 404003] = \"ERR_CONN_CREATE_MISSING_USERNAME\";\n    ErrorCode[ErrorCode[\"ERR_CONN_CREATE_INVALID_USERNAME\"] = 404004] = \"ERR_CONN_CREATE_INVALID_USERNAME\";\n    ErrorCode[ErrorCode[\"ERR_CONN_CREATE_MISSING_PASSWORD\"] = 404005] = \"ERR_CONN_CREATE_MISSING_PASSWORD\";\n    ErrorCode[ErrorCode[\"ERR_CONN_CREATE_INVALID_PASSWORD\"] = 404006] = \"ERR_CONN_CREATE_INVALID_PASSWORD\";\n    ErrorCode[ErrorCode[\"ERR_CONN_CREATE_MISSING_ACCOUNT\"] = 404007] = \"ERR_CONN_CREATE_MISSING_ACCOUNT\";\n    ErrorCode[ErrorCode[\"ERR_CONN_CREATE_INVALID_ACCOUNT\"] = 404008] = \"ERR_CONN_CREATE_INVALID_ACCOUNT\";\n    ErrorCode[ErrorCode[\"ERR_CONN_CREATE_MISSING_ACCESS_URL\"] = 404009] = \"ERR_CONN_CREATE_MISSING_ACCESS_URL\";\n    ErrorCode[ErrorCode[\"ERR_CONN_CREATE_INVALID_ACCESS_URL\"] = 404010] = \"ERR_CONN_CREATE_INVALID_ACCESS_URL\";\n    ErrorCode[ErrorCode[\"ERR_CONN_CREATE_INVALID_WAREHOUSE\"] = 404011] = \"ERR_CONN_CREATE_INVALID_WAREHOUSE\";\n    ErrorCode[ErrorCode[\"ERR_CONN_CREATE_INVALID_DATABASE\"] = 404012] = \"ERR_CONN_CREATE_INVALID_DATABASE\";\n    ErrorCode[ErrorCode[\"ERR_CONN_CREATE_INVALID_SCHEMA\"] = 404013] = \"ERR_CONN_CREATE_INVALID_SCHEMA\";\n    ErrorCode[ErrorCode[\"ERR_CONN_CREATE_INVALID_ROLE\"] = 404014] = \"ERR_CONN_CREATE_INVALID_ROLE\";\n    ErrorCode[ErrorCode[\"ERR_CONN_CREATE_MISSING_PROXY_HOST\"] = 404015] = \"ERR_CONN_CREATE_MISSING_PROXY_HOST\";\n    ErrorCode[ErrorCode[\"ERR_CONN_CREATE_INVALID_PROXY_HOST\"] = 404016] = \"ERR_CONN_CREATE_INVALID_PROXY_HOST\";\n    ErrorCode[ErrorCode[\"ERR_CONN_CREATE_MISSING_PROXY_PORT\"] = 404017] = \"ERR_CONN_CREATE_MISSING_PROXY_PORT\";\n    ErrorCode[ErrorCode[\"ERR_CONN_CREATE_INVALID_PROXY_PORT\"] = 404018] = \"ERR_CONN_CREATE_INVALID_PROXY_PORT\";\n    ErrorCode[ErrorCode[\"ERR_CONN_CREATE_INVALID_STREAM_RESULT\"] = 404019] = \"ERR_CONN_CREATE_INVALID_STREAM_RESULT\";\n    ErrorCode[ErrorCode[\"ERR_CONN_CREATE_INVALID_FETCH_AS_STRING\"] = 404020] = \"ERR_CONN_CREATE_INVALID_FETCH_AS_STRING\";\n    ErrorCode[ErrorCode[\"ERR_CONN_CREATE_INVALID_FETCH_AS_STRING_VALUES\"] = 404021] = \"ERR_CONN_CREATE_INVALID_FETCH_AS_STRING_VALUES\";\n    ErrorCode[ErrorCode[\"ERR_CONN_CREATE_INVALID_REGION\"] = 404022] = \"ERR_CONN_CREATE_INVALID_REGION\";\n    ErrorCode[ErrorCode[\"ERR_CONN_CREATE_INVALID_KEEP_ALIVE\"] = 404023] = \"ERR_CONN_CREATE_INVALID_KEEP_ALIVE\";\n    ErrorCode[ErrorCode[\"ERR_CONN_CREATE_INVALID_KEEP_ALIVE_HEARTBEAT_FREQ\"] = 404024] = \"ERR_CONN_CREATE_INVALID_KEEP_ALIVE_HEARTBEAT_FREQ\";\n    ErrorCode[ErrorCode[\"ERR_CONN_CREATE_INVALID_TREAT_INTEGER_AS_BIGINT\"] = 404025] = \"ERR_CONN_CREATE_INVALID_TREAT_INTEGER_AS_BIGINT\";\n    ErrorCode[ErrorCode[\"ERR_CONN_CREATE_INVALID_PRIVATE_KEY\"] = 404026] = \"ERR_CONN_CREATE_INVALID_PRIVATE_KEY\";\n    ErrorCode[ErrorCode[\"ERR_CONN_CREATE_INVALID_PRIVATE_KEY_PATH\"] = 404027] = \"ERR_CONN_CREATE_INVALID_PRIVATE_KEY_PATH\";\n    ErrorCode[ErrorCode[\"ERR_CONN_CREATE_INVALID_PRIVATE_KEY_PASS\"] = 404028] = \"ERR_CONN_CREATE_INVALID_PRIVATE_KEY_PASS\";\n    ErrorCode[ErrorCode[\"ERR_CONN_CREATE_INVALID_OAUTH_TOKEN\"] = 404029] = \"ERR_CONN_CREATE_INVALID_OAUTH_TOKEN\";\n    ErrorCode[ErrorCode[\"ERR_CONN_CREATE_INVALID_VALIDATE_DEFAULT_PARAMETERS\"] = 404030] = \"ERR_CONN_CREATE_INVALID_VALIDATE_DEFAULT_PARAMETERS\";\n    ErrorCode[ErrorCode[\"ERR_CONN_CREATE_INVALID_APPLICATION\"] = 404031] = \"ERR_CONN_CREATE_INVALID_APPLICATION\";\n    ErrorCode[ErrorCode[\"ERR_CONN_CREATE_MISSING_PROXY_USER\"] = 404032] = \"ERR_CONN_CREATE_MISSING_PROXY_USER\";\n    ErrorCode[ErrorCode[\"ERR_CONN_CREATE_INVALID_PROXY_USER\"] = 404033] = \"ERR_CONN_CREATE_INVALID_PROXY_USER\";\n    ErrorCode[ErrorCode[\"ERR_CONN_CREATE_MISSING_PROXY_PASS\"] = 404034] = \"ERR_CONN_CREATE_MISSING_PROXY_PASS\";\n    ErrorCode[ErrorCode[\"ERR_CONN_CREATE_INVALID_PROXY_PASS\"] = 404035] = \"ERR_CONN_CREATE_INVALID_PROXY_PASS\";\n    ErrorCode[ErrorCode[\"ERR_CONN_CREATE_INVALID_NO_PROXY\"] = 404036] = \"ERR_CONN_CREATE_INVALID_NO_PROXY\";\n    ErrorCode[ErrorCode[\"ERR_CONN_CREATE_INVALID_ARRAY_BINDING_THRESHOLD\"] = 404037] = \"ERR_CONN_CREATE_INVALID_ARRAY_BINDING_THRESHOLD\";\n    ErrorCode[ErrorCode[\"ERR_CONN_CREATE_INVALID_GCS_USE_DOWNSCOPED_CREDENTIAL\"] = 404038] = \"ERR_CONN_CREATE_INVALID_GCS_USE_DOWNSCOPED_CREDENTIAL\";\n    ErrorCode[ErrorCode[\"ERR_CONN_CREATE_INVALID_FORCE_STAGE_BIND_ERROR\"] = 404039] = \"ERR_CONN_CREATE_INVALID_FORCE_STAGE_BIND_ERROR\";\n    ErrorCode[ErrorCode[\"ERR_CONN_CREATE_INVALID_BROWSER_TIMEOUT\"] = 404040] = \"ERR_CONN_CREATE_INVALID_BROWSER_TIMEOUT\";\n    ErrorCode[ErrorCode[\"ERR_CONN_CREATE_INVALID_DISABLED_QUERY_CONTEXT_CACHE\"] = 404041] = \"ERR_CONN_CREATE_INVALID_DISABLED_QUERY_CONTEXT_CACHE\";\n    ErrorCode[ErrorCode[\"ERR_CONN_CREATE_INVALID_INCLUDE_RETRY_REASON\"] = 404042] = \"ERR_CONN_CREATE_INVALID_INCLUDE_RETRY_REASON\";\n    ErrorCode[ErrorCode[\"ERR_CONN_CREATE_INVALID_CLIENT_CONFIG_FILE\"] = 404043] = \"ERR_CONN_CREATE_INVALID_CLIENT_CONFIG_FILE\";\n    ErrorCode[ErrorCode[\"ERR_CONN_CREATE_INVALID_RETRY_TIMEOUT\"] = 404044] = \"ERR_CONN_CREATE_INVALID_RETRY_TIMEOUT\";\n    ErrorCode[ErrorCode[\"ERR_CONN_CREATE_INVALID_ACCOUNT_REGEX\"] = 404045] = \"ERR_CONN_CREATE_INVALID_ACCOUNT_REGEX\";\n    ErrorCode[ErrorCode[\"ERR_CONN_CREATE_INVALID_REGION_REGEX\"] = 404046] = \"ERR_CONN_CREATE_INVALID_REGION_REGEX\";\n    ErrorCode[ErrorCode[\"ERR_CONN_CREATE_INVALID_DISABLE_CONSOLE_LOGIN\"] = 404047] = \"ERR_CONN_CREATE_INVALID_DISABLE_CONSOLE_LOGIN\";\n    ErrorCode[ErrorCode[\"ERR_CONN_CREATE_INVALID_FORCE_GCP_USE_DOWNSCOPED_CREDENTIAL\"] = 404048] = \"ERR_CONN_CREATE_INVALID_FORCE_GCP_USE_DOWNSCOPED_CREDENTIAL\";\n    ErrorCode[ErrorCode[\"ERR_CONN_CREATE_INVALID_CLIENT_STORE_TEMPORARY_CREDENTIAL\"] = 404049] = \"ERR_CONN_CREATE_INVALID_CLIENT_STORE_TEMPORARY_CREDENTIAL\";\n    ErrorCode[ErrorCode[\"ERR_CONN_CREATE_INVALID_REPRESENT_NULL_AS_STRING_NULL\"] = 404050] = \"ERR_CONN_CREATE_INVALID_REPRESENT_NULL_AS_STRING_NULL\";\n    ErrorCode[ErrorCode[\"ERR_CONN_CREATE_INVALID_DISABLE_SAML_URL_CHECK\"] = 404051] = \"ERR_CONN_CREATE_INVALID_DISABLE_SAML_URL_CHECK\";\n    ErrorCode[ErrorCode[\"ERR_CONN_CREATE_INVALID_CLIENT_REQUEST_MFA_TOKEN\"] = 404052] = \"ERR_CONN_CREATE_INVALID_CLIENT_REQUEST_MFA_TOKEN\";\n    ErrorCode[ErrorCode[\"ERR_CONN_CREATE_MISSING_HOST\"] = 404053] = \"ERR_CONN_CREATE_MISSING_HOST\";\n    ErrorCode[ErrorCode[\"ERR_CONN_CREATE_INVALID_HOST\"] = 404054] = \"ERR_CONN_CREATE_INVALID_HOST\";\n    ErrorCode[ErrorCode[\"ERR_CONN_CREATE_INVALID_PASSCODE_IN_PASSWORD\"] = 404055] = \"ERR_CONN_CREATE_INVALID_PASSCODE_IN_PASSWORD\";\n    ErrorCode[ErrorCode[\"ERR_CONN_CREATE_INVALID_PASSCODE\"] = 404056] = \"ERR_CONN_CREATE_INVALID_PASSCODE\";\n    ErrorCode[ErrorCode[\"ERR_CONN_CREATE_MISSING_PASSWORD_AND_TOKEN\"] = 404057] = \"ERR_CONN_CREATE_MISSING_PASSWORD_AND_TOKEN\";\n    ErrorCode[ErrorCode[\"ERR_CONN_CREATE_INVALID_OUATH_AUTHORIZATION_URL\"] = 404058] = \"ERR_CONN_CREATE_INVALID_OUATH_AUTHORIZATION_URL\";\n    ErrorCode[ErrorCode[\"ERR_CONN_CREATE_INVALID_OUATH_CLIENT_ID\"] = 404059] = \"ERR_CONN_CREATE_INVALID_OUATH_CLIENT_ID\";\n    ErrorCode[ErrorCode[\"ERR_CONN_CREATE_INVALID_OUATH_CLIENT_SECRET\"] = 404060] = \"ERR_CONN_CREATE_INVALID_OUATH_CLIENT_SECRET\";\n    ErrorCode[ErrorCode[\"ERR_CONN_CREATE_INVALID_OUATH_TOKEN_REQUEST_URL\"] = 404061] = \"ERR_CONN_CREATE_INVALID_OUATH_TOKEN_REQUEST_URL\";\n    ErrorCode[ErrorCode[\"ERR_CONN_CREATE_INVALID_WORKLOAD_IDENTITY_PARAMETERS\"] = 404062] = \"ERR_CONN_CREATE_INVALID_WORKLOAD_IDENTITY_PARAMETERS\";\n    ErrorCode[ErrorCode[\"ERR_CONN_CREATE_INVALID_QUERY_TAG\"] = 404063] = \"ERR_CONN_CREATE_INVALID_QUERY_TAG\";\n    // 405001\n    ErrorCode[ErrorCode[\"ERR_CONN_CONNECT_INVALID_CALLBACK\"] = 405001] = \"ERR_CONN_CONNECT_INVALID_CALLBACK\";\n    // 405501\n    ErrorCode[ErrorCode[\"ERR_CONN_CONNECT_STATUS_CONNECTING\"] = 405501] = \"ERR_CONN_CONNECT_STATUS_CONNECTING\";\n    ErrorCode[ErrorCode[\"ERR_CONN_CONNECT_STATUS_CONNECTED\"] = 405502] = \"ERR_CONN_CONNECT_STATUS_CONNECTED\";\n    ErrorCode[ErrorCode[\"ERR_CONN_CONNECT_STATUS_DISCONNECTED\"] = 405503] = \"ERR_CONN_CONNECT_STATUS_DISCONNECTED\";\n    ErrorCode[ErrorCode[\"ERR_CONN_CREATE_INVALID_AUTH_CONNECT\"] = 405504] = \"ERR_CONN_CREATE_INVALID_AUTH_CONNECT\";\n    ErrorCode[ErrorCode[\"ERR_CONN_CONNECT_INVALID_CLIENT_CONFIG\"] = 405505] = \"ERR_CONN_CONNECT_INVALID_CLIENT_CONFIG\";\n    ErrorCode[ErrorCode[\"ERR_CONN_CREATE_INVALID_AUTH_UNSUPPORTED\"] = 405506] = \"ERR_CONN_CREATE_INVALID_AUTH_UNSUPPORTED\";\n    ErrorCode[ErrorCode[\"ERR_CONN_CREATE_AUTH_NOT_ALLOWED\"] = 405507] = \"ERR_CONN_CREATE_AUTH_NOT_ALLOWED\";\n    // 406001\n    ErrorCode[ErrorCode[\"ERR_CONN_DESTROY_INVALID_CALLBACK\"] = 406001] = \"ERR_CONN_DESTROY_INVALID_CALLBACK\";\n    // 406501\n    ErrorCode[ErrorCode[\"ERR_CONN_DESTROY_STATUS_PRISTINE\"] = 406501] = \"ERR_CONN_DESTROY_STATUS_PRISTINE\";\n    ErrorCode[ErrorCode[\"ERR_CONN_DESTROY_STATUS_DISCONNECTED\"] = 406502] = \"ERR_CONN_DESTROY_STATUS_DISCONNECTED\";\n    // 407001\n    ErrorCode[ErrorCode[\"ERR_CONN_REQUEST_STATUS_PRISTINE\"] = 407001] = \"ERR_CONN_REQUEST_STATUS_PRISTINE\";\n    ErrorCode[ErrorCode[\"ERR_CONN_REQUEST_STATUS_DISCONNECTED\"] = 407002] = \"ERR_CONN_REQUEST_STATUS_DISCONNECTED\";\n    // 408001\n    ErrorCode[ErrorCode[\"ERR_CONN_DESERIALIZE_MISSING_CONFIG\"] = 408001] = \"ERR_CONN_DESERIALIZE_MISSING_CONFIG\";\n    ErrorCode[ErrorCode[\"ERR_CONN_DESERIALIZE_INVALID_CONFIG_TYPE\"] = 408002] = \"ERR_CONN_DESERIALIZE_INVALID_CONFIG_TYPE\";\n    ErrorCode[ErrorCode[\"ERR_CONN_DESERIALIZE_INVALID_CONFIG_FORM\"] = 408003] = \"ERR_CONN_DESERIALIZE_INVALID_CONFIG_FORM\";\n    // 409001\n    ErrorCode[ErrorCode[\"ERR_CONN_EXEC_STMT_MISSING_OPTIONS\"] = 409001] = \"ERR_CONN_EXEC_STMT_MISSING_OPTIONS\";\n    ErrorCode[ErrorCode[\"ERR_CONN_EXEC_STMT_INVALID_OPTIONS\"] = 409002] = \"ERR_CONN_EXEC_STMT_INVALID_OPTIONS\";\n    ErrorCode[ErrorCode[\"ERR_CONN_EXEC_STMT_MISSING_SQL_TEXT\"] = 409003] = \"ERR_CONN_EXEC_STMT_MISSING_SQL_TEXT\";\n    ErrorCode[ErrorCode[\"ERR_CONN_EXEC_STMT_INVALID_SQL_TEXT\"] = 409004] = \"ERR_CONN_EXEC_STMT_INVALID_SQL_TEXT\";\n    ErrorCode[ErrorCode[\"ERR_CONN_EXEC_STMT_INVALID_INTERNAL\"] = 409005] = \"ERR_CONN_EXEC_STMT_INVALID_INTERNAL\";\n    ErrorCode[ErrorCode[\"ERR_CONN_EXEC_STMT_INVALID_PARAMETERS\"] = 409006] = \"ERR_CONN_EXEC_STMT_INVALID_PARAMETERS\";\n    ErrorCode[ErrorCode[\"ERR_CONN_EXEC_STMT_INVALID_BINDS\"] = 409007] = \"ERR_CONN_EXEC_STMT_INVALID_BINDS\";\n    ErrorCode[ErrorCode[\"ERR_CONN_EXEC_STMT_INVALID_BIND_VALUES\"] = 409008] = \"ERR_CONN_EXEC_STMT_INVALID_BIND_VALUES\";\n    ErrorCode[ErrorCode[\"ERR_CONN_EXEC_STMT_INVALID_COMPLETE\"] = 409009] = \"ERR_CONN_EXEC_STMT_INVALID_COMPLETE\";\n    ErrorCode[ErrorCode[\"ERR_CONN_EXEC_STMT_INVALID_STREAM_RESULT\"] = 409010] = \"ERR_CONN_EXEC_STMT_INVALID_STREAM_RESULT\";\n    ErrorCode[ErrorCode[\"ERR_CONN_EXEC_STMT_INVALID_FETCH_AS_STRING\"] = 409011] = \"ERR_CONN_EXEC_STMT_INVALID_FETCH_AS_STRING\";\n    ErrorCode[ErrorCode[\"ERR_CONN_EXEC_STMT_INVALID_FETCH_AS_STRING_VALUES\"] = 409012] = \"ERR_CONN_EXEC_STMT_INVALID_FETCH_AS_STRING_VALUES\";\n    ErrorCode[ErrorCode[\"ERR_CONN_EXEC_STMT_INVALID_REQUEST_ID\"] = 409013] = \"ERR_CONN_EXEC_STMT_INVALID_REQUEST_ID\";\n    ErrorCode[ErrorCode[\"ERR_CONN_EXEC_STMT_INVALID_ASYNC_EXEC\"] = 409014] = \"ERR_CONN_EXEC_STMT_INVALID_ASYNC_EXEC\";\n    ErrorCode[ErrorCode[\"ERR_CONN_EXEC_STMT_INVALID_DESCRIBE_ONLY\"] = 409015] = \"ERR_CONN_EXEC_STMT_INVALID_DESCRIBE_ONLY\";\n    // 410001\n    ErrorCode[ErrorCode[\"ERR_CONN_FETCH_RESULT_MISSING_OPTIONS\"] = 410001] = \"ERR_CONN_FETCH_RESULT_MISSING_OPTIONS\";\n    ErrorCode[ErrorCode[\"ERR_CONN_FETCH_RESULT_INVALID_OPTIONS\"] = 410002] = \"ERR_CONN_FETCH_RESULT_INVALID_OPTIONS\";\n    ErrorCode[ErrorCode[\"ERR_CONN_FETCH_RESULT_MISSING_QUERY_ID\"] = 410003] = \"ERR_CONN_FETCH_RESULT_MISSING_QUERY_ID\";\n    ErrorCode[ErrorCode[\"ERR_CONN_FETCH_RESULT_INVALID_QUERY_ID\"] = 410004] = \"ERR_CONN_FETCH_RESULT_INVALID_QUERY_ID\";\n    ErrorCode[ErrorCode[\"ERR_CONN_FETCH_RESULT_INVALID_COMPLETE\"] = 410005] = \"ERR_CONN_FETCH_RESULT_INVALID_COMPLETE\";\n    ErrorCode[ErrorCode[\"ERR_CONN_FETCH_RESULT_INVALID_STREAM_RESULT\"] = 410006] = \"ERR_CONN_FETCH_RESULT_INVALID_STREAM_RESULT\";\n    ErrorCode[ErrorCode[\"ERR_CONN_FETCH_RESULT_INVALID_FETCH_AS_STRING\"] = 410007] = \"ERR_CONN_FETCH_RESULT_INVALID_FETCH_AS_STRING\";\n    ErrorCode[ErrorCode[\"ERR_CONN_FETCH_RESULT_INVALID_FETCH_AS_STRING_VALUES\"] = 410008] = \"ERR_CONN_FETCH_RESULT_INVALID_FETCH_AS_STRING_VALUES\";\n    ErrorCode[ErrorCode[\"ERR_CONN_FETCH_RESULT_INVALID_CWD\"] = 410009] = \"ERR_CONN_FETCH_RESULT_INVALID_CWD\";\n    // 411001\n    ErrorCode[ErrorCode[\"ERR_STMT_STREAM_ROWS_INVALID_OPTIONS\"] = 411001] = \"ERR_STMT_STREAM_ROWS_INVALID_OPTIONS\";\n    ErrorCode[ErrorCode[\"ERR_STMT_STREAM_ROWS_INVALID_START\"] = 411002] = \"ERR_STMT_STREAM_ROWS_INVALID_START\";\n    ErrorCode[ErrorCode[\"ERR_STMT_STREAM_ROWS_INVALID_END\"] = 411003] = \"ERR_STMT_STREAM_ROWS_INVALID_END\";\n    ErrorCode[ErrorCode[\"ERR_STMT_STREAM_ROWS_INVALID_FETCH_AS_STRING\"] = 411004] = \"ERR_STMT_STREAM_ROWS_INVALID_FETCH_AS_STRING\";\n    ErrorCode[ErrorCode[\"ERR_STMT_STREAM_ROWS_INVALID_FETCH_AS_STRING_VALUES\"] = 411005] = \"ERR_STMT_STREAM_ROWS_INVALID_FETCH_AS_STRING_VALUES\";\n    ErrorCode[ErrorCode[\"ERR_STMT_STREAM_ROWS_INVALID_ROW_MODE\"] = 411006] = \"ERR_STMT_STREAM_ROWS_INVALID_ROW_MODE\";\n    // 412001\n    ErrorCode[ErrorCode[\"ERR_OCSP_REVOKED\"] = 412001] = \"ERR_OCSP_REVOKED\";\n    ErrorCode[ErrorCode[\"ERR_OCSP_UNKNOWN\"] = 412002] = \"ERR_OCSP_UNKNOWN\";\n    ErrorCode[ErrorCode[\"ERR_OCSP_NO_SIGNATURE_ALGORITHM\"] = 412003] = \"ERR_OCSP_NO_SIGNATURE_ALGORITHM\";\n    ErrorCode[ErrorCode[\"ERR_OCSP_INVALID_SIGNATURE\"] = 412004] = \"ERR_OCSP_INVALID_SIGNATURE\";\n    ErrorCode[ErrorCode[\"ERR_OCSP_NO_RESPONSE\"] = 412005] = \"ERR_OCSP_NO_RESPONSE\";\n    ErrorCode[ErrorCode[\"ERR_OCSP_INVALID_VALIDITY\"] = 412006] = \"ERR_OCSP_INVALID_VALIDITY\";\n    ErrorCode[ErrorCode[\"ERR_OCSP_UNKNOWN_STATE\"] = 412007] = \"ERR_OCSP_UNKNOWN_STATE\";\n    ErrorCode[ErrorCode[\"ERR_OCSP_NOT_TWO_ELEMENTS\"] = 412008] = \"ERR_OCSP_NOT_TWO_ELEMENTS\";\n    ErrorCode[ErrorCode[\"ERR_OCSP_CACHE_EXPIRED\"] = 412009] = \"ERR_OCSP_CACHE_EXPIRED\";\n    ErrorCode[ErrorCode[\"ERR_OCSP_FAILED_PARSE_RESPONSE\"] = 412010] = \"ERR_OCSP_FAILED_PARSE_RESPONSE\";\n    ErrorCode[ErrorCode[\"ERR_OCSP_INVALID_CERTIFICATE_VALIDITY\"] = 412011] = \"ERR_OCSP_INVALID_CERTIFICATE_VALIDITY\";\n    ErrorCode[ErrorCode[\"ERR_OCSP_RESPONDER_TIMEOUT\"] = 412012] = \"ERR_OCSP_RESPONDER_TIMEOUT\";\n    ErrorCode[ErrorCode[\"ERR_OCSP_CACHE_SERVER_TIMEOUT\"] = 412013] = \"ERR_OCSP_CACHE_SERVER_TIMEOUT\";\n    ErrorCode[ErrorCode[\"ERR_OCSP_FAILED_OBTAIN_OCSP_RESPONSE\"] = 412014] = \"ERR_OCSP_FAILED_OBTAIN_OCSP_RESPONSE\";\n    ErrorCode[ErrorCode[\"ERR_CRL_ERROR\"] = 413001] = \"ERR_CRL_ERROR\";\n    // 450001\n    ErrorCode[ErrorCode[\"ERR_STMT_FETCH_ROWS_MISSING_OPTIONS\"] = 450001] = \"ERR_STMT_FETCH_ROWS_MISSING_OPTIONS\";\n    ErrorCode[ErrorCode[\"ERR_STMT_FETCH_ROWS_INVALID_OPTIONS\"] = 450002] = \"ERR_STMT_FETCH_ROWS_INVALID_OPTIONS\";\n    ErrorCode[ErrorCode[\"ERR_STMT_FETCH_ROWS_MISSING_EACH\"] = 450003] = \"ERR_STMT_FETCH_ROWS_MISSING_EACH\";\n    ErrorCode[ErrorCode[\"ERR_STMT_FETCH_ROWS_INVALID_EACH\"] = 450004] = \"ERR_STMT_FETCH_ROWS_INVALID_EACH\";\n    ErrorCode[ErrorCode[\"ERR_STMT_FETCH_ROWS_MISSING_END\"] = 450005] = \"ERR_STMT_FETCH_ROWS_MISSING_END\";\n    ErrorCode[ErrorCode[\"ERR_STMT_FETCH_ROWS_INVALID_END\"] = 450006] = \"ERR_STMT_FETCH_ROWS_INVALID_END\";\n    ErrorCode[ErrorCode[\"ERR_STMT_FETCH_ROWS_FETCHING_RESULT\"] = 450007] = \"ERR_STMT_FETCH_ROWS_FETCHING_RESULT\";\n    // 460001\n    ErrorCode[ErrorCode[\"ERR_GET_RESPONSE_QUERY_INVALID_UUID\"] = 460001] = \"ERR_GET_RESPONSE_QUERY_INVALID_UUID\";\n    ErrorCode[ErrorCode[\"ERR_GET_RESULTS_QUERY_ID_NO_DATA\"] = 460002] = \"ERR_GET_RESULTS_QUERY_ID_NO_DATA\";\n    ErrorCode[ErrorCode[\"ERR_GET_RESULTS_QUERY_ID_NOT_SUCCESS_STATUS\"] = 460003] = \"ERR_GET_RESULTS_QUERY_ID_NOT_SUCCESS_STATUS\";\n})(ErrorCode || (ErrorCode = {}));\nexports[\"default\"] = ErrorCode;\n//# sourceMappingURL=error_code.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/dist/lib/error_code.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/dist/lib/errors.js":
/*!*******************************************************!*\
  !*** ./node_modules/snowflake-sdk/dist/lib/errors.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nconst Util = __webpack_require__(/*! ./util */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/util.js\");\nconst errorMessages = __webpack_require__(/*! ./constants/error_messages */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/constants/error_messages.js\");\nconst ErrorCode = (__webpack_require__(/*! ./error_code */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/error_code.js\")[\"default\"]);\n/**\n * @deprecated Use `ErrorCode` instead\n */\nexports.codes = ErrorCode;\nexports.ErrorCode = ErrorCode;\n/**\n * A map in which the keys are the error codes and the values are the\n * corresponding SQL-states.\n */\nconst errCodeToSqlState = (exports.mapErrorCodeToSqlState = {\n    405501: '08002',\n    405502: '08002',\n    405503: '08003',\n    407001: '08003',\n    407002: '08003',\n});\n/**\n * An enumeration of all the different types of errors we create.\n */\nconst errorTypes = {\n    // internal synchronous errors\n    InternalAssertError: 'InternalAssertError',\n    // external synchronous errors\n    MissingParameterError: 'MissingParameterError',\n    InvalidParameterError: 'InvalidParameterError',\n    // external asynchronous errors\n    NetworkError: 'NetworkError',\n    RequestFailedError: 'RequestFailedError',\n    UnexpectedContentError: 'UnexpectedContentError',\n    OperationFailedError: 'OperationFailedError',\n    LargeResultSetError: 'LargeResultSetError',\n    ClientError: 'ClientError',\n    OCSPError: 'OCSPError',\n    CRLError: 'CRLError',\n};\n/**\n * Ensures the truth of an expression. Used to catch internal programming\n * errors. If the given expression is false, an InternalAssertError will be\n * thrown.\n *\n * @param {Boolean} expression a boolean expression.\n * @param {String} [message] a message for the error should the check fail.\n */\nexports.assertInternal = function (expression, message) {\n    if (!expression) {\n        throw createError(errorTypes.InternalAssertError, {\n            code: ErrorCode.ERR_INTERNAL_ASSERT_FAILED,\n            message: message,\n            synchronous: true,\n        });\n    }\n};\n// TODO:\n// Consider removing MissingParameterError + checkArgumentExits + checkArgumentValid\n// to reduce amount of error types we have. Use createInvalidParameterError instead.\n/**\n * Ensures the truth of an expression. Used to make sure all required arguments\n * are passed in to a method. If the specified expression is false, a\n * MissingParameterError will be thrown.\n *\n * @param {Boolean} expression a boolean expression.\n * @param {Number} errorCode a code for the error should the check fail.\n *\n * @throws will throw an MissingParameter error if the expression is false.\n */\nexports.checkArgumentExists = function (expression, errorCode) {\n    if (!expression) {\n        throw createError(errorTypes.MissingParameterError, {\n            code: errorCode,\n            messageArgs: Array.prototype.slice.call(arguments, 2),\n            synchronous: true,\n        });\n    }\n};\n/**\n * Ensures the truth of an expression. Used for validating arguments to methods.\n * If the specified expression is false, an InvalidParameterError will be\n * thrown.\n *\n * @param {Boolean} expression a boolean expression.\n * @param {Number} errorCode a code for the error should the check fail.\n *\n * @throws will throw an InvalidParameter error if the expression is false.\n */\nexports.checkArgumentValid = function (expression, errorCode) {\n    if (!expression) {\n        throw createError(errorTypes.InvalidParameterError, {\n            code: errorCode,\n            messageArgs: Array.prototype.slice.call(arguments, 2),\n            synchronous: true,\n        });\n    }\n};\n/**\n * Creates a new InvalidParameterError.\n *\n * @param {Number} errorCode the error code to use when building the error.\n * @param {messageArgs} array of error massages\n * @returns {Error}\n */\nexports.createInvalidParameterError = function (errorCode, ...messageArgs) {\n    return createError(errorTypes.InvalidParameterError, {\n        code: errorCode,\n        messageArgs: messageArgs,\n        synchronous: true,\n    });\n};\n/**\n * Creates a new NetworkError.\n *\n * @param {Number} errorCode the error code to use when building the error.\n * @param {Error} cause the underlying cause of the network error.\n *\n * @returns {Error}\n */\nexports.createNetworkError = function (errorCode, cause) {\n    return createError(errorTypes.NetworkError, {\n        code: errorCode,\n        cause: cause,\n    });\n};\n/**\n * Creates a new RequestFailedError.\n *\n * @param {Number} errorCode the error code to use when building the error.\n * @param {Object} response the response sent by Global Services.\n *\n * @returns {Error}\n */\nexports.createRequestFailedError = function (errorCode, response) {\n    return createError(errorTypes.RequestFailedError, {\n        code: errorCode,\n        response: response,\n    });\n};\n/**\n * Creates a new UnexpectedContentError.\n *\n * @param {Number} errorCode the error code to use when building the error.\n * @param {String} responseBody the response body sent by Global Services.\n *\n * @returns {Error}\n */\nexports.createUnexpectedContentError = function (errorCode, responseBody) {\n    return createError(errorTypes.UnexpectedContentError, {\n        code: errorCode,\n        responseBody: responseBody,\n    });\n};\n/**\n * Creates a new OperationFailedError.\n *\n * @param {Number} errorCode the error code to use when building the error.\n * @param {Object} data the data sent by Global Services.\n * @param {String} message the error message sent by Global Services.\n * @param {String} sqlState the sql state sent by Global Services.\n *\n * @returns {Error}\n */\nexports.createOperationFailedError = function (errorCode, data, message, sqlState) {\n    return createError(errorTypes.OperationFailedError, {\n        code: errorCode,\n        data: data,\n        message: message,\n        sqlState: sqlState,\n    });\n};\n/**\n * Creates a new LargeResultSetError.\n *\n * @param {Number} errorCode the error code to use when building the error.\n * @param {Object} response the response sent by S3/Blob.\n *\n * @returns {Error}\n */\nexports.createLargeResultSetError = function (errorCode, response) {\n    return createError(errorTypes.LargeResultSetError, {\n        code: errorCode,\n        response: response,\n    });\n};\n/**\n * Creates a new ClientError.\n *\n * @param {Number} errorCode the error code to use when building the error.\n * @param {Object} [isFatal] whether the error is fatal.\n *\n * @return {Error}\n */\nexports.createClientError = function (errorCode, isFatal) {\n    return createError(errorTypes.ClientError, {\n        code: errorCode,\n        isFatal: isFatal,\n        messageArgs: Array.prototype.slice.call(arguments, 2),\n    });\n};\n/**\n * Creates a OCSPError\n *\n * @param {Number} errorCode the error code to use when building the error.\n * @param {String} message\n * @returns {Error}\n */\nexports.createOCSPError = function (errorCode) {\n    return createError(errorTypes.OCSPError, {\n        code: errorCode,\n        messageArgs: Array.prototype.slice.call(arguments, 1),\n    });\n};\n/**\n * Wraps an error into CrlError. Allows to catch any errors coming from CRL validation.\n *\n * @param {Error} originalError\n * @returns {Error}\n */\nexports.createCrlError = function (originalError) {\n    const error = createError(errorTypes.CRLError, {\n        code: ErrorCode.ERR_CRL_ERROR,\n        cause: originalError,\n    });\n    return error;\n};\n/**\n * Creates a new error by combining the error messages from the json parser and xml parser\n *\n * @param {Object} jsonParseError contains the JSON parse error message\n * @param {Object} xmlParseError contains the XML parse error message\n * @returns {Error}\n */\nexports.VariantParseError = function (jsonParseError, xmlParseError) {\n    const errMessage = 'VariantParseError: Variant cannot be parsed neither as JSON nor as XML:\\n' +\n        ` - JSON parse error message: ${jsonParseError.message}\\n` +\n        ` - XML parse error message: ${xmlParseError.message}`;\n    return new Error(errMessage);\n};\n/**\n * Determines if a given error is an InternalAssertError.\n *\n * @param {Error} error\n *\n * @returns {Boolean}\n */\nexports.isInternalAssertError = function (error) {\n    return isErrorOfType(error, errorTypes.InternalAssertError);\n};\n/**\n * Determines if a given error is a MissingParameterError.\n *\n * @param {Error} error\n *\n * @returns {Boolean}\n */\nexports.isMissingParameterError = function (error) {\n    return isErrorOfType(error, errorTypes.MissingParameterError);\n};\n/**\n * Determines if a given error is an InvalidParameterError.\n *\n * @param {Error} error\n *\n * @returns {Boolean}\n */\nexports.isInvalidParameterError = function (error) {\n    return isErrorOfType(error, errorTypes.InvalidParameterError);\n};\n/**\n * Determines if a given error is a NetworkError.\n *\n * @param {Error} error\n *\n * @returns {Boolean}\n */\nexports.isNetworkError = function (error) {\n    return isErrorOfType(error, errorTypes.NetworkError);\n};\n/**\n * Determines if a given error is a RequestFailedError.\n *\n * @param {Error} error\n *\n * @returns {Boolean}\n */\nexports.isRequestFailedError = function (error) {\n    return isErrorOfType(error, errorTypes.RequestFailedError);\n};\n/**\n * Determines if a given error is an UnexpectedContentError.\n *\n * @param {Error} error\n *\n * @returns {Boolean}\n */\nexports.isUnexpectedContentError = function (error) {\n    return isErrorOfType(error, errorTypes.UnexpectedContentError);\n};\n/**\n * Determines if a given error is an OperationFailedError.\n *\n * @param {Error} error\n *\n * @returns {Boolean}\n */\nexports.isOperationFailedError = function (error) {\n    return isErrorOfType(error, errorTypes.OperationFailedError);\n};\n/**\n * Determines if a given error is an LargeResultSetError.\n *\n * @param {Error} error\n *\n * @returns {Boolean}\n */\nexports.isLargeResultSetError = function (error) {\n    return isErrorOfType(error, errorTypes.LargeResultSetError);\n};\n/**\n * Externalizes an error.\n *\n * @param {Error} error\n *\n * @returns {Error}\n */\nexports.externalize = function (error) {\n    return error && error.externalize ? error.externalize() : error;\n};\n/**\n * Determines if a given error is of a specific type.\n *\n * @param {Error} error\n * @param {String} type\n *\n * @returns {Boolean}\n */\nfunction isErrorOfType(error, type) {\n    return error && error.name === type;\n}\n/**\n * Creates a generic error.\n *\n * @param {String} name\n * @param {Object} options\n *\n * @returns {Error}\n */\nfunction createError(name, options) {\n    // TODO: validate that name is a string and options is an object\n    // TODO: this code is a bit of a mess and needs to be cleaned up\n    // create a new error\n    const error = new Error();\n    // set its name\n    error.name = name;\n    // set the error code\n    let code;\n    error.code = code = options.code;\n    // if no error message was specified in the options\n    let message = options.message ?? options.cause?.message;\n    if (!message) {\n        // use the error code to get the error message template\n        const messageTemplate = errorMessages[code];\n        // if some error message arguments were specified, substitute them into the\n        // error message template to get the full error message, otherwise just use\n        // the error message template as the error message\n        let messageArgs = options.messageArgs;\n        if (messageArgs) {\n            messageArgs = messageArgs.slice();\n            messageArgs.unshift(messageTemplate);\n            message = Util.format.apply(Util, messageArgs);\n        }\n        else {\n            message = messageTemplate;\n        }\n    }\n    error.message = message;\n    // if no sql state was specified in the options, use the error code to try to\n    // get the appropriate sql state\n    let sqlState = options.sqlState;\n    if (!sqlState) {\n        sqlState = errCodeToSqlState[code];\n    }\n    error.sqlState = sqlState;\n    // set the error data\n    error.data = options.data;\n    // set the error response and response body\n    error.response = options.response;\n    error.responseBody = options.responseBody;\n    // set the error cause\n    error.cause = options.cause;\n    // set the error's fatal flag\n    error.isFatal = options.isFatal;\n    // if the error is not synchronous, add an externalize() method\n    if (!options.synchronous) {\n        error.externalize = function () {\n            const propNames = [\n                'name',\n                'code',\n                'message',\n                'sqlState',\n                'data',\n                'response',\n                'responseBody',\n                'cause',\n                'isFatal',\n                'stack',\n            ];\n            const externalizedError = new Error();\n            let propName, propValue;\n            for (let index = 0, length = propNames.length; index < length; index++) {\n                propName = propNames[index];\n                propValue = this[propName];\n                if (Util.exists(propValue)) {\n                    externalizedError[propName] = propValue;\n                }\n            }\n            return externalizedError;\n        };\n    }\n    return error;\n}\n//# sourceMappingURL=errors.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/dist/lib/errors.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/dist/lib/file_transfer_agent/azure_util.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/snowflake-sdk/dist/lib/file_transfer_agent/azure_util.js ***!
  \*******************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst AZURE = __webpack_require__(/*! @azure/storage-blob */ \"(rsc)/./node_modules/@azure/storage-blob/dist-esm/storage-blob/src/index.js\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst EncryptionMetadata = (__webpack_require__(/*! ./encrypt_util */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/file_transfer_agent/encrypt_util.js\").EncryptionMetadata);\nconst FileHeader = (__webpack_require__(/*! ../file_util */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/file_util.js\").FileHeader);\nconst expandTilde = __webpack_require__(/*! expand-tilde */ \"(rsc)/./node_modules/expand-tilde/index.js\");\nconst resultStatus = (__webpack_require__(/*! ../file_util */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/file_util.js\").resultStatus);\nconst ProxyUtil = __webpack_require__(/*! ../proxy_util */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/proxy_util.js\");\nconst { isBypassProxy } = __webpack_require__(/*! ../http/node */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/http/node.js\");\nconst Logger = (__webpack_require__(/*! ../logger */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/logger.js\")[\"default\"]);\nconst EXPIRED_TOKEN = 'ExpiredToken';\n// Azure Location\nfunction AzureLocation(containerName, path) {\n    return {\n        containerName: containerName,\n        path: path,\n    };\n}\n/**\n * Creates an Azure utility object.\n *\n * @param {module} azure\n * @param {module} filestream\n *\n * @returns {Object}\n * @constructor\n */\nfunction AzureUtil(connectionConfig) {\n    /**\n     * Create a blob service client using an Azure SAS token.\n     *\n     * @param {Object} stageInfo\n     *\n     * @returns {String}\n     */\n    this.createClient = function (stageInfo) {\n        const stageCredentials = stageInfo['creds'];\n        const sasToken = stageCredentials['AZURE_SAS_TOKEN'];\n        const account = stageInfo['storageAccount'];\n        const connectionString = `https://${account}.blob.core.windows.net${sasToken}`;\n        let proxy = ProxyUtil.getProxy(connectionConfig.getProxy(), 'Azure Util');\n        if (proxy && !isBypassProxy(proxy, connectionString)) {\n            Logger().debug(`The destination host is: ${ProxyUtil.getHostFromURL(connectionString)} and the proxy host is: ${proxy.host}`);\n            Logger().trace(`Initializing the proxy information for the Azure Client: ${ProxyUtil.describeProxy(proxy)}`);\n            proxy = ProxyUtil.getAzureProxy(proxy);\n        }\n        ProxyUtil.hideEnvironmentProxy();\n        const blobServiceClient = new AZURE.BlobServiceClient(connectionString, null, {\n            proxyOptions: proxy,\n        });\n        ProxyUtil.restoreEnvironmentProxy();\n        return blobServiceClient;\n    };\n    /**\n     * Extract the container name and path from the metadata's stage location.\n     *\n     * @param {String} stageLocation\n     *\n     * @returns {Object}\n     */\n    this.extractContainerNameAndPath = function (stageLocation) {\n        // expand '~' and '~user' expressions\n        if (process.platform !== 'win32') {\n            stageLocation = expandTilde(stageLocation);\n        }\n        let containerName = stageLocation;\n        let path;\n        // split stage location as bucket name and path\n        if (stageLocation.includes('/')) {\n            containerName = stageLocation.substring(0, stageLocation.indexOf('/'));\n            path = stageLocation.substring(stageLocation.indexOf('/') + 1, stageLocation.length);\n            if (path && !path.endsWith('/')) {\n                path += '/';\n            }\n        }\n        return AzureLocation(containerName, path);\n    };\n    /**\n     * Create file header based on file being uploaded or not.\n     *\n     * @param {Object} meta\n     * @param {String} filename\n     *\n     * @returns {Object}\n     */\n    this.getFileHeader = async function (meta, filename) {\n        const stageInfo = meta['stageInfo'];\n        const client = this.createClient(stageInfo);\n        const azureLocation = this.extractContainerNameAndPath(stageInfo['location']);\n        const containerClient = client.getContainerClient(azureLocation.containerName);\n        const blobClient = containerClient.getBlobClient(azureLocation.path + filename);\n        let blobDetails;\n        try {\n            await blobClient.getProperties().then(function (data) {\n                blobDetails = data;\n            });\n        }\n        catch (err) {\n            if (err['code'] === EXPIRED_TOKEN) {\n                meta['resultStatus'] = resultStatus.RENEW_TOKEN;\n                return null;\n            }\n            else if (err['statusCode'] === 404) {\n                meta['resultStatus'] = resultStatus.NOT_FOUND_FILE;\n                return FileHeader(null, null, null);\n            }\n            else if (err['statusCode'] === 400) {\n                meta['resultStatus'] = resultStatus.RENEW_TOKEN;\n                return null;\n            }\n            else {\n                meta['resultStatus'] = resultStatus.ERROR;\n                return null;\n            }\n        }\n        meta['resultStatus'] = resultStatus.UPLOADED;\n        let encryptionMetadata = null;\n        if (blobDetails.metadata['encryptiondata']) {\n            const encryptionData = JSON.parse(blobDetails.metadata['encryptiondata']);\n            encryptionMetadata = EncryptionMetadata(encryptionData['WrappedContentKey']['EncryptedKey'], encryptionData['ContentEncryptionIV'], blobDetails.metadata['matdesc']);\n        }\n        return FileHeader(blobDetails.metadata['sfcdigest'], blobDetails.contentLength, encryptionMetadata);\n    };\n    /**\n     * Create the file metadata then upload the file.\n     *\n     * @param {String} dataFile\n     * @param {Object} meta\n     * @param {Object} encryptionMetadata\n     * @param {Number} maxConcurrency\n     *\n     * @returns {null}\n     */\n    this.uploadFile = async function (dataFile, meta, encryptionMetadata, maxConcurrency) {\n        const fileStream = fs.readFileSync(dataFile);\n        await this.uploadFileStream(fileStream, meta, encryptionMetadata, maxConcurrency);\n    };\n    /**\n     * Create the file metadata then upload the file stream.\n     *\n     * @param {String} fileStream\n     * @param {Object} meta\n     * @param {Object} encryptionMetadata\n     *\n     * @returns {null}\n     */\n    this.uploadFileStream = async function (fileStream, meta, encryptionMetadata) {\n        const azureMetadata = {\n            sfcdigest: meta['SHA256_DIGEST'],\n        };\n        if (encryptionMetadata) {\n            azureMetadata['encryptiondata'] = JSON.stringify({\n                EncryptionMode: 'FullBlob',\n                WrappedContentKey: {\n                    KeyId: 'symmKey1',\n                    EncryptedKey: encryptionMetadata.key,\n                    Algorithm: 'AES_CBC_256',\n                },\n                EncryptionAgent: {\n                    Protocol: '1.0',\n                    EncryptionAlgorithm: 'AES_CBC_128',\n                },\n                ContentEncryptionIV: encryptionMetadata.iv,\n                KeyWrappingMetadata: {\n                    EncryptionLibrary: 'Java 5.3.0',\n                },\n            });\n            azureMetadata['matdesc'] = encryptionMetadata.matDesc;\n        }\n        const stageInfo = meta['stageInfo'];\n        const client = this.createClient(stageInfo);\n        const azureLocation = this.extractContainerNameAndPath(stageInfo['location']);\n        const blobName = azureLocation.path + meta['dstFileName'];\n        const containerClient = client.getContainerClient(azureLocation.containerName);\n        const blockBlobClient = containerClient.getBlockBlobClient(blobName);\n        try {\n            await blockBlobClient.upload(fileStream, fileStream.length, {\n                metadata: azureMetadata,\n                blobHTTPHeaders: {\n                    blobContentEncoding: 'UTF-8',\n                    blobContentType: 'application/octet-stream',\n                },\n            });\n        }\n        catch (err) {\n            if (err['statusCode'] === 403 && detectAzureTokenExpireError(err)) {\n                meta['lastError'] = err;\n                meta['resultStatus'] = resultStatus.RENEW_TOKEN;\n                return;\n            }\n            else {\n                meta['lastError'] = err;\n                meta['resultStatus'] = resultStatus.NEED_RETRY;\n            }\n            return;\n        }\n        meta['dstFileSize'] = meta['uploadSize'];\n        meta['resultStatus'] = resultStatus.UPLOADED;\n    };\n    /**\n     * Download the file blob then write the file.\n     *\n     * @param {Object} meta\n     * @param fullDstPath\n     *\n     * @returns {null}\n     */\n    this.nativeDownloadFile = async function (meta, fullDstPath) {\n        const stageInfo = meta['stageInfo'];\n        const client = this.createClient(stageInfo);\n        const azureLocation = this.extractContainerNameAndPath(stageInfo['location']);\n        const blobName = azureLocation.path + meta['srcFileName'];\n        const containerClient = client.getContainerClient(azureLocation.containerName);\n        const blockBlobClient = containerClient.getBlockBlobClient(blobName);\n        try {\n            const downloadBlockBlobResponse = await blockBlobClient.download(0);\n            const readableStream = downloadBlockBlobResponse.readableStreamBody;\n            Logger().debug(`Sent Get Request to ${blockBlobClient.url.split('?')[0]}, destination: ${fullDstPath}, http status: ${downloadBlockBlobResponse.originalResponse._response.status}`);\n            await new Promise((resolve, reject) => {\n                const writer = fs.createWriteStream(fullDstPath);\n                readableStream.on('data', (data) => {\n                    writer.write(data);\n                });\n                readableStream.on('end', () => {\n                    writer.end(resolve);\n                });\n                readableStream.on('error', reject);\n            });\n        }\n        catch (err) {\n            if (err['statusCode'] === 403 && detectAzureTokenExpireError(err)) {\n                meta['lastError'] = err;\n                meta['resultStatus'] = resultStatus.RENEW_TOKEN;\n                return;\n            }\n            else {\n                meta['lastError'] = err;\n                meta['resultStatus'] = resultStatus.NEED_RETRY;\n            }\n            return;\n        }\n        meta['resultStatus'] = resultStatus.DOWNLOADED;\n    };\n    /**\n     * Detect if the Azure token has expired.\n     *\n     * @param {Object} err\n     *\n     * @returns {Boolean}\n     */\n    function detectAzureTokenExpireError(err) {\n        if (err['statusCode'] !== 403) {\n            return false;\n        }\n        const errstr = err.toString();\n        return (errstr.includes('Signature not valid in the specified time frame') ||\n            errstr.includes('Server failed to authenticate the request.'));\n    }\n}\nmodule.exports = AzureUtil;\n//# sourceMappingURL=azure_util.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/dist/lib/file_transfer_agent/azure_util.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/dist/lib/file_transfer_agent/encrypt_util.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/snowflake-sdk/dist/lib/file_transfer_agent/encrypt_util.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nconst path = __webpack_require__(/*! path */ \"path\");\nconst crypto = __webpack_require__(/*! crypto */ \"crypto\");\nconst os = __webpack_require__(/*! os */ \"os\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst Logger = __webpack_require__(/*! ../logger */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/logger.js\");\nconst AES_BLOCK_SIZE = 128;\nconst blockSize = parseInt(AES_BLOCK_SIZE / 8); // in bytes\nconst QUERY_STAGE_MASTER_KEY = 'queryStageMasterKey';\nconst BASE64 = 'base64';\nconst DEFAULT_AAD = Buffer.from('');\nconst AUTH_TAG_LENGTH_IN_BYTES = 16;\nconst AES_CBC = {\n    cipherName: function (keySizeInBytes) {\n        return `aes-${keySizeInBytes * 8}-cbc`;\n    },\n    ivSize: 16,\n};\nconst AES_ECB = {\n    cipherName: function (keySizeInBytes) {\n        return `aes-${keySizeInBytes * 8}-ecb`;\n    },\n};\nconst AES_GCM = {\n    cipherName: function (keySizeInBytes) {\n        return `aes-${keySizeInBytes * 8}-gcm`;\n    },\n    ivSize: 12,\n};\n// Material Descriptor\nfunction MaterialDescriptor(smkId, queryId, keySize) {\n    return {\n        smkId: smkId,\n        queryId: queryId,\n        keySize: keySize,\n    };\n}\n// Encryption Material\nfunction EncryptionMetadata(key, dataIv, matDesc, keyIv, dataAad, keyAad) {\n    return {\n        key: key,\n        iv: dataIv,\n        matDesc: matDesc,\n        keyIv: keyIv,\n        dataAad: dataAad,\n        keyAad: keyAad,\n    };\n}\nexports.EncryptionMetadata = EncryptionMetadata;\nfunction TempFileGenerator() {\n    this.fileSync = function (option = { dir: os.tmpdir(), prefix: '', postfix: '', extension: '' }) {\n        const randomName = crypto.randomUUID();\n        const fileName = `${option.prefix || ''}${randomName}${option.postfix || ''}${'.' + option.extension || 0}`;\n        if (!this.checkDirInTemp(option.dir)) {\n            option.dir = os.tmpdir();\n        }\n        const fullpath = path.join(option.dir, fileName);\n        fs.writeFileSync(fullpath, '');\n        const fileDescriptor = fs.openSync(fullpath);\n        return { name: fullpath, fd: fileDescriptor };\n    };\n    this.file = function (option = { dir: os.tmpdir(), prefix: '', postfix: '', extension: '' }, callback) {\n        try {\n            const { name, fd } = this.fileSync(option);\n            callback(null, name, fd);\n        }\n        catch (err) {\n            callback(err);\n        }\n    };\n    this.checkDirInTemp = function (directoryPath) {\n        if (!directoryPath || directoryPath.length === 0) {\n            return false;\n        }\n        if (directoryPath.includes(os.tmpdir())) {\n            if (fs.existsSync(directoryPath)) {\n                return true;\n            }\n            else {\n                Logger.getInstance().warn(`no such file or directory, open ${directoryPath}`);\n            }\n        }\n        else {\n            Logger.getInstance().warn(`dir option must be relative to ${os.tmpdir()}, found ${directoryPath}`);\n        }\n        return false;\n    };\n}\n/**\n * Creates an encryption utility object.\n *\n * @param {module} encrypt\n * @param {module} filestream\n * @param {module} temp\n *\n * @returns {Object}\n * @constructor\n */\nfunction EncryptUtil(encrypt, filestream, temp) {\n    const crypto = typeof encrypt !== 'undefined' ? encrypt : __webpack_require__(/*! crypto */ \"crypto\");\n    // TODO: SNOW-1814883: Replace 'fs' with 'fs/promises'\n    const fs = typeof filestream !== 'undefined' ? filestream : __webpack_require__(/*! fs */ \"fs\");\n    const tmp = typeof temp !== 'undefined' ? temp : new TempFileGenerator();\n    /**\n     * Generate a buffer with random bytes given a size.\n     *\n     * @param {Number} byteLength\n     *\n     * @returns {Buffer} of size byteLength\n     */\n    function getSecureRandom(byteLength) {\n        return crypto.randomBytes(byteLength);\n    }\n    /**\n     * Convert a material descriptor object's values to unicode.\n     *\n     * @param {Object} matDesc\n     *\n     * @returns {Object}\n     */\n    function matDescToUnicode(matDesc) {\n        matDesc['smkId'] = matDesc['smkId'].toString();\n        matDesc['keySize'] = matDesc['keySize'].toString();\n        const newMatDesc = JSON.stringify(matDesc);\n        return newMatDesc;\n    }\n    function createEncryptionMetadata(encryptionMaterial, keySize, encryptedKey, dataIv, keyIv = null, dataAad = null, keyAad = null) {\n        const matDesc = new MaterialDescriptor(encryptionMaterial.smkId, encryptionMaterial.queryId, keySize * 8);\n        return new EncryptionMetadata(encryptedKey.toString(BASE64), dataIv.toString(BASE64), matDescToUnicode(matDesc), keyIv ? keyIv.toString(BASE64) : null, dataAad ? dataAad.toString(BASE64) : null, keyAad ? keyAad.toString(BASE64) : null);\n    }\n    /**\n     * Encrypt content using AES-CBC algorithm.\n     */\n    this.encryptFileStream = async function (encryptionMaterial, content) {\n        return this.encryptDataCBC(encryptionMaterial, content);\n    };\n    this.encryptDataCBC = function (encryptionMaterial, data) {\n        const decodedKek = Buffer.from(encryptionMaterial[QUERY_STAGE_MASTER_KEY], BASE64);\n        const keySize = decodedKek.length;\n        const dataIv = getSecureRandom(AES_CBC.ivSize);\n        const fileKey = getSecureRandom(keySize);\n        const dataCipher = crypto.createCipheriv(AES_CBC.cipherName(keySize), fileKey, dataIv);\n        const encryptedData = performCrypto(dataCipher, data);\n        const keyCipher = crypto.createCipheriv(AES_ECB.cipherName(keySize), decodedKek, null);\n        const encryptedKey = performCrypto(keyCipher, fileKey);\n        return {\n            encryptionMetadata: createEncryptionMetadata(encryptionMaterial, keySize, encryptedKey, dataIv),\n            dataStream: encryptedData,\n        };\n    };\n    //TODO: SNOW-940981: Add proper usage when feature is ready\n    this.encryptDataGCM = function (encryptionMaterial, data) {\n        const decodedKek = Buffer.from(encryptionMaterial[QUERY_STAGE_MASTER_KEY], BASE64);\n        const keySize = decodedKek.length;\n        const dataIv = getSecureRandom(AES_GCM.ivSize);\n        const fileKey = getSecureRandom(keySize);\n        const encryptedData = this.encryptGCM(data, fileKey, dataIv, DEFAULT_AAD);\n        const keyIv = getSecureRandom(AES_GCM.ivSize);\n        const encryptedKey = this.encryptGCM(fileKey, decodedKek, keyIv, DEFAULT_AAD);\n        return {\n            encryptionMetadata: createEncryptionMetadata(encryptionMaterial, keySize, encryptedKey, dataIv, keyIv, DEFAULT_AAD, DEFAULT_AAD),\n            dataStream: encryptedData,\n        };\n    };\n    this.encryptGCM = function (data, key, iv, aad) {\n        const cipher = crypto.createCipheriv(AES_GCM.cipherName(key.length), key, iv, {\n            authTagLength: AUTH_TAG_LENGTH_IN_BYTES,\n        });\n        if (aad) {\n            cipher.setAAD(aad);\n        }\n        const encryptedData = performCrypto(cipher, data);\n        return Buffer.concat([encryptedData, cipher.getAuthTag()]);\n    };\n    this.decryptGCM = function (data, key, iv, aad) {\n        const decipher = crypto.createDecipheriv(AES_GCM.cipherName(key.length), key, iv, {\n            authTagLength: AUTH_TAG_LENGTH_IN_BYTES,\n        });\n        if (aad) {\n            decipher.setAAD(aad);\n        }\n        // last 16 bytes of data is the authentication tag\n        const authTag = data.slice(data.length - AUTH_TAG_LENGTH_IN_BYTES, data.length);\n        const cipherText = data.slice(0, data.length - AUTH_TAG_LENGTH_IN_BYTES);\n        decipher.setAuthTag(authTag);\n        return performCrypto(decipher, cipherText);\n    };\n    /**\n     * Encrypt file using AES algorithm.\n     */\n    this.encryptFile = async function (encryptionMaterial, inputFilePath, tmpDir = null, chunkSize = blockSize * 4 * 1024) {\n        return await this.encryptFileCBC(encryptionMaterial, inputFilePath, tmpDir, chunkSize);\n    };\n    this.encryptFileCBC = async function (encryptionMaterial, inputFilePath, tmpDir = null, chunkSize = blockSize * 4 * 1024) {\n        const decodedKek = Buffer.from(encryptionMaterial[QUERY_STAGE_MASTER_KEY], BASE64);\n        const keySize = decodedKek.length;\n        const dataIv = getSecureRandom(AES_CBC.ivSize);\n        const fileKey = getSecureRandom(keySize);\n        const dataCipher = crypto.createCipheriv(AES_CBC.cipherName(keySize), fileKey, dataIv);\n        const encryptedFilePath = await performFileStreamCrypto(dataCipher, tmpDir, inputFilePath, chunkSize);\n        const keyCipher = crypto.createCipheriv(AES_ECB.cipherName(keySize), decodedKek, null);\n        const encryptedKey = performCrypto(keyCipher, fileKey);\n        return {\n            encryptionMetadata: createEncryptionMetadata(encryptionMaterial, keySize, encryptedKey, dataIv),\n            dataFile: encryptedFilePath,\n        };\n    };\n    //TODO: SNOW-940981: Add proper usage when feature is ready\n    this.encryptFileGCM = async function (encryptionMaterial, inputFilePath, tmpDir = null) {\n        const decodedKek = Buffer.from(encryptionMaterial[QUERY_STAGE_MASTER_KEY], BASE64);\n        const dataIv = getSecureRandom(AES_GCM.ivSize);\n        const fileKey = getSecureRandom(decodedKek.length);\n        const fileContent = await new Promise((resolve, reject) => {\n            fs.readFile(inputFilePath, (err, data) => {\n                if (err) {\n                    reject(err);\n                }\n                else {\n                    resolve(data);\n                }\n            });\n        });\n        const encryptedData = this.encryptGCM(fileContent, fileKey, dataIv, DEFAULT_AAD);\n        const encryptedFilePath = await writeContentToFile(tmpDir, path.basename(inputFilePath) + '#', encryptedData);\n        const keyIv = getSecureRandom(AES_GCM.ivSize);\n        const encryptedKey = this.encryptGCM(fileKey, decodedKek, keyIv, DEFAULT_AAD);\n        return {\n            encryptionMetadata: createEncryptionMetadata(encryptionMaterial, fileKey.length, encryptedKey, dataIv, keyIv, DEFAULT_AAD, DEFAULT_AAD),\n            dataFile: encryptedFilePath,\n        };\n    };\n    /**\n     * Decrypt file using AES algorithm.\n     */\n    this.decryptFile = async function (metadata, encryptionMaterial, inputFilePath, tmpDir = null, chunkSize = blockSize * 4 * 1024) {\n        return await this.decryptFileCBC(metadata, encryptionMaterial, inputFilePath, tmpDir, chunkSize);\n    };\n    this.decryptFileCBC = async function (metadata, encryptionMaterial, inputFilePath, tmpDir = null, chunkSize = blockSize * 4 * 1024) {\n        const decodedKek = Buffer.from(encryptionMaterial[QUERY_STAGE_MASTER_KEY], BASE64);\n        const keyBytes = new Buffer.from(metadata.key, BASE64);\n        const ivBytes = new Buffer.from(metadata.iv, BASE64);\n        const keyDecipher = crypto.createDecipheriv(AES_ECB.cipherName(decodedKek.length), decodedKek, null);\n        const fileKey = performCrypto(keyDecipher, keyBytes);\n        const dataDecipher = crypto.createDecipheriv(AES_CBC.cipherName(fileKey.length), fileKey, ivBytes);\n        return await performFileStreamCrypto(dataDecipher, tmpDir, inputFilePath, chunkSize);\n    };\n    //TODO: SNOW-940981: Add proper usage when feature is ready\n    this.decryptFileGCM = async function (metadata, encryptionMaterial, inputFilePath, tmpDir = null) {\n        const decodedKek = Buffer.from(encryptionMaterial[QUERY_STAGE_MASTER_KEY], BASE64);\n        const keyBytes = new Buffer.from(metadata.key, BASE64);\n        const keyIvBytes = new Buffer.from(metadata.keyIv, BASE64);\n        const dataIvBytes = new Buffer.from(metadata.iv, BASE64);\n        const dataAadBytes = new Buffer.from(metadata.dataAad, BASE64);\n        const keyAadBytes = new Buffer.from(metadata.keyAad, BASE64);\n        const fileKey = this.decryptGCM(keyBytes, decodedKek, keyIvBytes, keyAadBytes);\n        const fileContent = await new Promise((resolve, reject) => {\n            fs.readFile(inputFilePath, (err, data) => {\n                if (err) {\n                    reject(err);\n                }\n                else {\n                    resolve(data);\n                }\n            });\n        });\n        const decryptedData = this.decryptGCM(fileContent, fileKey, dataIvBytes, dataAadBytes);\n        return await writeContentToFile(tmpDir, path.basename(inputFilePath) + '#', decryptedData);\n    };\n    function performCrypto(cipherOrDecipher, data) {\n        const encryptedOrDecrypted = cipherOrDecipher.update(data);\n        const final = cipherOrDecipher.final();\n        return Buffer.concat([encryptedOrDecrypted, final]);\n    }\n    async function performFileStreamCrypto(cipherOrDecipher, tmpDir, inputFilePath, chunkSize) {\n        const outputFile = await new Promise((resolve, reject) => {\n            tmp.file({ dir: tmpDir, prefix: path.basename(inputFilePath) + '#' }, (err, path, fd) => {\n                if (err) {\n                    reject(err);\n                }\n                else {\n                    resolve({ path, fd });\n                }\n            });\n        });\n        await new Promise(function (resolve) {\n            const inputStream = fs.createReadStream(inputFilePath, { highWaterMark: chunkSize });\n            const outputStream = fs.createWriteStream(outputFile.path);\n            inputStream.on('data', function (chunk) {\n                const encrypted = cipherOrDecipher.update(chunk);\n                outputStream.write(encrypted);\n            });\n            inputStream.on('close', function () {\n                outputStream.write(cipherOrDecipher.final());\n                outputStream.close(resolve);\n            });\n        });\n        await new Promise((resolve, reject) => {\n            fs.close(outputFile.fd, (err) => {\n                if (err) {\n                    reject(err);\n                }\n                else {\n                    resolve();\n                }\n            });\n        });\n        return outputFile.path;\n    }\n    async function writeContentToFile(tmpDir, prefix, content) {\n        const outputFile = await new Promise((resolve, reject) => {\n            tmp.file({ dir: tmpDir, prefix: prefix }, (err, path, fd) => {\n                if (err) {\n                    reject(err);\n                }\n                else {\n                    resolve({ path, fd });\n                }\n            });\n        });\n        await new Promise((resolve, reject) => {\n            fs.writeFile(outputFile.path, content, (err) => {\n                if (err) {\n                    reject(err);\n                }\n                else {\n                    resolve();\n                }\n            });\n        });\n        await new Promise((resolve, reject) => {\n            fs.close(outputFile.fd, (err) => {\n                if (err) {\n                    reject(err);\n                }\n                else {\n                    resolve();\n                }\n            });\n        });\n        return outputFile.path;\n    }\n}\nexports.EncryptUtil = EncryptUtil;\n//# sourceMappingURL=encrypt_util.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/dist/lib/file_transfer_agent/encrypt_util.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/dist/lib/file_transfer_agent/file_compression_type.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/snowflake-sdk/dist/lib/file_transfer_agent/file_compression_type.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n/* eslint-disable camelcase */\nconst Types = [\n    {\n        name: 'GZIP',\n        file_extension: '.gz',\n        mime_type: 'application',\n        mime_subtypes: ['gzip', 'x-gzip'],\n        is_supported: true,\n    },\n    {\n        name: 'DEFLATE',\n        file_extension: '.deflate',\n        mime_type: 'application',\n        mime_subtypes: ['zlib', 'deflate'],\n        is_supported: true,\n    },\n    {\n        name: 'RAW_DEFLATE',\n        file_extension: '.raw_deflate',\n        mime_type: 'application',\n        mime_subtypes: ['raw_deflate'],\n        is_supported: true,\n    },\n    {\n        name: 'BZIP2',\n        file_extension: '.bz2',\n        mime_type: 'application',\n        mime_subtypes: ['bzip2', 'x-bzip2', 'x-bz2', 'x-bzip', 'bz2'],\n        is_supported: true,\n    },\n    {\n        name: 'LZIP',\n        file_extension: '.lz',\n        mime_type: 'application',\n        mime_subtypes: ['lzip', 'x-lzip'],\n        is_supported: false,\n    },\n    {\n        name: 'LZMA',\n        file_extension: '.lzma',\n        mime_type: 'application',\n        mime_subtypes: ['lzma', 'x-lzma'],\n        is_supported: false,\n    },\n    {\n        name: 'LZO',\n        file_extension: '.lzo',\n        mime_type: 'application',\n        mime_subtypes: ['lzo', 'x-lzo'],\n        is_supported: false,\n    },\n    {\n        name: 'XZ',\n        file_extension: '.xz',\n        mime_type: 'application',\n        mime_subtypes: ['xz', 'x-xz'],\n        is_supported: false,\n    },\n    {\n        name: 'COMPRESS',\n        file_extension: '.Z',\n        mime_type: 'application',\n        mime_subtypes: ['compress', 'x-compress'],\n        is_supported: false,\n    },\n    {\n        name: 'PARQUET',\n        file_extension: '.parquet',\n        mime_type: 'snowflake',\n        mime_subtypes: ['parquet'],\n        is_supported: true,\n    },\n    {\n        name: 'ZSTD',\n        file_extension: '.zst',\n        mime_type: 'application',\n        mime_subtypes: ['zstd', 'x-zstd'],\n        is_supported: true,\n    },\n    {\n        name: 'BROTLI',\n        file_extension: '.br',\n        mime_type: 'application',\n        mime_subtypes: ['br', 'x-br'],\n        is_supported: true,\n    },\n    {\n        name: 'ORC',\n        file_extension: '.orc',\n        mime_type: 'snowflake',\n        mime_subtypes: ['orc'],\n        is_supported: true,\n    },\n];\n/* eslint-enable camelcase */\nconst subtypeToMeta = [];\nfor (const type of Types) {\n    for (const ms of type['mime_subtypes']) {\n        subtypeToMeta[ms] = type;\n    }\n}\n/**\n * Return the file compression type based on subtype.\n *\n * @param {String} subtype\n *\n * @returns {Object} the file compression object\n */\nexports.lookupByMimeSubType = function lookupByMimeSubType(subtype) {\n    return subtypeToMeta[subtype.toLowerCase()];\n};\n/**\n * Return the file compression type based on encoding.\n *\n * @param {String} encoding\n *\n * @returns {Object} the file compression object\n */\nexports.lookupByEncoding = function lookupByEncoding(encoding) {\n    encoding = encoding.substring(encoding.indexOf('/') + 1);\n    return subtypeToMeta[encoding];\n};\n//# sourceMappingURL=file_compression_type.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9kaXN0L2xpYi9maWxlX3RyYW5zZmVyX2FnZW50L2ZpbGVfY29tcHJlc3Npb25fdHlwZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQjtBQUNBLGFBQWEsUUFBUTtBQUNyQjtBQUNBLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvd2FuZ2hhb3RhaS9EZXNrdG9wL2VsdmVubGFiL0hUVi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9kaXN0L2xpYi9maWxlX3RyYW5zZmVyX2FnZW50L2ZpbGVfY29tcHJlc3Npb25fdHlwZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qIGVzbGludC1kaXNhYmxlIGNhbWVsY2FzZSAqL1xuY29uc3QgVHlwZXMgPSBbXG4gICAge1xuICAgICAgICBuYW1lOiAnR1pJUCcsXG4gICAgICAgIGZpbGVfZXh0ZW5zaW9uOiAnLmd6JyxcbiAgICAgICAgbWltZV90eXBlOiAnYXBwbGljYXRpb24nLFxuICAgICAgICBtaW1lX3N1YnR5cGVzOiBbJ2d6aXAnLCAneC1nemlwJ10sXG4gICAgICAgIGlzX3N1cHBvcnRlZDogdHJ1ZSxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogJ0RFRkxBVEUnLFxuICAgICAgICBmaWxlX2V4dGVuc2lvbjogJy5kZWZsYXRlJyxcbiAgICAgICAgbWltZV90eXBlOiAnYXBwbGljYXRpb24nLFxuICAgICAgICBtaW1lX3N1YnR5cGVzOiBbJ3psaWInLCAnZGVmbGF0ZSddLFxuICAgICAgICBpc19zdXBwb3J0ZWQ6IHRydWUsXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6ICdSQVdfREVGTEFURScsXG4gICAgICAgIGZpbGVfZXh0ZW5zaW9uOiAnLnJhd19kZWZsYXRlJyxcbiAgICAgICAgbWltZV90eXBlOiAnYXBwbGljYXRpb24nLFxuICAgICAgICBtaW1lX3N1YnR5cGVzOiBbJ3Jhd19kZWZsYXRlJ10sXG4gICAgICAgIGlzX3N1cHBvcnRlZDogdHJ1ZSxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogJ0JaSVAyJyxcbiAgICAgICAgZmlsZV9leHRlbnNpb246ICcuYnoyJyxcbiAgICAgICAgbWltZV90eXBlOiAnYXBwbGljYXRpb24nLFxuICAgICAgICBtaW1lX3N1YnR5cGVzOiBbJ2J6aXAyJywgJ3gtYnppcDInLCAneC1iejInLCAneC1iemlwJywgJ2J6MiddLFxuICAgICAgICBpc19zdXBwb3J0ZWQ6IHRydWUsXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6ICdMWklQJyxcbiAgICAgICAgZmlsZV9leHRlbnNpb246ICcubHonLFxuICAgICAgICBtaW1lX3R5cGU6ICdhcHBsaWNhdGlvbicsXG4gICAgICAgIG1pbWVfc3VidHlwZXM6IFsnbHppcCcsICd4LWx6aXAnXSxcbiAgICAgICAgaXNfc3VwcG9ydGVkOiBmYWxzZSxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogJ0xaTUEnLFxuICAgICAgICBmaWxlX2V4dGVuc2lvbjogJy5sem1hJyxcbiAgICAgICAgbWltZV90eXBlOiAnYXBwbGljYXRpb24nLFxuICAgICAgICBtaW1lX3N1YnR5cGVzOiBbJ2x6bWEnLCAneC1sem1hJ10sXG4gICAgICAgIGlzX3N1cHBvcnRlZDogZmFsc2UsXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6ICdMWk8nLFxuICAgICAgICBmaWxlX2V4dGVuc2lvbjogJy5sem8nLFxuICAgICAgICBtaW1lX3R5cGU6ICdhcHBsaWNhdGlvbicsXG4gICAgICAgIG1pbWVfc3VidHlwZXM6IFsnbHpvJywgJ3gtbHpvJ10sXG4gICAgICAgIGlzX3N1cHBvcnRlZDogZmFsc2UsXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6ICdYWicsXG4gICAgICAgIGZpbGVfZXh0ZW5zaW9uOiAnLnh6JyxcbiAgICAgICAgbWltZV90eXBlOiAnYXBwbGljYXRpb24nLFxuICAgICAgICBtaW1lX3N1YnR5cGVzOiBbJ3h6JywgJ3gteHonXSxcbiAgICAgICAgaXNfc3VwcG9ydGVkOiBmYWxzZSxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogJ0NPTVBSRVNTJyxcbiAgICAgICAgZmlsZV9leHRlbnNpb246ICcuWicsXG4gICAgICAgIG1pbWVfdHlwZTogJ2FwcGxpY2F0aW9uJyxcbiAgICAgICAgbWltZV9zdWJ0eXBlczogWydjb21wcmVzcycsICd4LWNvbXByZXNzJ10sXG4gICAgICAgIGlzX3N1cHBvcnRlZDogZmFsc2UsXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6ICdQQVJRVUVUJyxcbiAgICAgICAgZmlsZV9leHRlbnNpb246ICcucGFycXVldCcsXG4gICAgICAgIG1pbWVfdHlwZTogJ3Nub3dmbGFrZScsXG4gICAgICAgIG1pbWVfc3VidHlwZXM6IFsncGFycXVldCddLFxuICAgICAgICBpc19zdXBwb3J0ZWQ6IHRydWUsXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6ICdaU1REJyxcbiAgICAgICAgZmlsZV9leHRlbnNpb246ICcuenN0JyxcbiAgICAgICAgbWltZV90eXBlOiAnYXBwbGljYXRpb24nLFxuICAgICAgICBtaW1lX3N1YnR5cGVzOiBbJ3pzdGQnLCAneC16c3RkJ10sXG4gICAgICAgIGlzX3N1cHBvcnRlZDogdHJ1ZSxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogJ0JST1RMSScsXG4gICAgICAgIGZpbGVfZXh0ZW5zaW9uOiAnLmJyJyxcbiAgICAgICAgbWltZV90eXBlOiAnYXBwbGljYXRpb24nLFxuICAgICAgICBtaW1lX3N1YnR5cGVzOiBbJ2JyJywgJ3gtYnInXSxcbiAgICAgICAgaXNfc3VwcG9ydGVkOiB0cnVlLFxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiAnT1JDJyxcbiAgICAgICAgZmlsZV9leHRlbnNpb246ICcub3JjJyxcbiAgICAgICAgbWltZV90eXBlOiAnc25vd2ZsYWtlJyxcbiAgICAgICAgbWltZV9zdWJ0eXBlczogWydvcmMnXSxcbiAgICAgICAgaXNfc3VwcG9ydGVkOiB0cnVlLFxuICAgIH0sXG5dO1xuLyogZXNsaW50LWVuYWJsZSBjYW1lbGNhc2UgKi9cbmNvbnN0IHN1YnR5cGVUb01ldGEgPSBbXTtcbmZvciAoY29uc3QgdHlwZSBvZiBUeXBlcykge1xuICAgIGZvciAoY29uc3QgbXMgb2YgdHlwZVsnbWltZV9zdWJ0eXBlcyddKSB7XG4gICAgICAgIHN1YnR5cGVUb01ldGFbbXNdID0gdHlwZTtcbiAgICB9XG59XG4vKipcbiAqIFJldHVybiB0aGUgZmlsZSBjb21wcmVzc2lvbiB0eXBlIGJhc2VkIG9uIHN1YnR5cGUuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN1YnR5cGVcbiAqXG4gKiBAcmV0dXJucyB7T2JqZWN0fSB0aGUgZmlsZSBjb21wcmVzc2lvbiBvYmplY3RcbiAqL1xuZXhwb3J0cy5sb29rdXBCeU1pbWVTdWJUeXBlID0gZnVuY3Rpb24gbG9va3VwQnlNaW1lU3ViVHlwZShzdWJ0eXBlKSB7XG4gICAgcmV0dXJuIHN1YnR5cGVUb01ldGFbc3VidHlwZS50b0xvd2VyQ2FzZSgpXTtcbn07XG4vKipcbiAqIFJldHVybiB0aGUgZmlsZSBjb21wcmVzc2lvbiB0eXBlIGJhc2VkIG9uIGVuY29kaW5nLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBlbmNvZGluZ1xuICpcbiAqIEByZXR1cm5zIHtPYmplY3R9IHRoZSBmaWxlIGNvbXByZXNzaW9uIG9iamVjdFxuICovXG5leHBvcnRzLmxvb2t1cEJ5RW5jb2RpbmcgPSBmdW5jdGlvbiBsb29rdXBCeUVuY29kaW5nKGVuY29kaW5nKSB7XG4gICAgZW5jb2RpbmcgPSBlbmNvZGluZy5zdWJzdHJpbmcoZW5jb2RpbmcuaW5kZXhPZignLycpICsgMSk7XG4gICAgcmV0dXJuIHN1YnR5cGVUb01ldGFbZW5jb2RpbmddO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZpbGVfY29tcHJlc3Npb25fdHlwZS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/dist/lib/file_transfer_agent/file_compression_type.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/dist/lib/file_transfer_agent/file_transfer_agent.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/snowflake-sdk/dist/lib/file_transfer_agent/file_transfer_agent.js ***!
  \****************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst crypto = __webpack_require__(/*! crypto */ \"crypto\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst os = __webpack_require__(/*! os */ \"os\");\nconst mime = __webpack_require__(/*! mime-types */ \"(rsc)/./node_modules/mime-types/index.js\");\nconst path = __webpack_require__(/*! path */ \"path\");\nconst statement = __webpack_require__(/*! ../connection/statement */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/connection/statement.js\");\nconst fileCompressionType = __webpack_require__(/*! ./file_compression_type */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/file_transfer_agent/file_compression_type.js\");\nconst expandTilde = __webpack_require__(/*! expand-tilde */ \"(rsc)/./node_modules/expand-tilde/index.js\");\nconst SnowflakeRemoteStorageUtil = (__webpack_require__(/*! ./remote_storage_util */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/file_transfer_agent/remote_storage_util.js\").RemoteStorageUtil);\nconst LocalUtil = (__webpack_require__(/*! ./local_util */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/file_transfer_agent/local_util.js\").LocalUtil);\nconst SnowflakeFileEncryptionMaterial = (__webpack_require__(/*! ./remote_storage_util */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/file_transfer_agent/remote_storage_util.js\").SnowflakeFileEncryptionMaterial);\nconst SnowflakeS3Util = __webpack_require__(/*! ./s3_util */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/file_transfer_agent/s3_util.js\");\nconst { FileUtil, getMatchingFilePaths } = __webpack_require__(/*! ../file_util */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/file_util.js\");\nconst resultStatus = (__webpack_require__(/*! ../file_util */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/file_util.js\").resultStatus);\nconst SnowflakeFileUtil = new FileUtil();\nconst SnowflakeLocalUtil = new LocalUtil();\nconst S3_FS = 'S3';\nconst AZURE_FS = 'AZURE';\nconst GCS_FS = 'GCS';\nconst LOCAL_FS = 'LOCAL_FS';\nconst CMD_TYPE_UPLOAD = 'UPLOAD';\nconst CMD_TYPE_DOWNLOAD = 'DOWNLOAD';\nconst FILE_PROTOCOL = 'file://';\nconst INJECT_WAIT_IN_PUT = 0;\nconst RESULT_TEXT_COLUMN_DESC = function (name) {\n    return {\n        name: name,\n        type: 'text',\n        length: 16777216,\n        precision: null,\n        scale: null,\n        nullable: false,\n    };\n};\nconst RESULT_FIXED_COLUMN_DESC = function (name) {\n    return {\n        name: name,\n        type: 'fixed',\n        length: 5,\n        precision: 0,\n        scale: 0,\n        nullable: false,\n    };\n};\n/**\n * Creates a file transfer agent.\n *\n * @param {Object} context\n *\n * @returns {Object}\n * @constructor\n */\nfunction FileTransferAgent(context) {\n    const remoteStorageUtil = new SnowflakeRemoteStorageUtil(context.connectionConfig);\n    const response = context.fileMetadata;\n    const command = context.sqlText;\n    const cwd = context.cwd;\n    let commandType;\n    const encryptionMaterial = [];\n    let fileName;\n    const fileStream = context.fileStream ? context.fileStream : null;\n    let autoCompress;\n    let sourceCompression;\n    let parallel;\n    let stageInfo;\n    let stageLocationType;\n    let presignedUrls;\n    let overwrite;\n    let useAccelerateEndpoint = false;\n    let srcFiles;\n    const srcFilesToEncryptionMaterial = {};\n    let localLocation;\n    const results = [];\n    // Store info of files retrieved\n    const filesToPut = [];\n    // Store metadata of files retrieved\n    const fileMetadata = [];\n    const smallFileMetas = [];\n    const largeFileMetas = [];\n    /**\n     * Execute PUT or GET command.\n     *\n     * @returns {null}\n     */\n    this.execute = async function () {\n        if (fileStream) {\n            const data = response['data'];\n            commandType = data['command'];\n            autoCompress = data['autoCompress'];\n            sourceCompression = data['sourceCompression'];\n            parallel = data['parallel'];\n            stageInfo = data['stageInfo'];\n            stageLocationType = stageInfo['locationType'];\n            presignedUrls = data['presignedUrls'];\n            overwrite = data['overwrite'];\n            if (commandType !== CMD_TYPE_UPLOAD) {\n                throw new Error('Incorrect UploadFileStream command');\n            }\n            const currFileObj = {};\n            currFileObj['srcFileName'] = data.src_locations[0];\n            currFileObj['srcFilePath'] = '';\n            currFileObj['srcFileSize'] = fileStream.length;\n            filesToPut.push(currFileObj);\n            initEncryptionMaterial();\n            initFileMetadata();\n            await transferAccelerateConfig();\n            await updateFileMetasWithPresignedUrl();\n            if (fileMetadata.length !== 1) {\n                throw new Error('UploadFileStream only allow 1 file');\n            }\n            //upload\n            const storageClient = getStorageClient(stageLocationType);\n            const client = storageClient.createClient(stageInfo, false);\n            const meta = fileMetadata[0];\n            meta['parallel'] = parallel;\n            meta['client'] = client;\n            meta['fileStream'] = fileStream;\n            //for digest\n            const hash = crypto.createHash('sha256').update(fileStream).digest('base64');\n            meta['SHA256_DIGEST'] = hash;\n            meta['uploadSize'] = fileStream.length;\n            meta['dstCompressionType'] = fileCompressionType.lookupByEncoding(sourceCompression);\n            meta['requireCompress'] = false;\n            meta['dstFileName'] = meta['srcFileName'];\n            await storageClient.uploadOneFileStream(meta);\n        }\n        else {\n            parseCommand();\n            initFileMetadata();\n            if (commandType === CMD_TYPE_UPLOAD) {\n                if (filesToPut.length === 0) {\n                    throw new Error('No file found for: ' + fileName);\n                }\n                processFileCompressionType();\n            }\n            if (commandType === CMD_TYPE_DOWNLOAD) {\n                if (!fs.existsSync(localLocation)) {\n                    fs.mkdirSync(localLocation);\n                }\n            }\n            if (stageLocationType === LOCAL_FS) {\n                process.umask(0);\n                if (!fs.existsSync(stageInfo['location'])) {\n                    fs.mkdirSync(stageInfo['location'], { mode: 0o777, recursive: true });\n                }\n            }\n            await transferAccelerateConfig();\n            await updateFileMetasWithPresignedUrl();\n            for (const meta of fileMetadata) {\n                if (meta['srcFileSize'] > SnowflakeS3Util.DATA_SIZE_THRESHOLD) {\n                    // Add to large file metas\n                    meta['parallel'] = parallel;\n                    largeFileMetas.push(meta);\n                }\n                else {\n                    // Add to small file metas and set parallel to 1\n                    meta['parallel'] = 1;\n                    smallFileMetas.push(meta);\n                }\n            }\n            if (commandType === CMD_TYPE_UPLOAD) {\n                await upload(largeFileMetas, smallFileMetas);\n            }\n            if (commandType === CMD_TYPE_DOWNLOAD) {\n                await download(largeFileMetas, smallFileMetas);\n            }\n        }\n    };\n    /**\n     * Generate the rowset and rowset types using the file metadatas.\n     *\n     * @returns {Object}\n     */\n    this.result = function () {\n        const rowset = [];\n        if (commandType === CMD_TYPE_UPLOAD) {\n            let srcFileSize;\n            let dstFileSize;\n            let srcCompressionType;\n            let dstCompressionType;\n            let errorDetails;\n            if (results) {\n                for (const meta of results) {\n                    if (meta['resultStatus'] === 'ERROR') {\n                        errorDetails = meta['errorDetails'];\n                        if (!errorDetails) {\n                            errorDetails = `Unknown error during PUT of file: ${meta['srcFilePath']}`;\n                        }\n                        throw new Error(errorDetails);\n                    }\n                    if (meta['srcCompressionType']) {\n                        srcCompressionType = meta['srcCompressionType']['name'];\n                    }\n                    else {\n                        srcCompressionType = null;\n                    }\n                    if (meta['dstCompressionType']) {\n                        dstCompressionType = meta['dstCompressionType']['name'];\n                    }\n                    else {\n                        dstCompressionType = null;\n                    }\n                    errorDetails = meta['errorDetails'];\n                    srcFileSize = meta['srcFileSize'].toString();\n                    dstFileSize = meta['dstFileSize'].toString();\n                    rowset.push([\n                        meta['srcFileName'],\n                        meta['dstFileName'],\n                        srcFileSize,\n                        dstFileSize,\n                        srcCompressionType,\n                        dstCompressionType,\n                        meta['resultStatus'],\n                        errorDetails,\n                    ]);\n                }\n            }\n            return {\n                rowset: rowset,\n                rowtype: [\n                    RESULT_TEXT_COLUMN_DESC('source'),\n                    RESULT_TEXT_COLUMN_DESC('target'),\n                    RESULT_FIXED_COLUMN_DESC('sourceSize'),\n                    RESULT_FIXED_COLUMN_DESC('targetSize'),\n                    RESULT_TEXT_COLUMN_DESC('sourceCompression'),\n                    RESULT_TEXT_COLUMN_DESC('targetCompression'),\n                    RESULT_TEXT_COLUMN_DESC('status'),\n                    RESULT_TEXT_COLUMN_DESC('message'),\n                ],\n            };\n        }\n        else if (commandType === CMD_TYPE_DOWNLOAD) {\n            let dstFileSize;\n            let errorDetails;\n            if (results) {\n                for (const meta of results) {\n                    errorDetails = meta['errorDetails'];\n                    dstFileSize = meta['dstFileSize'];\n                    rowset.push([meta['dstFileName'], dstFileSize, meta['resultStatus'], errorDetails]);\n                }\n            }\n            return {\n                rowset: rowset,\n                rowtype: [\n                    RESULT_TEXT_COLUMN_DESC('file'),\n                    RESULT_FIXED_COLUMN_DESC('size'),\n                    RESULT_TEXT_COLUMN_DESC('status'),\n                    RESULT_TEXT_COLUMN_DESC('message'),\n                ],\n            };\n        }\n    };\n    /**\n     * Upload files in the metadata list.\n     *\n     * @returns {null}\n     */\n    async function upload(largeFileMetas, smallFileMetas) {\n        const storageClient = getStorageClient(stageLocationType);\n        const client = storageClient.createClient(stageInfo, false);\n        for (const meta of smallFileMetas) {\n            meta['client'] = client;\n        }\n        for (const meta of largeFileMetas) {\n            meta['client'] = client;\n        }\n        if (smallFileMetas.length > 0) {\n            //await uploadFilesinParallel(smallFileMetas);\n            await uploadFilesinSequential(smallFileMetas);\n        }\n        if (largeFileMetas.length > 0) {\n            await uploadFilesinSequential(largeFileMetas);\n        }\n    }\n    /**\n     * Upload a file sequentially.\n     *\n     * @param {Object} fileMeta\n     *\n     * @returns {null}\n     */\n    async function uploadFilesinSequential(fileMeta) {\n        let index = 0;\n        const fileMetaLen = fileMeta.length;\n        while (index < fileMetaLen) {\n            const result = await uploadOneFile(fileMeta[index]);\n            if (result['resultStatus'] === resultStatus.RENEW_TOKEN) {\n                const client = renewExpiredClient();\n                for (let index2 = index; index2 < fileMetaLen; index2++) {\n                    fileMeta[index2]['client'] = client;\n                }\n                continue;\n            }\n            else if (result['resultStatus'] === resultStatus.RENEW_PRESIGNED_URL) {\n                await updateFileMetasWithPresignedUrl();\n                continue;\n            }\n            results.push(result);\n            if (result['resultStatus'] === resultStatus.ERROR) {\n                break;\n            }\n            index += 1;\n            if (INJECT_WAIT_IN_PUT > 0) {\n                await new Promise((resolve) => setTimeout(resolve, INJECT_WAIT_IN_PUT));\n            }\n        }\n    }\n    /**\n     * Generate a temporary directory for the file then upload.\n     *\n     * @param {Object} meta\n     *\n     * @returns {Object}\n     */\n    async function uploadOneFile(meta) {\n        meta['realSrcFilePath'] = meta['srcFilePath'];\n        const tmpDir = fs.mkdtempSync(path.join(os.tmpdir(), 'tmp'));\n        meta['tmpDir'] = tmpDir;\n        try {\n            if (meta['requireCompress']) {\n                const result = await SnowflakeFileUtil.compressFileWithGZIP(meta['srcFilePath'], meta['tmpDir']);\n                meta['realSrcFilePath'] = result.name;\n            }\n            const result = await SnowflakeFileUtil.getDigestAndSizeForFile(meta['realSrcFilePath']);\n            const sha256Digest = result.digest;\n            const uploadSize = result.size;\n            meta['SHA256_DIGEST'] = sha256Digest;\n            meta['uploadSize'] = uploadSize;\n            const storageClient = getStorageClient(meta['stageLocationType']);\n            await storageClient.uploadOneFileWithRetry(meta);\n        }\n        catch (err) {\n            meta['dstFileSize'] = 0;\n            if (meta['resultStatus']) {\n                meta['resultStatus'] = resultStatus.ERROR;\n            }\n            meta['errorDetails'] = err.toString();\n            meta['errorDetails'] += ` file=${meta['srcFileName']}, real file=${meta['realSrcFilePath']}`;\n        }\n        finally {\n            // Remove all files inside tmp folder\n            const matchingFileNames = getMatchingFilePaths(meta['tmpDir'], meta['srcFileName'] + '*');\n            for (const matchingFileName of matchingFileNames) {\n                await new Promise((resolve, reject) => {\n                    fs.unlink(matchingFileName, (err) => {\n                        if (err) {\n                            reject(err);\n                        }\n                        resolve();\n                    });\n                });\n            }\n            // Delete tmp folder\n            fs.rmdir(meta['tmpDir'], (err) => {\n                if (err) {\n                    throw err;\n                }\n            });\n        }\n        return meta;\n    }\n    /**\n     * Download files in the metadata list.\n     *\n     * @returns {null}\n     */\n    async function download(largeFileMetas, smallFileMetas) {\n        const storageClient = getStorageClient(stageLocationType);\n        const client = storageClient.createClient(stageInfo, false);\n        for (const meta of smallFileMetas) {\n            meta['client'] = client;\n        }\n        for (const meta of largeFileMetas) {\n            meta['client'] = client;\n        }\n        if (smallFileMetas.length > 0) {\n            //await downloadFilesinParallel(smallFileMetas);\n            await downloadFilesinSequential(smallFileMetas);\n        }\n        if (largeFileMetas.length > 0) {\n            await downloadFilesinSequential(largeFileMetas);\n        }\n    }\n    /**\n     * Download a file sequentially.\n     *\n     * @param {Object} fileMeta\n     *\n     * @returns {null}\n     */\n    async function downloadFilesinSequential(fileMeta) {\n        let index = 0;\n        const fileMetaLen = fileMeta.length;\n        while (index < fileMetaLen) {\n            const result = await downloadOneFile(fileMeta[index]);\n            if (result['resultStatus'] === resultStatus.RENEW_TOKEN) {\n                const client = renewExpiredClient();\n                for (let index2 = index; index2 < fileMetaLen; index2++) {\n                    fileMeta[index2]['client'] = client;\n                }\n                continue;\n            }\n            else if (result['resultStatus'] === resultStatus.RENEW_PRESIGNED_URL) {\n                await updateFileMetasWithPresignedUrl();\n                continue;\n            }\n            results.push(result);\n            index += 1;\n            if (INJECT_WAIT_IN_PUT > 0) {\n                await new Promise((resolve) => setTimeout(resolve, INJECT_WAIT_IN_PUT));\n            }\n        }\n    }\n    /**\n     * Download a file and place into the target directory.\n     *\n     * @param {Object} meta\n     *\n     * @returns {Object}\n     */\n    async function downloadOneFile(meta) {\n        meta['tmpDir'] = await new Promise((resolve, reject) => {\n            fs.mkdtemp(path.join(os.tmpdir(), 'tmp'), (err, dir) => {\n                if (err) {\n                    reject(err);\n                }\n                resolve(dir);\n            });\n        });\n        try {\n            const storageClient = getStorageClient(meta['stageLocationType']);\n            await storageClient.downloadOneFile(meta);\n        }\n        catch (err) {\n            meta['dstFileSize'] = -1;\n            if (meta['resultStatus']) {\n                meta['resultStatus'] = resultStatus.ERROR;\n            }\n            meta['errorDetails'] = err.toString();\n            meta['errorDetails'] += ` file=${meta['dstFileName']}`;\n        }\n        return meta;\n    }\n    /**\n     * Determine whether to acceleration configuration for S3 clients.\n     *\n     * @returns {null}\n     */\n    async function transferAccelerateConfig() {\n        if (stageLocationType === S3_FS) {\n            const client = remoteStorageUtil.createClient(stageInfo, false);\n            const s3location = SnowflakeS3Util.extractBucketNameAndPath(stageInfo['location']);\n            await client\n                .getBucketAccelerateConfiguration({ Bucket: s3location.bucketName })\n                .then(function (data) {\n                useAccelerateEndpoint = data['Status'] === 'Enabled';\n            })\n                .catch(function (err) {\n                if (err['code'] === 'AccessDenied') {\n                    return;\n                }\n            });\n        }\n    }\n    /**\n     * Update presigned URLs of file metadata when using GCS client.\n     *\n     * @returns {null}\n     */\n    async function updateFileMetasWithPresignedUrl() {\n        const storageClient = getStorageClient(stageLocationType);\n        // presigned url only applies to remote storage\n        if (storageClient === remoteStorageUtil) {\n            // presigned url only applies to GCS\n            if (stageLocationType === GCS_FS) {\n                if (commandType === CMD_TYPE_UPLOAD) {\n                    const filePathToReplace = getFileNameFromPutCommand(command);\n                    for (const meta of fileMetadata) {\n                        const fileNameToReplaceWith = meta['dstFileName'];\n                        let commandWithSingleFile = command;\n                        commandWithSingleFile = commandWithSingleFile.replace(filePathToReplace, fileNameToReplaceWith);\n                        const options = { sqlText: commandWithSingleFile };\n                        const newContext = statement.createContext(options, context.services, context.connectionConfig);\n                        const ret = await statement.sendRequest(newContext);\n                        meta['stageInfo'] = ret['data']['data']['stageInfo'];\n                        meta['presignedUrl'] = meta['stageInfo']['presignedUrl'];\n                    }\n                }\n                else if (commandType === CMD_TYPE_DOWNLOAD) {\n                    for (let index = 0; index < fileMetadata.length; index++) {\n                        fileMetadata[index]['presignedUrl'] = presignedUrls[index];\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * Returns the local file path.\n     *\n     * @param {String} command\n     *\n     * @returns {String}\n     */\n    function getFileNameFromPutCommand(command) {\n        // Extract file path from PUT command:\n        // E.g. \"PUT file://C:<path-to-file> @DB.SCHEMA.%TABLE;\"\n        const startIndex = command.indexOf(FILE_PROTOCOL) + FILE_PROTOCOL.length;\n        const spaceIndex = command.substring(startIndex).indexOf(' ');\n        const quoteIndex = command.substring(startIndex).indexOf(\"'\");\n        let endIndex = spaceIndex;\n        if (quoteIndex !== -1 && quoteIndex < spaceIndex) {\n            endIndex = quoteIndex;\n        }\n        const filePath = command.substring(startIndex, startIndex + endIndex);\n        return filePath;\n    }\n    /**\n     * Get the storage client based on stage location type.\n     *\n     * @param {String} stageLocationType\n     *\n     * @returns {Object}\n     */\n    function getStorageClient(stageLocationType) {\n        if (stageLocationType === LOCAL_FS) {\n            return SnowflakeLocalUtil;\n        }\n        else if (stageLocationType === S3_FS ||\n            stageLocationType === AZURE_FS ||\n            stageLocationType === GCS_FS) {\n            return remoteStorageUtil;\n        }\n        else {\n            return null;\n        }\n    }\n    /**\n     * Parse the command and get list of files to upload/download.\n     *\n     * @returns {null}\n     */\n    function parseCommand() {\n        const data = response['data'];\n        commandType = data['command'];\n        if (commandType === CMD_TYPE_UPLOAD) {\n            const src = data['src_locations'][0];\n            // Get root directory of file path\n            let root = path.dirname(src);\n            // If cwd exists and root is relative . then replace with context's cwd\n            // Used for VS Code extension where extension cwd differs from user workspace dir\n            if (cwd && !path.isAbsolute(src)) {\n                const absolutePath = path.resolve(cwd, src);\n                root = path.dirname(absolutePath);\n            }\n            let dir;\n            // Check root directory exists\n            if (fs.existsSync(root)) {\n                // Check the root path is a directory\n                dir = fs.statSync(root);\n                if (dir.isDirectory()) {\n                    // Get file name to upload\n                    fileName = path.basename(src);\n                    // Full path name of the file\n                    const fileNameFullPath = path.join(root, fileName);\n                    // If file name has a wildcard\n                    if (fileName.includes('*')) {\n                        // Get all file names that matches the wildcard\n                        const matchingFileNames = getMatchingFilePaths(root, fileName);\n                        for (const matchingFileName of matchingFileNames) {\n                            initEncryptionMaterial();\n                            const fileInfo = fs.statSync(matchingFileName);\n                            const currFileObj = {};\n                            currFileObj['srcFileName'] = path.basename(matchingFileName);\n                            currFileObj['srcFilePath'] = matchingFileName;\n                            currFileObj['srcFileSize'] = fileInfo.size;\n                            filesToPut.push(currFileObj);\n                        }\n                    }\n                    else {\n                        // No wildcard, get single file\n                        if (fs.existsSync(root)) {\n                            initEncryptionMaterial();\n                            const fileInfo = fs.statSync(fileNameFullPath);\n                            const currFileObj = {};\n                            currFileObj['srcFileName'] = fileName;\n                            currFileObj['srcFilePath'] = fileNameFullPath;\n                            currFileObj['srcFileSize'] = fileInfo.size;\n                            filesToPut.push(currFileObj);\n                        }\n                    }\n                }\n            }\n            else {\n                throw new Error(dir + ' is not a directory');\n            }\n            autoCompress = data['autoCompress'];\n            sourceCompression = data['sourceCompression'];\n        }\n        else if (commandType === CMD_TYPE_DOWNLOAD) {\n            initEncryptionMaterial();\n            srcFiles = data['src_locations'];\n            if (srcFiles.length === encryptionMaterial.length) {\n                for (const idx in srcFiles) {\n                    srcFilesToEncryptionMaterial[srcFiles[idx]] = encryptionMaterial[idx];\n                }\n            }\n            else if (encryptionMaterial.length !== 0) {\n                // some encryption material exists. Zero means no encryption\n                throw new Error(\"The number of downloading files doesn't match\");\n            }\n            localLocation = expandTilde(data['localLocation']);\n            // If cwd exists and root is relative . then replace with context's cwd\n            // Used for VS Code extension where extension cwd differs from user workspace dir\n            if (cwd && !path.isAbsolute(localLocation)) {\n                const absolutePath = path.resolve(cwd, localLocation);\n                localLocation = absolutePath;\n            }\n            const dir = fs.statSync(localLocation);\n            if (!dir.isDirectory()) {\n                throw new Error('The local path is not a directory: ' + localLocation);\n            }\n        }\n        parallel = data['parallel'];\n        stageInfo = data['stageInfo'];\n        stageLocationType = stageInfo['locationType'];\n        presignedUrls = data['presignedUrls'];\n        overwrite = data['overwrite'];\n    }\n    /**\n     * Generate encryption material for each metadata.\n     *\n     * @returns {null}\n     */\n    function initEncryptionMaterial() {\n        if (response['data'] && response['data']['encryptionMaterial']) {\n            const rootNode = response['data']['encryptionMaterial'];\n            if (commandType === CMD_TYPE_UPLOAD) {\n                encryptionMaterial.push(new SnowflakeFileEncryptionMaterial(rootNode['queryStageMasterKey'], rootNode['queryId'], rootNode['smkId']));\n            }\n            else if (commandType === CMD_TYPE_DOWNLOAD) {\n                for (const elem in rootNode) {\n                    encryptionMaterial.push(new SnowflakeFileEncryptionMaterial(rootNode[elem]['queryStageMasterKey'], rootNode[elem]['queryId'], rootNode[elem]['smkId']));\n                }\n            }\n        }\n    }\n    /**\n     * Generate metadata for files to upload/download.\n     *\n     * @returns {null}\n     */\n    function initFileMetadata() {\n        if (commandType === CMD_TYPE_UPLOAD) {\n            for (const file of filesToPut) {\n                const currFileObj = {};\n                currFileObj['srcFilePath'] = file['srcFilePath'];\n                currFileObj['srcFileName'] = file['srcFileName'];\n                currFileObj['srcFileSize'] = file['srcFileSize'];\n                currFileObj['stageLocationType'] = stageLocationType;\n                currFileObj['stageInfo'] = stageInfo;\n                currFileObj['overwrite'] = overwrite;\n                fileMetadata.push(currFileObj);\n            }\n        }\n        else if (commandType === CMD_TYPE_DOWNLOAD) {\n            for (const fileName of srcFiles) {\n                const currFileObj = {};\n                currFileObj['srcFileName'] = fileName;\n                currFileObj['dstFileName'] = fileName;\n                currFileObj['stageLocationType'] = stageLocationType;\n                currFileObj['stageInfo'] = stageInfo;\n                currFileObj['useAccelerateEndpoint'] = useAccelerateEndpoint;\n                currFileObj['localLocation'] = localLocation;\n                currFileObj['encryptionMaterial'] = srcFilesToEncryptionMaterial[fileName];\n                fileMetadata.push(currFileObj);\n            }\n        }\n        if (encryptionMaterial.length > 0) {\n            let i = 0;\n            for (const file of fileMetadata) {\n                file['encryptionMaterial'] = encryptionMaterial[i];\n                i++;\n            }\n        }\n    }\n    /**\n     * Get the compression type of the file.\n     *\n     * @returns {null}\n     */\n    function processFileCompressionType() {\n        let userSpecifiedSourceCompression;\n        let autoDetect;\n        if (sourceCompression === 'auto_detect') {\n            autoDetect = true;\n        }\n        else if (sourceCompression === typeof 'undefined') {\n            autoDetect = false;\n        }\n        else {\n            userSpecifiedSourceCompression = fileCompressionType.lookupByMimeSubType(sourceCompression);\n            if (userSpecifiedSourceCompression === typeof 'undefined' ||\n                !userSpecifiedSourceCompression['is_supported']) {\n                throw new Error(sourceCompression + ' is not a supported compression type');\n            }\n            autoDetect = false;\n        }\n        for (const meta of fileMetadata) {\n            const fileName = meta['srcFileName'];\n            const filePath = meta['srcFilePath'];\n            let currentFileCompressionType;\n            let encoding;\n            if (autoDetect) {\n                encoding = mime.lookup(fileName);\n                if (!encoding) {\n                    const test = Buffer.alloc(4);\n                    const fd = fs.openSync(filePath, 'r+');\n                    fs.readSync(fd, test, 0, 4, 0);\n                    fs.closeSync(fd);\n                    if (fileName.substring(fileName.lastIndexOf('.')) === '.br') {\n                        encoding = 'br';\n                    }\n                    else if (fileName.substring(fileName.lastIndexOf('.')) === '.deflate') {\n                        encoding = 'deflate';\n                    }\n                    else if (fileName.substring(fileName.lastIndexOf('.')) === '.raw_deflate') {\n                        encoding = 'raw_deflate';\n                    }\n                    else if (Buffer.from(test.toString()).slice(0, 3) === Buffer.from('ORC')) {\n                        encoding = 'orc';\n                    }\n                    else if (Buffer.from(test.toString()) === Buffer.from('PAR1')) {\n                        encoding = 'parquet';\n                    }\n                    else if (test.toString('hex') === '28fd2ffd' ||\n                        fileName.substring(fileName.lastIndexOf('.')) === '.zst') {\n                        encoding = 'zstd';\n                    }\n                }\n                if (encoding) {\n                    currentFileCompressionType = fileCompressionType.lookupByEncoding(encoding);\n                }\n                // else {} No file encoding detected\n                if (currentFileCompressionType && !currentFileCompressionType['is_supported']) {\n                    throw new Error(encoding + ' is not a a supported compression type');\n                }\n            }\n            else {\n                currentFileCompressionType = userSpecifiedSourceCompression;\n            }\n            if (currentFileCompressionType) {\n                if (currentFileCompressionType['is_supported']) {\n                    meta['dstCompressionType'] = currentFileCompressionType;\n                    meta['requireCompress'] = false;\n                    meta['dstFileName'] = meta['srcFileName'];\n                }\n                else {\n                    throw new Error(encoding + ' is not a a supported compression type');\n                }\n            }\n            else {\n                meta['requireCompress'] = autoCompress;\n                meta['srcCompressionType'] = null;\n                // If requireCompress is true, destination file extension is changed to zip\n                if (autoCompress) {\n                    // Compress with gzip\n                    meta['dstCompressionType'] = fileCompressionType.lookupByMimeSubType('GZIP');\n                    meta['dstFileName'] = meta['srcFileName'] + meta['dstCompressionType']['file_extension'];\n                }\n                else {\n                    meta['dstFileName'] = meta['srcFileName'];\n                    meta['dstCompressionType'] = null;\n                }\n            }\n        }\n    }\n}\n//TODO SNOW-992387: Create a function to renew expired client\nfunction renewExpiredClient() { }\nmodule.exports = FileTransferAgent;\n//# sourceMappingURL=file_transfer_agent.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/dist/lib/file_transfer_agent/file_transfer_agent.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/dist/lib/file_transfer_agent/gcs_util.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/snowflake-sdk/dist/lib/file_transfer_agent/gcs_util.js ***!
  \*****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst EncryptionMetadata = (__webpack_require__(/*! ./encrypt_util */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/file_transfer_agent/encrypt_util.js\").EncryptionMetadata);\nconst FileHeader = (__webpack_require__(/*! ../file_util */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/file_util.js\").FileHeader);\nconst getProxyAgent = (__webpack_require__(/*! ../http/node */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/http/node.js\").getProxyAgent);\nconst ProxyUtil = __webpack_require__(/*! ../proxy_util */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/proxy_util.js\");\nconst Util = __webpack_require__(/*! ../util */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/util.js\");\nconst { lstrip } = __webpack_require__(/*! ../util */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/util.js\");\nconst Logger = (__webpack_require__(/*! ../logger */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/logger.js\")[\"default\"]);\nconst GCS_METADATA_PREFIX = 'x-goog-meta-';\nconst SFC_DIGEST = 'sfc-digest';\nconst MATDESC_KEY = 'matdesc';\nconst ENCRYPTIONDATAPROP = 'encryptiondata';\nconst GCS_METADATA_SFC_DIGEST = GCS_METADATA_PREFIX + SFC_DIGEST;\nconst GCS_METADATA_MATDESC_KEY = GCS_METADATA_PREFIX + MATDESC_KEY;\nconst GCS_METADATA_ENCRYPTIONDATAPROP = GCS_METADATA_PREFIX + ENCRYPTIONDATAPROP;\nconst GCS_FILE_HEADER_DIGEST = 'gcs-file-header-digest';\nconst GCS_FILE_HEADER_CONTENT_LENGTH = 'gcs-file-header-content-length';\nconst GCS_FILE_HEADER_ENCRYPTION_METADATA = 'gcs-file-header-encryption-metadata';\nconst HTTP_HEADER_CONTENT_ENCODING = 'Content-Encoding';\nconst resultStatus = (__webpack_require__(/*! ../file_util */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/file_util.js\").resultStatus);\nconst { Storage } = __webpack_require__(/*! @google-cloud/storage */ \"(rsc)/./node_modules/@google-cloud/storage/build/cjs/src/index.js\");\nconst EXPIRED_TOKEN = 'ExpiredToken';\nconst ERRORNO_WSAECONNABORTED = 10053; // network connection was aborted\n/**\n * @typedef {object} GCSLocation\n * @property {string} bucketName\n * @property {string} path\n */\nfunction GCSLocation(bucketName, path) {\n    return {\n        bucketName: bucketName,\n        path: path,\n    };\n}\n/**\n * Creates an GCS utility object.\n * @param {module} connectionConfig\n * @param {module} httpClient\n * @param {module} fileStream\n *\n * @returns {Object}\n * @constructor\n */\nfunction GCSUtil(connectionConfig, httpClient) {\n    let axios = httpClient;\n    let isProxyEnabled = false;\n    /**\n     * Retrieve the GCS token from the stage info metadata.\n     *\n     * @param {Object} stageInfo\n     *\n     * @returns {String}\n     */\n    this.createClient = function (stageInfo) {\n        const stageCredentials = stageInfo['creds'];\n        const gcsToken = stageCredentials['GCS_ACCESS_TOKEN'];\n        //TODO: SNOW-1789759 the value is hardcoded now, but it should be server driven\n        const endPoint = this.getGCSCustomEndPoint(stageInfo);\n        let client;\n        if (gcsToken) {\n            const interceptors = [];\n            interceptors.push({\n                request: (requestConfig) => {\n                    requestConfig.headers = requestConfig.headers || {};\n                    Object.assign(requestConfig.headers, { Authorization: `Bearer ${gcsToken}` });\n                    return requestConfig;\n                },\n            });\n            const storage = Util.exists(endPoint)\n                ? new Storage({ interceptors_: interceptors, apiEndpoint: endPoint })\n                : new Storage({ interceptors_: interceptors });\n            client = { gcsToken: gcsToken, gcsClient: storage };\n        }\n        else {\n            client = null;\n        }\n        this.setupHttpClient(endPoint);\n        return client;\n    };\n    /**\n     * Extract the bucket name and path from the metadata's stage location.\n     *\n     * @param {String} stageLocation\n     *\n     * @returns {GCSLocation}\n     */\n    this.extractBucketNameAndPath = function (stageLocation) {\n        let containerName = stageLocation;\n        let path = '';\n        // split stage location as bucket name and path\n        if (stageLocation.includes('/')) {\n            containerName = stageLocation.substring(0, stageLocation.indexOf('/'));\n            path = stageLocation.substring(stageLocation.indexOf('/') + 1, stageLocation.length);\n            if (path && !path.endsWith('/')) {\n                path += '/';\n            }\n        }\n        return GCSLocation(containerName, path);\n    };\n    /**\n     * Create file header based on file being uploaded or not.\n     *\n     * @param {Object} meta\n     * @param {String} filename\n     *\n     * @returns {Object}\n     */\n    this.getFileHeader = async function (meta, filename) {\n        if (meta['resultStatus'] === resultStatus.UPLOADED ||\n            meta['resultStatus'] === resultStatus.DOWNLOADED) {\n            return FileHeader(meta[GCS_FILE_HEADER_DIGEST], meta[GCS_FILE_HEADER_CONTENT_LENGTH], meta[GCS_FILE_HEADER_ENCRYPTION_METADATA]);\n        }\n        else {\n            if (meta['presignedUrl']) {\n                await axios.get(meta['presignedUrl']).catch((err) => {\n                    if ([401, 403, 404].includes(err.response.status)) {\n                        meta['resultStatus'] = resultStatus.NOT_FOUND_FILE;\n                    }\n                });\n            }\n            else {\n                const url = this.generateFileURL(meta.stageInfo, lstrip(filename, '/'));\n                const accessToken = meta['client'].gcsToken;\n                const gcsHeaders = { Authorization: `Bearer ${accessToken}` };\n                let encryptionMetadata;\n                let digest;\n                let contentLength;\n                let encryptionDataProp;\n                let matDescKey;\n                try {\n                    if (this.shouldUseJsonApi(meta)) {\n                        const gcsLocation = this.extractBucketNameAndPath(meta['stageInfo']['location']);\n                        const metadata = await meta['client'].gcsClient\n                            .bucket(gcsLocation.bucketName)\n                            .file(gcsLocation.path + filename)\n                            .getMetadata();\n                        digest = metadata[0].metadata[SFC_DIGEST];\n                        contentLength = metadata[0].size;\n                        encryptionDataProp = metadata[0].metadata[ENCRYPTIONDATAPROP];\n                        matDescKey = metadata[0].metadata[MATDESC_KEY];\n                    }\n                    else {\n                        const response = await axios.head(url, { headers: gcsHeaders });\n                        digest = response.headers[GCS_METADATA_SFC_DIGEST];\n                        contentLength = response.headers['content-length'];\n                        encryptionDataProp = response.headers[GCS_METADATA_ENCRYPTIONDATAPROP];\n                        matDescKey = response.headers[GCS_METADATA_MATDESC_KEY];\n                    }\n                    if (encryptionDataProp) {\n                        const encryptionData = JSON.parse(encryptionDataProp);\n                        if (encryptionData) {\n                            encryptionMetadata = EncryptionMetadata(encryptionData['WrappedContentKey']['EncryptedKey'], encryptionData['ContentEncryptionIV'], matDescKey ? matDescKey : null);\n                        }\n                    }\n                    meta['resultStatus'] = resultStatus.UPLOADED;\n                    return FileHeader(digest, contentLength, encryptionMetadata);\n                }\n                catch (err) {\n                    const errCode = !isNaN(err['code']) && !isNaN(parseInt(err['code']))\n                        ? err['code']\n                        : err.response.status;\n                    if ([403, 408, 429, 500, 503].includes(errCode)) {\n                        meta['lastError'] = err;\n                        meta['resultStatus'] = resultStatus.NEED_RETRY;\n                        return;\n                    }\n                    if (errCode === 404) {\n                        meta['resultStatus'] = resultStatus.NOT_FOUND_FILE;\n                    }\n                    else if (errCode === 401) {\n                        meta['lastError'] = err;\n                        meta['resultStatus'] = resultStatus.RENEW_TOKEN;\n                    }\n                    else {\n                        meta['lastError'] = err;\n                        meta['resultStatus'] = resultStatus.ERROR;\n                        throw err;\n                    }\n                }\n            }\n        }\n        return FileHeader(null, null, null);\n    };\n    /**\n     * Create the file metadata then upload the file.\n     *\n     * @param {String} dataFile\n     * @param {Object} meta\n     * @param {Object} encryptionMetadata\n     * @param {Number} maxConcurrency\n     *\n     * @returns {null}\n     */\n    this.uploadFile = async function (dataFile, meta, encryptionMetadata, maxConcurrency) {\n        const fileStream = fs.readFileSync(dataFile);\n        await this.uploadFileStream(fileStream, meta, encryptionMetadata, maxConcurrency);\n    };\n    /**\n     * Create the file metadata then upload the file stream.\n     *\n     * @param {String} fileStream\n     * @param {Object} meta\n     * @param {Object} encryptionMetadata\n     *\n     * @returns {null}\n     */\n    this.uploadFileStream = async function (fileStream, meta, encryptionMetadata) {\n        let uploadUrl = meta['presignedUrl'];\n        let accessToken = null;\n        if (!uploadUrl) {\n            const tempFilename = meta['dstFileName'].substring(meta['dstFileName'].indexOf('/') + 1, meta['dstFileName'].length);\n            uploadUrl = this.generateFileURL(meta.stageInfo, tempFilename);\n            accessToken = meta['client'].gcsToken;\n        }\n        let contentEncoding = '';\n        if (meta['dstCompressionType']) {\n            contentEncoding = meta['dstCompressionType']['name'];\n            contentEncoding = contentEncoding.toLowerCase();\n        }\n        // We set the contentEncoding to blank for the following file types\n        if (['gzip', 'bzip2', 'brotli', 'deflate', 'raw_deflate', 'zstd'].includes(contentEncoding)) {\n            contentEncoding = '';\n        }\n        const gcsHeaders = {\n            [HTTP_HEADER_CONTENT_ENCODING]: contentEncoding,\n            [GCS_METADATA_SFC_DIGEST]: meta['SHA256_DIGEST'],\n        };\n        if (accessToken) {\n            gcsHeaders['Authorization'] = `Bearer ${accessToken}`;\n        }\n        if (encryptionMetadata) {\n            gcsHeaders[GCS_METADATA_ENCRYPTIONDATAPROP] = JSON.stringify({\n                EncryptionMode: 'FullBlob',\n                WrappedContentKey: {\n                    KeyId: 'symmKey1',\n                    EncryptedKey: encryptionMetadata.key,\n                    Algorithm: 'AES_CBC_256',\n                },\n                EncryptionAgent: {\n                    Protocol: '1.0',\n                    EncryptionAlgorithm: 'AES_CBC_256',\n                },\n                ContentEncryptionIV: encryptionMetadata.iv,\n                KeyWrappingMetadata: {\n                    EncryptionLibrary: 'Java 5.3.0',\n                },\n            });\n            gcsHeaders[GCS_METADATA_MATDESC_KEY] = encryptionMetadata.matDesc;\n        }\n        try {\n            if (this.shouldUseJsonApi(meta)) {\n                const gcsLocation = this.extractBucketNameAndPath(meta['stageInfo']['location']);\n                await meta['client'].gcsClient\n                    .bucket(gcsLocation.bucketName)\n                    .file(gcsLocation.path + meta['dstFileName'])\n                    .save(fileStream, {\n                    resumable: false,\n                    metadata: {\n                        metadata: {\n                            [ENCRYPTIONDATAPROP]: gcsHeaders[GCS_METADATA_ENCRYPTIONDATAPROP],\n                            [MATDESC_KEY]: gcsHeaders[GCS_METADATA_MATDESC_KEY],\n                            [SFC_DIGEST]: gcsHeaders[GCS_METADATA_SFC_DIGEST],\n                        },\n                    },\n                });\n            }\n            else {\n                // Set maxBodyLength to allow large file uploading\n                await axios.put(uploadUrl, fileStream, { maxBodyLength: Infinity, headers: gcsHeaders });\n            }\n        }\n        catch (err) {\n            if ([403, 408, 429, 500, 503].includes(err['code'])) {\n                meta['lastError'] = err;\n                meta['resultStatus'] = resultStatus.NEED_RETRY;\n            }\n            else if (!accessToken &&\n                err['code'] === 400 &&\n                (!meta['lastError'] || meta['lastError']['code'] !== 400)) {\n                // Only attempt to renew urls if this isn't the second time this happens\n                meta['lastError'] = err;\n                meta['resultStatus'] = resultStatus.RENEW_PRESIGNED_URL;\n            }\n            else if (accessToken && err['code'] === 401) {\n                meta['lastError'] = err;\n                meta['resultStatus'] = resultStatus.RENEW_TOKEN;\n            }\n            return;\n        }\n        meta['dstFileSize'] = meta['uploadSize'];\n        meta['resultStatus'] = resultStatus.UPLOADED;\n        meta[GCS_FILE_HEADER_DIGEST] = gcsHeaders[GCS_METADATA_SFC_DIGEST];\n        meta[GCS_FILE_HEADER_CONTENT_LENGTH] = meta['uploadSize'];\n        meta[GCS_FILE_HEADER_ENCRYPTION_METADATA] = gcsHeaders[GCS_METADATA_ENCRYPTIONDATAPROP];\n    };\n    /**\n     * Download the file.\n     *\n     * @param {Object} meta\n     * @param fullDstPath\n     *\n     * @returns {null}\n     */\n    this.nativeDownloadFile = async function (meta, fullDstPath) {\n        let downloadUrl = meta['presignedUrl'];\n        let accessToken = null;\n        let gcsHeaders = {};\n        if (!downloadUrl) {\n            downloadUrl = this.generateFileURL(meta.stageInfo, lstrip(meta['srcFileName'], '/'));\n            accessToken = meta['client'].gcsToken;\n            gcsHeaders = { Authorization: `Bearer ${accessToken}` };\n        }\n        let encryptionDataprop;\n        let matDescKey;\n        let sfcDigest;\n        let size;\n        try {\n            if (this.shouldUseJsonApi(meta)) {\n                const { bucketName, path } = this.extractBucketNameAndPath(meta['stageInfo']['location']);\n                Logger().debug(`Use GCP client to download the file.`);\n                Logger().debug(`Send Get Request to the Bucket: ${bucketName}, GET request: ${path}`);\n                await meta['client'].gcsClient\n                    .bucket(bucketName)\n                    .file(path + meta['srcFileName'])\n                    .download({\n                    destination: fullDstPath,\n                });\n                const metadata = await meta['client'].gcsClient\n                    .bucket(bucketName)\n                    .file(path + meta['srcFileName'])\n                    .getMetadata();\n                encryptionDataprop = metadata[0].metadata[ENCRYPTIONDATAPROP];\n                matDescKey = metadata[0].metadata[MATDESC_KEY];\n                sfcDigest = metadata[0].metadata[SFC_DIGEST];\n                size = metadata[0].size;\n            }\n            else {\n                Logger().debug(`Downloading file from GCS using Axios`);\n                let response;\n                await axios\n                    .get(downloadUrl, {\n                    headers: gcsHeaders,\n                    responseType: 'stream',\n                })\n                    .then(async (res) => {\n                    response = res;\n                    await new Promise((resolve, reject) => {\n                        const writer = fs.createWriteStream(fullDstPath);\n                        response.data.pipe(writer);\n                        writer.on('error', (err) => {\n                            writer.close();\n                            reject(err);\n                        });\n                        writer.on('close', () => {\n                            resolve();\n                        });\n                    });\n                });\n                Logger().debug(`Sent Get Request to ${downloadUrl}, destination: ${fullDstPath}, http status: ${response.status}`);\n                encryptionDataprop = response.headers[GCS_METADATA_ENCRYPTIONDATAPROP];\n                matDescKey = response.headers[GCS_METADATA_MATDESC_KEY];\n                sfcDigest = response.headers[GCS_METADATA_SFC_DIGEST];\n                size = response.headers['content-length'];\n            }\n        }\n        catch (err) {\n            if (err['code'] === EXPIRED_TOKEN) {\n                meta['resultStatus'] = resultStatus.RENEW_TOKEN;\n            }\n            else {\n                meta['lastError'] = err;\n                if (err['code'] === ERRORNO_WSAECONNABORTED) {\n                    meta['resultStatus'] = resultStatus.NEED_RETRY_WITH_LOWER_CONCURRENCY;\n                }\n                else {\n                    meta['resultStatus'] = resultStatus.NEED_RETRY;\n                }\n            }\n            return;\n        }\n        let encryptionData;\n        if (encryptionDataprop) {\n            encryptionData = JSON.parse(encryptionDataprop);\n        }\n        let encryptionMetadata;\n        if (encryptionData) {\n            encryptionMetadata = EncryptionMetadata(encryptionData['WrappedContentKey']['EncryptedKey'], encryptionData['ContentEncryptionIV'], matDescKey);\n        }\n        const fileInfo = fs.statSync(fullDstPath);\n        meta['srcFileSize'] = fileInfo.size;\n        meta['resultStatus'] = resultStatus.DOWNLOADED;\n        meta[GCS_FILE_HEADER_DIGEST] = sfcDigest;\n        meta[GCS_FILE_HEADER_CONTENT_LENGTH] = size;\n        meta[GCS_FILE_HEADER_ENCRYPTION_METADATA] = encryptionMetadata;\n    };\n    /**\n     * Generate file URL based on bucket.\n     *\n     * @param {Object} stageInfo\n     * @param {String} filename\n     *\n     * @returns {String}\n     */\n    this.generateFileURL = function (stageInfo, filename) {\n        const gcsLocation = this.extractBucketNameAndPath(stageInfo.location);\n        const fullFilePath = `${gcsLocation.path}${filename}`;\n        const endPoint = this.getGCSCustomEndPoint(stageInfo);\n        let link;\n        if (stageInfo['useVirtualUrl']) {\n            link = `${endPoint}/${fullFilePath}`;\n        }\n        else {\n            link = `${endPoint != null ? endPoint : 'https://storage.googleapis.com'}/${gcsLocation.bucketName}/${fullFilePath}`;\n        }\n        return link.startsWith('https://') ? link : `https://${link}`;\n    };\n    this.getGCSCustomEndPoint = function (stageInfo) {\n        //TODO: SNOW-1789759 hardcoded region will be replaced in the future\n        const isRegionalUrlEnabled = stageInfo.region.toLowerCase() === 'me-central2' || stageInfo.useRegionalUrl;\n        let endPoint = null;\n        if (stageInfo['endPoint']) {\n            endPoint = stageInfo['endPoint'];\n        }\n        else if (stageInfo['useVirtualUrl']) {\n            const bucket = this.extractBucketNameAndPath(stageInfo.location).bucketName;\n            endPoint = `https://${bucket}.storage.googleapis.com`;\n        }\n        else if (isRegionalUrlEnabled) {\n            endPoint = `storage.${stageInfo.region.toLowerCase()}.rep.googleapis.com`;\n        }\n        return endPoint;\n    };\n    this.setupHttpClient = function (endPoint) {\n        if (typeof httpClient === 'undefined') {\n            const proxy = ProxyUtil.getProxy(connectionConfig.getProxy(), 'GCS Util');\n            //When http_proxy is enabled, the driver should use Axios for HTTPS requests to avoid relying on HTTP_PROXY in GCS.\n            if (proxy || Util.getEnvVar('http_proxy')) {\n                isProxyEnabled = true;\n                const proxyAgent = getProxyAgent({\n                    proxyOptions: proxy,\n                    connectionConfig,\n                    parsedUrl: new URL(connectionConfig.accessUrl),\n                    destination: endPoint || 'storage.googleapis.com',\n                });\n                axios = (__webpack_require__(/*! axios */ \"(rsc)/./node_modules/axios/dist/node/axios.cjs\").create)({\n                    proxy: false,\n                    httpAgent: proxyAgent,\n                    httpsAgent: proxyAgent,\n                });\n            }\n            else {\n                axios = __webpack_require__(/*! axios */ \"(rsc)/./node_modules/axios/dist/node/axios.cjs\");\n            }\n        }\n    };\n    this.shouldUseJsonApi = function (meta) {\n        const accessToken = meta['client'].gcsToken;\n        const useVirtualUrl = meta['stageInfo']['useVirtualUrl'];\n        return (!!accessToken &&\n            process.env.SNOWFLAKE_FORCE_GCP_USE_DOWNSCOPED_CREDENTIAL !== 'true' &&\n            !isProxyEnabled &&\n            !useVirtualUrl);\n    };\n}\nmodule.exports = GCSUtil;\n//# sourceMappingURL=gcs_util.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/dist/lib/file_transfer_agent/gcs_util.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/dist/lib/file_transfer_agent/local_util.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/snowflake-sdk/dist/lib/file_transfer_agent/local_util.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst path = __webpack_require__(/*! path */ \"path\");\nconst expandTilde = __webpack_require__(/*! expand-tilde */ \"(rsc)/./node_modules/expand-tilde/index.js\");\nconst resultStatus = (__webpack_require__(/*! ../file_util */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/file_util.js\").resultStatus);\n/**\n * Creates a local utility object.\n *\n * @returns {Object}\n * @constructor\n */\nfunction LocalUtil() {\n    this.createClient = function () {\n        return null;\n    };\n    /**\n     * Write file to upload.\n     *\n     * @param {Object} meta\n     *\n     * @returns {null}\n     */\n    this.uploadOneFileWithRetry = async function (meta) {\n        await new Promise(function (resolve) {\n            // Create stream object for reader and writer\n            const reader = fs.createReadStream(meta['realSrcFilePath']);\n            // Create directory if doesn't exist\n            if (!fs.existsSync(meta['stageInfo']['location'])) {\n                fs.mkdirSync(meta['stageInfo']['location'], { recursive: true });\n            }\n            let output = path.join(meta['stageInfo']['location'], meta['dstFileName']);\n            // expand '~' and '~user' expressions\n            if (process.platform !== 'win32') {\n                output = expandTilde(output);\n            }\n            const writer = fs.createWriteStream(output);\n            // Write file\n            const result = reader.pipe(writer);\n            result.on('finish', function () {\n                resolve();\n            });\n        });\n        meta['dstFileSize'] = meta['uploadSize'];\n        meta['resultStatus'] = resultStatus.UPLOADED;\n    };\n    /**\n     * Write file to download.\n     *\n     * @param {Object} meta\n     *\n     * @returns {null}\n     */\n    this.downloadOneFile = async function (meta) {\n        let output;\n        await new Promise(function (resolve) {\n            const srcFilePath = expandTilde(meta['stageInfo']['location']);\n            // Create stream object for reader and writer\n            const realSrcFilePath = path.join(srcFilePath, meta['srcFileName']);\n            const reader = fs.createReadStream(realSrcFilePath);\n            // Create directory if doesn't exist\n            if (!fs.existsSync(meta['localLocation'])) {\n                fs.mkdirSync(meta['localLocation'], { recursive: true });\n            }\n            output = path.join(meta['localLocation'], meta['dstFileName']);\n            const writer = fs.createWriteStream(output);\n            // Write file\n            const result = reader.pipe(writer);\n            result.on('finish', function () {\n                resolve();\n            });\n        });\n        const fileStat = fs.statSync(output);\n        meta['dstFileSize'] = fileStat.size;\n        meta['resultStatus'] = resultStatus.DOWNLOADED;\n    };\n}\nexports.LocalUtil = LocalUtil;\n//# sourceMappingURL=local_util.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9kaXN0L2xpYi9maWxlX3RyYW5zZmVyX2FnZW50L2xvY2FsX3V0aWwuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixXQUFXLG1CQUFPLENBQUMsY0FBSTtBQUN2QixhQUFhLG1CQUFPLENBQUMsa0JBQU07QUFDM0Isb0JBQW9CLG1CQUFPLENBQUMsZ0VBQWM7QUFDMUMscUJBQXFCLGtIQUFvQztBQUN6RDtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOERBQThELGlCQUFpQjtBQUMvRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkI7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzREFBc0QsaUJBQWlCO0FBQ3ZFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCIiwic291cmNlcyI6WyIvVXNlcnMvd2FuZ2hhb3RhaS9EZXNrdG9wL2VsdmVubGFiL0hUVi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9kaXN0L2xpYi9maWxlX3RyYW5zZmVyX2FnZW50L2xvY2FsX3V0aWwuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5jb25zdCBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG5jb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuY29uc3QgZXhwYW5kVGlsZGUgPSByZXF1aXJlKCdleHBhbmQtdGlsZGUnKTtcbmNvbnN0IHJlc3VsdFN0YXR1cyA9IHJlcXVpcmUoJy4uL2ZpbGVfdXRpbCcpLnJlc3VsdFN0YXR1cztcbi8qKlxuICogQ3JlYXRlcyBhIGxvY2FsIHV0aWxpdHkgb2JqZWN0LlxuICpcbiAqIEByZXR1cm5zIHtPYmplY3R9XG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gTG9jYWxVdGlsKCkge1xuICAgIHRoaXMuY3JlYXRlQ2xpZW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFdyaXRlIGZpbGUgdG8gdXBsb2FkLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG1ldGFcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtudWxsfVxuICAgICAqL1xuICAgIHRoaXMudXBsb2FkT25lRmlsZVdpdGhSZXRyeSA9IGFzeW5jIGZ1bmN0aW9uIChtZXRhKSB7XG4gICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgICAgICAvLyBDcmVhdGUgc3RyZWFtIG9iamVjdCBmb3IgcmVhZGVyIGFuZCB3cml0ZXJcbiAgICAgICAgICAgIGNvbnN0IHJlYWRlciA9IGZzLmNyZWF0ZVJlYWRTdHJlYW0obWV0YVsncmVhbFNyY0ZpbGVQYXRoJ10pO1xuICAgICAgICAgICAgLy8gQ3JlYXRlIGRpcmVjdG9yeSBpZiBkb2Vzbid0IGV4aXN0XG4gICAgICAgICAgICBpZiAoIWZzLmV4aXN0c1N5bmMobWV0YVsnc3RhZ2VJbmZvJ11bJ2xvY2F0aW9uJ10pKSB7XG4gICAgICAgICAgICAgICAgZnMubWtkaXJTeW5jKG1ldGFbJ3N0YWdlSW5mbyddWydsb2NhdGlvbiddLCB7IHJlY3Vyc2l2ZTogdHJ1ZSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBvdXRwdXQgPSBwYXRoLmpvaW4obWV0YVsnc3RhZ2VJbmZvJ11bJ2xvY2F0aW9uJ10sIG1ldGFbJ2RzdEZpbGVOYW1lJ10pO1xuICAgICAgICAgICAgLy8gZXhwYW5kICd+JyBhbmQgJ351c2VyJyBleHByZXNzaW9uc1xuICAgICAgICAgICAgaWYgKHByb2Nlc3MucGxhdGZvcm0gIT09ICd3aW4zMicpIHtcbiAgICAgICAgICAgICAgICBvdXRwdXQgPSBleHBhbmRUaWxkZShvdXRwdXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qgd3JpdGVyID0gZnMuY3JlYXRlV3JpdGVTdHJlYW0ob3V0cHV0KTtcbiAgICAgICAgICAgIC8vIFdyaXRlIGZpbGVcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHJlYWRlci5waXBlKHdyaXRlcik7XG4gICAgICAgICAgICByZXN1bHQub24oJ2ZpbmlzaCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIG1ldGFbJ2RzdEZpbGVTaXplJ10gPSBtZXRhWyd1cGxvYWRTaXplJ107XG4gICAgICAgIG1ldGFbJ3Jlc3VsdFN0YXR1cyddID0gcmVzdWx0U3RhdHVzLlVQTE9BREVEO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogV3JpdGUgZmlsZSB0byBkb3dubG9hZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBtZXRhXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7bnVsbH1cbiAgICAgKi9cbiAgICB0aGlzLmRvd25sb2FkT25lRmlsZSA9IGFzeW5jIGZ1bmN0aW9uIChtZXRhKSB7XG4gICAgICAgIGxldCBvdXRwdXQ7XG4gICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgICAgICBjb25zdCBzcmNGaWxlUGF0aCA9IGV4cGFuZFRpbGRlKG1ldGFbJ3N0YWdlSW5mbyddWydsb2NhdGlvbiddKTtcbiAgICAgICAgICAgIC8vIENyZWF0ZSBzdHJlYW0gb2JqZWN0IGZvciByZWFkZXIgYW5kIHdyaXRlclxuICAgICAgICAgICAgY29uc3QgcmVhbFNyY0ZpbGVQYXRoID0gcGF0aC5qb2luKHNyY0ZpbGVQYXRoLCBtZXRhWydzcmNGaWxlTmFtZSddKTtcbiAgICAgICAgICAgIGNvbnN0IHJlYWRlciA9IGZzLmNyZWF0ZVJlYWRTdHJlYW0ocmVhbFNyY0ZpbGVQYXRoKTtcbiAgICAgICAgICAgIC8vIENyZWF0ZSBkaXJlY3RvcnkgaWYgZG9lc24ndCBleGlzdFxuICAgICAgICAgICAgaWYgKCFmcy5leGlzdHNTeW5jKG1ldGFbJ2xvY2FsTG9jYXRpb24nXSkpIHtcbiAgICAgICAgICAgICAgICBmcy5ta2RpclN5bmMobWV0YVsnbG9jYWxMb2NhdGlvbiddLCB7IHJlY3Vyc2l2ZTogdHJ1ZSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG91dHB1dCA9IHBhdGguam9pbihtZXRhWydsb2NhbExvY2F0aW9uJ10sIG1ldGFbJ2RzdEZpbGVOYW1lJ10pO1xuICAgICAgICAgICAgY29uc3Qgd3JpdGVyID0gZnMuY3JlYXRlV3JpdGVTdHJlYW0ob3V0cHV0KTtcbiAgICAgICAgICAgIC8vIFdyaXRlIGZpbGVcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHJlYWRlci5waXBlKHdyaXRlcik7XG4gICAgICAgICAgICByZXN1bHQub24oJ2ZpbmlzaCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IGZpbGVTdGF0ID0gZnMuc3RhdFN5bmMob3V0cHV0KTtcbiAgICAgICAgbWV0YVsnZHN0RmlsZVNpemUnXSA9IGZpbGVTdGF0LnNpemU7XG4gICAgICAgIG1ldGFbJ3Jlc3VsdFN0YXR1cyddID0gcmVzdWx0U3RhdHVzLkRPV05MT0FERUQ7XG4gICAgfTtcbn1cbmV4cG9ydHMuTG9jYWxVdGlsID0gTG9jYWxVdGlsO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bG9jYWxfdXRpbC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/dist/lib/file_transfer_agent/local_util.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/dist/lib/file_transfer_agent/remote_storage_util.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/snowflake-sdk/dist/lib/file_transfer_agent/remote_storage_util.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst path = __webpack_require__(/*! path */ \"path\");\nconst SnowflakeS3Util = (__webpack_require__(/*! ./s3_util */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/file_transfer_agent/s3_util.js\").S3Util);\nconst SnowflakeAzureUtil = __webpack_require__(/*! ./azure_util */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/file_transfer_agent/azure_util.js\");\nconst SnowflakeGCSUtil = __webpack_require__(/*! ./gcs_util */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/file_transfer_agent/gcs_util.js\");\nconst ExecutionTimer = __webpack_require__(/*! ../logger/execution_timer */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/logger/execution_timer.js\");\nconst SnowflakeEncryptionUtil = new ((__webpack_require__(/*! ./encrypt_util */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/file_transfer_agent/encrypt_util.js\").EncryptUtil))();\nconst resultStatus = (__webpack_require__(/*! ../file_util */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/file_util.js\").resultStatus);\nconst Logger = (__webpack_require__(/*! ../logger */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/logger.js\")[\"default\"]);\nconst DEFAULT_CONCURRENCY = 1;\nconst DEFAULT_MAX_RETRY = 5;\n// File Encryption Material\nfunction SnowflakeFileEncryptionMaterial(key, qid, smkid) {\n    const smkidString = '' + smkid;\n    return {\n        queryStageMasterKey: key, // query stage master key\n        queryId: qid, // query id\n        smkId: smkidString, // SMK id\n    };\n}\nexports.SnowflakeFileEncryptionMaterial = SnowflakeFileEncryptionMaterial;\n/**\n * Creates a remote storage utility object.\n *\n * @returns {Object}\n * @constructor\n */\nfunction RemoteStorageUtil(connectionConfig) {\n    let client = null;\n    /**\n     * Get storage type based on location type.\n     *\n     * @param {String} type\n     *\n     * @returns {Object}\n     */\n    this.getForStorageType = function (type) {\n        if (client) {\n            return client;\n        }\n        if (type === 'S3') {\n            client = new SnowflakeS3Util(connectionConfig);\n        }\n        else if (type === 'AZURE') {\n            client = new SnowflakeAzureUtil(connectionConfig);\n        }\n        else if (type === 'GCS') {\n            client = new SnowflakeGCSUtil(connectionConfig);\n        }\n        return client;\n    };\n    /**\n     * Create the client based on the location type.\n     */\n    this.createClient = function (stageInfo, useAccelerateEndpoint = false) {\n        const utilClass = this.getForStorageType(stageInfo['locationType']);\n        return utilClass.createClient(stageInfo, useAccelerateEndpoint);\n    };\n    /**\n     * Encrypt then upload one file stream.\n     *\n     * @param {Object} meta\n     *\n     * @returns {null}\n     */\n    this.uploadOneFileStream = async function (meta) {\n        let encryptionMetadata;\n        let dataFileStream = meta['fileStream'];\n        if (meta['encryptionMaterial']) {\n            const result = await SnowflakeEncryptionUtil.encryptFileStream(meta['encryptionMaterial'], meta['fileStream']);\n            encryptionMetadata = result.encryptionMetadata;\n            dataFileStream = result.dataStream;\n        }\n        const utilClass = this.getForStorageType(meta['stageInfo']['locationType']);\n        let maxConcurrency = meta['parallel'];\n        let lastErr;\n        const maxRetry = DEFAULT_MAX_RETRY;\n        for (let retry = 0; retry < maxRetry; retry++) {\n            if (!meta['overwrite']) {\n                const fileHeader = await utilClass.getFileHeader(meta, meta['dstFileName']);\n                if (fileHeader && meta['resultStatus'] === resultStatus.UPLOADED) {\n                    // File already exists\n                    meta['dstFileSize'] = 0;\n                    meta['resultStatus'] = resultStatus.SKIPPED;\n                    return;\n                }\n            }\n            if (meta['overwrite'] || meta['resultStatus'] === resultStatus.NOT_FOUND_FILE) {\n                await utilClass.uploadFileStream(dataFileStream, meta, encryptionMetadata, maxConcurrency);\n            }\n            if (meta['resultStatus'] === resultStatus.UPLOADED) {\n                return;\n            }\n            else if (meta['resultStatus'] === resultStatus.RENEW_TOKEN) {\n                return;\n            }\n            else if (meta['resultStatus'] === resultStatus.RENEW_PRESIGNED_URL) {\n                return;\n            }\n            else if (meta['resultStatus'] === resultStatus.NEED_RETRY) {\n                lastErr = meta['lastError'];\n                // Failed to upload file, retrying\n                if (!meta['noSleepingTime']) {\n                    const sleepingTime = Math.min(Math.pow(2, retry), 16);\n                    await new Promise((resolve) => setTimeout(resolve, sleepingTime));\n                }\n            }\n            else if (meta['resultStatus'] === resultStatus.NEED_RETRY_WITH_LOWER_CONCURRENCY) {\n                lastErr = meta['lastError'];\n                // Failed to upload file, retrying with max concurrency\n                maxConcurrency = meta['parallel'] - parseInt((retry * meta['parallel']) / maxRetry);\n                maxConcurrency = Math.max(DEFAULT_CONCURRENCY, maxConcurrency);\n                meta['lastMaxConcurrency'] = maxConcurrency;\n                if (!meta['noSleepingTime']) {\n                    const sleepingTime = Math.min(Math.pow(2, retry), 16);\n                    await new Promise((resolve) => setTimeout(resolve, sleepingTime));\n                }\n            }\n        }\n        if (lastErr) {\n            throw new Error(lastErr);\n        }\n        else {\n            const msg = 'Unknown Error in uploading a file: ' + meta['srcFileName'];\n            throw new Error(msg);\n        }\n    };\n    /**\n     * Encrypt then upload one file.\n     *\n     * @param {Object} meta\n     *\n     * @returns {null}\n     */\n    this.uploadOneFile = async function (meta) {\n        let encryptionMetadata;\n        let dataFile;\n        if (meta['encryptionMaterial']) {\n            const result = await SnowflakeEncryptionUtil.encryptFile(meta['encryptionMaterial'], meta['realSrcFilePath'], meta['tmpDir']);\n            encryptionMetadata = result.encryptionMetadata;\n            dataFile = result.dataFile;\n        }\n        else {\n            dataFile = meta['realSrcFilePath'];\n        }\n        const utilClass = this.getForStorageType(meta['stageInfo']['locationType']);\n        let maxConcurrency = meta['parallel'];\n        let lastErr;\n        const maxRetry = DEFAULT_MAX_RETRY;\n        for (let retry = 0; retry < maxRetry; retry++) {\n            if (!meta['overwrite']) {\n                const fileHeader = await utilClass.getFileHeader(meta, meta['dstFileName']);\n                if (fileHeader && meta['resultStatus'] === resultStatus.UPLOADED) {\n                    // File already exists\n                    meta['dstFileSize'] = 0;\n                    meta['resultStatus'] = resultStatus.SKIPPED;\n                    return;\n                }\n            }\n            if (meta['overwrite'] || meta['resultStatus'] === resultStatus.NOT_FOUND_FILE) {\n                await utilClass.uploadFile(dataFile, meta, encryptionMetadata, maxConcurrency);\n            }\n            if (meta['resultStatus'] === resultStatus.UPLOADED) {\n                return;\n            }\n            else if (meta['resultStatus'] === resultStatus.RENEW_TOKEN) {\n                return;\n            }\n            else if (meta['resultStatus'] === resultStatus.RENEW_PRESIGNED_URL) {\n                return;\n            }\n            else if (meta['resultStatus'] === resultStatus.NEED_RETRY) {\n                lastErr = meta['lastError'];\n                // Failed to upload file, retrying\n                if (!meta['noSleepingTime']) {\n                    const sleepingTime = Math.min(Math.pow(2, retry), 16);\n                    await new Promise((resolve) => setTimeout(resolve, sleepingTime));\n                }\n            }\n            else if (meta['resultStatus'] === resultStatus.NEED_RETRY_WITH_LOWER_CONCURRENCY) {\n                lastErr = meta['lastError'];\n                // Failed to upload file, retrying with max concurrency\n                maxConcurrency = meta['parallel'] - parseInt((retry * meta['parallel']) / maxRetry);\n                maxConcurrency = Math.max(DEFAULT_CONCURRENCY, maxConcurrency);\n                meta['lastMaxConcurrency'] = maxConcurrency;\n                if (!meta['noSleepingTime']) {\n                    const sleepingTime = Math.min(Math.pow(2, retry), 16);\n                    await new Promise((resolve) => setTimeout(resolve, sleepingTime));\n                }\n            }\n        }\n        if (lastErr) {\n            throw new Error(lastErr);\n        }\n        else {\n            const msg = 'Unknown Error in uploading a file: ' + dataFile;\n            throw new Error(msg);\n        }\n    };\n    /**\n     * Attempt upload of a file and retry if fails.\n     *\n     * @param {Object} meta\n     *\n     * @returns {null}\n     */\n    this.uploadOneFileWithRetry = async function (meta) {\n        const utilClass = this.getForStorageType(meta['stageInfo']['locationType']);\n        let breakFlag = false;\n        for (let x = 0; x < 10; x++) {\n            await this.uploadOneFile(meta);\n            if (meta['resultStatus'] === resultStatus.UPLOADED) {\n                for (let y = 0; y < 10; y++) {\n                    await utilClass.getFileHeader(meta, meta['dstFileName']);\n                    if (meta['resultStatus'] === resultStatus.NOT_FOUND_FILE) {\n                        // Wait 1 second\n                        await new Promise((resolve) => setTimeout(resolve, 1000));\n                        continue;\n                    }\n                    break;\n                }\n            }\n            breakFlag = true;\n            break;\n        }\n        if (!breakFlag) {\n            // Could not upload a file even after retry\n            meta['resultStatus'] = resultStatus.ERROR;\n        }\n    };\n    /**\n     * Download a file.\n     *\n     * @param {Object} meta\n     *\n     * @returns {null}\n     */\n    this.downloadOneFile = async function (meta) {\n        // Downloads a file from S3\n        let fullDstPath = meta['localLocation'];\n        await new Promise((resolve, reject) => {\n            fs.realpath(fullDstPath, (err, basePath) => {\n                if (err) {\n                    reject(err);\n                }\n                fullDstPath = path.join(basePath, path.basename(meta['dstFileName']));\n                resolve();\n            });\n        });\n        // TODO: validate fullDstPath is under the writable directory\n        const baseDir = path.dirname(fullDstPath);\n        await new Promise((resolve) => {\n            fs.exists(baseDir, (exists) => {\n                if (!exists) {\n                    fs.mkdir(baseDir, () => {\n                        resolve();\n                    });\n                }\n                else {\n                    resolve();\n                }\n            });\n        });\n        const utilClass = this.getForStorageType(meta['stageInfo']['locationType']);\n        let fileHeader = await utilClass.getFileHeader(meta, meta['srcFileName']);\n        if (fileHeader) {\n            meta['srcFileSize'] = fileHeader.contentLength;\n        }\n        let maxConcurrency = meta['parallel'];\n        let lastErr;\n        const maxRetry = DEFAULT_MAX_RETRY;\n        Logger().debug(`Started downloading result. File: ${meta.dstFileName}, location: ${meta.stageInfo.location}`);\n        const timer = new ExecutionTimer().start();\n        for (let retry = 0; retry < maxRetry; retry++) {\n            // Download the file\n            await utilClass.nativeDownloadFile(meta, fullDstPath, maxConcurrency);\n            if (meta['resultStatus'] === resultStatus.DOWNLOADED) {\n                timer.stop();\n                Logger().debug(`Successfully downloaded result. File: ${meta.dstFileName}, download time: ${timer.getDuration()} ms, chunkSize: ${meta.srcFileSize} bytes.`);\n                if (meta['encryptionMaterial']) {\n                    /**\n                     * For storage utils that do not have the privilege of\n                     * getting the metadata early, both object and metadata\n                     * are downloaded at once.In which case, the file meta will\n                     * be updated with all the metadata that we need and\n                     * then we can call getFileHeader to get just that and also\n                     * preserve the idea of getting metadata in the first place.\n                     * One example of this is the utils that use presigned url\n                     * for upload / download and not the storage client library.\n                     **/\n                    if (meta['presignedUrl']) {\n                        fileHeader = await utilClass.getFileHeader(meta, meta['srcFilePath']);\n                    }\n                    Logger().debug(`Start decrypting the downloaded file for ${meta.dstFileName} at path: ${fullDstPath}.`);\n                    timer.start();\n                    const tmpDstName = await SnowflakeEncryptionUtil.decryptFile(fileHeader.encryptionMetadata, meta['encryptionMaterial'], fullDstPath, meta['tmpDir']);\n                    timer.stop();\n                    Logger().debug(`Successfully decrypted the downloaded file for ${meta.dstFileName} in ${timer.getDuration()} ms.`);\n                    // Copy decrypted tmp file to target destination path\n                    await new Promise((resolve, reject) => {\n                        fs.copyFile(tmpDstName, fullDstPath, async (err) => {\n                            if (err) {\n                                reject(err);\n                            }\n                            resolve();\n                        });\n                    });\n                    // Delete tmp file\n                    await new Promise((resolve, reject) => {\n                        fs.unlink(tmpDstName, (err) => {\n                            if (err) {\n                                reject(err);\n                            }\n                            resolve();\n                        });\n                    });\n                    // Delete tmp folder\n                    await new Promise((resolve, reject) => {\n                        fs.rmdir(meta['tmpDir'], (err) => {\n                            if (err) {\n                                reject(err);\n                            }\n                            resolve();\n                        });\n                    });\n                }\n                await new Promise((resolve) => {\n                    fs.stat(fullDstPath, (err, stat) => {\n                        meta['dstFileSize'] = stat.size;\n                        Logger().debug(`File size verification: Downloaded file at \"${meta.fullDstPath}\" is ${stat.size} bytes.`);\n                        resolve();\n                    });\n                });\n                return;\n            }\n            else if (meta['resultStatus'] === resultStatus.RENEW_TOKEN) {\n                Logger().debug(`Need to renew token for downloading file: ${meta.dstFileName}`);\n                return;\n            }\n            else if (meta['resultStatus'] === resultStatus.RENEW_PRESIGNED_URL) {\n                Logger().debug(`Need to renew presigned URL for downloading. file: ${meta.dstFileName}, presignedUrl: ${meta.presignedUrl}`);\n                return;\n            }\n            else if (meta['resultStatus'] === resultStatus.NEED_RETRY_WITH_LOWER_CONCURRENCY) {\n                Logger().debug(`Need to retry with lower concurrency for downloading file: ${meta.dstFileName}`);\n                lastErr = meta['lastError'];\n                // Failed to download file, retrying with max concurrency\n                maxConcurrency = meta['parallel'] - parseInt((retry * meta['parallel']) / maxRetry);\n                maxConcurrency = Math.max(DEFAULT_CONCURRENCY, maxConcurrency);\n                meta['lastMaxConcurrency'] = maxConcurrency;\n                if (!meta['noSleepingTime']) {\n                    const sleepingTime = Math.min(Math.pow(2, retry), 16);\n                    await new Promise((resolve) => setTimeout(resolve, sleepingTime));\n                }\n            }\n            else if (meta['resultStatus'] === resultStatus.NEED_RETRY) {\n                Logger().debug(`Need to retry for downloading file: ${meta.dstFileName}`);\n                lastErr = meta['lastError'];\n                // Failed to download file, retrying\n                if (!meta['noSleepingTime']) {\n                    const sleepingTime = Math.min(Math.pow(2, retry), 16);\n                    await new Promise((resolve) => setTimeout(resolve, sleepingTime));\n                }\n            }\n        }\n        if (lastErr) {\n            Logger().error(`Failed to downloading file: ${meta.dstFileName} with error: ${lastErr}`);\n            throw new Error(lastErr);\n        }\n        else {\n            const msg = 'Unknown Error in downloading a file: ' + meta['srcFileName'];\n            throw new Error(msg);\n        }\n    };\n}\nexports.RemoteStorageUtil = RemoteStorageUtil;\n//# sourceMappingURL=remote_storage_util.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/dist/lib/file_transfer_agent/remote_storage_util.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/dist/lib/file_transfer_agent/s3_util.js":
/*!****************************************************************************!*\
  !*** ./node_modules/snowflake-sdk/dist/lib/file_transfer_agent/s3_util.js ***!
  \****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst { NodeHttpHandler } = __webpack_require__(/*! @smithy/node-http-handler */ \"(rsc)/./node_modules/@smithy/node-http-handler/dist-es/index.js\");\nconst EncryptionMetadata = (__webpack_require__(/*! ./encrypt_util */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/file_transfer_agent/encrypt_util.js\").EncryptionMetadata);\nconst FileHeader = (__webpack_require__(/*! ../file_util */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/file_util.js\").FileHeader);\nconst expandTilde = __webpack_require__(/*! expand-tilde */ \"(rsc)/./node_modules/expand-tilde/index.js\");\nconst getProxyAgent = (__webpack_require__(/*! ../http/node */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/http/node.js\").getProxyAgent);\nconst ProxyUtil = __webpack_require__(/*! ../proxy_util */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/proxy_util.js\");\nconst Logger = (__webpack_require__(/*! ../logger */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/logger.js\")[\"default\"]);\nconst AMZ_IV = 'x-amz-iv';\nconst AMZ_KEY = 'x-amz-key';\nconst AMZ_MATDESC = 'x-amz-matdesc';\nconst SFC_DIGEST = 'sfc-digest';\nconst EXPIRED_TOKEN = 'ExpiredToken';\nconst NO_SUCH_KEY = 'NoSuchKey';\nconst SNOWFLAKE_S3_DESTINATION = 's3.amazonaws.com';\nconst ERRORNO_WSAECONNABORTED = 10053; // network connection was aborted\nconst DATA_SIZE_THRESHOLD = 67108864; // magic number, given from  error message.\nconst resultStatus = (__webpack_require__(/*! ../file_util */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/file_util.js\").resultStatus);\nconst HTTP_HEADER_VALUE_OCTET_STREAM = 'application/octet-stream';\n// S3 Location: S3 bucket name + path\nfunction S3Location(bucketName, s3path) {\n    return {\n        bucketName: bucketName, // S3 bucket name\n        s3path: s3path, // S3 path name\n    };\n}\n/**\n * Creates an S3 utility object.\n *\n * @param connectionConfig\n *\n * @param s3 - used for tests, mock can be supplied\n * @param filestream - used for tests, mock can be supplied\n * @returns {Object}\n * @constructor\n */\nfunction S3Util(connectionConfig, s3, filestream) {\n    const AWS = typeof s3 !== 'undefined' ? s3 : __webpack_require__(/*! @aws-sdk/client-s3 */ \"@aws-sdk/client-s3\");\n    const fs = typeof filestream !== 'undefined' ? filestream : __webpack_require__(/*! fs */ \"fs\");\n    /**\n     * Create an AWS S3 client using an AWS token.\n     */\n    this.createClient = function (stageInfo, useAccelerateEndpoint) {\n        const stageCredentials = stageInfo['creds'];\n        const securityToken = stageCredentials['AWS_TOKEN'];\n        const isRegionalUrlEnabled = stageInfo.useRegionalUrl || stageInfo.useS3RegionalUrl;\n        // if GS sends us an endpoint, it's likely for FIPS. Use it.\n        let endPoint = null;\n        if (stageInfo['endPoint']) {\n            endPoint = `https://${stageInfo['endPoint']}`;\n        }\n        else {\n            if (stageInfo.region && isRegionalUrlEnabled) {\n                const domainSuffixForRegionalUrl = stageInfo.region.toLowerCase().startsWith('cn-')\n                    ? 'amazonaws.com.cn'\n                    : 'amazonaws.com';\n                endPoint = `https://s3.${stageInfo.region}.${domainSuffixForRegionalUrl}`;\n            }\n        }\n        const config = {\n            apiVersion: '2006-03-01',\n            region: stageInfo['region'],\n            credentials: {\n                accessKeyId: stageCredentials['AWS_KEY_ID'],\n                secretAccessKey: stageCredentials['AWS_SECRET_KEY'],\n                sessionToken: securityToken,\n            },\n            endpoint: endPoint,\n            useAccelerateEndpoint: useAccelerateEndpoint,\n        };\n        const proxy = ProxyUtil.getProxy(connectionConfig.getProxy(), 'S3 Util');\n        if (proxy) {\n            const proxyAgent = getProxyAgent({\n                proxyOptions: proxy,\n                connectionConfig,\n                parsedUrl: new URL(connectionConfig.accessUrl),\n                destination: endPoint || SNOWFLAKE_S3_DESTINATION,\n            });\n            config.requestHandler = new NodeHttpHandler({\n                httpAgent: proxyAgent,\n                httpsAgent: proxyAgent,\n            });\n        }\n        return new AWS.S3(config);\n    };\n    /**\n     * Get file header based on file being uploaded or not.\n     *\n     * @param {Object} meta\n     * @param {String} filename\n     *\n     * @returns {Object}\n     */\n    this.getFileHeader = async function (meta, filename) {\n        const stageInfo = meta['stageInfo'];\n        const client = this.createClient(stageInfo);\n        const s3location = extractBucketNameAndPath(stageInfo['location']);\n        const params = {\n            Bucket: s3location.bucketName,\n            Key: s3location.s3path + filename,\n        };\n        let akey;\n        try {\n            await client.getObject(params).then(function (data) {\n                akey = data;\n            });\n        }\n        catch (err) {\n            if (err['Code'] === EXPIRED_TOKEN) {\n                meta['resultStatus'] = resultStatus.RENEW_TOKEN;\n                return null;\n            }\n            else if (err['Code'] === NO_SUCH_KEY) {\n                meta['resultStatus'] = resultStatus.NOT_FOUND_FILE;\n                return FileHeader(null, null, null);\n            }\n            else if (err['Code'] === '400') {\n                meta['resultStatus'] = resultStatus.RENEW_TOKEN;\n                return null;\n            }\n            else {\n                meta['resultStatus'] = resultStatus.ERROR;\n                return null;\n            }\n        }\n        meta['resultStatus'] = resultStatus.UPLOADED;\n        let encryptionMetadata;\n        if (akey && akey.Metadata[AMZ_KEY]) {\n            encryptionMetadata = EncryptionMetadata(akey.Metadata[AMZ_KEY], akey.Metadata[AMZ_IV], akey.Metadata[AMZ_MATDESC]);\n        }\n        return FileHeader(akey.Metadata[SFC_DIGEST], akey.ContentLength, encryptionMetadata);\n    };\n    /**\n     * Create the file metadata then upload the file.\n     *\n     * @param {String} dataFile\n     * @param {Object} meta\n     * @param {Object} encryptionMetadata\n     */\n    this.uploadFile = async function (dataFile, meta, encryptionMetadata) {\n        const fileStream = fs.readFileSync(dataFile);\n        await this.uploadFileStream(fileStream, meta, encryptionMetadata);\n    };\n    /**\n     * Create the file metadata then upload the file stream.\n     *\n     * @param {String} fileStream\n     * @param {Object} meta\n     * @param {Object} encryptionMetadata\n     */\n    this.uploadFileStream = async function (fileStream, meta, encryptionMetadata) {\n        const s3Metadata = {\n            HTTP_HEADER_CONTENT_TYPE: HTTP_HEADER_VALUE_OCTET_STREAM,\n            SFC_DIGEST: meta['SHA256_DIGEST'],\n        };\n        if (encryptionMetadata) {\n            s3Metadata[AMZ_IV] = encryptionMetadata.iv;\n            s3Metadata[AMZ_KEY] = encryptionMetadata.key;\n            s3Metadata[AMZ_MATDESC] = encryptionMetadata.matDesc;\n        }\n        const stageInfo = meta['stageInfo'];\n        const client = this.createClient(stageInfo);\n        const s3location = extractBucketNameAndPath(meta['stageInfo']['location']);\n        const params = {\n            Bucket: s3location.bucketName,\n            Body: fileStream,\n            Key: s3location.s3path + meta['dstFileName'],\n            Metadata: s3Metadata,\n        };\n        // call S3 to upload file to specified bucket\n        try {\n            await client.putObject(params);\n        }\n        catch (err) {\n            if (err['Code'] === EXPIRED_TOKEN) {\n                meta['resultStatus'] = resultStatus.RENEW_TOKEN;\n            }\n            else {\n                meta['lastError'] = err;\n                if (err['Code'] === ERRORNO_WSAECONNABORTED.toString()) {\n                    meta['resultStatus'] = resultStatus.NEED_RETRY_WITH_LOWER_CONCURRENCY;\n                }\n                else {\n                    meta['resultStatus'] = resultStatus.NEED_RETRY;\n                }\n            }\n            return;\n        }\n        meta['dstFileSize'] = meta['uploadSize'];\n        meta['resultStatus'] = resultStatus.UPLOADED;\n    };\n    /**\n     * Download the file.\n     *\n     * @param {String} dataFile\n     * @param {Object} meta\n     * @param {Object} encryptionMetadata\n     */\n    this.nativeDownloadFile = async function (meta, fullDstPath) {\n        const stageInfo = meta['stageInfo'];\n        const client = this.createClient(stageInfo);\n        const s3location = extractBucketNameAndPath(meta['stageInfo']['location']);\n        const params = {\n            Bucket: s3location.bucketName,\n            Key: s3location.s3path + meta['dstFileName'],\n        };\n        // call S3 to download file to specified bucket\n        try {\n            Logger().debug(`Send Get Request to the Bucket: ${params.Bucket}, GET request: ${params.Key}`);\n            await client\n                .getObject(params)\n                .then((data) => {\n                Logger().debug(`Http Status for the GET request: ${params.Key} : ${data.$metadata.httpStatusCode}`);\n                return data.Body.transformToByteArray();\n            })\n                .then((data) => {\n                return new Promise((resolve, reject) => {\n                    fs.writeFile(fullDstPath, data, 'binary', (err) => {\n                        if (err) {\n                            reject(err);\n                        }\n                        resolve();\n                    });\n                });\n            });\n        }\n        catch (err) {\n            if (err['Code'] === EXPIRED_TOKEN) {\n                meta['resultStatus'] = resultStatus.RENEW_TOKEN;\n            }\n            else {\n                meta['lastError'] = err;\n                if (err['Code'] === ERRORNO_WSAECONNABORTED.toString()) {\n                    meta['resultStatus'] = resultStatus.NEED_RETRY_WITH_LOWER_CONCURRENCY;\n                }\n                else {\n                    meta['resultStatus'] = resultStatus.NEED_RETRY;\n                }\n            }\n            return;\n        }\n        meta['resultStatus'] = resultStatus.DOWNLOADED;\n    };\n}\n/**\n * Extract the bucket name and path from the metadata's stage location.\n *\n * @param {String} stageLocation\n *\n * @returns {Object}\n */\nfunction extractBucketNameAndPath(stageLocation) {\n    // expand '~' and '~user' expressions\n    if (process.platform !== 'win32') {\n        stageLocation = expandTilde(stageLocation);\n    }\n    let bucketName = stageLocation;\n    let s3path;\n    // split stage location as bucket name and path\n    if (stageLocation.includes('/')) {\n        bucketName = stageLocation.substring(0, stageLocation.indexOf('/'));\n        s3path = stageLocation.substring(stageLocation.indexOf('/') + 1, stageLocation.length);\n        if (s3path && !s3path.endsWith('/')) {\n            s3path += '/';\n        }\n    }\n    return S3Location(bucketName, s3path);\n}\nmodule.exports = {\n    S3Util,\n    SNOWFLAKE_S3_DESTINATION,\n    DATA_SIZE_THRESHOLD,\n    extractBucketNameAndPath,\n};\n//# sourceMappingURL=s3_util.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9kaXN0L2xpYi9maWxlX3RyYW5zZmVyX2FnZW50L3MzX3V0aWwuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixRQUFRLGtCQUFrQixFQUFFLG1CQUFPLENBQUMsa0dBQTJCO0FBQy9ELDJCQUEyQixpSkFBNEM7QUFDdkUsbUJBQW1CLGdIQUFrQztBQUNyRCxvQkFBb0IsbUJBQU8sQ0FBQyxnRUFBYztBQUMxQyxzQkFBc0IsbUhBQXFDO0FBQzNELGtCQUFrQixtQkFBTyxDQUFDLGdGQUFlO0FBQ3pDLGVBQWUsMEdBQTRCO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDO0FBQ3ZDLHNDQUFzQztBQUN0QyxxQkFBcUIsa0hBQW9DO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxpREFBaUQsbUJBQU8sQ0FBQyw4Q0FBb0I7QUFDN0UsZ0VBQWdFLG1CQUFPLENBQUMsY0FBSTtBQUM1RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQyxzQkFBc0I7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDLGlCQUFpQixHQUFHLDJCQUEyQjtBQUN4RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsUUFBUTtBQUN2QixlQUFlLFFBQVE7QUFDdkI7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsUUFBUTtBQUN2QixlQUFlLFFBQVE7QUFDdkIsZUFBZSxRQUFRO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkIsZUFBZSxRQUFRO0FBQ3ZCLGVBQWUsUUFBUTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkIsZUFBZSxRQUFRO0FBQ3ZCLGVBQWUsUUFBUTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOERBQThELGNBQWMsaUJBQWlCLFdBQVc7QUFDeEc7QUFDQTtBQUNBO0FBQ0EsbUVBQW1FLFlBQVksSUFBSSw4QkFBOEI7QUFDakg7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckIsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQjtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL3dhbmdoYW90YWkvRGVza3RvcC9lbHZlbmxhYi9IVFYvbm9kZV9tb2R1bGVzL3Nub3dmbGFrZS1zZGsvZGlzdC9saWIvZmlsZV90cmFuc2Zlcl9hZ2VudC9zM191dGlsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuY29uc3QgeyBOb2RlSHR0cEhhbmRsZXIgfSA9IHJlcXVpcmUoJ0BzbWl0aHkvbm9kZS1odHRwLWhhbmRsZXInKTtcbmNvbnN0IEVuY3J5cHRpb25NZXRhZGF0YSA9IHJlcXVpcmUoJy4vZW5jcnlwdF91dGlsJykuRW5jcnlwdGlvbk1ldGFkYXRhO1xuY29uc3QgRmlsZUhlYWRlciA9IHJlcXVpcmUoJy4uL2ZpbGVfdXRpbCcpLkZpbGVIZWFkZXI7XG5jb25zdCBleHBhbmRUaWxkZSA9IHJlcXVpcmUoJ2V4cGFuZC10aWxkZScpO1xuY29uc3QgZ2V0UHJveHlBZ2VudCA9IHJlcXVpcmUoJy4uL2h0dHAvbm9kZScpLmdldFByb3h5QWdlbnQ7XG5jb25zdCBQcm94eVV0aWwgPSByZXF1aXJlKCcuLi9wcm94eV91dGlsJyk7XG5jb25zdCBMb2dnZXIgPSByZXF1aXJlKCcuLi9sb2dnZXInKS5kZWZhdWx0O1xuY29uc3QgQU1aX0lWID0gJ3gtYW16LWl2JztcbmNvbnN0IEFNWl9LRVkgPSAneC1hbXota2V5JztcbmNvbnN0IEFNWl9NQVRERVNDID0gJ3gtYW16LW1hdGRlc2MnO1xuY29uc3QgU0ZDX0RJR0VTVCA9ICdzZmMtZGlnZXN0JztcbmNvbnN0IEVYUElSRURfVE9LRU4gPSAnRXhwaXJlZFRva2VuJztcbmNvbnN0IE5PX1NVQ0hfS0VZID0gJ05vU3VjaEtleSc7XG5jb25zdCBTTk9XRkxBS0VfUzNfREVTVElOQVRJT04gPSAnczMuYW1hem9uYXdzLmNvbSc7XG5jb25zdCBFUlJPUk5PX1dTQUVDT05OQUJPUlRFRCA9IDEwMDUzOyAvLyBuZXR3b3JrIGNvbm5lY3Rpb24gd2FzIGFib3J0ZWRcbmNvbnN0IERBVEFfU0laRV9USFJFU0hPTEQgPSA2NzEwODg2NDsgLy8gbWFnaWMgbnVtYmVyLCBnaXZlbiBmcm9tICBlcnJvciBtZXNzYWdlLlxuY29uc3QgcmVzdWx0U3RhdHVzID0gcmVxdWlyZSgnLi4vZmlsZV91dGlsJykucmVzdWx0U3RhdHVzO1xuY29uc3QgSFRUUF9IRUFERVJfVkFMVUVfT0NURVRfU1RSRUFNID0gJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbSc7XG4vLyBTMyBMb2NhdGlvbjogUzMgYnVja2V0IG5hbWUgKyBwYXRoXG5mdW5jdGlvbiBTM0xvY2F0aW9uKGJ1Y2tldE5hbWUsIHMzcGF0aCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIGJ1Y2tldE5hbWU6IGJ1Y2tldE5hbWUsIC8vIFMzIGJ1Y2tldCBuYW1lXG4gICAgICAgIHMzcGF0aDogczNwYXRoLCAvLyBTMyBwYXRoIG5hbWVcbiAgICB9O1xufVxuLyoqXG4gKiBDcmVhdGVzIGFuIFMzIHV0aWxpdHkgb2JqZWN0LlxuICpcbiAqIEBwYXJhbSBjb25uZWN0aW9uQ29uZmlnXG4gKlxuICogQHBhcmFtIHMzIC0gdXNlZCBmb3IgdGVzdHMsIG1vY2sgY2FuIGJlIHN1cHBsaWVkXG4gKiBAcGFyYW0gZmlsZXN0cmVhbSAtIHVzZWQgZm9yIHRlc3RzLCBtb2NrIGNhbiBiZSBzdXBwbGllZFxuICogQHJldHVybnMge09iamVjdH1cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBTM1V0aWwoY29ubmVjdGlvbkNvbmZpZywgczMsIGZpbGVzdHJlYW0pIHtcbiAgICBjb25zdCBBV1MgPSB0eXBlb2YgczMgIT09ICd1bmRlZmluZWQnID8gczMgOiByZXF1aXJlKCdAYXdzLXNkay9jbGllbnQtczMnKTtcbiAgICBjb25zdCBmcyA9IHR5cGVvZiBmaWxlc3RyZWFtICE9PSAndW5kZWZpbmVkJyA/IGZpbGVzdHJlYW0gOiByZXF1aXJlKCdmcycpO1xuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhbiBBV1MgUzMgY2xpZW50IHVzaW5nIGFuIEFXUyB0b2tlbi5cbiAgICAgKi9cbiAgICB0aGlzLmNyZWF0ZUNsaWVudCA9IGZ1bmN0aW9uIChzdGFnZUluZm8sIHVzZUFjY2VsZXJhdGVFbmRwb2ludCkge1xuICAgICAgICBjb25zdCBzdGFnZUNyZWRlbnRpYWxzID0gc3RhZ2VJbmZvWydjcmVkcyddO1xuICAgICAgICBjb25zdCBzZWN1cml0eVRva2VuID0gc3RhZ2VDcmVkZW50aWFsc1snQVdTX1RPS0VOJ107XG4gICAgICAgIGNvbnN0IGlzUmVnaW9uYWxVcmxFbmFibGVkID0gc3RhZ2VJbmZvLnVzZVJlZ2lvbmFsVXJsIHx8IHN0YWdlSW5mby51c2VTM1JlZ2lvbmFsVXJsO1xuICAgICAgICAvLyBpZiBHUyBzZW5kcyB1cyBhbiBlbmRwb2ludCwgaXQncyBsaWtlbHkgZm9yIEZJUFMuIFVzZSBpdC5cbiAgICAgICAgbGV0IGVuZFBvaW50ID0gbnVsbDtcbiAgICAgICAgaWYgKHN0YWdlSW5mb1snZW5kUG9pbnQnXSkge1xuICAgICAgICAgICAgZW5kUG9pbnQgPSBgaHR0cHM6Ly8ke3N0YWdlSW5mb1snZW5kUG9pbnQnXX1gO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKHN0YWdlSW5mby5yZWdpb24gJiYgaXNSZWdpb25hbFVybEVuYWJsZWQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkb21haW5TdWZmaXhGb3JSZWdpb25hbFVybCA9IHN0YWdlSW5mby5yZWdpb24udG9Mb3dlckNhc2UoKS5zdGFydHNXaXRoKCdjbi0nKVxuICAgICAgICAgICAgICAgICAgICA/ICdhbWF6b25hd3MuY29tLmNuJ1xuICAgICAgICAgICAgICAgICAgICA6ICdhbWF6b25hd3MuY29tJztcbiAgICAgICAgICAgICAgICBlbmRQb2ludCA9IGBodHRwczovL3MzLiR7c3RhZ2VJbmZvLnJlZ2lvbn0uJHtkb21haW5TdWZmaXhGb3JSZWdpb25hbFVybH1gO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNvbmZpZyA9IHtcbiAgICAgICAgICAgIGFwaVZlcnNpb246ICcyMDA2LTAzLTAxJyxcbiAgICAgICAgICAgIHJlZ2lvbjogc3RhZ2VJbmZvWydyZWdpb24nXSxcbiAgICAgICAgICAgIGNyZWRlbnRpYWxzOiB7XG4gICAgICAgICAgICAgICAgYWNjZXNzS2V5SWQ6IHN0YWdlQ3JlZGVudGlhbHNbJ0FXU19LRVlfSUQnXSxcbiAgICAgICAgICAgICAgICBzZWNyZXRBY2Nlc3NLZXk6IHN0YWdlQ3JlZGVudGlhbHNbJ0FXU19TRUNSRVRfS0VZJ10sXG4gICAgICAgICAgICAgICAgc2Vzc2lvblRva2VuOiBzZWN1cml0eVRva2VuLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVuZHBvaW50OiBlbmRQb2ludCxcbiAgICAgICAgICAgIHVzZUFjY2VsZXJhdGVFbmRwb2ludDogdXNlQWNjZWxlcmF0ZUVuZHBvaW50LFxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBwcm94eSA9IFByb3h5VXRpbC5nZXRQcm94eShjb25uZWN0aW9uQ29uZmlnLmdldFByb3h5KCksICdTMyBVdGlsJyk7XG4gICAgICAgIGlmIChwcm94eSkge1xuICAgICAgICAgICAgY29uc3QgcHJveHlBZ2VudCA9IGdldFByb3h5QWdlbnQoe1xuICAgICAgICAgICAgICAgIHByb3h5T3B0aW9uczogcHJveHksXG4gICAgICAgICAgICAgICAgY29ubmVjdGlvbkNvbmZpZyxcbiAgICAgICAgICAgICAgICBwYXJzZWRVcmw6IG5ldyBVUkwoY29ubmVjdGlvbkNvbmZpZy5hY2Nlc3NVcmwpLFxuICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uOiBlbmRQb2ludCB8fCBTTk9XRkxBS0VfUzNfREVTVElOQVRJT04sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbmZpZy5yZXF1ZXN0SGFuZGxlciA9IG5ldyBOb2RlSHR0cEhhbmRsZXIoe1xuICAgICAgICAgICAgICAgIGh0dHBBZ2VudDogcHJveHlBZ2VudCxcbiAgICAgICAgICAgICAgICBodHRwc0FnZW50OiBwcm94eUFnZW50LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBBV1MuUzMoY29uZmlnKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEdldCBmaWxlIGhlYWRlciBiYXNlZCBvbiBmaWxlIGJlaW5nIHVwbG9hZGVkIG9yIG5vdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBtZXRhXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGZpbGVuYW1lXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgICAqL1xuICAgIHRoaXMuZ2V0RmlsZUhlYWRlciA9IGFzeW5jIGZ1bmN0aW9uIChtZXRhLCBmaWxlbmFtZSkge1xuICAgICAgICBjb25zdCBzdGFnZUluZm8gPSBtZXRhWydzdGFnZUluZm8nXTtcbiAgICAgICAgY29uc3QgY2xpZW50ID0gdGhpcy5jcmVhdGVDbGllbnQoc3RhZ2VJbmZvKTtcbiAgICAgICAgY29uc3QgczNsb2NhdGlvbiA9IGV4dHJhY3RCdWNrZXROYW1lQW5kUGF0aChzdGFnZUluZm9bJ2xvY2F0aW9uJ10pO1xuICAgICAgICBjb25zdCBwYXJhbXMgPSB7XG4gICAgICAgICAgICBCdWNrZXQ6IHMzbG9jYXRpb24uYnVja2V0TmFtZSxcbiAgICAgICAgICAgIEtleTogczNsb2NhdGlvbi5zM3BhdGggKyBmaWxlbmFtZSxcbiAgICAgICAgfTtcbiAgICAgICAgbGV0IGFrZXk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBhd2FpdCBjbGllbnQuZ2V0T2JqZWN0KHBhcmFtcykudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgIGFrZXkgPSBkYXRhO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgaWYgKGVyclsnQ29kZSddID09PSBFWFBJUkVEX1RPS0VOKSB7XG4gICAgICAgICAgICAgICAgbWV0YVsncmVzdWx0U3RhdHVzJ10gPSByZXN1bHRTdGF0dXMuUkVORVdfVE9LRU47XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChlcnJbJ0NvZGUnXSA9PT0gTk9fU1VDSF9LRVkpIHtcbiAgICAgICAgICAgICAgICBtZXRhWydyZXN1bHRTdGF0dXMnXSA9IHJlc3VsdFN0YXR1cy5OT1RfRk9VTkRfRklMRTtcbiAgICAgICAgICAgICAgICByZXR1cm4gRmlsZUhlYWRlcihudWxsLCBudWxsLCBudWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGVyclsnQ29kZSddID09PSAnNDAwJykge1xuICAgICAgICAgICAgICAgIG1ldGFbJ3Jlc3VsdFN0YXR1cyddID0gcmVzdWx0U3RhdHVzLlJFTkVXX1RPS0VOO1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbWV0YVsncmVzdWx0U3RhdHVzJ10gPSByZXN1bHRTdGF0dXMuRVJST1I7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbWV0YVsncmVzdWx0U3RhdHVzJ10gPSByZXN1bHRTdGF0dXMuVVBMT0FERUQ7XG4gICAgICAgIGxldCBlbmNyeXB0aW9uTWV0YWRhdGE7XG4gICAgICAgIGlmIChha2V5ICYmIGFrZXkuTWV0YWRhdGFbQU1aX0tFWV0pIHtcbiAgICAgICAgICAgIGVuY3J5cHRpb25NZXRhZGF0YSA9IEVuY3J5cHRpb25NZXRhZGF0YShha2V5Lk1ldGFkYXRhW0FNWl9LRVldLCBha2V5Lk1ldGFkYXRhW0FNWl9JVl0sIGFrZXkuTWV0YWRhdGFbQU1aX01BVERFU0NdKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gRmlsZUhlYWRlcihha2V5Lk1ldGFkYXRhW1NGQ19ESUdFU1RdLCBha2V5LkNvbnRlbnRMZW5ndGgsIGVuY3J5cHRpb25NZXRhZGF0YSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgdGhlIGZpbGUgbWV0YWRhdGEgdGhlbiB1cGxvYWQgdGhlIGZpbGUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZGF0YUZpbGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gbWV0YVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBlbmNyeXB0aW9uTWV0YWRhdGFcbiAgICAgKi9cbiAgICB0aGlzLnVwbG9hZEZpbGUgPSBhc3luYyBmdW5jdGlvbiAoZGF0YUZpbGUsIG1ldGEsIGVuY3J5cHRpb25NZXRhZGF0YSkge1xuICAgICAgICBjb25zdCBmaWxlU3RyZWFtID0gZnMucmVhZEZpbGVTeW5jKGRhdGFGaWxlKTtcbiAgICAgICAgYXdhaXQgdGhpcy51cGxvYWRGaWxlU3RyZWFtKGZpbGVTdHJlYW0sIG1ldGEsIGVuY3J5cHRpb25NZXRhZGF0YSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgdGhlIGZpbGUgbWV0YWRhdGEgdGhlbiB1cGxvYWQgdGhlIGZpbGUgc3RyZWFtLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGZpbGVTdHJlYW1cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gbWV0YVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBlbmNyeXB0aW9uTWV0YWRhdGFcbiAgICAgKi9cbiAgICB0aGlzLnVwbG9hZEZpbGVTdHJlYW0gPSBhc3luYyBmdW5jdGlvbiAoZmlsZVN0cmVhbSwgbWV0YSwgZW5jcnlwdGlvbk1ldGFkYXRhKSB7XG4gICAgICAgIGNvbnN0IHMzTWV0YWRhdGEgPSB7XG4gICAgICAgICAgICBIVFRQX0hFQURFUl9DT05URU5UX1RZUEU6IEhUVFBfSEVBREVSX1ZBTFVFX09DVEVUX1NUUkVBTSxcbiAgICAgICAgICAgIFNGQ19ESUdFU1Q6IG1ldGFbJ1NIQTI1Nl9ESUdFU1QnXSxcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKGVuY3J5cHRpb25NZXRhZGF0YSkge1xuICAgICAgICAgICAgczNNZXRhZGF0YVtBTVpfSVZdID0gZW5jcnlwdGlvbk1ldGFkYXRhLml2O1xuICAgICAgICAgICAgczNNZXRhZGF0YVtBTVpfS0VZXSA9IGVuY3J5cHRpb25NZXRhZGF0YS5rZXk7XG4gICAgICAgICAgICBzM01ldGFkYXRhW0FNWl9NQVRERVNDXSA9IGVuY3J5cHRpb25NZXRhZGF0YS5tYXREZXNjO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHN0YWdlSW5mbyA9IG1ldGFbJ3N0YWdlSW5mbyddO1xuICAgICAgICBjb25zdCBjbGllbnQgPSB0aGlzLmNyZWF0ZUNsaWVudChzdGFnZUluZm8pO1xuICAgICAgICBjb25zdCBzM2xvY2F0aW9uID0gZXh0cmFjdEJ1Y2tldE5hbWVBbmRQYXRoKG1ldGFbJ3N0YWdlSW5mbyddWydsb2NhdGlvbiddKTtcbiAgICAgICAgY29uc3QgcGFyYW1zID0ge1xuICAgICAgICAgICAgQnVja2V0OiBzM2xvY2F0aW9uLmJ1Y2tldE5hbWUsXG4gICAgICAgICAgICBCb2R5OiBmaWxlU3RyZWFtLFxuICAgICAgICAgICAgS2V5OiBzM2xvY2F0aW9uLnMzcGF0aCArIG1ldGFbJ2RzdEZpbGVOYW1lJ10sXG4gICAgICAgICAgICBNZXRhZGF0YTogczNNZXRhZGF0YSxcbiAgICAgICAgfTtcbiAgICAgICAgLy8gY2FsbCBTMyB0byB1cGxvYWQgZmlsZSB0byBzcGVjaWZpZWQgYnVja2V0XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBhd2FpdCBjbGllbnQucHV0T2JqZWN0KHBhcmFtcyk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgaWYgKGVyclsnQ29kZSddID09PSBFWFBJUkVEX1RPS0VOKSB7XG4gICAgICAgICAgICAgICAgbWV0YVsncmVzdWx0U3RhdHVzJ10gPSByZXN1bHRTdGF0dXMuUkVORVdfVE9LRU47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBtZXRhWydsYXN0RXJyb3InXSA9IGVycjtcbiAgICAgICAgICAgICAgICBpZiAoZXJyWydDb2RlJ10gPT09IEVSUk9STk9fV1NBRUNPTk5BQk9SVEVELnRvU3RyaW5nKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgbWV0YVsncmVzdWx0U3RhdHVzJ10gPSByZXN1bHRTdGF0dXMuTkVFRF9SRVRSWV9XSVRIX0xPV0VSX0NPTkNVUlJFTkNZO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbWV0YVsncmVzdWx0U3RhdHVzJ10gPSByZXN1bHRTdGF0dXMuTkVFRF9SRVRSWTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgbWV0YVsnZHN0RmlsZVNpemUnXSA9IG1ldGFbJ3VwbG9hZFNpemUnXTtcbiAgICAgICAgbWV0YVsncmVzdWx0U3RhdHVzJ10gPSByZXN1bHRTdGF0dXMuVVBMT0FERUQ7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBEb3dubG9hZCB0aGUgZmlsZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBkYXRhRmlsZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBtZXRhXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGVuY3J5cHRpb25NZXRhZGF0YVxuICAgICAqL1xuICAgIHRoaXMubmF0aXZlRG93bmxvYWRGaWxlID0gYXN5bmMgZnVuY3Rpb24gKG1ldGEsIGZ1bGxEc3RQYXRoKSB7XG4gICAgICAgIGNvbnN0IHN0YWdlSW5mbyA9IG1ldGFbJ3N0YWdlSW5mbyddO1xuICAgICAgICBjb25zdCBjbGllbnQgPSB0aGlzLmNyZWF0ZUNsaWVudChzdGFnZUluZm8pO1xuICAgICAgICBjb25zdCBzM2xvY2F0aW9uID0gZXh0cmFjdEJ1Y2tldE5hbWVBbmRQYXRoKG1ldGFbJ3N0YWdlSW5mbyddWydsb2NhdGlvbiddKTtcbiAgICAgICAgY29uc3QgcGFyYW1zID0ge1xuICAgICAgICAgICAgQnVja2V0OiBzM2xvY2F0aW9uLmJ1Y2tldE5hbWUsXG4gICAgICAgICAgICBLZXk6IHMzbG9jYXRpb24uczNwYXRoICsgbWV0YVsnZHN0RmlsZU5hbWUnXSxcbiAgICAgICAgfTtcbiAgICAgICAgLy8gY2FsbCBTMyB0byBkb3dubG9hZCBmaWxlIHRvIHNwZWNpZmllZCBidWNrZXRcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIExvZ2dlcigpLmRlYnVnKGBTZW5kIEdldCBSZXF1ZXN0IHRvIHRoZSBCdWNrZXQ6ICR7cGFyYW1zLkJ1Y2tldH0sIEdFVCByZXF1ZXN0OiAke3BhcmFtcy5LZXl9YCk7XG4gICAgICAgICAgICBhd2FpdCBjbGllbnRcbiAgICAgICAgICAgICAgICAuZ2V0T2JqZWN0KHBhcmFtcylcbiAgICAgICAgICAgICAgICAudGhlbigoZGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgIExvZ2dlcigpLmRlYnVnKGBIdHRwIFN0YXR1cyBmb3IgdGhlIEdFVCByZXF1ZXN0OiAke3BhcmFtcy5LZXl9IDogJHtkYXRhLiRtZXRhZGF0YS5odHRwU3RhdHVzQ29kZX1gKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0YS5Cb2R5LnRyYW5zZm9ybVRvQnl0ZUFycmF5KCk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC50aGVuKChkYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZnMud3JpdGVGaWxlKGZ1bGxEc3RQYXRoLCBkYXRhLCAnYmluYXJ5JywgKGVycikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIGlmIChlcnJbJ0NvZGUnXSA9PT0gRVhQSVJFRF9UT0tFTikge1xuICAgICAgICAgICAgICAgIG1ldGFbJ3Jlc3VsdFN0YXR1cyddID0gcmVzdWx0U3RhdHVzLlJFTkVXX1RPS0VOO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbWV0YVsnbGFzdEVycm9yJ10gPSBlcnI7XG4gICAgICAgICAgICAgICAgaWYgKGVyclsnQ29kZSddID09PSBFUlJPUk5PX1dTQUVDT05OQUJPUlRFRC50b1N0cmluZygpKSB7XG4gICAgICAgICAgICAgICAgICAgIG1ldGFbJ3Jlc3VsdFN0YXR1cyddID0gcmVzdWx0U3RhdHVzLk5FRURfUkVUUllfV0lUSF9MT1dFUl9DT05DVVJSRU5DWTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG1ldGFbJ3Jlc3VsdFN0YXR1cyddID0gcmVzdWx0U3RhdHVzLk5FRURfUkVUUlk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIG1ldGFbJ3Jlc3VsdFN0YXR1cyddID0gcmVzdWx0U3RhdHVzLkRPV05MT0FERUQ7XG4gICAgfTtcbn1cbi8qKlxuICogRXh0cmFjdCB0aGUgYnVja2V0IG5hbWUgYW5kIHBhdGggZnJvbSB0aGUgbWV0YWRhdGEncyBzdGFnZSBsb2NhdGlvbi5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RhZ2VMb2NhdGlvblxuICpcbiAqIEByZXR1cm5zIHtPYmplY3R9XG4gKi9cbmZ1bmN0aW9uIGV4dHJhY3RCdWNrZXROYW1lQW5kUGF0aChzdGFnZUxvY2F0aW9uKSB7XG4gICAgLy8gZXhwYW5kICd+JyBhbmQgJ351c2VyJyBleHByZXNzaW9uc1xuICAgIGlmIChwcm9jZXNzLnBsYXRmb3JtICE9PSAnd2luMzInKSB7XG4gICAgICAgIHN0YWdlTG9jYXRpb24gPSBleHBhbmRUaWxkZShzdGFnZUxvY2F0aW9uKTtcbiAgICB9XG4gICAgbGV0IGJ1Y2tldE5hbWUgPSBzdGFnZUxvY2F0aW9uO1xuICAgIGxldCBzM3BhdGg7XG4gICAgLy8gc3BsaXQgc3RhZ2UgbG9jYXRpb24gYXMgYnVja2V0IG5hbWUgYW5kIHBhdGhcbiAgICBpZiAoc3RhZ2VMb2NhdGlvbi5pbmNsdWRlcygnLycpKSB7XG4gICAgICAgIGJ1Y2tldE5hbWUgPSBzdGFnZUxvY2F0aW9uLnN1YnN0cmluZygwLCBzdGFnZUxvY2F0aW9uLmluZGV4T2YoJy8nKSk7XG4gICAgICAgIHMzcGF0aCA9IHN0YWdlTG9jYXRpb24uc3Vic3RyaW5nKHN0YWdlTG9jYXRpb24uaW5kZXhPZignLycpICsgMSwgc3RhZ2VMb2NhdGlvbi5sZW5ndGgpO1xuICAgICAgICBpZiAoczNwYXRoICYmICFzM3BhdGguZW5kc1dpdGgoJy8nKSkge1xuICAgICAgICAgICAgczNwYXRoICs9ICcvJztcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gUzNMb2NhdGlvbihidWNrZXROYW1lLCBzM3BhdGgpO1xufVxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgUzNVdGlsLFxuICAgIFNOT1dGTEFLRV9TM19ERVNUSU5BVElPTixcbiAgICBEQVRBX1NJWkVfVEhSRVNIT0xELFxuICAgIGV4dHJhY3RCdWNrZXROYW1lQW5kUGF0aCxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zM191dGlsLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/dist/lib/file_transfer_agent/s3_util.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/dist/lib/file_util.js":
/*!**********************************************************!*\
  !*** ./node_modules/snowflake-sdk/dist/lib/file_util.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nconst crypto = __webpack_require__(/*! crypto */ \"crypto\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst fsPromises = __webpack_require__(/*! node:fs/promises */ \"node:fs/promises\");\nconst path = __webpack_require__(/*! path */ \"path\");\nconst zlib = __webpack_require__(/*! zlib */ \"zlib\");\nconst os = __webpack_require__(/*! os */ \"os\");\nconst glob = __webpack_require__(/*! glob */ \"(rsc)/./node_modules/glob/dist/commonjs/index.js\");\nconst { isWindows } = __webpack_require__(/*! ./util */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/util.js\");\nconst Logger = (__webpack_require__(/*! ./logger */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/logger.js\")[\"default\"]);\nconst resultStatus = {\n    ERROR: 'ERROR',\n    UPLOADED: 'UPLOADED',\n    DOWNLOADED: 'DOWNLOADED',\n    COLLISION: 'COLLISION',\n    SKIPPED: 'SKIPPED',\n    RENEW_TOKEN: 'RENEW_TOKEN',\n    RENEW_PRESIGNED_URL: 'RENEW_PRESIGNED_URL',\n    NOT_FOUND_FILE: 'NOT_FOUND_FILE',\n    NEED_RETRY: 'NEED_RETRY',\n    NEED_RETRY_WITH_LOWER_CONCURRENCY: 'NEED_RETRY_WITH_LOWER_CONCURRENCY',\n};\nexports.resultStatus = resultStatus;\nconst ownerReadAndWriteFilePermission = 0o600;\nconst othersCanReadFilePermission = 0o044;\nconst othersCanWriteFilePermission = 0o022;\nconst executableFilePermission = 0o111;\nconst skipWarningForReadPermissionsEnv = 'SF_SKIP_WARNING_FOR_READ_PERMISSIONS_ON_CONFIG_FILE';\n// File Header\nfunction FileHeader(digest, contentLength, encryptionMetadata) {\n    return {\n        digest: digest,\n        contentLength: contentLength,\n        encryptionMetadata: encryptionMetadata,\n    };\n}\nexports.FileHeader = FileHeader;\n/**\n * Creates a file utility object.\n *\n * @returns {Object}\n * @constructor\n */\nfunction FileUtil() {\n    /**\n     * Compress file with GZIP.\n     *\n     * @param {String} fileName\n     * @param {String} tmpDir\n     *\n     * @returns {Object}\n     */\n    this.compressFileWithGZIP = async function (fileName, tmpDir) {\n        // Set file name and path for compressed file\n        const baseName = path.basename(fileName);\n        const gzipFileName = path.join(tmpDir, baseName + '_c.gz');\n        await new Promise(function (resolve) {\n            // Create gzip object\n            const gzip = zlib.createGzip();\n            // Create stream object for reader and writer\n            const reader = fs.createReadStream(fileName);\n            const writer = fs.createWriteStream(gzipFileName);\n            // Write and compress file\n            const result = reader.pipe(gzip).pipe(writer);\n            result.on('finish', function () {\n                resolve();\n            });\n        });\n        await this.normalizeGzipHeader(gzipFileName);\n        const fileInfo = fs.statSync(gzipFileName);\n        return {\n            name: gzipFileName,\n            size: fileInfo.size,\n        };\n    };\n    /**\n     * Normalize the header by removing the timestamp.\n     * Note: GZIP in python includes the file name when compressing but\n     * nodejs does not so there is no need to remove it here.\n     *\n     * @param {String} gzipFileName\n     *\n     * @returns {null}\n     */\n    this.normalizeGzipHeader = async function (gzipFileName) {\n        const fd = fs.openSync(gzipFileName, 'rs+');\n        // Reset the timestamp in gzip header\n        // Write at position 4\n        const timestampBuffer = Buffer.alloc(4);\n        timestampBuffer.writeUInt32LE(0, 0);\n        fs.writeSync(fd, timestampBuffer, 0, 4, 4);\n        fs.closeSync(fd);\n    };\n    /**\n     * Get file digest and size.\n     *\n     * @param {String} fileName\n     *\n     * @returns {Object}\n     */\n    this.getDigestAndSizeForFile = async function (fileName) {\n        const chunkSize = 16 * 4 * 1024;\n        const fileInfo = fs.statSync(fileName);\n        const bufferSize = fileInfo.size;\n        let buffer = [];\n        await new Promise(function (resolve) {\n            // Create reader stream and set maximum chunk size\n            const infile = fs.createReadStream(fileName, { highWaterMark: chunkSize });\n            infile.on('data', function (chunk) {\n                buffer.push(chunk);\n            });\n            infile.on('close', function () {\n                buffer = Buffer.concat(buffer);\n                resolve();\n            });\n        });\n        const hash = crypto.createHash('sha256').update(buffer).digest('base64');\n        return {\n            digest: hash,\n            size: bufferSize,\n        };\n    };\n}\nexports.FileUtil = FileUtil;\nexports.getMatchingFilePaths = function (dir, fileName) {\n    const pathWithWildcard = path.join(dir, fileName);\n    const pathWithWildcardDependsOnPlatform = isWindows()\n        ? pathWithWildcard.replace(/\\\\/g, '/')\n        : pathWithWildcard;\n    return glob.sync(pathWithWildcardDependsOnPlatform);\n};\n/**\n * Checks if the provided file or directory is writable only by the user and os that file owner is the same as os user. FsPromises can be provided.\n * @param filePath\n * @param fsPromises\n * @param useSync\n * @returns {Promise<void>|void} Returns a Promise<void> or void on Windows (no validation needed), otherwise returns the result of the validation\n\n */\nexports.validateNoExtraPermissionsForOthers = function (filePath, fsPromises = null, useSync = false) {\n    const fsp = fsPromises ? fsPromises : __webpack_require__(/*! fs/promises */ \"fs/promises\");\n    if (isWindows()) {\n        return;\n    }\n    const validatePermissions = (stats) => {\n        const permission = stats.mode & 0o777;\n        if (!shouldSkipWarningForReadPermissions() &&\n            (permission & othersCanReadFilePermission) !== 0) {\n            Logger()\n                .warn(`file ${filePath} is readable by someone other than the owner. Your Permission: ${permission.toString(8)}. If you want \"+\n\t\t\t\"to disable this warning, either remove read permissions from group and others or set the environment \"+\n\t\t\t\"variable ${skipWarningForReadPermissionsEnv} to true`);\n        }\n        if ((permission & executableFilePermission) !== 0) {\n            throw new Error(`file ${filePath} is executable — this poses a security risk because the file could be misused as a script or executed unintentionally. File Permission: ${permission.toString(8)}`);\n        }\n        if ((permission & othersCanWriteFilePermission) !== 0) {\n            throw new Error(`file ${filePath} is writable by group or others — this poses a security risk because it allows unauthorized users to modify sensitive settings. File Permission: ${permission.toString(8)}`);\n        }\n        //The owner should have read and write permission.\n        if ((permission & ownerReadAndWriteFilePermission) === ownerReadAndWriteFilePermission) {\n            Logger().debug(`Validated that the owner has read and write permission for file: ${filePath}, Permission: ${permission.toString(8)}`);\n        }\n        else {\n            throw new Error(`Invalid file permissions (${permission.toString(8)} for file ${filePath}). Make sure the owner has read and write permissions, and other users do not have access to it. Please fix the ownership and permissions of the file or remove the file and re-run the driver.`);\n        }\n        const userInfo = os.userInfo();\n        if (stats.uid === userInfo.uid) {\n            Logger().debug('Validated file owner');\n        }\n        else {\n            throw new Error(`Invalid file owner for file ${filePath}). Make sure the user running the software is the owner of the file, or remove the file and re-run the driver.`);\n        }\n    };\n    const handleError = (err) => {\n        // When file doesn't exist - return\n        if (err.code === 'ENOENT') {\n            return;\n        }\n        throw err;\n    };\n    if (useSync) {\n        try {\n            const stats = fs.statSync(filePath);\n            return validatePermissions(stats);\n        }\n        catch (err) {\n            handleError(err);\n        }\n    }\n    else {\n        return fsp.stat(filePath).then(validatePermissions).catch(handleError);\n    }\n};\nexports.validateNoExtraPermissionsForOthersSync = function (filePath) {\n    return exports.validateNoExtraPermissionsForOthers(filePath, fs, true);\n};\n/**\n * Checks if the provided file is writable only by the user and os that file owner is the same as os user. FsPromises can be provided.\n * @param filePath\n * @param expectedMode\n * @param fsPromises\n * @returns {Promise<FileHandle>}\n */\nexports.getSecureHandle = async function (filePath, flags, fsPromises) {\n    const fsp = fsPromises ? fsPromises : __webpack_require__(/*! fs/promises */ \"fs/promises\");\n    try {\n        const fileHandle = await fsp.open(filePath, flags, 0o600);\n        if (os.platform() === 'win32') {\n            return fileHandle;\n        }\n        const stats = await fileHandle.stat();\n        const mode = stats.mode;\n        const permission = mode & 0o777;\n        //This should be 600 permission, which means the file permission has not been changed by others.\n        if (permission === 0o600) {\n            Logger().debug(`Validated that the user has only read and write permission for file: ${filePath}, Permission: ${permission}`);\n        }\n        else {\n            throw new Error(`Invalid file permissions (${permission.toString(8)} for file ${filePath}). Make sure you have read and write permissions and other users do not have access to it. Please remove the file and re-run the driver.`);\n        }\n        const userInfo = os.userInfo();\n        if (stats.uid === userInfo.uid) {\n            Logger().debug('Validated file owner');\n        }\n        else {\n            throw new Error(`Invalid file owner for file ${filePath}). Make sure the system user is the owner of the file otherwise please remove the file and re-run the driver.`);\n        }\n        return fileHandle;\n    }\n    catch (err) {\n        //When file doesn't exist - return\n        if (err.code === 'ENOENT') {\n            return null;\n        }\n        else {\n            throw err;\n        }\n    }\n};\nexports.closeHandle = async function (fileHandle) {\n    if (fileHandle !== undefined && fileHandle !== null) {\n        await fileHandle.close();\n    }\n};\n/**\n * Checks if the provided file or directory permissions are correct.\n * @param filePath\n * @param expectedMode\n * @param fsPromises\n * @returns {Promise<boolean>} resolves always to true for Windows\n */\nexports.isFileModeCorrect = async function (filePath, expectedMode, fsPromises) {\n    if (os.platform() === 'win32') {\n        return true;\n    }\n    return await fsPromises.stat(filePath).then((stats) => {\n        // we have to limit the number of LSB bits to 9 with the mask, as the stats.mode starts with the file type,\n        // e.g. the directory with permissions 755 will have stats.mask of 40755.\n        const mask = (1 << 9) - 1;\n        return (stats.mode & mask) === expectedMode;\n    });\n};\n/**\n * Checks if the provided file or directory is writable only by the user.\n * @param configFilePath\n * @param fsPromises\n * @returns {Promise<boolean>} resolves always to true for Windows\n */\nexports.isFileNotWritableByGroupOrOthers = async function (configFilePath, fsPromises) {\n    if (os.platform() === 'win32') {\n        return true;\n    }\n    const stats = await fsPromises.stat(configFilePath);\n    return (stats.mode & (1 << 4)) === 0 && (stats.mode & (1 << 1)) === 0;\n};\n/**\n * Generate checksum for given text. The algorithm and encoding can be provided.\n * @param text\n * @param algorithm\n * @param encoding\n * @returns {Promise<String>} resolves always to true for Windows\n */\nexports.generateChecksum = function (text, algorithm, encoding) {\n    return crypto\n        .createHash(algorithm || 'sha256')\n        .update(text, 'utf8')\n        .digest(encoding || 'hex')\n        .substring(0, 32);\n};\nexports.IsFileExisted = async function (filePath) {\n    try {\n        await fsPromises.access(filePath, fs.constants.F_OK);\n        return true;\n    }\n    catch (err) {\n        return false;\n    }\n};\nfunction shouldSkipWarningForReadPermissions() {\n    return process.env[skipWarningForReadPermissionsEnv] !== undefined;\n}\n//# sourceMappingURL=file_util.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/dist/lib/file_util.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/dist/lib/global_config.js":
/*!**************************************************************!*\
  !*** ./node_modules/snowflake-sdk/dist/lib/global_config.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nconst os = __webpack_require__(/*! os */ \"os\");\nconst path = __webpack_require__(/*! path */ \"path\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst Errors = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/errors.js\");\nconst ErrorCodes = Errors.codes;\nconst Util = __webpack_require__(/*! ./util */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/util.js\");\nconst Logger = __webpack_require__(/*! ./logger */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/logger.js\");\nconst { XMLParser, XMLValidator } = __webpack_require__(/*! fast-xml-parser */ \"(rsc)/./node_modules/fast-xml-parser/src/fxp.js\");\nlet disableOCSPChecks = false;\n/**\n * Updates the value of the 'disableOCSPChecks' parameter.\n *\n * @param {boolean} value\n */\nexports.setDisableOCSPChecks = function (value) {\n    // validate input\n    Errors.assertInternal(Util.isBoolean(value));\n    disableOCSPChecks = value;\n};\n/**\n * Returns the value of the 'disableOCSPChecks' parameter.\n *\n * @returns {boolean}\n */\nexports.isOCSPChecksDisabled = function () {\n    return disableOCSPChecks;\n};\nlet ocspFailOpen = true;\nexports.ocspFailOpen = ocspFailOpen;\n/**\n * Updates the value of the 'ocspFailOpen' parameter.\n *\n * @param {boolean} value\n */\nexports.setOcspFailOpen = function (value) {\n    // validate input\n    Errors.assertInternal(Util.isBoolean(value));\n    ocspFailOpen = value;\n};\n/**\n * Returns the value of the 'ocspFailOpen' parameter.\n *\n * @param {boolean} value\n */\nexports.getOcspFailOpen = function () {\n    return ocspFailOpen;\n};\nconst ocspModes = {\n    FAIL_CLOSED: 'FAIL_CLOSED',\n    FAIL_OPEN: 'FAIL_OPEN',\n    INSECURE: 'INSECURE',\n};\nexports.ocspModes = ocspModes;\n/**\n * Returns the OCSP mode\n *\n * @returns {string}\n */\nexports.getOcspMode = function () {\n    if (disableOCSPChecks) {\n        return ocspModes.INSECURE;\n    }\n    else if (!ocspFailOpen) {\n        return ocspModes.FAIL_CLOSED;\n    }\n    return ocspModes.FAIL_OPEN;\n};\n/**\n * Returns the upper limit for number of entries we can have in the OCSP response cache.\n *\n * @returns {number}\n */\nexports.getOcspResponseCacheSizeLimit = function () {\n    return 1000;\n};\n/**\n * Returns the maximum time in seconds that entries can live in the OCSP\n * response cache.\n *\n * @returns {number}\n */\nexports.getOcspResponseCacheMaxAge = function () {\n    // 24 hours, in seconds\n    // It was in millionseconds before but the timestamp we save in\n    // cache file was in seconds. Compare that with max age in millionseconds\n    // would makes the cache never expire.\n    // change max age here because customer would have local cache file exist\n    // already and we need to keep that valid with new version of the driver.\n    // use small value for test only\n    let maxage = Number(process.env.SF_OCSP_TEST_CACHE_MAXAGE) || 86400;\n    if (maxage > 86400 || maxage <= 0) {\n        maxage = 86400;\n    }\n    return maxage;\n};\n/**\n * Creates a cache directory.\n *\n * @returns {string}\n */\nexports.mkdirCacheDir = function () {\n    let cacheRootDir = process.env.SF_OCSP_RESPONSE_CACHE_DIR;\n    if (!Util.exists(cacheRootDir)) {\n        cacheRootDir = os.homedir();\n    }\n    if (!Util.exists(cacheRootDir)) {\n        cacheRootDir = os.tmpdir(); // fallback to TMP if user home doesn't exist.\n    }\n    let cacheDir;\n    const platform = os.platform();\n    if (platform === 'darwin') {\n        cacheDir = path.join(cacheRootDir, 'Library', 'Caches', 'Snowflake');\n    }\n    else if (platform === 'win32') {\n        cacheDir = path.join(cacheRootDir, 'AppData', 'Local', 'Snowflake', 'Caches');\n    }\n    else {\n        // linux\n        cacheDir = path.join(cacheRootDir, '.cache', 'snowflake');\n    }\n    try {\n        fs.mkdirSync(cacheDir, { recursive: true });\n    }\n    catch (e) {\n        Logger.getInstance().debug('Failed to create a cache directory %s, err: %s', cacheDir, e);\n    }\n    return cacheDir;\n};\nconst rest = {\n    HTTPS_PORT: 443,\n    HTTPS_PROTOCOL: 'https',\n};\nexports.rest = rest;\n// The default JSON parser\nexports.jsonColumnVariantParser = (rawColumnValue) => new Function(`return (${rawColumnValue});`)();\n/**\n * Updates the value of the 'jsonColumnVariantParser' parameter.\n *\n * @param {function: (rawColumnValue: string) => any} value\n */\nexports.setJsonColumnVariantParser = function (value) {\n    // validate input\n    Errors.assertInternal(Util.isFunction(value));\n    exports.jsonColumnVariantParser = value;\n};\n/**\n * As a default we set parameters values identical like in fast-xml-parser lib defaults\n * thus preserving backward compatibility if customer doesn't set custom configuration\n * and give possibility to set only part of parameters\n */\nconst defaultXmlParserConfiguration = {\n    ignoreAttributes: true,\n    alwaysCreateTextNode: false,\n    attributeNamePrefix: '@_',\n    attributesGroupName: false,\n};\n// The default XML parser\nexports.xmlColumnVariantParser = createXmlColumnVariantParser(defaultXmlParserConfiguration);\n/**\n * Updates the value of the 'xmlColumnVariantParser' parameter.\n * Return fucntion with custom XmlParser configuration or default if not set.\n *\n * @param {function: (rawColumnValue: string) => any} value\n */\nexports.setXmlColumnVariantParser = function (value) {\n    // validate input\n    Errors.assertInternal(Util.isFunction(value));\n    exports.xmlColumnVariantParser = value;\n};\n/**\n * Create and update the 'xmlColumnVariantParser' parameter using custom parser configuration.\n *\n * @param {function: (rawColumnValue: string) => any} params\n */\nexports.createXmlColumnVariantParserWithParameters = function (params) {\n    exports.xmlColumnVariantParser = createXmlColumnVariantParser(params);\n};\n/**\n * Create function to parse XML using XMlParser with custom configuration.\n * Parametrs that you can override:\n *  ignoreAttributes: true,\n *  attributeNamePrefix: '@_',\n *  attributesGroupName: false,\n *  alwaysCreateTextNode: false\n *\n * @param {object} config\n */\nfunction createXmlColumnVariantParser(config) {\n    let parserConfiguration;\n    if (!Util.isObject(config)) {\n        parserConfiguration = defaultXmlParserConfiguration;\n    }\n    else {\n        parserConfiguration = {\n            ignoreAttributes: Util.exists(config.ignoreAttributes)\n                ? config.ignoreAttributes\n                : defaultXmlParserConfiguration.ignoreAttributes,\n            attributeNamePrefix: Util.exists(config.attributeNamePrefix)\n                ? config.attributeNamePrefix\n                : defaultXmlParserConfiguration.attributeNamePrefix,\n            //For attributesGroupName null value is acceptable and mean no grouping\n            attributesGroupName: config.attributesGroupName !== undefined\n                ? config.attributesGroupName\n                : defaultXmlParserConfiguration.attributesGroupName,\n            alwaysCreateTextNode: Util.exists(config.alwaysCreateTextNode)\n                ? config.alwaysCreateTextNode\n                : defaultXmlParserConfiguration.alwaysCreateTextNode,\n        };\n    }\n    return (rawColumnValue) => {\n        // check if raw string is in XML format\n        // ensure each tag is enclosed and all attributes and elements are valid\n        // XMLValidator.validate returns true if valid, returns an error if invalid\n        const validateResult = XMLValidator.validate(rawColumnValue);\n        if (validateResult === true) {\n            // use XML parser\n            return new XMLParser(parserConfiguration).parse(rawColumnValue);\n        }\n        else {\n            throw new Error(validateResult.err.msg);\n        }\n    };\n}\nlet keepAlive = true;\n/**\n * Updates the value of the 'keepAlive' parameter.\n *\n * @param {boolean} value\n */\nexports.setKeepAlive = function (value) {\n    Errors.assertInternal(Util.isBoolean(value));\n    keepAlive = value;\n};\n/**\n * Returns the overriden value of 'keepAlive' or default if not set. Default value is true\n *\n * @param {boolean} value\n */\nexports.getKeepAlive = function () {\n    return keepAlive;\n};\nlet credentialManager = null;\nexports.setCustomCredentialManager = function (customCredentialManager) {\n    Errors.checkArgumentValid(Util.checkValidCustomCredentialManager(customCredentialManager), ErrorCodes.ERR_GLOBAL_CONFIGURE_INVALID_CUSTOM_CREDENTIAL_MANAGER);\n    credentialManager = customCredentialManager;\n    Logger.getInstance().info('Custom credential manager is set by a user.');\n};\nexports.getCredentialManager = function () {\n    return credentialManager;\n};\nlet envProxy = true;\nexports.setEnvProxy = function (value) {\n    Errors.assertInternal(Util.isBoolean(value));\n    envProxy = value;\n};\nexports.isEnvProxyActive = function () {\n    return envProxy;\n};\nlet customRedirectingClient;\nexports.setCustomRedirectingClient = function (value) {\n    customRedirectingClient = value;\n};\nexports.getCustomRedirectingClient = function () {\n    return customRedirectingClient;\n};\n//# sourceMappingURL=global_config.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/dist/lib/global_config.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/dist/lib/global_config_typed.js":
/*!********************************************************************!*\
  !*** ./node_modules/snowflake-sdk/dist/lib/global_config_typed.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.globalConfigCustomValues = exports.GLOBAL_CONFIG_DEFAULTS = void 0;\nconst path_1 = __importDefault(__webpack_require__(/*! path */ \"path\"));\nconst logger_1 = __importDefault(__webpack_require__(/*! ./logger */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/logger.js\"));\nconst disk_cache_1 = __webpack_require__(/*! ./disk_cache */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/disk_cache.js\");\nexports.GLOBAL_CONFIG_DEFAULTS = {\n    crlDownloadTimeout: 10000,\n    crlCacheValidityTime: 86400000,\n    get crlCacheDir() {\n        return process.env.SNOWFLAKE_CRL_ON_DISK_CACHE_DIR || path_1.default.join((0, disk_cache_1.getDefaultCacheDir)(), 'crls');\n    },\n};\nexports.globalConfigCustomValues = {};\nexports[\"default\"] = {\n    setValues: (options) => {\n        const filteredOptions = Object.fromEntries(Object.entries(options).filter(([key, value]) => key in exports.GLOBAL_CONFIG_DEFAULTS && value !== undefined));\n        (0, logger_1.default)().debug('Setting global config typed values: %j', filteredOptions);\n        Object.assign(exports.globalConfigCustomValues, filteredOptions);\n    },\n    getValue: (key) => {\n        return exports.globalConfigCustomValues[key] ?? exports.GLOBAL_CONFIG_DEFAULTS[key];\n    },\n};\n//# sourceMappingURL=global_config_typed.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9kaXN0L2xpYi9nbG9iYWxfY29uZmlnX3R5cGVkLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZ0NBQWdDLEdBQUcsOEJBQThCO0FBQ2pFLCtCQUErQixtQkFBTyxDQUFDLGtCQUFNO0FBQzdDLGlDQUFpQyxtQkFBTyxDQUFDLHVFQUFVO0FBQ25ELHFCQUFxQixtQkFBTyxDQUFDLCtFQUFjO0FBQzNDLDhCQUE4QjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLGdDQUFnQztBQUNoQyxrQkFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL3dhbmdoYW90YWkvRGVza3RvcC9lbHZlbmxhYi9IVFYvbm9kZV9tb2R1bGVzL3Nub3dmbGFrZS1zZGsvZGlzdC9saWIvZ2xvYmFsX2NvbmZpZ190eXBlZC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2xvYmFsQ29uZmlnQ3VzdG9tVmFsdWVzID0gZXhwb3J0cy5HTE9CQUxfQ09ORklHX0RFRkFVTFRTID0gdm9pZCAwO1xuY29uc3QgcGF0aF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJwYXRoXCIpKTtcbmNvbnN0IGxvZ2dlcl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2xvZ2dlclwiKSk7XG5jb25zdCBkaXNrX2NhY2hlXzEgPSByZXF1aXJlKFwiLi9kaXNrX2NhY2hlXCIpO1xuZXhwb3J0cy5HTE9CQUxfQ09ORklHX0RFRkFVTFRTID0ge1xuICAgIGNybERvd25sb2FkVGltZW91dDogMTAwMDAsXG4gICAgY3JsQ2FjaGVWYWxpZGl0eVRpbWU6IDg2NDAwMDAwLFxuICAgIGdldCBjcmxDYWNoZURpcigpIHtcbiAgICAgICAgcmV0dXJuIHByb2Nlc3MuZW52LlNOT1dGTEFLRV9DUkxfT05fRElTS19DQUNIRV9ESVIgfHwgcGF0aF8xLmRlZmF1bHQuam9pbigoMCwgZGlza19jYWNoZV8xLmdldERlZmF1bHRDYWNoZURpcikoKSwgJ2NybHMnKTtcbiAgICB9LFxufTtcbmV4cG9ydHMuZ2xvYmFsQ29uZmlnQ3VzdG9tVmFsdWVzID0ge307XG5leHBvcnRzLmRlZmF1bHQgPSB7XG4gICAgc2V0VmFsdWVzOiAob3B0aW9ucykgPT4ge1xuICAgICAgICBjb25zdCBmaWx0ZXJlZE9wdGlvbnMgPSBPYmplY3QuZnJvbUVudHJpZXMoT2JqZWN0LmVudHJpZXMob3B0aW9ucykuZmlsdGVyKChba2V5LCB2YWx1ZV0pID0+IGtleSBpbiBleHBvcnRzLkdMT0JBTF9DT05GSUdfREVGQVVMVFMgJiYgdmFsdWUgIT09IHVuZGVmaW5lZCkpO1xuICAgICAgICAoMCwgbG9nZ2VyXzEuZGVmYXVsdCkoKS5kZWJ1ZygnU2V0dGluZyBnbG9iYWwgY29uZmlnIHR5cGVkIHZhbHVlczogJWonLCBmaWx0ZXJlZE9wdGlvbnMpO1xuICAgICAgICBPYmplY3QuYXNzaWduKGV4cG9ydHMuZ2xvYmFsQ29uZmlnQ3VzdG9tVmFsdWVzLCBmaWx0ZXJlZE9wdGlvbnMpO1xuICAgIH0sXG4gICAgZ2V0VmFsdWU6IChrZXkpID0+IHtcbiAgICAgICAgcmV0dXJuIGV4cG9ydHMuZ2xvYmFsQ29uZmlnQ3VzdG9tVmFsdWVzW2tleV0gPz8gZXhwb3J0cy5HTE9CQUxfQ09ORklHX0RFRkFVTFRTW2tleV07XG4gICAgfSxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nbG9iYWxfY29uZmlnX3R5cGVkLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/dist/lib/global_config_typed.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/dist/lib/http/base.js":
/*!**********************************************************!*\
  !*** ./node_modules/snowflake-sdk/dist/lib/http/base.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst zlib = __webpack_require__(/*! zlib */ \"zlib\");\nconst Util = __webpack_require__(/*! ../util */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/util.js\");\nconst Logger = __webpack_require__(/*! ../logger */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/logger.js\");\nconst ExecutionTimer = __webpack_require__(/*! ../logger/execution_timer */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/logger/execution_timer.js\");\nconst axios = __webpack_require__(/*! axios */ \"(rsc)/./node_modules/axios/dist/node/axios.cjs\");\nconst URL = (__webpack_require__(/*! node:url */ \"node:url\").URL);\nconst requestUtil = __webpack_require__(/*! ./request_util */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/http/request_util.js\");\nconst DEFAULT_REQUEST_TIMEOUT = 360000;\n/**\n * Creates a new HTTP client.\n *\n * @param connectionConfig\n * @constructor\n */\nfunction HttpClient(connectionConfig) {\n    // save the connection config\n    Logger.getInstance().trace('Initializing base HttpClient with Connection Config[%s]', connectionConfig.describeIdentityAttributes());\n    this._connectionConfig = connectionConfig;\n}\n/**\n * Issues an HTTP request.\n *\n * @param {Object} options\n *\n * @returns {Object} an object representing the request that was issued.\n */\nHttpClient.prototype.request = function (options) {\n    Logger.getInstance().trace('Request%s - preparing for sending.', requestUtil.describeRequestFromOptions(options));\n    const requestObject = {};\n    const requestAbortController = new AbortController();\n    const requestHandlers = { signal: requestAbortController.signal };\n    const requestOptions = prepareRequestOptions.call(this, options, requestHandlers);\n    let sendRequest = async function sendRequest() {\n        Logger.getInstance().trace('Request%s - sending.', requestUtil.describeRequestFromOptions(requestOptions));\n        const timer = new ExecutionTimer().start();\n        requestObject.requestPromise = axios\n            .request(requestOptions)\n            .then((response) => {\n            const httpResponseTime = timer.getDuration();\n            Logger.getInstance().debug('Request%s - response received after %s milliseconds with status %s.', requestUtil.describeRequestFromOptions(requestOptions), httpResponseTime, response.status);\n            parseResponseData(response);\n            sanitizeAxiosResponse(response);\n            if (Util.isFunction(options.callback)) {\n                Logger.getInstance().trace('Request%s - calling callback function.', requestUtil.describeRequestFromOptions(requestOptions));\n                return options.callback(null, normalizeResponse(response), response.data);\n            }\n            else {\n                Logger.getInstance().trace('Request%s - callback function was not provided.', requestUtil.describeRequestFromOptions(requestOptions));\n                return null;\n            }\n        })\n            .catch((err) => {\n            const httpResponseTime = timer.getDuration();\n            Logger.getInstance().debug('Request%s - failed after %s milliseconds.', requestUtil.describeRequestFromOptions(requestOptions), httpResponseTime);\n            sanitizeAxiosError(err);\n            if (Util.isFunction(options.callback)) {\n                if (err.response) {\n                    // axios returns error for not 2xx responses - let's unwrap it\n                    Logger.getInstance().trace('Request%s - calling callback function for error from response. Received code: ', requestUtil.describeRequestFromOptions(requestOptions), err.response.status);\n                    options.callback(null, normalizeResponse(err.response), err.response.data);\n                }\n                else {\n                    Logger.getInstance().trace('Request%s - calling callback function for error without response.', requestUtil.describeRequestFromOptions(requestOptions));\n                    options.callback(err, normalizeResponse(null), null);\n                }\n                return null;\n            }\n            else {\n                Logger.getInstance().warn('Request%s - callback function was not provided. Error will be re-raised.', requestUtil.describeRequestFromOptions(requestOptions));\n                throw err;\n            }\n        });\n    };\n    sendRequest = sendRequest.bind(this);\n    Logger.getInstance().trace('Request%s - issued for the next tick.', requestUtil.describeRequestFromOptions(requestOptions));\n    process.nextTick(sendRequest);\n    // return an externalized request object that only contains\n    // methods we're comfortable exposing to the outside world\n    requestObject.abort = function () {\n        if (requestAbortController) {\n            Logger.getInstance().trace('Request%s - aborting.', requestUtil.describeRequestFromOptions(requestOptions));\n            requestAbortController.abort();\n            Logger.getInstance().debug('Request%s - aborted.', requestUtil.describeRequestFromOptions(requestOptions));\n        }\n    };\n    return requestObject;\n};\n/**\n * Issues an HTTP request.\n *\n * @param {Object} options\n *\n * @returns {Object} an object representing the request that was issued.\n */\nHttpClient.prototype.requestAsync = async function (options) {\n    Logger.getInstance().trace('Request%s - preparing for async sending.', requestUtil.describeRequestFromOptions(options));\n    const timer = new ExecutionTimer();\n    try {\n        const requestOptions = prepareRequestOptions.call(this, options);\n        timer.start();\n        const response = await axios.request(requestOptions);\n        const httpResponseTime = timer.getDuration();\n        Logger.getInstance().debug('Request%s - response received after %s milliseconds with status %s.', requestUtil.describeRequestFromOptions(requestOptions), httpResponseTime, response.status);\n        parseResponseData(response);\n        sanitizeAxiosResponse(response);\n        return normalizeResponse(response);\n    }\n    catch (err) {\n        const httpResponseTime = timer.getDuration();\n        Logger.getInstance().debug('Request%s - failed after %s milliseconds. Error will be re-raised.', requestUtil.describeRequestFromOptions(options), httpResponseTime);\n        sanitizeAxiosError(err);\n        throw err;\n    }\n};\nfunction parseResponseData(response) {\n    Logger.getInstance().trace('Request%s - parsing response data.', requestUtil.describeRequestFromResponse(response));\n    parseIfJSONData(response);\n}\nfunction parseIfJSONData(response) {\n    if (Util.isString(response['data']) &&\n        response['headers']['content-type'] === 'application/json') {\n        response['json'] = response['data'];\n        response['data'] = JSON.parse(response['data']);\n    }\n}\n/**\n * Issues an HTTP POST request.\n *\n * @param {String} url\n * @param {String} body\n * @param {Object} options\n *\n * @returns {Object} an object representing the request that was issued.\n */\nHttpClient.prototype.post = async function (url, body, options) {\n    return this.requestAsync({\n        url: url,\n        method: 'POST',\n        data: body,\n        ...options,\n    });\n};\n/**\n * Issues an HTTP GET request.\n *\n * @param {String} url\n * @param {Object} params\n *\n * @returns {Object} an object representing the request that was issued.\n */\nHttpClient.prototype.get = async function (url, params) {\n    return this.requestAsync({\n        url: url,\n        method: 'GET',\n        ...params,\n    });\n};\n/**\n * Issues an HTTP HEAD request.\n *\n * @param {String} url\n * @param {Object} config\n *\n * @returns {Object} an object representing the request that was issued.\n */\nHttpClient.prototype.head = async function (url, config) {\n    return this.requestAsync({\n        url: url,\n        method: 'HEAD',\n        ...config,\n    });\n};\n/**\n * Issues an HTTP PUT request.\n *\n * @param {String} url\n * @param {Object} data\n * @param {Object} config\n *\n * @returns {Object} an object representing the request that was issued.\n */\nHttpClient.prototype.put = async function (url, data, config) {\n    return this.requestAsync({\n        url: url,\n        method: 'PUT',\n        data: data,\n        ...config,\n    });\n};\n/**\n * @abstract\n * Returns the module to use when making HTTP requests. Subclasses must override\n * and provide their own implementations.\n *\n * @returns {*}\n */\nHttpClient.prototype.getRequestModule = function () {\n    return null;\n};\n/**\n * Returns the agent and proxy options.\n *\n * @returns {*}\n */\nHttpClient.prototype.getAgent = function () {\n    return null;\n};\nmodule.exports = HttpClient;\nfunction sanitizeAxiosResponse(response) {\n    Logger.getInstance().trace('Request%s - sanitizing response data.', requestUtil.describeRequestFromResponse(response));\n    response.request = undefined;\n    if (response.config) {\n        response.config.data = undefined;\n        response.config.headers = undefined;\n    }\n}\nfunction sanitizeAxiosError(error) {\n    error.request = undefined;\n    error.config = undefined;\n    if (error.response) {\n        Logger.getInstance().trace('Request%s - sanitizing response error data.', requestUtil.describeRequestFromResponse(error.response));\n        sanitizeAxiosResponse(error.response);\n    }\n}\nfunction prepareRequestOptions(options, requestHandlers = {}) {\n    Logger.getInstance().trace('Request%s - constructing options.', requestUtil.describeRequestFromOptions(options));\n    const headers = normalizeHeaders(options.headers) || {};\n    const timeout = options.timeout || this._connectionConfig.getTimeout() || DEFAULT_REQUEST_TIMEOUT;\n    let data = options.data || options.json || options.body;\n    if (data) {\n        const bufferUncompressed = Buffer.from(JSON.stringify(data), 'utf8');\n        zlib.gzip(bufferUncompressed, null, function (err, bufferCompressed) {\n            // if the compression was successful\n            if (!err) {\n                data = bufferCompressed;\n                headers['Content-Encoding'] = 'gzip';\n                Logger.getInstance().debug('Request%s - original buffer length: %d bytes. Compressed buffer length: %d bytes.', requestUtil.describeRequestFromOptions(options), bufferUncompressed.buffer.byteLength, bufferCompressed.buffer.byteLength);\n            }\n            else {\n                // Logging 'err' variable value should not be done, since it may contain compressed customer's data.\n                // It can be added only for debugging purposes.\n                Logger.getInstance().warn('Request%s - could not compress request data.', requestUtil.describeRequestFromOptions(options));\n            }\n        });\n    }\n    const params = options.params;\n    let mock;\n    if (this._connectionConfig.agentClass) {\n        mock = {\n            agentClass: this._connectionConfig.agentClass,\n        };\n    }\n    const backoffStrategy = this.constructExponentialBackoffStrategy();\n    const requestOptions = {\n        method: options.method,\n        url: options.url,\n        headers: headers,\n        data: data,\n        params: params,\n        timeout: timeout,\n        requestOCSP: true,\n        retryDelay: backoffStrategy,\n        rejectUnauthorized: true,\n        // we manually parse jsons or other structures from the server so they need to be text\n        responseType: options.responseType || 'text',\n        proxy: false,\n        ...requestHandlers,\n    };\n    const url = new URL(options.url);\n    const isHttps = url.protocol === 'https:';\n    const agent = this.getAgent(url, this._connectionConfig.getProxy(), mock);\n    if (isHttps) {\n        requestOptions.httpsAgent = agent;\n    }\n    else {\n        requestOptions.httpAgent = agent;\n    }\n    Logger.getInstance().debug('Request%s - options - timeout: %s, retryDelay: %s, responseType: %s', requestUtil.describeRequestFromOptions(options), requestOptions.timeout, requestOptions.retryDelay, requestOptions.responseType);\n    return requestOptions;\n}\n/**\n * Normalizes a request headers object so that we get the same behavior\n * regardless of whether we're using request.js or browser-request.js.\n *\n * @param {Object} headers\n *\n * @returns {Object}\n */\nfunction normalizeHeaders(headers) {\n    Logger.getInstance().trace('Normalizing headers');\n    if (Util.isObject(headers)) {\n        const normalizedHeaders = {\n            'user-agent': Util.userAgent,\n        };\n        // shallow copy the headers object and convert some headers like 'Accept'\n        // and 'Content-Type' to lower case while copying; this is necessary\n        // because the browser-request module, which we use to make http requests in\n        // the browser, does not do case-insensitive checks when deciding whether to\n        // insert default values for the 'accept' and 'content-type' headers; in\n        // otherwise, if someone specifies an 'Accept': 'application/json' header,\n        // browser-request will inject its own 'accept': 'application/json' header\n        // and the browser XMLHttpRequest object will concatenate the two values and\n        // send 'Accept': 'application/json, application/json' with the request\n        let headerNameLowerCase;\n        for (const headerName in headers) {\n            if (Object.prototype.hasOwnProperty.call(headers, headerName)) {\n                headerNameLowerCase = headerName.toLowerCase();\n                if (headerNameLowerCase === 'accept' || headerNameLowerCase === 'content-type') {\n                    normalizedHeaders[headerNameLowerCase] = headers[headerName];\n                }\n                else {\n                    normalizedHeaders[headerName] = headers[headerName];\n                }\n            }\n        }\n        Logger.getInstance().trace('Headers were normalized');\n        return normalizedHeaders;\n    }\n    else {\n        Logger.getInstance().trace('Headers were not an object. Original value will be returned.');\n        return headers;\n    }\n}\n/**\n * Normalizes the response object so that we can extract response headers from\n * it in a uniform way regardless of whether we're using request.js or\n * browser-request.js.\n *\n * @param {Object} response\n *\n * @return {Object}\n */\nfunction normalizeResponse(response) {\n    // if the response doesn't already have a getResponseHeader() method, add one\n    if (response && !response.getResponseHeader) {\n        Logger.getInstance().trace('Request%s - normalizing.', requestUtil.describeRequestFromResponse(response));\n        response.getResponseHeader = function (header) {\n            return (response.headers && response.headers[Util.isString(header) ? header.toLowerCase() : header]);\n        };\n    }\n    if (response) {\n        response.body = response.data; // converting axios response body to old expected body attribute\n        response.statusCode = response.status; // converting axios status to old expected statusCode\n    }\n    return response;\n}\n//# sourceMappingURL=base.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/dist/lib/http/base.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/dist/lib/http/node.js":
/*!**********************************************************!*\
  !*** ./node_modules/snowflake-sdk/dist/lib/http/node.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.isBypassProxy = exports.httpsAgentCache = exports.NodeHttpClient = void 0;\nexports.getProxyAgent = getProxyAgent;\nconst node_untyped_1 = __webpack_require__(/*! ./node_untyped */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/http/node_untyped.js\");\nvar node_untyped_2 = __webpack_require__(/*! ./node_untyped */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/http/node_untyped.js\");\nObject.defineProperty(exports, \"NodeHttpClient\", ({ enumerable: true, get: function () { return node_untyped_2.NodeHttpClient; } }));\nObject.defineProperty(exports, \"httpsAgentCache\", ({ enumerable: true, get: function () { return node_untyped_2.httpsAgentCache; } }));\nObject.defineProperty(exports, \"isBypassProxy\", ({ enumerable: true, get: function () { return node_untyped_2.isBypassProxy; } }));\n/**\n * Work In Progress TypeScript migration for http/node_untyped.js\n */\nfunction getProxyAgent(config) {\n    const { proxyOptions, connectionConfig, parsedUrl, destination, mockAgent } = config;\n    return (0, node_untyped_1.getProxyAgent)(proxyOptions, parsedUrl, destination, mockAgent, connectionConfig);\n}\n//# sourceMappingURL=node.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9kaXN0L2xpYi9odHRwL25vZGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QscUJBQXFCLEdBQUcsdUJBQXVCLEdBQUcsc0JBQXNCO0FBQ3hFLHFCQUFxQjtBQUNyQix1QkFBdUIsbUJBQU8sQ0FBQyx3RkFBZ0I7QUFDL0MscUJBQXFCLG1CQUFPLENBQUMsd0ZBQWdCO0FBQzdDLGtEQUFpRCxFQUFFLHFDQUFxQyx5Q0FBeUMsRUFBQztBQUNsSSxtREFBa0QsRUFBRSxxQ0FBcUMsMENBQTBDLEVBQUM7QUFDcEksaURBQWdELEVBQUUscUNBQXFDLHdDQUF3QyxFQUFDO0FBQ2hJO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxvRUFBb0U7QUFDaEY7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvd2FuZ2hhb3RhaS9EZXNrdG9wL2VsdmVubGFiL0hUVi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9kaXN0L2xpYi9odHRwL25vZGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmlzQnlwYXNzUHJveHkgPSBleHBvcnRzLmh0dHBzQWdlbnRDYWNoZSA9IGV4cG9ydHMuTm9kZUh0dHBDbGllbnQgPSB2b2lkIDA7XG5leHBvcnRzLmdldFByb3h5QWdlbnQgPSBnZXRQcm94eUFnZW50O1xuY29uc3Qgbm9kZV91bnR5cGVkXzEgPSByZXF1aXJlKFwiLi9ub2RlX3VudHlwZWRcIik7XG52YXIgbm9kZV91bnR5cGVkXzIgPSByZXF1aXJlKFwiLi9ub2RlX3VudHlwZWRcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJOb2RlSHR0cENsaWVudFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbm9kZV91bnR5cGVkXzIuTm9kZUh0dHBDbGllbnQ7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJodHRwc0FnZW50Q2FjaGVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5vZGVfdW50eXBlZF8yLmh0dHBzQWdlbnRDYWNoZTsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImlzQnlwYXNzUHJveHlcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5vZGVfdW50eXBlZF8yLmlzQnlwYXNzUHJveHk7IH0gfSk7XG4vKipcbiAqIFdvcmsgSW4gUHJvZ3Jlc3MgVHlwZVNjcmlwdCBtaWdyYXRpb24gZm9yIGh0dHAvbm9kZV91bnR5cGVkLmpzXG4gKi9cbmZ1bmN0aW9uIGdldFByb3h5QWdlbnQoY29uZmlnKSB7XG4gICAgY29uc3QgeyBwcm94eU9wdGlvbnMsIGNvbm5lY3Rpb25Db25maWcsIHBhcnNlZFVybCwgZGVzdGluYXRpb24sIG1vY2tBZ2VudCB9ID0gY29uZmlnO1xuICAgIHJldHVybiAoMCwgbm9kZV91bnR5cGVkXzEuZ2V0UHJveHlBZ2VudCkocHJveHlPcHRpb25zLCBwYXJzZWRVcmwsIGRlc3RpbmF0aW9uLCBtb2NrQWdlbnQsIGNvbm5lY3Rpb25Db25maWcpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bm9kZS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/dist/lib/http/node.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/dist/lib/http/node_untyped.js":
/*!******************************************************************!*\
  !*** ./node_modules/snowflake-sdk/dist/lib/http/node_untyped.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst Util = __webpack_require__(/*! ../util */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/util.js\");\nconst ProxyUtil = __webpack_require__(/*! ../proxy_util */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/proxy_util.js\");\nconst Base = __webpack_require__(/*! ./base */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/http/base.js\");\nconst HttpsOcspAgent = __webpack_require__(/*! ../agent/https_ocsp_agent */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/agent/https_ocsp_agent.js\");\nconst HttpsCrlAgent = (__webpack_require__(/*! ../agent/https_crl_agent */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/agent/https_crl_agent.js\")[\"default\"]);\nconst HttpsProxyAgent = __webpack_require__(/*! ../agent/https_proxy_agent */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/agent/https_proxy_agent.js\");\nconst HttpAgent = (__webpack_require__(/*! http */ \"http\").Agent);\nconst GlobalConfig = __webpack_require__(/*! ../../lib/global_config */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/global_config.js\");\nconst Logger = __webpack_require__(/*! ../logger */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/logger.js\");\nconst RequestUtil = __webpack_require__(/*! ../http/request_util */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/http/request_util.js\");\nconst { isCrlValidationEnabled } = __webpack_require__(/*! ../agent/crl_validator */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/agent/crl_validator.js\");\n/**\n * Returns the delay time calculated by exponential backoff with\n * decorrelated jitter. For more details, check out:\n * http://www.awsarchitectureblog.com/2015/03/backoff.html\n * @return  {Number} number of milliseconds to wait before retrying again the request.\n */\nNodeHttpClient.prototype.constructExponentialBackoffStrategy = function () {\n    Logger.getInstance().trace('Calculating exponential backoff strategy');\n    const previousSleepTime = this._connectionConfig.getRetrySfStartingSleepTime();\n    // maximum seconds\n    const cap = this._connectionConfig.getRetrySfMaxSleepTime();\n    // minimum seconds\n    const base = 1;\n    const nextSleepTime = Util.nextSleepTime(base, cap, previousSleepTime);\n    const nextSleepTimeInMilliseconds = nextSleepTime * 1000;\n    Logger.getInstance().trace('Calculated exponential backoff strategy sleep time: %d', nextSleepTimeInMilliseconds);\n    return nextSleepTimeInMilliseconds;\n};\n/**\n * Creates a client that can be used to make requests in Node.js.\n *\n * @param {ConnectionConfig} connectionConfig\n * @constructor\n */\nfunction NodeHttpClient(connectionConfig) {\n    Logger.getInstance().trace('Initializing NodeHttpClient with Connection Config[%s]', connectionConfig.describeIdentityAttributes());\n    Base.apply(this, [connectionConfig]);\n}\nUtil.inherits(NodeHttpClient, Base);\nconst httpsAgentCache = new Map();\nfunction getFromCacheOrCreate(AgentClass, options, agentId) {\n    Logger.getInstance().trace('Agent[id: %s] - trying to retrieve from cache or create.', agentId);\n    let agent = {};\n    function createAgent(AgentClass, agentOptions, agentId) {\n        Logger.getInstance().trace('Agent[id: %s] - creating a new agent instance.', agentId);\n        const agent = new AgentClass(agentOptions);\n        httpsAgentCache.set(agentId, agent);\n        Logger.getInstance().trace('Agent[id: %s] - new instance stored in cache.', agentId);\n        // detect and log PROXY envvar + agent proxy settings\n        const compareAndLogEnvAndAgentProxies = ProxyUtil.getCompareAndLogEnvAndAgentProxies(agentOptions);\n        Logger.getInstance().debug('Agent[id: %s] - proxy settings used in requests: %s', agentId, compareAndLogEnvAndAgentProxies.messages);\n        // if there's anything to warn on (e.g. both envvar + agent proxy used, and they are different)\n        // log warnings on them\n        if (compareAndLogEnvAndAgentProxies.warnings) {\n            Logger.getInstance().warn('Agent[id: %s] - %s', agentId, compareAndLogEnvAndAgentProxies.warnings);\n        }\n        return agent;\n    }\n    if (httpsAgentCache.has(agentId)) {\n        Logger.getInstance().trace('Agent[id: %s] - retrieving an agent instance from cache.', agentId);\n        agent = httpsAgentCache.get(agentId);\n    }\n    else {\n        agent = createAgent(AgentClass, options, agentId);\n    }\n    return agent;\n}\nfunction enrichAgentOptionsWithProxyConfig(agentOptions, proxy) {\n    agentOptions.host = proxy.host;\n    agentOptions.port = proxy.port;\n    agentOptions.protocol = proxy.protocol;\n    agentOptions.useForOCSP = proxy.useForOCSP;\n    agentOptions.noProxy = proxy.noProxy;\n    if (proxy.user && proxy.password) {\n        agentOptions.user = proxy.user;\n        agentOptions.password = proxy.password;\n    }\n}\nfunction isBypassProxy(proxy, destination, agentId) {\n    const matches = ProxyUtil.isByPassProxy(proxy, destination);\n    if (matches) {\n        Logger.getInstance().debug('Agent[id: %s] - bypassing proxy allowed for destination: %s', agentId, destination);\n        return true;\n    }\n    return false;\n}\n/**\n * @inheritDoc\n */\nNodeHttpClient.prototype.getAgent = function (parsedUrl, proxy, mock) {\n    Logger.getInstance().trace('Agent[url: %s] - getting an agent instance.', RequestUtil.describeURL(parsedUrl.href));\n    if (!proxy && GlobalConfig.isEnvProxyActive()) {\n        const isHttps = parsedUrl.protocol === 'https:';\n        proxy = ProxyUtil.getProxyFromEnv(isHttps);\n        if (proxy) {\n            Logger.getInstance().debug('Agent[url: %s] - proxy info loaded from the environment variable. Proxy host: %s', RequestUtil.describeURL(parsedUrl.href), proxy.host);\n        }\n    }\n    return getProxyAgent(proxy, parsedUrl, parsedUrl.href, mock, this._connectionConfig);\n};\nfunction getProxyAgent(proxyOptions, parsedUrl, destination, mock, connectionConfig) {\n    Logger.getInstance().trace('Agent[url: %s] - getting a proxy agent instance.', RequestUtil.describeURL(parsedUrl.href));\n    const agentOptions = {\n        protocol: parsedUrl.protocol,\n        hostname: parsedUrl.hostname,\n        keepAlive: GlobalConfig.getKeepAlive(),\n    };\n    if (mock) {\n        const mockAgent = mock.agentClass(agentOptions);\n        if (mockAgent.protocol === parsedUrl.protocol) {\n            Logger.getInstance().debug('Agent[url: %s] - the mock agent will be used.', RequestUtil.describeURL(parsedUrl.href));\n            return mockAgent;\n        }\n    }\n    const destHost = ProxyUtil.getHostFromURL(destination);\n    const agentId = createAgentId({\n        protocol: agentOptions.protocol,\n        hostname: agentOptions.hostname,\n        destination: destHost,\n        keepAlive: agentOptions.keepAlive,\n        connectionConfig,\n    });\n    Logger.getInstance().debug('Agent[id: %s] - the destination host is: %s.', agentId, destHost);\n    const bypassProxy = isBypassProxy(proxyOptions, destination, agentId);\n    let agent;\n    const isHttps = agentOptions.protocol === 'https:';\n    if (isHttps) {\n        agentOptions.crlValidatorConfig = connectionConfig.crlValidatorConfig;\n        if (proxyOptions && !bypassProxy) {\n            Logger.getInstance().trace('Agent[id: %s] - using HTTPS agent enriched with proxy options.', agentId);\n            enrichAgentOptionsWithProxyConfig(agentOptions, proxyOptions);\n            agent = getFromCacheOrCreate(HttpsProxyAgent, agentOptions, agentId);\n        }\n        else {\n            const AgentClass = isCrlValidationEnabled(connectionConfig.crlValidatorConfig)\n                ? HttpsCrlAgent\n                : HttpsOcspAgent;\n            Logger.getInstance().trace(`Agent[id: %s] - using ${AgentClass.name} agent without proxy.`, agentId);\n            agent = getFromCacheOrCreate(AgentClass, agentOptions, agentId);\n        }\n    }\n    else if (proxyOptions && !bypassProxy) {\n        Logger.getInstance().trace('Agent[id: %s] - using HTTP agent enriched with proxy options.', agentId);\n        enrichAgentOptionsWithProxyConfig(agentOptions, proxyOptions);\n        agent = getFromCacheOrCreate(HttpAgent, agentOptions, agentId);\n    }\n    else {\n        Logger.getInstance().trace('Agent[id: %s] - using HTTP agent without proxy.', agentId);\n        agent = getFromCacheOrCreate(HttpAgent, agentOptions, agentId);\n    }\n    return agent;\n}\nfunction createAgentId({ protocol, hostname, destination, keepAlive, connectionConfig }) {\n    return [\n        protocol,\n        hostname,\n        destination,\n        keepAlive ? 'keepAlive' : 'noKeepAlive',\n        `crl:${connectionConfig.crlValidatorConfig.checkMode}`,\n    ].join('-');\n}\nmodule.exports = { NodeHttpClient, getProxyAgent, isBypassProxy, httpsAgentCache };\n//# sourceMappingURL=node_untyped.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/dist/lib/http/node_untyped.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/dist/lib/http/request_util.js":
/*!******************************************************************!*\
  !*** ./node_modules/snowflake-sdk/dist/lib/http/request_util.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nconst LoggingUtil = __webpack_require__(/*! ../logger/logging_util */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/logger/logging_util.js\");\nconst sfParams = __webpack_require__(/*! ../constants/sf_params */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/constants/sf_params.js\");\n// Initial whitelist for attributes - they will be described with values\nconst DEFAULT_ATTRIBUTES_DESCRIBING_REQUEST_WITH_VALUES = [\n    'baseUrl',\n    'path',\n    'method',\n    sfParams.paramsNames.SF_REQUEST_ID,\n    sfParams.paramsNames.SF_REQUEST_GUID,\n    sfParams.paramsNames.SF_WAREHOUSE_NAME,\n    sfParams.paramsNames.SF_DB_NAME,\n    sfParams.paramsNames.SF_SCHEMA_NAME,\n];\n// Initial blacklist for attributes - described as present/not present only\nconst DEFAULT_ATTRIBUTES_DESCRIBING_REQUEST_WITHOUT_VALUES = [sfParams.paramsNames.SF_TOKEN];\n// Helper function to resolve attributes arrays given defaults and overrides.\nfunction resolveAttributeList(defaultAttrs, overrideAttrs) {\n    return overrideAttrs || defaultAttrs;\n}\n/**\n * Describes a request based on its options.\n * Should work with not-yet-parsed options as well (before calling prepareRequestOptions method).\n *\n * @param {Object} requestOptions - Object representing the request data with top-level keys.\n * @param {Object} [options] - Options for describing attributes.\n * @param {Array<string>} [options.overrideAttributesDescribedWithValues]\n * @param {Array<string>} [options.overrideAttributesDescribedWithoutValues]\n * @returns {string} A string representation of the request data.\n */\nfunction describeRequestFromOptions(requestOptions, { overrideAttributesDescribedWithValues, overrideAttributesDescribedWithoutValues } = {}) {\n    const describingAttributesWithValues = resolveAttributeList(DEFAULT_ATTRIBUTES_DESCRIBING_REQUEST_WITH_VALUES, overrideAttributesDescribedWithValues);\n    const describingAttributesWithoutValues = resolveAttributeList(DEFAULT_ATTRIBUTES_DESCRIBING_REQUEST_WITHOUT_VALUES, overrideAttributesDescribedWithoutValues);\n    const { method, url, params } = requestOptions || {};\n    return describeRequestData({ method, url, params }, describingAttributesWithValues, describingAttributesWithoutValues);\n}\n/**\n * Creates a string that represents request data from a response.\n * Helps to identify the request that was the source of the response.\n *\n * @param {Object} response - Axios response object.\n * @param {Object} [options] - Options for describing attributes.\n * @param {Array<string>} [options.overrideAttributesDescribedWithValues]\n * @param {Array<string>} [options.overrideAttributesDescribedWithoutValues]\n * @returns {string} A string representation of the request data.\n */\nfunction describeRequestFromResponse(response, { overrideAttributesDescribedWithValues, overrideAttributesDescribedWithoutValues } = {}) {\n    let method;\n    let url;\n    let params;\n    const responseConfig = response?.config;\n    const describingAttributesWithValues = resolveAttributeList(DEFAULT_ATTRIBUTES_DESCRIBING_REQUEST_WITH_VALUES, overrideAttributesDescribedWithValues);\n    const describingAttributesWithoutValues = resolveAttributeList(DEFAULT_ATTRIBUTES_DESCRIBING_REQUEST_WITHOUT_VALUES, overrideAttributesDescribedWithoutValues);\n    if (responseConfig) {\n        method = responseConfig.method;\n        url = responseConfig.url;\n        params = responseConfig.params;\n    }\n    return describeRequestData({ method, url, params }, describingAttributesWithValues, describingAttributesWithoutValues);\n}\n/**\n * Constructs a string representation of request data.\n *\n * @param {Object} requestData - Object containing the method, url, and parameters.\n * @param {string} requestData.method - HTTP method.\n * @param {string} requestData.url - Request URL.\n * @param {Object} [requestData.params] - Additional query parameters.\n * @param {Array<string>} attributesWithValues - Attributes to describe with values.\n * @param {Array<string>} attributesWithoutValues - Attributes to describe without values.\n * @returns {string} A string describing the request data.\n */\nfunction describeRequestData({ method, url, params } = {}, attributesWithValues, attributesWithoutValues) {\n    const requestObject = {\n        // Ensure consistent casing for methods to match request-response pairs in logs.\n        method: method?.toUpperCase(),\n        ...constructURLData(url, params),\n    };\n    return LoggingUtil.describeAttributes(requestObject, attributesWithValues, attributesWithoutValues);\n}\n/**\n * Constructs an object representing URL data including the base URL, path, and query parameters.\n *\n * @param {string} url - The full URL.\n * @param {Object} [params] - Additional query parameters.\n * @returns {Object} Contains baseUrl, path, and merged query parameters.\n */\nfunction constructURLData(url, params = {}) {\n    if (!url) {\n        return { baseUrl: undefined, path: undefined, queryParams: {} };\n    }\n    const urlObj = new URL(url);\n    const queryParams = { ...params };\n    urlObj.searchParams.forEach((value, key) => {\n        queryParams[key] = value;\n    });\n    const baseUrl = `${urlObj.protocol}//${urlObj.hostname}${urlObj.port ? `:${urlObj.port}` : ''}`;\n    return {\n        baseUrl: baseUrl,\n        path: urlObj.pathname,\n        ...queryParams,\n    };\n}\n/**\n * @param {string} url - The URL to describe.\n * @param {Object} [options] - Options for describing attributes.\n * @param {Array<string>} [options.overrideAttributesDescribedWithValues]\n * @param {Array<string>} [options.overrideAttributesDescribedWithoutValues]\n * @returns {string} A string describing the URL.\n */\nfunction describeURL(url, { overrideAttributesDescribedWithValues, overrideAttributesDescribedWithoutValues } = {}) {\n    const describingAttributesWithValues = resolveAttributeList(DEFAULT_ATTRIBUTES_DESCRIBING_REQUEST_WITH_VALUES, overrideAttributesDescribedWithValues);\n    const describingAttributesWithoutValues = resolveAttributeList(DEFAULT_ATTRIBUTES_DESCRIBING_REQUEST_WITHOUT_VALUES, overrideAttributesDescribedWithoutValues);\n    const urlData = constructURLData(url);\n    return LoggingUtil.describeAttributes(urlData, describingAttributesWithValues, describingAttributesWithoutValues);\n}\nexports.DEFAULT_ATTRIBUTES_DESCRIBING_REQUEST_WITH_VALUES =\n    DEFAULT_ATTRIBUTES_DESCRIBING_REQUEST_WITH_VALUES;\nexports.DEFAULT_ATTRIBUTES_DESCRIBING_REQUEST_WITHOUT_VALUES =\n    DEFAULT_ATTRIBUTES_DESCRIBING_REQUEST_WITHOUT_VALUES;\nexports.describeRequestFromOptions = describeRequestFromOptions;\nexports.describeRequestFromResponse = describeRequestFromResponse;\nexports.describeURL = describeURL;\n//# sourceMappingURL=request_util.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/dist/lib/http/request_util.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/dist/lib/logger.js":
/*!*******************************************************!*\
  !*** ./node_modules/snowflake-sdk/dist/lib/logger.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.setInstance = setInstance;\nexports.getInstance = getInstance;\nconst browser_1 = __importDefault(__webpack_require__(/*! ./logger/browser */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/logger/browser.js\"));\nlet instance;\n/**\n * Sets the logger instance. For internal use only.\n */\nfunction setInstance(newInstance) {\n    instance = newInstance;\n}\n/**\n * Returns the current logger instance.\n * @deprecated\n *\n * In TypeScript, use default import:\n * ```\n *  import Logger from './Logger';\n *  Logger().info(...)\n * ```\n *\n * In JavaScript, use:\n * ```\n *  const Logger = require('./Logger').default;\n *  Logger().info(...)\n * ```\n */\nfunction getInstance() {\n    // use the browser implementation of logger as the default implementation;\n    // we do this so that unit tests don't fail when the modules they're testing\n    // log messages\n    if (!instance) {\n        instance = new browser_1.default();\n    }\n    return instance;\n}\nexports[\"default\"] = () => getInstance();\n//# sourceMappingURL=logger.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9kaXN0L2xpYi9sb2dnZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLDZDQUE2QztBQUM3QztBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxtQkFBbUI7QUFDbkIsbUJBQW1CO0FBQ25CLGtDQUFrQyxtQkFBTyxDQUFDLHVGQUFrQjtBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWU7QUFDZiIsInNvdXJjZXMiOlsiL1VzZXJzL3dhbmdoYW90YWkvRGVza3RvcC9lbHZlbmxhYi9IVFYvbm9kZV9tb2R1bGVzL3Nub3dmbGFrZS1zZGsvZGlzdC9saWIvbG9nZ2VyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5zZXRJbnN0YW5jZSA9IHNldEluc3RhbmNlO1xuZXhwb3J0cy5nZXRJbnN0YW5jZSA9IGdldEluc3RhbmNlO1xuY29uc3QgYnJvd3Nlcl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2xvZ2dlci9icm93c2VyXCIpKTtcbmxldCBpbnN0YW5jZTtcbi8qKlxuICogU2V0cyB0aGUgbG9nZ2VyIGluc3RhbmNlLiBGb3IgaW50ZXJuYWwgdXNlIG9ubHkuXG4gKi9cbmZ1bmN0aW9uIHNldEluc3RhbmNlKG5ld0luc3RhbmNlKSB7XG4gICAgaW5zdGFuY2UgPSBuZXdJbnN0YW5jZTtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgY3VycmVudCBsb2dnZXIgaW5zdGFuY2UuXG4gKiBAZGVwcmVjYXRlZFxuICpcbiAqIEluIFR5cGVTY3JpcHQsIHVzZSBkZWZhdWx0IGltcG9ydDpcbiAqIGBgYFxuICogIGltcG9ydCBMb2dnZXIgZnJvbSAnLi9Mb2dnZXInO1xuICogIExvZ2dlcigpLmluZm8oLi4uKVxuICogYGBgXG4gKlxuICogSW4gSmF2YVNjcmlwdCwgdXNlOlxuICogYGBgXG4gKiAgY29uc3QgTG9nZ2VyID0gcmVxdWlyZSgnLi9Mb2dnZXInKS5kZWZhdWx0O1xuICogIExvZ2dlcigpLmluZm8oLi4uKVxuICogYGBgXG4gKi9cbmZ1bmN0aW9uIGdldEluc3RhbmNlKCkge1xuICAgIC8vIHVzZSB0aGUgYnJvd3NlciBpbXBsZW1lbnRhdGlvbiBvZiBsb2dnZXIgYXMgdGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb247XG4gICAgLy8gd2UgZG8gdGhpcyBzbyB0aGF0IHVuaXQgdGVzdHMgZG9uJ3QgZmFpbCB3aGVuIHRoZSBtb2R1bGVzIHRoZXkncmUgdGVzdGluZ1xuICAgIC8vIGxvZyBtZXNzYWdlc1xuICAgIGlmICghaW5zdGFuY2UpIHtcbiAgICAgICAgaW5zdGFuY2UgPSBuZXcgYnJvd3Nlcl8xLmRlZmF1bHQoKTtcbiAgICB9XG4gICAgcmV0dXJuIGluc3RhbmNlO1xufVxuZXhwb3J0cy5kZWZhdWx0ID0gKCkgPT4gZ2V0SW5zdGFuY2UoKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxvZ2dlci5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/dist/lib/logger.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/dist/lib/logger/browser.js":
/*!***************************************************************!*\
  !*** ./node_modules/snowflake-sdk/dist/lib/logger/browser.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst Util = __webpack_require__(/*! ../util */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/util.js\");\nconst Core = __webpack_require__(/*! ./core */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/logger/core.js\");\n/**\n * Creates a new Logger instance for when we're running in the browser.\n *\n * @param {Object} [options]\n *\n * @constructor\n */\nfunction Logger(options) {\n    /**\n     * The array to which all log messages will be added.\n     *\n     * @type {String[]}\n     */\n    const buffer = [];\n    /**\n     * Logs a message at a given level.\n     *\n     * @param {String} levelTag the tag associated with the level at which to log\n     *   the message.\n     * @param {String} message the message to log.\n     * @param {Number} bufferMaxLength the maximum size to which the message\n     *   buffer can grow.\n     */\n    const logMessage = function (levelTag, message, bufferMaxLength) {\n        // add the log level tag (e.g. info, warn, etc.) to the front of the message\n        message = Util.format('%s: %s', levelTag, message);\n        // if the buffer is full, evict old messages\n        while (buffer.length >= bufferMaxLength) {\n            buffer.shift();\n        }\n        // add the new message to the buffer\n        buffer.push(message);\n    };\n    // create an inner implementation to which all our methods will be forwarded\n    const common = Core.createLogger(options, logMessage);\n    /**\n     * Configures this logger.\n     *\n     * @param {Object} options\n     */\n    this.configure = function (options) {\n        common.configure(options);\n    };\n    /**\n     * Returns the current log level.\n     *\n     * @returns {Number}\n     */\n    this.getLevel = function () {\n        return common.getLevelNumber();\n    };\n    /**\n     * Logs a given message at the error level.\n     *\n     * @param {String} message\n     * @param params\n     */\n    this.error = function (message, ...params) {\n        common.error.apply(common, [message, ...params]);\n    };\n    /**\n     * Logs a given message at the warning level.\n     *\n     * @param {String} message\n     * @param params\n     */\n    this.warn = function (message, ...params) {\n        common.warn.apply(common, [message, ...params]);\n    };\n    /**\n     * Logs a given message at the info level.\n     *\n     * @param {String} message\n     * @param params\n     */\n    this.info = function (message, ...params) {\n        common.info.apply(common, [message, ...params]);\n    };\n    /**\n     * Logs a given message at the debug level.\n     *\n     * @param {String} message\n     * @param params\n     */\n    this.debug = function (message, ...params) {\n        common.debug.apply(common, [message, ...params]);\n    };\n    /**\n     * Logs a given message at the trace level.\n     *\n     * @param {String} message\n     * @param params\n     */\n    this.trace = function (message, ...params) {\n        common.trace.apply(common, [message, ...params]);\n    };\n    /**\n     * Returns the log buffer.\n     *\n     * @returns {String[]}\n     */\n    this.getLogBuffer = function () {\n        // return a copy of the buffer array; calling slice() shallow-copies the\n        // original array, but that's sufficient in this case because the array\n        // contains strings\n        return buffer.slice();\n    };\n}\nmodule.exports = Logger;\n//# sourceMappingURL=browser.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9kaXN0L2xpYi9sb2dnZXIvYnJvd3Nlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLGFBQWEsbUJBQU8sQ0FBQyxvRUFBUztBQUM5QixhQUFhLG1CQUFPLENBQUMsMEVBQVE7QUFDN0I7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkI7QUFDQSxlQUFlLFFBQVE7QUFDdkIsZUFBZSxRQUFRO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsUUFBUTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsUUFBUTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQSw4Q0FBOEM7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy93YW5naGFvdGFpL0Rlc2t0b3AvZWx2ZW5sYWIvSFRWL25vZGVfbW9kdWxlcy9zbm93Zmxha2Utc2RrL2Rpc3QvbGliL2xvZ2dlci9icm93c2VyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuY29uc3QgVXRpbCA9IHJlcXVpcmUoJy4uL3V0aWwnKTtcbmNvbnN0IENvcmUgPSByZXF1aXJlKCcuL2NvcmUnKTtcbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBMb2dnZXIgaW5zdGFuY2UgZm9yIHdoZW4gd2UncmUgcnVubmluZyBpbiB0aGUgYnJvd3Nlci5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIExvZ2dlcihvcHRpb25zKSB7XG4gICAgLyoqXG4gICAgICogVGhlIGFycmF5IHRvIHdoaWNoIGFsbCBsb2cgbWVzc2FnZXMgd2lsbCBiZSBhZGRlZC5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtTdHJpbmdbXX1cbiAgICAgKi9cbiAgICBjb25zdCBidWZmZXIgPSBbXTtcbiAgICAvKipcbiAgICAgKiBMb2dzIGEgbWVzc2FnZSBhdCBhIGdpdmVuIGxldmVsLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGxldmVsVGFnIHRoZSB0YWcgYXNzb2NpYXRlZCB3aXRoIHRoZSBsZXZlbCBhdCB3aGljaCB0byBsb2dcbiAgICAgKiAgIHRoZSBtZXNzYWdlLlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlIHRoZSBtZXNzYWdlIHRvIGxvZy5cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gYnVmZmVyTWF4TGVuZ3RoIHRoZSBtYXhpbXVtIHNpemUgdG8gd2hpY2ggdGhlIG1lc3NhZ2VcbiAgICAgKiAgIGJ1ZmZlciBjYW4gZ3Jvdy5cbiAgICAgKi9cbiAgICBjb25zdCBsb2dNZXNzYWdlID0gZnVuY3Rpb24gKGxldmVsVGFnLCBtZXNzYWdlLCBidWZmZXJNYXhMZW5ndGgpIHtcbiAgICAgICAgLy8gYWRkIHRoZSBsb2cgbGV2ZWwgdGFnIChlLmcuIGluZm8sIHdhcm4sIGV0Yy4pIHRvIHRoZSBmcm9udCBvZiB0aGUgbWVzc2FnZVxuICAgICAgICBtZXNzYWdlID0gVXRpbC5mb3JtYXQoJyVzOiAlcycsIGxldmVsVGFnLCBtZXNzYWdlKTtcbiAgICAgICAgLy8gaWYgdGhlIGJ1ZmZlciBpcyBmdWxsLCBldmljdCBvbGQgbWVzc2FnZXNcbiAgICAgICAgd2hpbGUgKGJ1ZmZlci5sZW5ndGggPj0gYnVmZmVyTWF4TGVuZ3RoKSB7XG4gICAgICAgICAgICBidWZmZXIuc2hpZnQoKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBhZGQgdGhlIG5ldyBtZXNzYWdlIHRvIHRoZSBidWZmZXJcbiAgICAgICAgYnVmZmVyLnB1c2gobWVzc2FnZSk7XG4gICAgfTtcbiAgICAvLyBjcmVhdGUgYW4gaW5uZXIgaW1wbGVtZW50YXRpb24gdG8gd2hpY2ggYWxsIG91ciBtZXRob2RzIHdpbGwgYmUgZm9yd2FyZGVkXG4gICAgY29uc3QgY29tbW9uID0gQ29yZS5jcmVhdGVMb2dnZXIob3B0aW9ucywgbG9nTWVzc2FnZSk7XG4gICAgLyoqXG4gICAgICogQ29uZmlndXJlcyB0aGlzIGxvZ2dlci5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gICAgICovXG4gICAgdGhpcy5jb25maWd1cmUgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICBjb21tb24uY29uZmlndXJlKG9wdGlvbnMpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgY3VycmVudCBsb2cgbGV2ZWwuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMuZ2V0TGV2ZWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBjb21tb24uZ2V0TGV2ZWxOdW1iZXIoKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIExvZ3MgYSBnaXZlbiBtZXNzYWdlIGF0IHRoZSBlcnJvciBsZXZlbC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAgICogQHBhcmFtIHBhcmFtc1xuICAgICAqL1xuICAgIHRoaXMuZXJyb3IgPSBmdW5jdGlvbiAobWVzc2FnZSwgLi4ucGFyYW1zKSB7XG4gICAgICAgIGNvbW1vbi5lcnJvci5hcHBseShjb21tb24sIFttZXNzYWdlLCAuLi5wYXJhbXNdKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIExvZ3MgYSBnaXZlbiBtZXNzYWdlIGF0IHRoZSB3YXJuaW5nIGxldmVsLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICAgKiBAcGFyYW0gcGFyYW1zXG4gICAgICovXG4gICAgdGhpcy53YXJuID0gZnVuY3Rpb24gKG1lc3NhZ2UsIC4uLnBhcmFtcykge1xuICAgICAgICBjb21tb24ud2Fybi5hcHBseShjb21tb24sIFttZXNzYWdlLCAuLi5wYXJhbXNdKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIExvZ3MgYSBnaXZlbiBtZXNzYWdlIGF0IHRoZSBpbmZvIGxldmVsLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2VcbiAgICAgKiBAcGFyYW0gcGFyYW1zXG4gICAgICovXG4gICAgdGhpcy5pbmZvID0gZnVuY3Rpb24gKG1lc3NhZ2UsIC4uLnBhcmFtcykge1xuICAgICAgICBjb21tb24uaW5mby5hcHBseShjb21tb24sIFttZXNzYWdlLCAuLi5wYXJhbXNdKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIExvZ3MgYSBnaXZlbiBtZXNzYWdlIGF0IHRoZSBkZWJ1ZyBsZXZlbC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAgICogQHBhcmFtIHBhcmFtc1xuICAgICAqL1xuICAgIHRoaXMuZGVidWcgPSBmdW5jdGlvbiAobWVzc2FnZSwgLi4ucGFyYW1zKSB7XG4gICAgICAgIGNvbW1vbi5kZWJ1Zy5hcHBseShjb21tb24sIFttZXNzYWdlLCAuLi5wYXJhbXNdKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIExvZ3MgYSBnaXZlbiBtZXNzYWdlIGF0IHRoZSB0cmFjZSBsZXZlbC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gICAgICogQHBhcmFtIHBhcmFtc1xuICAgICAqL1xuICAgIHRoaXMudHJhY2UgPSBmdW5jdGlvbiAobWVzc2FnZSwgLi4ucGFyYW1zKSB7XG4gICAgICAgIGNvbW1vbi50cmFjZS5hcHBseShjb21tb24sIFttZXNzYWdlLCAuLi5wYXJhbXNdKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGxvZyBidWZmZXIuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nW119XG4gICAgICovXG4gICAgdGhpcy5nZXRMb2dCdWZmZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIHJldHVybiBhIGNvcHkgb2YgdGhlIGJ1ZmZlciBhcnJheTsgY2FsbGluZyBzbGljZSgpIHNoYWxsb3ctY29waWVzIHRoZVxuICAgICAgICAvLyBvcmlnaW5hbCBhcnJheSwgYnV0IHRoYXQncyBzdWZmaWNpZW50IGluIHRoaXMgY2FzZSBiZWNhdXNlIHRoZSBhcnJheVxuICAgICAgICAvLyBjb250YWlucyBzdHJpbmdzXG4gICAgICAgIHJldHVybiBidWZmZXIuc2xpY2UoKTtcbiAgICB9O1xufVxubW9kdWxlLmV4cG9ydHMgPSBMb2dnZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1icm93c2VyLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/dist/lib/logger/browser.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/dist/lib/logger/core.js":
/*!************************************************************!*\
  !*** ./node_modules/snowflake-sdk/dist/lib/logger/core.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nconst moment = __webpack_require__(/*! moment */ \"(rsc)/./node_modules/moment/moment.js\");\nconst Util = __webpack_require__(/*! ../util */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/util.js\");\nconst Errors = __webpack_require__(/*! ../errors */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/errors.js\");\nconst SecretDetector = new (__webpack_require__(/*! ../secret_detector.js */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/secret_detector.js\"))();\nconst LOG_LEVEL_OFF = {\n    tag: 'OFF',\n    level: -1,\n};\nconst LOG_LEVEL_ERROR = {\n    tag: 'ERROR',\n    level: 0,\n};\nconst LOG_LEVEL_WARN = {\n    tag: 'WARN',\n    level: 1,\n};\nconst LOG_LEVEL_INFO = {\n    tag: 'INFO',\n    level: 2,\n};\nconst LOG_LEVEL_DEBUG = {\n    tag: 'DEBUG',\n    level: 3,\n};\nconst LOG_LEVEL_TRACE = {\n    tag: 'TRACE',\n    level: 4,\n};\nconst LOG_LEVELS = [\n    LOG_LEVEL_OFF,\n    LOG_LEVEL_ERROR,\n    LOG_LEVEL_WARN,\n    LOG_LEVEL_INFO,\n    LOG_LEVEL_DEBUG,\n    LOG_LEVEL_TRACE,\n];\nconst LOG_LEVEL_TAGS = {\n    OFF: LOG_LEVEL_OFF.tag,\n    ERROR: LOG_LEVEL_ERROR.tag,\n    WARN: LOG_LEVEL_WARN.tag,\n    INFO: LOG_LEVEL_INFO.tag,\n    DEBUG: LOG_LEVEL_DEBUG.tag,\n    TRACE: LOG_LEVEL_TRACE.tag,\n};\nexports.LOG_LEVEL_TAGS = LOG_LEVEL_TAGS;\n// create two maps, one in which the key is the log level and the value is the\n// corresponding log level object, and another in which the key is the log tag\n// and the value is the corresponding log level\nconst MAP_LOG_LEVEL_TO_OBJECT = {};\nconst MAP_LOG_TAG_TO_LEVEL = {};\nfor (let index = 0, length = LOG_LEVELS.length; index < length; index++) {\n    const logLevelObject = LOG_LEVELS[index];\n    MAP_LOG_LEVEL_TO_OBJECT[logLevelObject.level] = logLevelObject;\n    MAP_LOG_TAG_TO_LEVEL[logLevelObject.tag] = logLevelObject.level;\n}\nconst DEFAULT_BUFFER_MAX_LENGTH = 500;\nconst DEFAULT_MESSAGE_MAX_LENGTH = 500;\nconst DEFAULT_LEVEL = LOG_LEVEL_INFO;\n/**\n * Creates a new Logger instance.\n *\n * @param options {Object}\n * @param logMessage {Function}\n * @param reconfigureOperation {Function} Action to perform to change log destination file\n *\n * @returns {Object}\n */\nexports.createLogger = function (options, logMessage, reconfigureOperation) {\n    // a log function must be specified\n    Errors.assertInternal(Util.isFunction(logMessage));\n    /**\n     * Whether to include the current timestamp in the log message.\n     */\n    let includeTimestamp;\n    /**\n     * The maximum size (in terms of number of messages) to which the log buffer\n     * can grow.\n     *\n     * @type {Number}\n     */\n    let bufferMaxLength;\n    /**\n     * The maximum message length. Longer messages will be truncated.\n     *\n     * @type {Number}\n     */\n    let messageMaxLength;\n    /**\n     * The current log level. Any message logged at a lower level won't be added\n     * to the log buffer.\n     *\n     * @type {Object}\n     */\n    let currlevelObject;\n    // create a new logger instance\n    const logger = {\n        /**\n         * Configures this logger.\n         *\n         * @param {Object} options\n         */\n        configure: function (options) {\n            let localIncludeTimestamp;\n            let localBufferMaxLength;\n            let localMessageMaxLength;\n            let localLevel;\n            let localFilePath;\n            let localAdditionalLogToConsole;\n            // if an options argument is specified\n            if (Util.exists(options)) {\n                // make sure it's an object\n                Errors.assertInternal(Util.isObject(options));\n                localIncludeTimestamp = options.includeTimestamp;\n                localBufferMaxLength = options.bufferMaxLength;\n                localMessageMaxLength = options.messageMaxLength;\n                localLevel = options.level;\n                localFilePath = options.filePath;\n                localAdditionalLogToConsole = options.additionalLogToConsole;\n            }\n            // if an includeTimestamp options is specified, convert it to a boolean\n            if (Util.exists(localIncludeTimestamp)) {\n                includeTimestamp = !!localIncludeTimestamp;\n            }\n            else if (!Util.exists(includeTimestamp)) {\n                // default to true\n                includeTimestamp = true;\n            }\n            // if a bufferMaxLength option is specified, make sure\n            // it's a positive integer before updating the logger option\n            if (Util.exists(localBufferMaxLength)) {\n                Errors.assertInternal(Util.number.isPositiveInteger(localBufferMaxLength));\n                bufferMaxLength = localBufferMaxLength;\n            }\n            else if (!Util.exists(bufferMaxLength)) {\n                // initialize logger option if configure() hasn't been called before\n                bufferMaxLength = DEFAULT_BUFFER_MAX_LENGTH;\n            }\n            // if a messageMaxLength option is specified, make sure\n            // it's a positive integer before updating the logger option\n            if (Util.exists(localMessageMaxLength)) {\n                Errors.assertInternal(Util.number.isPositiveInteger(localMessageMaxLength));\n                messageMaxLength = localMessageMaxLength;\n            }\n            else if (!Util.exists(messageMaxLength)) {\n                // initialize logger option if configure() hasn't been called before\n                messageMaxLength = DEFAULT_MESSAGE_MAX_LENGTH;\n            }\n            // if a level option is specified, make sure\n            // it's valid before updating the logger option\n            if (Util.exists(localLevel)) {\n                Errors.assertInternal(Object.prototype.hasOwnProperty.call(MAP_LOG_LEVEL_TO_OBJECT, localLevel));\n                currlevelObject = MAP_LOG_LEVEL_TO_OBJECT[localLevel];\n            }\n            else if (!Util.exists(currlevelObject)) {\n                // initialize logger option if configure() hasn't been called before\n                currlevelObject = DEFAULT_LEVEL;\n            }\n            if (Util.isFunction(reconfigureOperation)) {\n                reconfigureOperation(localFilePath, localAdditionalLogToConsole);\n            }\n        },\n        /**\n         * Logs a given message at the error level.\n         *\n         * @param {String} message\n         */\n        error: function (message) {\n            log(LOG_LEVEL_ERROR, message, getMessageArgs(arguments));\n        },\n        /**\n         * Logs a given message at the warn level.\n         *\n         * @param {String} message\n         */\n        warn: function (message) {\n            log(LOG_LEVEL_WARN, message, getMessageArgs(arguments));\n        },\n        /**\n         * Logs a given message at the info level.\n         *\n         * @param {String} message\n         */\n        info: function (message) {\n            log(LOG_LEVEL_INFO, message, getMessageArgs(arguments));\n        },\n        /**\n         * Logs a given message at the debug level.\n         *\n         * @param {String} message\n         */\n        debug: function (message) {\n            log(LOG_LEVEL_DEBUG, message, getMessageArgs(arguments));\n        },\n        /**\n         * Logs a given message at the trace level.\n         *\n         * @param {String} message\n         */\n        trace: function (message) {\n            log(LOG_LEVEL_TRACE, message, getMessageArgs(arguments));\n        },\n        /**\n         * Returns the log buffer.\n         *\n         * @returns {String[]}\n         */\n        getLogBuffer: function () {\n            return [];\n        },\n        /**\n         * Returns the level number associated with the current log level.\n         *\n         * @returns {Number}\n         */\n        getLevelNumber: function () {\n            return currlevelObject.level;\n        },\n        /**\n         * Returns the tag associated with the current log level.\n         *\n         * @returns {String}\n         */\n        getLevelTag: function () {\n            return currlevelObject.tag;\n        },\n        /**\n         * Returns a map in which the keys are the level tags and the values are the\n         * corresponding log levels.\n         *\n         * @returns {Object}\n         */\n        getLevelTagsMap: function () {\n            return MAP_LOG_TAG_TO_LEVEL;\n        },\n    };\n    // configure the logger\n    logger.configure(options);\n    /**\n     * Logs a message at a given level.\n     *\n     * @param {Object} targetLevelObject the level at which to log the message.\n     * @param {String} message the message template.\n     * @param {String[]} messageArgs any arguments to substitute into the message.\n     */\n    const log = function (targetLevelObject, message, messageArgs) {\n        // the message should not be logged if the target\n        // level is more verbose than the current level\n        if (targetLevelObject.level <= currlevelObject.level) {\n            // substitute the messageArgs into the message template\n            messageArgs.unshift(message);\n            message = Util.format.apply(Util, messageArgs);\n            // truncate the message if it's too long\n            if (message.length > messageMaxLength) {\n                message = message.slice(0, messageMaxLength);\n            }\n            // if needed, add the current time to the front of the message\n            if (includeTimestamp) {\n                message = Util.format('[%s]: %s', moment().format('h:mm:ss.SSS A'), message);\n            }\n            // mask secrets\n            message = SecretDetector.maskSecrets(message).maskedtxt;\n            // log the message\n            logMessage(targetLevelObject.tag, message, bufferMaxLength);\n        }\n    };\n    return logger;\n};\nexports.isValidLogTag = function (logTag) {\n    if (!Util.isString(logTag)) {\n        return false;\n    }\n    return Object.prototype.hasOwnProperty.call(MAP_LOG_TAG_TO_LEVEL, logTag.toUpperCase());\n};\nexports.logTagToLevel = function (logTag) {\n    Errors.assertInternal(Util.isString(logTag));\n    return MAP_LOG_TAG_TO_LEVEL[logTag.toUpperCase()];\n};\n/**\n * Helper method to extract the messageArgs from the arguments passed to\n * trace(), debug(), info(), warn() and error().\n *\n * @param {Object} args\n *\n * @returns {*}\n */\nfunction getMessageArgs(args) {\n    return Array.prototype.slice.call(args, 1);\n}\n//# sourceMappingURL=core.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/dist/lib/logger/core.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/dist/lib/logger/easy_logging_starter.js":
/*!****************************************************************************!*\
  !*** ./node_modules/snowflake-sdk/dist/lib/logger/easy_logging_starter.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nconst os = __webpack_require__(/*! os */ \"os\");\nconst path = __webpack_require__(/*! path */ \"path\");\nconst fsPromises = __webpack_require__(/*! fs/promises */ \"fs/promises\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst { logTagToLevel } = __webpack_require__(/*! ./core */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/logger/core.js\");\nconst { ConfigurationUtil, Levels } = __webpack_require__(/*! ../configuration/client_configuration */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/configuration/client_configuration.js\");\nconst Logger = __webpack_require__(/*! ../logger */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/logger.js\");\nconst { isFileModeCorrect } = __webpack_require__(/*! ../file_util */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/file_util.js\");\nconst { exists } = __webpack_require__(/*! ../util */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/util.js\");\nconst clientConfiguration = new ConfigurationUtil();\nconst getClientConfig = clientConfiguration.getClientConfig;\nlet initTrialParameters;\n/**\n * @param {string} configFilePathFromConnectionString\n * @returns {Promise<void>}\n */\nexports.init = async function (configFilePathFromConnectionString) {\n    try {\n        if (!allowedToInitialize(configFilePathFromConnectionString)) {\n            return;\n        }\n        Logger.getInstance().info('Trying to initialize Easy Logging');\n        const config = await getClientConfig(configFilePathFromConnectionString);\n        if (!config) {\n            Logger.getInstance().info('Easy Logging is disabled as no config has been found');\n            initTrialParameters = {\n                configFilePathFromConnectionString: configFilePathFromConnectionString,\n            };\n            return;\n        }\n        const logLevel = mapLogLevel(config);\n        const logPath = await getLogPath(config);\n        const logger = Logger.getInstance();\n        logger.info('Initializing Easy Logging with logPath=%s and logLevel=%s from file: %s', logPath, config.loggingConfig.logLevel, config.configPath);\n        logger.configure({\n            level: logLevel,\n            filePath: path.join(logPath, 'snowflake.log'),\n            additionalLogToConsole: false,\n        });\n        logger.easyLoggingConfigureCounter = (logger.easyLoggingConfigureCounter ?? 0) + 1;\n        initTrialParameters = {\n            configFilePathFromConnectionString: configFilePathFromConnectionString,\n        };\n    }\n    catch (err) {\n        const error = new EasyLoggingError('Failed to initialize easy logging', err);\n        Logger.getInstance().error(error);\n        throw error;\n    }\n};\nexports.reset = function () {\n    initTrialParameters = undefined;\n    Logger.getInstance().easyLoggingConfigureCounter = undefined;\n};\nfunction allowedToInitialize(configFilePathFromConnectionString) {\n    const everTriedToInitialize = !!initTrialParameters;\n    const triedToInitializeWithoutConfigFile = everTriedToInitialize && initTrialParameters.configFilePathFromConnectionString == null;\n    const isGivenConfigFilePath = !!configFilePathFromConnectionString;\n    const isAllowedToInitialize = !everTriedToInitialize || (triedToInitializeWithoutConfigFile && isGivenConfigFilePath);\n    if (!isAllowedToInitialize &&\n        initTrialParameters.configFilePathFromConnectionString !== configFilePathFromConnectionString) {\n        Logger.getInstance().warn(`Easy logging will not be configured for CLIENT_CONFIG_FILE=${configFilePathFromConnectionString} because it was previously configured for a different client config`);\n    }\n    return isAllowedToInitialize;\n}\nfunction mapLogLevel(config) {\n    const configLogLevel = getLogLevel(config);\n    const logLevelNumber = logTagToLevel(configLogLevel);\n    if (logLevelNumber === null || logLevelNumber === undefined) {\n        throw new Error('Failed to convert configuration log level into internal one');\n    }\n    return logLevelNumber;\n}\nfunction getLogLevel(config) {\n    const logLevel = config.loggingConfig.logLevel;\n    if (!logLevel) {\n        Logger.getInstance().warn('LogLevel in client config not found. Using default value: OFF');\n        return Levels.Off;\n    }\n    return logLevel;\n}\nasync function getLogPath(config) {\n    let logPath = config.loggingConfig.logPath;\n    if (!logPath) {\n        Logger.getInstance().warn('LogPath in client config not found. Using home directory as a default value');\n        logPath = os.homedir();\n        if (!exists(logPath)) {\n            throw new EasyLoggingError('Home directory does not exist');\n        }\n    }\n    const pathWithNodeJsSubdirectory = path.join(logPath, 'nodejs');\n    await fsPromises\n        .access(pathWithNodeJsSubdirectory, fs.constants.F_OK)\n        .then(async () => {\n        if (!(await isFileModeCorrect(pathWithNodeJsSubdirectory, 0o700, fsPromises))) {\n            Logger.getInstance().warn('Log directory: %s could potentially be accessed by others', pathWithNodeJsSubdirectory);\n        }\n    })\n        .catch(async () => {\n        try {\n            await fsPromises.mkdir(pathWithNodeJsSubdirectory, { recursive: true, mode: 0o700 });\n        }\n        catch (err) {\n            throw new EasyLoggingError(`Failed to create the directory for logs: ${pathWithNodeJsSubdirectory}`);\n        }\n    });\n    return pathWithNodeJsSubdirectory;\n}\nclass EasyLoggingError extends Error {\n    name = 'EasyLoggingError';\n    constructor(message, cause) {\n        super(message);\n        this.cause = cause;\n        Error.captureStackTrace(this, this.constructor);\n    }\n    toString() {\n        return this.message + ': ' + this.cause.toString();\n    }\n}\n//# sourceMappingURL=easy_logging_starter.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/dist/lib/logger/easy_logging_starter.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/dist/lib/logger/execution_timer.js":
/*!***********************************************************************!*\
  !*** ./node_modules/snowflake-sdk/dist/lib/logger/execution_timer.js ***!
  \***********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst { performance } = __webpack_require__(/*! perf_hooks */ \"perf_hooks\");\nconst Logger = __webpack_require__(/*! ../logger */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/logger.js\");\nconst Util = __webpack_require__(/*! ../util */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/util.js\");\nfunction ExecutionTimer() {\n    let startTime = null;\n    let endTime = null;\n    // Private function to log and check if the timer was started\n    function wasStarted() {\n        return Util.exists(startTime);\n    }\n    this.start = function () {\n        startTime = performance.now();\n        endTime = null; // Reset endTime if the timer is reused\n        return this;\n    };\n    this.stop = function () {\n        if (!wasStarted()) {\n            // Returning this to allow chaining even after invalid call.\n            // startTime can be used to check, if any start point was ever recorded.\n            Logger.getInstance().debug('Tried to stop timer, that was not started');\n            return this;\n        }\n        endTime = performance.now();\n        return this;\n    };\n    // Get the duration in milliseconds\n    this.getDuration = function () {\n        if (!wasStarted()) {\n            return;\n        }\n        if (endTime === null) {\n            endTime = performance.now();\n        }\n        return Math.round((endTime - startTime) * 100) / 100;\n    };\n}\nmodule.exports = ExecutionTimer;\n//# sourceMappingURL=execution_timer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9kaXN0L2xpYi9sb2dnZXIvZXhlY3V0aW9uX3RpbWVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsUUFBUSxjQUFjLEVBQUUsbUJBQU8sQ0FBQyw4QkFBWTtBQUM1QyxlQUFlLG1CQUFPLENBQUMsd0VBQVc7QUFDbEMsYUFBYSxtQkFBTyxDQUFDLG9FQUFTO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL3dhbmdoYW90YWkvRGVza3RvcC9lbHZlbmxhYi9IVFYvbm9kZV9tb2R1bGVzL3Nub3dmbGFrZS1zZGsvZGlzdC9saWIvbG9nZ2VyL2V4ZWN1dGlvbl90aW1lci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmNvbnN0IHsgcGVyZm9ybWFuY2UgfSA9IHJlcXVpcmUoJ3BlcmZfaG9va3MnKTtcbmNvbnN0IExvZ2dlciA9IHJlcXVpcmUoJy4uL2xvZ2dlcicpO1xuY29uc3QgVXRpbCA9IHJlcXVpcmUoJy4uL3V0aWwnKTtcbmZ1bmN0aW9uIEV4ZWN1dGlvblRpbWVyKCkge1xuICAgIGxldCBzdGFydFRpbWUgPSBudWxsO1xuICAgIGxldCBlbmRUaW1lID0gbnVsbDtcbiAgICAvLyBQcml2YXRlIGZ1bmN0aW9uIHRvIGxvZyBhbmQgY2hlY2sgaWYgdGhlIHRpbWVyIHdhcyBzdGFydGVkXG4gICAgZnVuY3Rpb24gd2FzU3RhcnRlZCgpIHtcbiAgICAgICAgcmV0dXJuIFV0aWwuZXhpc3RzKHN0YXJ0VGltZSk7XG4gICAgfVxuICAgIHRoaXMuc3RhcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHN0YXJ0VGltZSA9IHBlcmZvcm1hbmNlLm5vdygpO1xuICAgICAgICBlbmRUaW1lID0gbnVsbDsgLy8gUmVzZXQgZW5kVGltZSBpZiB0aGUgdGltZXIgaXMgcmV1c2VkXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgdGhpcy5zdG9wID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXdhc1N0YXJ0ZWQoKSkge1xuICAgICAgICAgICAgLy8gUmV0dXJuaW5nIHRoaXMgdG8gYWxsb3cgY2hhaW5pbmcgZXZlbiBhZnRlciBpbnZhbGlkIGNhbGwuXG4gICAgICAgICAgICAvLyBzdGFydFRpbWUgY2FuIGJlIHVzZWQgdG8gY2hlY2ssIGlmIGFueSBzdGFydCBwb2ludCB3YXMgZXZlciByZWNvcmRlZC5cbiAgICAgICAgICAgIExvZ2dlci5nZXRJbnN0YW5jZSgpLmRlYnVnKCdUcmllZCB0byBzdG9wIHRpbWVyLCB0aGF0IHdhcyBub3Qgc3RhcnRlZCcpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgZW5kVGltZSA9IHBlcmZvcm1hbmNlLm5vdygpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIC8vIEdldCB0aGUgZHVyYXRpb24gaW4gbWlsbGlzZWNvbmRzXG4gICAgdGhpcy5nZXREdXJhdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCF3YXNTdGFydGVkKCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZW5kVGltZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgZW5kVGltZSA9IHBlcmZvcm1hbmNlLm5vdygpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBNYXRoLnJvdW5kKChlbmRUaW1lIC0gc3RhcnRUaW1lKSAqIDEwMCkgLyAxMDA7XG4gICAgfTtcbn1cbm1vZHVsZS5leHBvcnRzID0gRXhlY3V0aW9uVGltZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1leGVjdXRpb25fdGltZXIuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/dist/lib/logger/execution_timer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/dist/lib/logger/logging_util.js":
/*!********************************************************************!*\
  !*** ./node_modules/snowflake-sdk/dist/lib/logger/logging_util.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nconst Util = __webpack_require__(/*! ../util */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/util.js\");\nconst PROVIDED_TEXT = 'provided';\nconst NOT_PROVIDED_TEXT = 'not provided';\n/**\n * Describes the presence of a given value. If the value is not empty (as a string),\n * returns the corresponding text (by default: 'provided' or 'not provided').\n *\n * @param {*} valueToDescribe - The value to check for presence.\n * @param {Object} [options] - Optional overrides for the \"provided\" and \"not provided\" text.\n * @param {string} [options.overrideProvidedText]\n * @param {string} [options.overrideNotProvidedText]\n * @returns {string} A string indicating the presence of `valueToDescribe`.\n */\nexports.describePresence = function (valueToDescribe, { overrideProvidedText, overrideNotProvidedText } = {}) {\n    const providedText = overrideProvidedText || PROVIDED_TEXT;\n    const notProvidedText = overrideNotProvidedText || NOT_PROVIDED_TEXT;\n    return Util.isNotEmptyAsString(valueToDescribe) ? providedText : notProvidedText;\n};\n/**\n * @param {Object} sourceObject - The object holding attribute values.\n * @param {Array<string>} attributesWithValues - Attributes to show with their values.\n * @param {Array<string>} attributesWithoutValues - Attributes to show as present/not present.\n * @returns {string} Comma-separated string describing the attributes.\n */\nexports.attributesToString = function (sourceObject = {}, attributesWithValues = [], attributesWithoutValues = []) {\n    const withValues = attributesWithValues\n        .filter((attr) => sourceObject[attr] !== undefined)\n        .map((attr) => `${attr}=${String(sourceObject[attr])}`);\n    const withoutValues = attributesWithoutValues\n        .filter((attr) => sourceObject[attr] !== undefined)\n        .map((attr) => `${attr} is ${exports.describePresence(sourceObject[attr])}`);\n    return [...withValues, ...withoutValues].join(', ');\n};\n/**\n * @param {Object} sourceObject - The object holding attribute values.\n * @param {Array<string>} attributesWithValues - Attributes to show with their values.\n * @param {Array<string>} attributesWithoutValues - Attributes to show as present/not present.\n * @returns {string} A bracketed string of described attributes.\n */\nexports.describeAttributes = function (sourceObject, attributesWithValues, attributesWithoutValues) {\n    const attributesDescription = exports.attributesToString(sourceObject, attributesWithValues, attributesWithoutValues);\n    return `[${attributesDescription}]`;\n};\n//# sourceMappingURL=logging_util.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9kaXN0L2xpYi9sb2dnZXIvbG9nZ2luZ191dGlsLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsYUFBYSxtQkFBTyxDQUFDLG9FQUFTO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsR0FBRztBQUNkLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLGFBQWEsUUFBUTtBQUNyQjtBQUNBLHdCQUF3QixnQ0FBZ0MsZ0RBQWdELElBQUk7QUFDNUc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLGVBQWU7QUFDMUIsV0FBVyxlQUFlO0FBQzFCLGFBQWEsUUFBUTtBQUNyQjtBQUNBLDBCQUEwQiw4QkFBOEI7QUFDeEQ7QUFDQTtBQUNBLDBCQUEwQixLQUFLLEdBQUcsMkJBQTJCO0FBQzdEO0FBQ0E7QUFDQSwwQkFBMEIsTUFBTSxLQUFLLDZDQUE2QztBQUNsRjtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxlQUFlO0FBQzFCLFdBQVcsZUFBZTtBQUMxQixhQUFhLFFBQVE7QUFDckI7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQSxlQUFlLHNCQUFzQjtBQUNyQztBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvd2FuZ2hhb3RhaS9EZXNrdG9wL2VsdmVubGFiL0hUVi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9kaXN0L2xpYi9sb2dnZXIvbG9nZ2luZ191dGlsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuY29uc3QgVXRpbCA9IHJlcXVpcmUoJy4uL3V0aWwnKTtcbmNvbnN0IFBST1ZJREVEX1RFWFQgPSAncHJvdmlkZWQnO1xuY29uc3QgTk9UX1BST1ZJREVEX1RFWFQgPSAnbm90IHByb3ZpZGVkJztcbi8qKlxuICogRGVzY3JpYmVzIHRoZSBwcmVzZW5jZSBvZiBhIGdpdmVuIHZhbHVlLiBJZiB0aGUgdmFsdWUgaXMgbm90IGVtcHR5IChhcyBhIHN0cmluZyksXG4gKiByZXR1cm5zIHRoZSBjb3JyZXNwb25kaW5nIHRleHQgKGJ5IGRlZmF1bHQ6ICdwcm92aWRlZCcgb3IgJ25vdCBwcm92aWRlZCcpLlxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsdWVUb0Rlc2NyaWJlIC0gVGhlIHZhbHVlIHRvIGNoZWNrIGZvciBwcmVzZW5jZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gLSBPcHRpb25hbCBvdmVycmlkZXMgZm9yIHRoZSBcInByb3ZpZGVkXCIgYW5kIFwibm90IHByb3ZpZGVkXCIgdGV4dC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5vdmVycmlkZVByb3ZpZGVkVGV4dF1cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5vdmVycmlkZU5vdFByb3ZpZGVkVGV4dF1cbiAqIEByZXR1cm5zIHtzdHJpbmd9IEEgc3RyaW5nIGluZGljYXRpbmcgdGhlIHByZXNlbmNlIG9mIGB2YWx1ZVRvRGVzY3JpYmVgLlxuICovXG5leHBvcnRzLmRlc2NyaWJlUHJlc2VuY2UgPSBmdW5jdGlvbiAodmFsdWVUb0Rlc2NyaWJlLCB7IG92ZXJyaWRlUHJvdmlkZWRUZXh0LCBvdmVycmlkZU5vdFByb3ZpZGVkVGV4dCB9ID0ge30pIHtcbiAgICBjb25zdCBwcm92aWRlZFRleHQgPSBvdmVycmlkZVByb3ZpZGVkVGV4dCB8fCBQUk9WSURFRF9URVhUO1xuICAgIGNvbnN0IG5vdFByb3ZpZGVkVGV4dCA9IG92ZXJyaWRlTm90UHJvdmlkZWRUZXh0IHx8IE5PVF9QUk9WSURFRF9URVhUO1xuICAgIHJldHVybiBVdGlsLmlzTm90RW1wdHlBc1N0cmluZyh2YWx1ZVRvRGVzY3JpYmUpID8gcHJvdmlkZWRUZXh0IDogbm90UHJvdmlkZWRUZXh0O1xufTtcbi8qKlxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZU9iamVjdCAtIFRoZSBvYmplY3QgaG9sZGluZyBhdHRyaWJ1dGUgdmFsdWVzLlxuICogQHBhcmFtIHtBcnJheTxzdHJpbmc+fSBhdHRyaWJ1dGVzV2l0aFZhbHVlcyAtIEF0dHJpYnV0ZXMgdG8gc2hvdyB3aXRoIHRoZWlyIHZhbHVlcy5cbiAqIEBwYXJhbSB7QXJyYXk8c3RyaW5nPn0gYXR0cmlidXRlc1dpdGhvdXRWYWx1ZXMgLSBBdHRyaWJ1dGVzIHRvIHNob3cgYXMgcHJlc2VudC9ub3QgcHJlc2VudC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IENvbW1hLXNlcGFyYXRlZCBzdHJpbmcgZGVzY3JpYmluZyB0aGUgYXR0cmlidXRlcy5cbiAqL1xuZXhwb3J0cy5hdHRyaWJ1dGVzVG9TdHJpbmcgPSBmdW5jdGlvbiAoc291cmNlT2JqZWN0ID0ge30sIGF0dHJpYnV0ZXNXaXRoVmFsdWVzID0gW10sIGF0dHJpYnV0ZXNXaXRob3V0VmFsdWVzID0gW10pIHtcbiAgICBjb25zdCB3aXRoVmFsdWVzID0gYXR0cmlidXRlc1dpdGhWYWx1ZXNcbiAgICAgICAgLmZpbHRlcigoYXR0cikgPT4gc291cmNlT2JqZWN0W2F0dHJdICE9PSB1bmRlZmluZWQpXG4gICAgICAgIC5tYXAoKGF0dHIpID0+IGAke2F0dHJ9PSR7U3RyaW5nKHNvdXJjZU9iamVjdFthdHRyXSl9YCk7XG4gICAgY29uc3Qgd2l0aG91dFZhbHVlcyA9IGF0dHJpYnV0ZXNXaXRob3V0VmFsdWVzXG4gICAgICAgIC5maWx0ZXIoKGF0dHIpID0+IHNvdXJjZU9iamVjdFthdHRyXSAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAubWFwKChhdHRyKSA9PiBgJHthdHRyfSBpcyAke2V4cG9ydHMuZGVzY3JpYmVQcmVzZW5jZShzb3VyY2VPYmplY3RbYXR0cl0pfWApO1xuICAgIHJldHVybiBbLi4ud2l0aFZhbHVlcywgLi4ud2l0aG91dFZhbHVlc10uam9pbignLCAnKTtcbn07XG4vKipcbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2VPYmplY3QgLSBUaGUgb2JqZWN0IGhvbGRpbmcgYXR0cmlidXRlIHZhbHVlcy5cbiAqIEBwYXJhbSB7QXJyYXk8c3RyaW5nPn0gYXR0cmlidXRlc1dpdGhWYWx1ZXMgLSBBdHRyaWJ1dGVzIHRvIHNob3cgd2l0aCB0aGVpciB2YWx1ZXMuXG4gKiBAcGFyYW0ge0FycmF5PHN0cmluZz59IGF0dHJpYnV0ZXNXaXRob3V0VmFsdWVzIC0gQXR0cmlidXRlcyB0byBzaG93IGFzIHByZXNlbnQvbm90IHByZXNlbnQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIGJyYWNrZXRlZCBzdHJpbmcgb2YgZGVzY3JpYmVkIGF0dHJpYnV0ZXMuXG4gKi9cbmV4cG9ydHMuZGVzY3JpYmVBdHRyaWJ1dGVzID0gZnVuY3Rpb24gKHNvdXJjZU9iamVjdCwgYXR0cmlidXRlc1dpdGhWYWx1ZXMsIGF0dHJpYnV0ZXNXaXRob3V0VmFsdWVzKSB7XG4gICAgY29uc3QgYXR0cmlidXRlc0Rlc2NyaXB0aW9uID0gZXhwb3J0cy5hdHRyaWJ1dGVzVG9TdHJpbmcoc291cmNlT2JqZWN0LCBhdHRyaWJ1dGVzV2l0aFZhbHVlcywgYXR0cmlidXRlc1dpdGhvdXRWYWx1ZXMpO1xuICAgIHJldHVybiBgWyR7YXR0cmlidXRlc0Rlc2NyaXB0aW9ufV1gO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxvZ2dpbmdfdXRpbC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/dist/lib/logger/logging_util.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/dist/lib/logger/node.js":
/*!************************************************************!*\
  !*** ./node_modules/snowflake-sdk/dist/lib/logger/node.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst winston = __webpack_require__(/*! winston */ \"(rsc)/./node_modules/winston/lib/winston.js\");\nconst Core = __webpack_require__(/*! ./core */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/logger/core.js\");\nconst Util = __webpack_require__(/*! ../util */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/util.js\");\nconst Errors = __webpack_require__(/*! ../errors */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/errors.js\");\nconst DEFAULT_ADDITIONAL_LOG_TO_CONSOLE = true;\n/**\n * Creates a new Logger instance for when we're running in node.\n *\n * @param {Object} [options]\n *\n * @constructor\n */\nfunction Logger(options) {\n    let winstonLogger;\n    const defaultFilePath = 'snowflake.log';\n    let filePath = getFilePath(options);\n    let additionalLogToConsole = DEFAULT_ADDITIONAL_LOG_TO_CONSOLE;\n    let transportLabels = [];\n    this.setLogger = function (logger) {\n        winstonLogger = logger;\n    };\n    /**\n     * This operation is for purpose of tests only. The idea is to force flushing logs to files.\n     * Winston logger emits 'finish' event before flushes all the transports so waiting for this event on logger is not good enough.\n     * For simplicity, we just close each transport without waiting here.\n     */\n    this.closeTransports = function () {\n        if (transportsCreated()) {\n            for (const transport of winstonLogger.transports) {\n                closeTransport(transport);\n            }\n        }\n    };\n    function transportsCreated() {\n        try {\n            winstonLogger.transports;\n            return true;\n        }\n        catch (err) {\n            return false;\n        }\n    }\n    function closeTransport(transport) {\n        if (!transport.close) {\n            return;\n        }\n        transport.close();\n    }\n    function reconfigureWinstonLogger(filePathInput, additionalLogToConsoleInput) {\n        const currentWinstonLogger = winstonLogger;\n        filePath = filePathInput ?? filePath;\n        if (Util.isBoolean(additionalLogToConsoleInput)) {\n            additionalLogToConsole = additionalLogToConsoleInput;\n        }\n        else {\n            additionalLogToConsole = DEFAULT_ADDITIONAL_LOG_TO_CONSOLE;\n        }\n        winstonLogger = null; // it will be created for the first log operation\n        if (currentWinstonLogger) {\n            currentWinstonLogger.close();\n        }\n    }\n    function setTransportLabels(transportLabelsInput) {\n        transportLabels = transportLabelsInput;\n    }\n    this.getTransportLabels = function () {\n        return transportLabels;\n    };\n    /**\n     * Logs a message at a given level.\n     *\n     * @param {String} levelTag the tag associated with the level at which to log\n     *   the message.\n     * @param {String} message the message to log.\n     */\n    const logMessage = function (levelTag, message) {\n        // initialize the winston logger if needed\n        if (!winstonLogger) {\n            let transports;\n            let transportLabels;\n            if ('STDOUT' === filePath.toUpperCase()) {\n                transports = [new winston.transports.Console()];\n                transportLabels = ['Console'];\n            }\n            else if (additionalLogToConsole === true) {\n                transports = [\n                    new winston.transports.Console(),\n                    new winston.transports.File({ filename: filePath }),\n                ];\n                transportLabels = ['Console', 'File'];\n            }\n            else {\n                transports = [new winston.transports.File({ filename: filePath })];\n                transportLabels = ['File'];\n            }\n            winstonLogger = new winston.createLogger({\n                transports: transports,\n                level: common.getLevelTag(),\n                levels: common.getLevelTagsMap(),\n            });\n            setTransportLabels(transportLabels);\n        }\n        // get the appropriate logging method using the level tag and use this\n        // method to log the message\n        winstonLogger[levelTag](message);\n    };\n    // create an inner implementation to which all our methods will be forwarded\n    const common = Core.createLogger(options, logMessage, reconfigureWinstonLogger);\n    function getFilePath(options) {\n        if (Util.exists(options)) {\n            Errors.assertInternal(Util.isObject(options));\n            return options.filePath ?? defaultFilePath;\n        }\n        return defaultFilePath;\n    }\n    this.getLevelTag = function () {\n        return common.getLevelTag();\n    };\n    this.getLevelTagsMap = function () {\n        return common.getLevelTagsMap();\n    };\n    /**\n     * Configures this logger.\n     *\n     * @param {Object} options\n     */\n    this.configure = function (options) {\n        if (Util.isBoolean(options.additionalLogToConsole)) {\n            additionalLogToConsole = options.additionalLogToConsole;\n        }\n        else {\n            additionalLogToConsole = DEFAULT_ADDITIONAL_LOG_TO_CONSOLE;\n        }\n        common.configure(options);\n    };\n    /**\n     * Returns the current log level.\n     *\n     * @returns {Number}\n     */\n    this.getLevel = function () {\n        return common.getLevelNumber();\n    };\n    /**\n     * Logs a given message at the error level.\n     *\n     * @param {String} message\n     * @param params\n     */\n    this.error = function (message, ...params) {\n        common.error.apply(common, [message, ...params]);\n    };\n    /**\n     * Logs a given message at the warning level.\n     *\n     * @param {String} message\n     * @param params\n     */\n    this.warn = function (message, ...params) {\n        common.warn.apply(common, [message, ...params]);\n    };\n    /**\n     * Logs a given message at the info level.\n     *\n     * @param {String} message\n     * @param params\n     */\n    this.info = function (message, ...params) {\n        common.info.apply(common, [message, ...params]);\n    };\n    /**\n     * Logs a given message at the debug level.\n     *\n     * @param {String} message\n     * @param params\n     */\n    this.debug = function (message, ...params) {\n        common.debug.apply(common, [message, ...params]);\n    };\n    /**\n     * Logs a given message at the trace level.\n     *\n     * @param {String} message\n     * @param params\n     */\n    this.trace = function (message, ...params) {\n        common.trace.apply(common, [message, ...params]);\n    };\n    /**\n     * Returns the log buffer.\n     *\n     * @returns {String[]}\n     */\n    this.getLogBuffer = function () {\n        return common.getLogBuffer();\n    };\n}\nmodule.exports = Logger;\n//# sourceMappingURL=node.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/dist/lib/logger/node.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/dist/lib/parameters.js":
/*!***********************************************************!*\
  !*** ./node_modules/snowflake-sdk/dist/lib/parameters.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nconst Util = __webpack_require__(/*! ./util */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/util.js\");\nconst Errors = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/errors.js\");\n/**\n * Creates a new Parameter.\n *\n * @param {Object} options\n * @constructor\n */\nfunction Parameter(options) {\n    // validate input\n    Errors.assertInternal(Util.isObject(options));\n    Errors.assertInternal(Util.isString(options.name));\n    Errors.assertInternal(Util.exists(options.value));\n    const name = options.name;\n    let value = options.value;\n    /**\n     * Returns the name of the parameter.\n     *\n     * @returns {String}\n     */\n    this.getName = function () {\n        return name;\n    };\n    /**\n     * Returns the value of the parameter.\n     *\n     * @returns {*}\n     */\n    this.getValue = function () {\n        return value;\n    };\n    /**\n     * Updates the value of the parameter.\n     *\n     * @param {*} targetValue\n     */\n    this.setValue = function (targetValue) {\n        value = targetValue;\n    };\n}\nconst names = (exports.names = {});\nnames.JS_DRIVER_DISABLE_OCSP_FOR_NON_SF_ENDPOINTS = 'JS_DRIVER_DISABLE_OCSP_FOR_NON_SF_ENDPOINTS';\nnames.SERVICE_NAME = 'SERVICE_NAME';\nnames.CLIENT_SESSION_KEEP_ALIVE = 'CLIENT_SESSION_KEEP_ALIVE';\nnames.CLIENT_SESSION_KEEP_ALIVE_HEARTBEAT_FREQUENCY =\n    'CLIENT_SESSION_KEEP_ALIVE_HEARTBEAT_FREQUENCY';\nnames.JS_TREAT_INTEGER_AS_BIGINT = 'JS_TREAT_INTEGER_AS_BIGINT';\nnames.CLIENT_STAGE_ARRAY_BINDING_THRESHOLD = 'CLIENT_STAGE_ARRAY_BINDING_THRESHOLD';\nnames.MULTI_STATEMENT_COUNT = 'MULTI_STATEMENT_COUNT';\nnames.QUERY_CONTEXT_CACHE_SIZE = 'QUERY_CONTEXT_CACHE_SIZE';\nconst parameters = [\n    new Parameter({\n        name: names.JS_DRIVER_DISABLE_OCSP_FOR_NON_SF_ENDPOINTS,\n        value: false,\n        desc: 'Whether to disable OCSP validation in the JavaScript driver ' +\n            'when communicating with non-Snowflake endpoints (e.g. S3/Blob).',\n    }),\n    new Parameter({\n        name: names.SERVICE_NAME,\n        value: '',\n        desc: 'Hint for load balancer.',\n    }),\n    new Parameter({\n        name: names.CLIENT_SESSION_KEEP_ALIVE,\n        value: false,\n        desc: 'When true, enables the driver to keep the session alive indefinitely',\n    }),\n    new Parameter({\n        name: names.CLIENT_SESSION_KEEP_ALIVE_HEARTBEAT_FREQUENCY,\n        value: 3600,\n        desc: 'The amount of time (in seconds) between subsequent heartbeat requests to the server.',\n    }),\n    new Parameter({\n        name: names.JS_TREAT_INTEGER_AS_BIGINT,\n        value: false,\n        desc: 'When true, enables the driver converts integer columns into BigInt',\n    }),\n    new Parameter({\n        name: names.CLIENT_STAGE_ARRAY_BINDING_THRESHOLD,\n        value: 100000,\n        desc: 'The client stage array binding threshold',\n    }),\n    new Parameter({\n        name: names.MULTI_STATEMENT_COUNT,\n        value: 1,\n        desc: 'When 1, multi statement is disable, when 0, multi statement is unlimited',\n    }),\n    new Parameter({\n        name: names.QUERY_CONTEXT_CACHE_SIZE,\n        value: 5,\n        desc: 'Query Context Cache Size',\n    }),\n];\n// put all the parameters in a map so they're easy to retrieve and update\nconst mapParamNameToParam = {};\nfor (let index = 0, length = parameters.length; index < length; index++) {\n    const parameter = parameters[index];\n    mapParamNameToParam[parameter.getName()] = parameter;\n}\n/**\n * Returns the value of a given parameter.\n *\n * @param {String} parameterName\n *\n * @returns {*}\n */\nexports.getValue = function (parameterName) {\n    // resolve the parameter name\n    const parameter = mapParamNameToParam[parameterName];\n    // verify that a valid parameter name was specified\n    Errors.assertInternal(Util.exists(parameter), 'invalid parameter name: ' + parameterName);\n    return parameter.getValue();\n};\n/**\n * Updates the parameter values.\n *\n * @param {Object[]} parametersConfig\n */\nexports.update = function (parametersConfig) {\n    // if an input is specified\n    if (Util.exists(parametersConfig)) {\n        Errors.assertInternal(Util.isArray(parametersConfig));\n        // if any of the items in the configs array matches a known\n        // parameter, update the corresponding parameter's value\n        for (let index = 0, length = parametersConfig.length; index < length; index++) {\n            const parameterConfig = parametersConfig[index];\n            if (Object.prototype.hasOwnProperty.call(mapParamNameToParam, parameterConfig.name)) {\n                const parameter = mapParamNameToParam[parameterConfig.name];\n                parameter.setValue(parameterConfig.value);\n            }\n        }\n    }\n};\n//# sourceMappingURL=parameters.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9kaXN0L2xpYi9wYXJhbWV0ZXJzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsYUFBYSxtQkFBTyxDQUFDLG1FQUFRO0FBQzdCLGVBQWUsbUJBQU8sQ0FBQyx1RUFBVTtBQUNqQztBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxHQUFHO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLGFBQWEsS0FBSztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsZ0RBQWdELGdCQUFnQjtBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkI7QUFDQSxhQUFhO0FBQ2I7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxVQUFVO0FBQ3JCO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4REFBOEQsZ0JBQWdCO0FBQzlFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL3dhbmdoYW90YWkvRGVza3RvcC9lbHZlbmxhYi9IVFYvbm9kZV9tb2R1bGVzL3Nub3dmbGFrZS1zZGsvZGlzdC9saWIvcGFyYW1ldGVycy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmNvbnN0IFV0aWwgPSByZXF1aXJlKCcuL3V0aWwnKTtcbmNvbnN0IEVycm9ycyA9IHJlcXVpcmUoJy4vZXJyb3JzJyk7XG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgUGFyYW1ldGVyLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gUGFyYW1ldGVyKG9wdGlvbnMpIHtcbiAgICAvLyB2YWxpZGF0ZSBpbnB1dFxuICAgIEVycm9ycy5hc3NlcnRJbnRlcm5hbChVdGlsLmlzT2JqZWN0KG9wdGlvbnMpKTtcbiAgICBFcnJvcnMuYXNzZXJ0SW50ZXJuYWwoVXRpbC5pc1N0cmluZyhvcHRpb25zLm5hbWUpKTtcbiAgICBFcnJvcnMuYXNzZXJ0SW50ZXJuYWwoVXRpbC5leGlzdHMob3B0aW9ucy52YWx1ZSkpO1xuICAgIGNvbnN0IG5hbWUgPSBvcHRpb25zLm5hbWU7XG4gICAgbGV0IHZhbHVlID0gb3B0aW9ucy52YWx1ZTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBuYW1lIG9mIHRoZSBwYXJhbWV0ZXIuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMuZ2V0TmFtZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIG5hbWU7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSB2YWx1ZSBvZiB0aGUgcGFyYW1ldGVyLlxuICAgICAqXG4gICAgICogQHJldHVybnMgeyp9XG4gICAgICovXG4gICAgdGhpcy5nZXRWYWx1ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogVXBkYXRlcyB0aGUgdmFsdWUgb2YgdGhlIHBhcmFtZXRlci5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Kn0gdGFyZ2V0VmFsdWVcbiAgICAgKi9cbiAgICB0aGlzLnNldFZhbHVlID0gZnVuY3Rpb24gKHRhcmdldFZhbHVlKSB7XG4gICAgICAgIHZhbHVlID0gdGFyZ2V0VmFsdWU7XG4gICAgfTtcbn1cbmNvbnN0IG5hbWVzID0gKGV4cG9ydHMubmFtZXMgPSB7fSk7XG5uYW1lcy5KU19EUklWRVJfRElTQUJMRV9PQ1NQX0ZPUl9OT05fU0ZfRU5EUE9JTlRTID0gJ0pTX0RSSVZFUl9ESVNBQkxFX09DU1BfRk9SX05PTl9TRl9FTkRQT0lOVFMnO1xubmFtZXMuU0VSVklDRV9OQU1FID0gJ1NFUlZJQ0VfTkFNRSc7XG5uYW1lcy5DTElFTlRfU0VTU0lPTl9LRUVQX0FMSVZFID0gJ0NMSUVOVF9TRVNTSU9OX0tFRVBfQUxJVkUnO1xubmFtZXMuQ0xJRU5UX1NFU1NJT05fS0VFUF9BTElWRV9IRUFSVEJFQVRfRlJFUVVFTkNZID1cbiAgICAnQ0xJRU5UX1NFU1NJT05fS0VFUF9BTElWRV9IRUFSVEJFQVRfRlJFUVVFTkNZJztcbm5hbWVzLkpTX1RSRUFUX0lOVEVHRVJfQVNfQklHSU5UID0gJ0pTX1RSRUFUX0lOVEVHRVJfQVNfQklHSU5UJztcbm5hbWVzLkNMSUVOVF9TVEFHRV9BUlJBWV9CSU5ESU5HX1RIUkVTSE9MRCA9ICdDTElFTlRfU1RBR0VfQVJSQVlfQklORElOR19USFJFU0hPTEQnO1xubmFtZXMuTVVMVElfU1RBVEVNRU5UX0NPVU5UID0gJ01VTFRJX1NUQVRFTUVOVF9DT1VOVCc7XG5uYW1lcy5RVUVSWV9DT05URVhUX0NBQ0hFX1NJWkUgPSAnUVVFUllfQ09OVEVYVF9DQUNIRV9TSVpFJztcbmNvbnN0IHBhcmFtZXRlcnMgPSBbXG4gICAgbmV3IFBhcmFtZXRlcih7XG4gICAgICAgIG5hbWU6IG5hbWVzLkpTX0RSSVZFUl9ESVNBQkxFX09DU1BfRk9SX05PTl9TRl9FTkRQT0lOVFMsXG4gICAgICAgIHZhbHVlOiBmYWxzZSxcbiAgICAgICAgZGVzYzogJ1doZXRoZXIgdG8gZGlzYWJsZSBPQ1NQIHZhbGlkYXRpb24gaW4gdGhlIEphdmFTY3JpcHQgZHJpdmVyICcgK1xuICAgICAgICAgICAgJ3doZW4gY29tbXVuaWNhdGluZyB3aXRoIG5vbi1Tbm93Zmxha2UgZW5kcG9pbnRzIChlLmcuIFMzL0Jsb2IpLicsXG4gICAgfSksXG4gICAgbmV3IFBhcmFtZXRlcih7XG4gICAgICAgIG5hbWU6IG5hbWVzLlNFUlZJQ0VfTkFNRSxcbiAgICAgICAgdmFsdWU6ICcnLFxuICAgICAgICBkZXNjOiAnSGludCBmb3IgbG9hZCBiYWxhbmNlci4nLFxuICAgIH0pLFxuICAgIG5ldyBQYXJhbWV0ZXIoe1xuICAgICAgICBuYW1lOiBuYW1lcy5DTElFTlRfU0VTU0lPTl9LRUVQX0FMSVZFLFxuICAgICAgICB2YWx1ZTogZmFsc2UsXG4gICAgICAgIGRlc2M6ICdXaGVuIHRydWUsIGVuYWJsZXMgdGhlIGRyaXZlciB0byBrZWVwIHRoZSBzZXNzaW9uIGFsaXZlIGluZGVmaW5pdGVseScsXG4gICAgfSksXG4gICAgbmV3IFBhcmFtZXRlcih7XG4gICAgICAgIG5hbWU6IG5hbWVzLkNMSUVOVF9TRVNTSU9OX0tFRVBfQUxJVkVfSEVBUlRCRUFUX0ZSRVFVRU5DWSxcbiAgICAgICAgdmFsdWU6IDM2MDAsXG4gICAgICAgIGRlc2M6ICdUaGUgYW1vdW50IG9mIHRpbWUgKGluIHNlY29uZHMpIGJldHdlZW4gc3Vic2VxdWVudCBoZWFydGJlYXQgcmVxdWVzdHMgdG8gdGhlIHNlcnZlci4nLFxuICAgIH0pLFxuICAgIG5ldyBQYXJhbWV0ZXIoe1xuICAgICAgICBuYW1lOiBuYW1lcy5KU19UUkVBVF9JTlRFR0VSX0FTX0JJR0lOVCxcbiAgICAgICAgdmFsdWU6IGZhbHNlLFxuICAgICAgICBkZXNjOiAnV2hlbiB0cnVlLCBlbmFibGVzIHRoZSBkcml2ZXIgY29udmVydHMgaW50ZWdlciBjb2x1bW5zIGludG8gQmlnSW50JyxcbiAgICB9KSxcbiAgICBuZXcgUGFyYW1ldGVyKHtcbiAgICAgICAgbmFtZTogbmFtZXMuQ0xJRU5UX1NUQUdFX0FSUkFZX0JJTkRJTkdfVEhSRVNIT0xELFxuICAgICAgICB2YWx1ZTogMTAwMDAwLFxuICAgICAgICBkZXNjOiAnVGhlIGNsaWVudCBzdGFnZSBhcnJheSBiaW5kaW5nIHRocmVzaG9sZCcsXG4gICAgfSksXG4gICAgbmV3IFBhcmFtZXRlcih7XG4gICAgICAgIG5hbWU6IG5hbWVzLk1VTFRJX1NUQVRFTUVOVF9DT1VOVCxcbiAgICAgICAgdmFsdWU6IDEsXG4gICAgICAgIGRlc2M6ICdXaGVuIDEsIG11bHRpIHN0YXRlbWVudCBpcyBkaXNhYmxlLCB3aGVuIDAsIG11bHRpIHN0YXRlbWVudCBpcyB1bmxpbWl0ZWQnLFxuICAgIH0pLFxuICAgIG5ldyBQYXJhbWV0ZXIoe1xuICAgICAgICBuYW1lOiBuYW1lcy5RVUVSWV9DT05URVhUX0NBQ0hFX1NJWkUsXG4gICAgICAgIHZhbHVlOiA1LFxuICAgICAgICBkZXNjOiAnUXVlcnkgQ29udGV4dCBDYWNoZSBTaXplJyxcbiAgICB9KSxcbl07XG4vLyBwdXQgYWxsIHRoZSBwYXJhbWV0ZXJzIGluIGEgbWFwIHNvIHRoZXkncmUgZWFzeSB0byByZXRyaWV2ZSBhbmQgdXBkYXRlXG5jb25zdCBtYXBQYXJhbU5hbWVUb1BhcmFtID0ge307XG5mb3IgKGxldCBpbmRleCA9IDAsIGxlbmd0aCA9IHBhcmFtZXRlcnMubGVuZ3RoOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykge1xuICAgIGNvbnN0IHBhcmFtZXRlciA9IHBhcmFtZXRlcnNbaW5kZXhdO1xuICAgIG1hcFBhcmFtTmFtZVRvUGFyYW1bcGFyYW1ldGVyLmdldE5hbWUoKV0gPSBwYXJhbWV0ZXI7XG59XG4vKipcbiAqIFJldHVybnMgdGhlIHZhbHVlIG9mIGEgZ2l2ZW4gcGFyYW1ldGVyLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBwYXJhbWV0ZXJOYW1lXG4gKlxuICogQHJldHVybnMgeyp9XG4gKi9cbmV4cG9ydHMuZ2V0VmFsdWUgPSBmdW5jdGlvbiAocGFyYW1ldGVyTmFtZSkge1xuICAgIC8vIHJlc29sdmUgdGhlIHBhcmFtZXRlciBuYW1lXG4gICAgY29uc3QgcGFyYW1ldGVyID0gbWFwUGFyYW1OYW1lVG9QYXJhbVtwYXJhbWV0ZXJOYW1lXTtcbiAgICAvLyB2ZXJpZnkgdGhhdCBhIHZhbGlkIHBhcmFtZXRlciBuYW1lIHdhcyBzcGVjaWZpZWRcbiAgICBFcnJvcnMuYXNzZXJ0SW50ZXJuYWwoVXRpbC5leGlzdHMocGFyYW1ldGVyKSwgJ2ludmFsaWQgcGFyYW1ldGVyIG5hbWU6ICcgKyBwYXJhbWV0ZXJOYW1lKTtcbiAgICByZXR1cm4gcGFyYW1ldGVyLmdldFZhbHVlKCk7XG59O1xuLyoqXG4gKiBVcGRhdGVzIHRoZSBwYXJhbWV0ZXIgdmFsdWVzLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0W119IHBhcmFtZXRlcnNDb25maWdcbiAqL1xuZXhwb3J0cy51cGRhdGUgPSBmdW5jdGlvbiAocGFyYW1ldGVyc0NvbmZpZykge1xuICAgIC8vIGlmIGFuIGlucHV0IGlzIHNwZWNpZmllZFxuICAgIGlmIChVdGlsLmV4aXN0cyhwYXJhbWV0ZXJzQ29uZmlnKSkge1xuICAgICAgICBFcnJvcnMuYXNzZXJ0SW50ZXJuYWwoVXRpbC5pc0FycmF5KHBhcmFtZXRlcnNDb25maWcpKTtcbiAgICAgICAgLy8gaWYgYW55IG9mIHRoZSBpdGVtcyBpbiB0aGUgY29uZmlncyBhcnJheSBtYXRjaGVzIGEga25vd25cbiAgICAgICAgLy8gcGFyYW1ldGVyLCB1cGRhdGUgdGhlIGNvcnJlc3BvbmRpbmcgcGFyYW1ldGVyJ3MgdmFsdWVcbiAgICAgICAgZm9yIChsZXQgaW5kZXggPSAwLCBsZW5ndGggPSBwYXJhbWV0ZXJzQ29uZmlnLmxlbmd0aDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgICAgIGNvbnN0IHBhcmFtZXRlckNvbmZpZyA9IHBhcmFtZXRlcnNDb25maWdbaW5kZXhdO1xuICAgICAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtYXBQYXJhbU5hbWVUb1BhcmFtLCBwYXJhbWV0ZXJDb25maWcubmFtZSkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwYXJhbWV0ZXIgPSBtYXBQYXJhbU5hbWVUb1BhcmFtW3BhcmFtZXRlckNvbmZpZy5uYW1lXTtcbiAgICAgICAgICAgICAgICBwYXJhbWV0ZXIuc2V0VmFsdWUocGFyYW1ldGVyQ29uZmlnLnZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYXJhbWV0ZXJzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/dist/lib/parameters.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/dist/lib/proxy_util.js":
/*!***********************************************************!*\
  !*** ./node_modules/snowflake-sdk/dist/lib/proxy_util.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nconst Logger = __webpack_require__(/*! ./logger */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/logger.js\");\nconst Errors = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/errors.js\");\nconst Util = __webpack_require__(/*! ./util */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/util.js\");\nconst GlobalConfig = __webpack_require__(/*! ./global_config */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/global_config.js\");\nconst LoggingUtil = __webpack_require__(/*! ./logger/logging_util */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/logger/logging_util.js\");\nconst ErrorCodes = Errors.codes;\n/**\n * @typedef {object} Proxy\n * @property {string} host - The host address of the proxy.\n * @property {string} protocol - The protocol used by the proxy (e.g., \"http\" or \"https\")\n * @property {string} user - The username for the proxy\n * @property {number} port - The port number.\n * @property {string} password - The password for the proxy\n * @property {string} noProxy -  Optional list of domains that should bypass the prox\n */\n/**\n * remove http:// or https:// from the input, e.g. used with proxy URL\n * @param input\n * @returns {string}\n */\nexports.removeScheme = function (input) {\n    return input.toString().replace(/(^\\w+:|^)\\/\\//, '');\n};\n/**\n * Try to get the PROXY environmental variables\n * On Windows, envvar name is case-insensitive, but on *nix, it's case-sensitive\n *\n * Compare them with the proxy specified on the Connection, if any\n * Return with the log constructed from the components detection and comparison\n * If there's something to warn the user about, return that too\n *\n * @param {Proxy} agentOptions from agent creation\n * @returns {{messages: string, warnings: string}} log messages\n */\nexports.getCompareAndLogEnvAndAgentProxies = function (agentOptions) {\n    const envProxy = {};\n    const logMessages = { messages: '', warnings: '' };\n    envProxy.httpProxy = process.env.http_proxy || process.env.HTTP_PROXY;\n    envProxy.httpsProxy = process.env.https_proxy || process.env.HTTPS_PROXY;\n    envProxy.noProxy = process.env.no_proxy || process.env.NO_PROXY;\n    envProxy.logHttpProxy = envProxy.httpProxy\n        ? 'HTTP_PROXY: ' + envProxy.httpProxy\n        : 'HTTP_PROXY: <unset>';\n    envProxy.logHttpsProxy = envProxy.httpsProxy\n        ? 'HTTPS_PROXY: ' + envProxy.httpsProxy\n        : 'HTTPS_PROXY: <unset>';\n    envProxy.logNoProxy = envProxy.noProxy ? 'NO_PROXY: ' + envProxy.noProxy : 'NO_PROXY: <unset>';\n    // log PROXY envvars\n    if (envProxy.httpProxy || envProxy.httpsProxy) {\n        logMessages.messages =\n            logMessages.messages +\n                ' // PROXY environment variables: ' +\n                `${envProxy.logHttpProxy} ${envProxy.logHttpsProxy} ${envProxy.logNoProxy}.`;\n    }\n    // log proxy config on Connection, if any set\n    if (agentOptions.host) {\n        const proxyHostAndPort = agentOptions.host + ':' + agentOptions.port;\n        const proxyProtocolHostAndPort = agentOptions.protocol\n            ? ' protocol=' + agentOptions.protocol + ' proxy=' + proxyHostAndPort\n            : ' proxy=' + proxyHostAndPort;\n        const proxyUsername = agentOptions.user ? ' user=' + agentOptions.user : '';\n        const proxyString = `${Util.exists(agentOptions.user) ? `${agentOptions.user}:${agentOptions.password}@` : ''}${proxyHostAndPort}`.toLowerCase();\n        logMessages.messages =\n            logMessages.messages +\n                ` // Proxy configured in Agent:${proxyProtocolHostAndPort}${proxyUsername}`;\n        // check if both the PROXY envvars and Connection proxy config is set\n        // generate warnings if they are, and are also different\n        if (envProxy.httpProxy &&\n            this.removeScheme(envProxy.httpProxy).toLowerCase() !== proxyString.toLowerCase()) {\n            logMessages.warnings =\n                logMessages.warnings +\n                    ` Using both the HTTP_PROXY (${this.describeProxy(this.getProxyFromEnv(false))})` +\n                    ` and the Connection proxy (${this.describeProxy(agentOptions)}), but with different values.` +\n                    ' If you experience connectivity issues, try unsetting one of them.';\n        }\n        if (envProxy.httpsProxy &&\n            this.removeScheme(envProxy.httpsProxy).toLowerCase() !== proxyString.toLowerCase()) {\n            logMessages.warnings =\n                logMessages.warnings +\n                    ` Using both the HTTPS_PROXY (${this.describeProxy(this.getProxyFromEnv(true))})` +\n                    ` and the Connection proxy (${this.describeProxy(agentOptions)}) settings to connect, but with different values.` +\n                    ' If you experience connectivity issues, try unsetting one of them.';\n        }\n    }\n    logMessages.messages = logMessages.messages ? logMessages.messages : ' none.';\n    return logMessages;\n};\n/**\n * Validate whether the proxy object has the appropriate information\n *\n * @param {Proxy} proxy\n * @returns {Proxy}\n */\nexports.validateProxy = function (proxy) {\n    const { host, port, noProxy, user, password } = proxy;\n    // check for missing proxyHost\n    Errors.checkArgumentExists(Util.exists(host), ErrorCodes.ERR_CONN_CREATE_MISSING_PROXY_HOST);\n    // check for invalid proxyHost\n    Errors.checkArgumentValid(Util.isString(host), ErrorCodes.ERR_CONN_CREATE_INVALID_PROXY_HOST);\n    // check for missing proxyPort\n    Errors.checkArgumentExists(Util.exists(port), ErrorCodes.ERR_CONN_CREATE_MISSING_PROXY_PORT);\n    // check for invalid proxyPort\n    Errors.checkArgumentValid(Util.isNumber(port), ErrorCodes.ERR_CONN_CREATE_INVALID_PROXY_PORT);\n    if (Util.exists(noProxy)) {\n        // check for invalid noProxy\n        Errors.checkArgumentValid(Util.isString(noProxy), ErrorCodes.ERR_CONN_CREATE_INVALID_NO_PROXY);\n    }\n    if (Util.exists(user) || Util.exists(password)) {\n        // check for missing proxyUser\n        Errors.checkArgumentExists(Util.exists(user), ErrorCodes.ERR_CONN_CREATE_MISSING_PROXY_USER);\n        // check for invalid proxyUser\n        Errors.checkArgumentValid(Util.isString(user), ErrorCodes.ERR_CONN_CREATE_INVALID_PROXY_USER);\n        // check for missing proxyPassword\n        Errors.checkArgumentExists(Util.exists(password), ErrorCodes.ERR_CONN_CREATE_MISSING_PROXY_PASS);\n        // check for invalid proxyPassword\n        Errors.checkArgumentValid(Util.isString(password), ErrorCodes.ERR_CONN_CREATE_INVALID_PROXY_PASS);\n    }\n    else {\n        delete proxy.user;\n        delete proxy.password;\n    }\n};\n/**\n * Obtain the proxy information from the environment variable.\n *\n * @param {boolean} isHttps\n * @returns {Proxy}\n */\nexports.getProxyFromEnv = function (isHttps = true) {\n    const getDefaultPortIfNotSet = (proxyFromEnv) => {\n        const isProxyProtocolHttps = proxyFromEnv.protocol === 'https:';\n        if (!proxyFromEnv.port) {\n            return isProxyProtocolHttps ? 443 : 80;\n        }\n        else {\n            return proxyFromEnv.port;\n        }\n    };\n    const protocol = isHttps ? 'https' : 'http';\n    let proxyFromEnv = Util.getEnvVar(`${protocol}_proxy`);\n    if (!proxyFromEnv) {\n        return null;\n    }\n    Logger.getInstance().debug(`Util.getProxyEnv: Using ${protocol.toUpperCase()}_PROXY from the environment variable`);\n    if (proxyFromEnv.indexOf('://') === -1) {\n        Logger.getInstance().info('Util.getProxyEnv: the protocol was missing from the environment proxy. Use the HTTP protocol.');\n        proxyFromEnv = 'http' + '://' + proxyFromEnv;\n    }\n    proxyFromEnv = new URL(proxyFromEnv);\n    const port = getDefaultPortIfNotSet(proxyFromEnv);\n    const proxy = {\n        host: Util.validateEmptyString(proxyFromEnv.hostname),\n        port: Number(port),\n        user: Util.validateEmptyString(proxyFromEnv.username),\n        password: Util.validateEmptyString(proxyFromEnv.password),\n        protocol: Util.validateEmptyString(proxyFromEnv.protocol),\n        noProxy: this.getNoProxyEnv(),\n        useForOCSP: !isHttps,\n    };\n    this.validateProxy(proxy);\n    return proxy;\n};\n/**\n * Obtain the no proxy information from the environment variable.\n *\n * @returns {string | undefined}\n */\nexports.getNoProxyEnv = function () {\n    const noProxy = Util.getEnvVar('no_proxy');\n    if (noProxy) {\n        return noProxy.split(',').join('|');\n    }\n    return undefined;\n};\n/**\n * Extract the host from the destination URL to check whether the same agent already exists or not.\n *\n * @param {string} destination\n * @returns {string}\n */\nexports.getHostFromURL = function (destination) {\n    if (destination.indexOf('://') === -1) {\n        destination = 'https' + '://' + destination;\n    }\n    try {\n        return new URL(destination).hostname;\n    }\n    catch (err) {\n        Logger.getInstance().error(`Failed to parse the destination to URL with the error: ${err}. Return destination as the host: ${destination}`);\n        return destination;\n    }\n};\n/**\n * if proxy exists, return the proxy. If not and the useEnvProxy is true, return the proxy from the environment variable.\n * @param {Proxy} proxy\n * @param {string} moduleName\n * @param {string} isHttp\n *\n * @returns {Proxy}\n */\nexports.getProxy = function (proxy, moduleName, isHttps) {\n    if (!proxy && GlobalConfig.isEnvProxyActive()) {\n        proxy = this.getProxyFromEnv(isHttps);\n        if (proxy) {\n            Logger.getInstance().debug(`${moduleName} loads the proxy info from the environment variable host: ${proxy.host}`);\n        }\n    }\n    return proxy;\n};\n/**\n * The proxy configuration fields in Azure are different from the proxy fields in the snowflake node.js driver.\n * Because of that, this function converts the snowflake proxy info to the Azure proxy info.\n * @param {Proxy} proxy\n * @returns {{host:string, port:number, user?:string, password?:string}}}\n */\nexports.getAzureProxy = function (proxy) {\n    const AzureProxy = {\n        ...proxy,\n        host: `${proxy.protocol}${proxy.protocol.endsWith(':') ? '' : ':'}//${proxy.host}`,\n    };\n    delete AzureProxy.noProxy;\n    delete AzureProxy.protocol;\n    if (!Util.exists(AzureProxy.user) || !Util.exists(AzureProxy.password)) {\n        delete AzureProxy.user;\n        delete AzureProxy.password;\n    }\n    return AzureProxy;\n};\n/**\n * Currently, there is no way to disable loading the proxy information from the environment path in Azure/blob.\n * To control this proxy option on the driver side, A temporary workaround is hide(remove) the environment proxy from the process\n * when the client is created (At this time, the client loads the proxy from the environment variables internally).\n * After the client is created, restore them with the 'restoreEnvironmentProxy' function.\n */\nlet envProxyList;\nconst proxyEnvList = ['http_proxy', 'https_proxy', 'no_proxy'];\nexports.hideEnvironmentProxy = function () {\n    if (GlobalConfig.isEnvProxyActive()) {\n        return;\n    }\n    Logger.getInstance().debug('As the useEnvProxy option is disabled, the proxy environment variables are temporarily hidden during the creation of an Azure client');\n    envProxyList = [];\n    for (const envVar of proxyEnvList) {\n        saveProxyInfoInList(envVar);\n        if (!Util.isWindows()) {\n            saveProxyInfoInList(envVar.toUpperCase());\n        }\n    }\n};\nfunction saveProxyInfoInList(envVar) {\n    const proxyEnv = process.env[envVar];\n    envProxyList.push(process.env[envVar]);\n    delete process.env[envVar];\n    if (Util.exists(proxyEnv)) {\n        Logger.getInstance().debug(`Temporarily exclude ${envVar} from the environment variable value: ${proxyEnv}`);\n    }\n    else {\n        Logger.getInstance().debug(`${envVar} was not defined, nothing to do`);\n    }\n}\nexports.restoreEnvironmentProxy = function () {\n    if (GlobalConfig.isEnvProxyActive()) {\n        return;\n    }\n    const iterator = envProxyList[Symbol.iterator]();\n    let nextValue = iterator.next().value;\n    for (const envVar of proxyEnvList) {\n        if (Util.exists(nextValue)) {\n            Logger.getInstance().debug(`The ${envVar} value exists with the value: ${nextValue} Restore back the proxy environment variable values`);\n            process.env[envVar] = nextValue;\n        }\n        nextValue = iterator.next().value;\n        if (!Util.isWindows()) {\n            if (Util.exists(nextValue)) {\n                Logger.getInstance().debug(`The ${envVar.toUpperCase()} value exists with the value: ${nextValue} Restore back the proxy environment variable values (for Non-Windows machine)`);\n                process.env[envVar.toUpperCase()] = nextValue;\n            }\n            nextValue = iterator.next().value;\n        }\n    }\n    Logger.getInstance().debug('An Azure client has been created. Restore back the proxy environment variable values');\n};\n/**\n * Provide the details of the proxy info.\n * @param proxy\n * @param destination {string | Regex }\n */\nexports.isByPassProxy = function (proxy, destination) {\n    if (proxy && proxy.noProxy) {\n        const bypassList = proxy.noProxy.split('|');\n        return bypassList.find((noProxy) => {\n            let host = noProxy.trim();\n            host = host.replace('*', '.*?');\n            if (destination instanceof RegExp) {\n                return destination.test(host);\n            }\n            const noProxyRegex = new RegExp(`^${host}`);\n            return noProxyRegex.test(destination);\n        });\n    }\n};\n/**\n * Provide the details of the proxy info.\n * @param proxy\n * @returns {string}\n */\nexports.describeProxy = function (proxy) {\n    if (Util.exists(proxy)) {\n        return (`proxyHost: ${proxy.host}, proxyPort: ${proxy.port}, ` +\n            `${Util.exists(proxy.user) ? `proxyUser: ${proxy.user}, proxyPassword is ${LoggingUtil.describePresence(proxy.password)}, ` : ''}` +\n            `proxyProtocol: ${proxy.protocol}, noProxy: ${proxy.noProxy}`);\n    }\n    else {\n        return 'proxy was not configured';\n    }\n};\n/**\n * Make the proxy string with the proxy info (json format)\n * @param proxy\n * @returns {string}\n */\nexports.stringifyProxy = function (proxy) {\n    if (Util.isEmptyObject(proxy)) {\n        return null;\n    }\n    return (`${proxy.protocol.startsWith('https') ? 'https' : 'http'}://` +\n        `${Util.exists(proxy.user) ? `${proxy.user}:${proxy.password}@` : ''}` +\n        `${proxy.host}:${proxy.port}`);\n};\n//# sourceMappingURL=proxy_util.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/dist/lib/proxy_util.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/dist/lib/queryContextCache.js":
/*!******************************************************************!*\
  !*** ./node_modules/snowflake-sdk/dist/lib/queryContextCache.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst Logger = __webpack_require__(/*! ./logger */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/logger.js\");\n/**\n *\n * @param {String} id\n * @param {Number} timestamp\n * @param {Number} priority\n * @param {String} context\n */\nfunction QueryContextElement(id, timestamp, priority, context) {\n    this.id = id;\n    this.timestamp = timestamp;\n    this.priority = priority;\n    this.context = context;\n}\n/**\n * Most Recently Used and Priority based cache. A separate cache for each connection in the driver.\n */\n/**\n * @param {Number} capacity Maximum capacity of the cache.\n * @param {Number} sessionId Session for which the cache is created.\n */\nfunction QueryContextCache(capacity, sessionId) {\n    Logger.getInstance().debug(`Creating new QueryContextCache with capacity ${capacity} for session ${sessionId}`);\n    this.sessionId = sessionId;\n    this.capacity = capacity;\n    this.idMap = new Map(); // Map for id and QCC\n    this.treeSet = new Set(); // Order data as per priority\n    this.priorityMap = new Map(); // Map for priority and QCC\n}\nQueryContextCache.prototype.sortTreeSet = function () {\n    this.treeSet = new Set(Array.from(this.treeSet).sort((a, b) => a.priority - b.priority));\n};\nQueryContextCache.prototype.addQCE = function (qce) {\n    this.idMap.set(qce.id, qce);\n    this.priorityMap.set(qce.priority, qce);\n    this.treeSet.add(qce);\n    this.sortTreeSet();\n    Logger.getInstance().trace(`QCC session ${this.sessionId} - Added QCE: ${JSON.stringify(qce)}`);\n};\n/**\n * Remove an element from the cache.\n *\n * @param {Object} qce element to remove.\n */\nQueryContextCache.prototype.removeQCE = function (qce) {\n    this.idMap.delete(qce.id);\n    this.priorityMap.delete(qce.priority);\n    this.treeSet.delete(qce);\n    Logger.getInstance().trace(`QCC session ${this.sessionId} - Removed QCE: ${JSON.stringify(qce)}`);\n};\n/**\n * Replace the cache element with a new response element. Remove old element exist in the cache\n * and add a new element received.\n *\n * @param {Object} oldQCE an element exist in the cache\n * @param {Object} newQCE a new element just received.\n */\nQueryContextCache.prototype.replaceQCE = function (oldQCE, newQCE) {\n    // Remove old element from the cache\n    this.removeQCE(oldQCE);\n    // Add new element in the cache\n    this.addQCE(newQCE);\n    Logger.getInstance().debug(`QCC session ${this.sessionId} - Replaced QCE: ${JSON.stringify(oldQCE)} with ${JSON.stringify(newQCE)}`);\n};\n/**\n * Merge a new element comes from the server with the existing cache. Merge is based on read time\n * stamp for the same id and based on priority for two different ids.\n *\n * @param {Number} id\n * @param {Number} timestamp\n * @param {Number} priority\n * @param {String} context\n *\n */\nQueryContextCache.prototype.merge = function (newQCE) {\n    Logger.getInstance().debug(`QCC session ${this.sessionId} - Merging QCE: ${JSON.stringify(newQCE)}`);\n    if (this.idMap.has(newQCE.id)) {\n        Logger.getInstance().debug(`QCC session ${this.sessionId} - Element id ${newQCE.id} found in cache`);\n        // ID found in the cache\n        const qce = this.idMap.get(newQCE.id);\n        if (newQCE.timestamp > qce.timestamp) {\n            Logger.getInstance().trace(`QCC session ${this.sessionId} - New element is more recent. Current timestamp: ${qce.timestamp}, new timestamp: ${newQCE.timestamp}`);\n            if (qce.priority === newQCE.priority) {\n                Logger.getInstance().trace(`QCC session ${this.sessionId} - Element priority (${qce.priority}) is the same`);\n                // Same priority, overwrite new data at same place\n                qce.timestamp = newQCE.timestamp;\n                qce.context = newQCE.context;\n            }\n            else {\n                Logger.getInstance().trace(`QCC session ${this.sessionId} - Element priority changed. Current priority: ${qce.priority}, new priority: ${newQCE.priority}`);\n                // Change in priority\n                this.replaceQCE(qce, newQCE);\n            }\n        }\n        else if (newQCE.timestamp === qce.timestamp && qce.priority !== newQCE.priority) {\n            Logger.getInstance().trace(`QCC session ${this.sessionId} - Element timestamp is the same, but priority changes. Current priority: ${qce.priority}, new priority: ${newQCE.priority}`);\n            // Same read timestamp but change in priority\n            this.replaceQCE(qce, newQCE);\n        }\n        else {\n            Logger.getInstance().trace(`QCC session ${this.sessionId} - Element is the same. Doing nothing.`);\n        }\n    }\n    else {\n        Logger.getInstance().trace(`QCC session ${this.sessionId} - New element`);\n        // new id\n        if (this.priorityMap.has(newQCE.priority)) {\n            // Same priority with different id\n            const qce = this.priorityMap.get(newQCE.priority);\n            Logger.getInstance().trace(`QCC session ${this.sessionId} - Element with the same priority found: ${JSON.stringify(qce)}. Replacing with new element: ${JSON.stringify(newQCE)}`);\n            // Replace with new data\n            this.replaceQCE(qce, newQCE);\n        }\n        else {\n            Logger.getInstance().debug(`QCC session ${this.sessionId} - Adding new element to the cache: ${JSON.stringify(newQCE)}`);\n            // new priority\n            // Add new element in the cache\n            this.addQCE(newQCE, newQCE);\n        }\n    }\n};\n/**\n * After the merge, loop through priority list and make sure cache is at most capacity. Remove all\n * other elements from the list based on priority.\n */\nQueryContextCache.prototype.checkCacheCapacity = function () {\n    Logger.getInstance().trace(`QCC session ${this.sessionId} - checkCacheCapacity() called. treeSet size ${this.treeSet.size}, cache capacity ${this.capacity}`);\n    // remove elements based on priority\n    while (this.treeSet.size > this.capacity) {\n        const qce = Array.from(this.treeSet).pop();\n        this.removeQCE(qce);\n    }\n    Logger.getInstance().trace(`QCC session ${this.sessionId} - checkCacheCapacity() returns. treeSet size ${this.treeSet.size}, cache capacity ${this.capacity}`);\n};\n/** Clear the cache. */\nQueryContextCache.prototype.clearCache = function () {\n    Logger.getInstance().trace(`QCC session ${this.sessionId} - clearCache() called`);\n    this.idMap.clear();\n    this.priorityMap.clear();\n    this.treeSet.clear();\n    Logger.getInstance().trace(`QCC session ${this.sessionId} - clearCache() returns. Number of entries in cache now ${this.treeSet.size}`);\n};\nQueryContextCache.prototype.getElements = function () {\n    return this.treeSet;\n};\n/**\n * @param data: the QueryContext Object serialized as a JSON format string\n */\nQueryContextCache.prototype.deserializeQueryContext = function (data) {\n    const stringifyData = JSON.stringify(data);\n    Logger.getInstance().debug(`QCC session ${this.sessionId} - deserializeQueryContext() called: data from server: ${stringifyData}`);\n    if (!data || stringifyData === '{}' || data.entries === null) {\n        this.clearCache();\n        Logger.getInstance().trace(`QCC session ${this.sessionId} - deserializeQueryContext() returns`);\n        this.logCacheEntries();\n        return;\n    }\n    try {\n        // Deserialize the entries. The first entry with priority is the main entry. An example JSON is:\n        // {\n        //   \"entries\": [\n        //    {\n        //     \"id\": 0,\n        //     \"readtimestamp\": 123456789,\n        //     \"priority\": 0,\n        //     \"context\": \"base64 encoded context\"\n        //    },\n        //     {\n        //       \"id\": 1,\n        //       \"readtimestamp\": 123456789,\n        //       \"priority\": 1,\n        //       \"context\": \"base64 encoded context\"\n        //     },\n        //     {\n        //       \"id\": 2,\n        //       \"readtimestamp\": 123456789,\n        //       \"priority\": 2,\n        //       \"context\": \"base64 encoded context\"\n        //     }\n        //   ]\n        const entries = data.entries;\n        if (entries !== null && Array.isArray(entries)) {\n            for (const entryNode of entries) {\n                const entry = this.deserializeQueryContextElement(entryNode);\n                if (entry != null) {\n                    this.merge(entry);\n                }\n                else {\n                    Logger.getInstance().warn(`QCC session ${this.sessionId} - deserializeQueryContextJson: deserializeQueryContextElement meets mismatch field type. Clear the QueryContextCache.`);\n                    this.clearCache();\n                    return;\n                }\n            }\n        }\n    }\n    catch (e) {\n        Logger.getInstance().debug(`QCC session ${this.sessionId} - deserializeQueryContextJson: Exception = ${e.getMessage}`);\n        // Not rethrowing. clear the cache as incomplete merge can lead to unexpected behavior.\n        this.clearCache();\n    }\n    this.checkCacheCapacity();\n    this.logCacheEntries();\n};\nQueryContextCache.prototype.deserializeQueryContextElement = function (node) {\n    const { id, timestamp, priority, context } = node;\n    const entry = new QueryContextElement(id, timestamp, priority, null);\n    if (typeof context === 'string') {\n        entry.context = context;\n    }\n    else if (context === null || context === undefined) {\n        entry.context = null;\n        Logger.getInstance().debug(`QCC session ${this.sessionId} - deserializeQueryContextElement \\`context\\` field is empty`);\n    }\n    else {\n        Logger.getInstance().warn(`QCC session ${this.sessionId} - deserializeQueryContextElement: \\`context\\` field is not String type`);\n        return null;\n    }\n    return entry;\n};\nQueryContextCache.prototype.logCacheEntries = function () {\n    this.treeSet.forEach(function (elem) {\n        Logger.getInstance().debug(`QCC session ${this.sessionId} - Cache Entry: id: ${elem.id} timestamp: ${elem.timestamp} priority: ${elem.priority}`);\n    }, this);\n};\nQueryContextCache.prototype.getSize = function () {\n    return this.treeSet.size;\n};\nQueryContextCache.prototype.getQueryContextDTO = function () {\n    const arr = [];\n    const querycontexts = Array.from(this.getElements());\n    for (let i = 0; i < this.treeSet.size; i++) {\n        arr.push({\n            id: querycontexts[i].id,\n            timestamp: querycontexts[i].timestamp,\n            priority: querycontexts[i].priority,\n            context: { base64Data: querycontexts[i].context } || null,\n        });\n    }\n    return {\n        entries: arr,\n    };\n};\nQueryContextCache.prototype.getSerializeQueryContext = function () {\n    const arr = [];\n    const querycontexts = Array.from(this.getElements());\n    for (let i = 0; i < this.treeSet.size; i++) {\n        arr.push({\n            id: querycontexts[i].id,\n            timestamp: querycontexts[i].timestamp,\n            priority: querycontexts[i].priority,\n            context: querycontexts[i].context || null,\n        });\n    }\n    return {\n        entries: arr,\n    };\n};\nmodule.exports = QueryContextCache;\n//# sourceMappingURL=queryContextCache.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/dist/lib/queryContextCache.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/dist/lib/secret_detector.js":
/*!****************************************************************!*\
  !*** ./node_modules/snowflake-sdk/dist/lib/secret_detector.js ***!
  \****************************************************************/
/***/ ((module) => {

"use strict";
eval("\n/**\n * The secret detector detects sensitive information.\n * It masks secrets that might be leaked from two potential avenues\n *  1. Out of Band Telemetry\n *  2. Logging\n *\n * @param {Object} customPatterns contains 'regex' and 'mask' for customized masking\n * @param {Object} mock\n *\n * @returns {Object}\n * @constructor\n */\nfunction SecretDetector(customPatterns, mock) {\n    const CUSTOM_PATTERNS_REGEX = [];\n    const CUSTOM_PATTERNS_MASK = [];\n    let CUSTOM_PATTERNS_LENGTH;\n    if (customPatterns) {\n        // Check that the customPatterns object contains the keys 'regex' and 'mask\n        if (!customPatterns.regex) {\n            throw new Error(\"The customPatterns object must contain the 'regex' key\");\n        }\n        if (!customPatterns.mask) {\n            throw new Error(\"The customPatterns object must contain the 'mask' key\");\n        }\n        // Also check that their lengths are equal\n        if (customPatterns.regex.length !== customPatterns.mask.length) {\n            throw new Error(\"The customPatterns object must have equal length for both 'regex' and 'mask'\");\n        }\n        CUSTOM_PATTERNS_LENGTH = customPatterns.regex.length;\n        // Push the regex and mask elements onto their respective arrays\n        for (let index = 0; index < CUSTOM_PATTERNS_LENGTH; index++) {\n            CUSTOM_PATTERNS_REGEX.push(new RegExp(`${customPatterns.regex[index]}`, 'gi'));\n            CUSTOM_PATTERNS_MASK.push(String.raw `${customPatterns.mask[index]}`);\n        }\n    }\n    function maskCustomPattern(text) {\n        let result;\n        for (let index = 0; index < CUSTOM_PATTERNS_LENGTH; index++) {\n            result = text.replace(CUSTOM_PATTERNS_REGEX[index], CUSTOM_PATTERNS_MASK[index]);\n            // If the text is replaced, return the result\n            if (text !== result) {\n                return result;\n            }\n        }\n        // If text is unchanged, return the original\n        return text;\n    }\n    const AWS_KEY_PATTERN = new RegExp(String.raw `(aws_key_id|aws_secret_key|access_key_id|secret_access_key)\\s*=\\s*'([^']+)'`, 'gi');\n    const AWS_TOKEN_PATTERN = new RegExp(String.raw `(accessToken|tempToken|keySecret)\\s*:\\s*\"([a-z0-9/+]{32,}={0,2})\"`, 'gi');\n    const SAS_TOKEN_PATTERN = new RegExp(String.raw `(sig|signature|AWSAccessKeyId|password|passcode)=(\\?P<secret>[a-z0-9%/+]{16,})`, 'gi');\n    const PRIVATE_KEY_PATTERN = new RegExp(String.raw `-----BEGIN PRIVATE KEY-----\\\\n([a-z0-9/+=\\\\n]{32,})\\\\n-----END PRIVATE KEY-----`, // pragma: allowlist secret\n    'gim');\n    const PRIVATE_KEY_DATA_PATTERN = new RegExp(String.raw `\"privateKeyData\": \"([a-z0-9/+=\\\\n]{10,})\"`, 'gim');\n    // Colon in the group ([a-z0-9=/:_%-+]{8,}) was added to detect tokens that contain additional details before the actual token.\n    // Such as version or hint (token=ver:1-hint:1233-realToken...).\n    const CONNECTION_TOKEN_PATTERN = new RegExp(String.raw `(token|assertion content)([\\'\\\"\\s:=]+)([a-z0-9=/:_\\%\\-\\+]{8,})`, 'gi');\n    const PASSWORD_PATTERN = new RegExp(String.raw `(password|pwd)([\\'\\\"\\s:=]+)([a-z0-9!\\\"#\\$%&\\\\\\'\\(\\)\\*\\+\\,-\\./:;<=>\\?\\@\\[\\]\\^_` +\n        '`' +\n        String.raw `\\{\\|\\}~]{8,})`, 'gi');\n    const PASSCODE_PATTERN = new RegExp(String.raw `(passcode|otp|pin|otac)\\s*([:=])\\s*([0-9]{4,6})`, 'gi');\n    const OAUTH_CLIENT_SECRET_PATTERN = new RegExp(String.raw `(oauthClientId|oauthClientSecret|clientSecret)([\\'\\\"\\s:=]+)([a-z0-9!\\\"#\\$%&\\\\\\'\\(\\)\\*\\+\\,-\\./:;<=>\\?\\@\\[\\]\\^_` +\n        '`' +\n        String.raw `\\{\\|\\}~]{8,})`, 'gi');\n    function maskAwsKeys(text) {\n        return text.replace(AWS_KEY_PATTERN, String.raw `$1$2****`);\n    }\n    function maskAwsToken(text) {\n        return text.replace(AWS_TOKEN_PATTERN, String.raw `$1\":\"XXXX\"`);\n    }\n    function maskSasToken(text) {\n        return text.replace(SAS_TOKEN_PATTERN, String.raw `$1=****`);\n    }\n    function maskPrivateKey(text) {\n        return text.replace(PRIVATE_KEY_PATTERN, String.raw `-----BEGIN PRIVATE KEY-----\\\\\\\\nXXXX\\\\\\\\n-----END PRIVATE KEY-----`); // pragma: allowlist secret\n    }\n    function maskPrivateKeyData(text) {\n        return text.replace(PRIVATE_KEY_DATA_PATTERN, String.raw `\"privateKeyData\": \"XXXX\"`);\n    }\n    function maskConnectionToken(text) {\n        return text.replace(CONNECTION_TOKEN_PATTERN, String.raw `$1$2****`);\n    }\n    function maskPassword(text) {\n        return text.replace(PASSWORD_PATTERN, String.raw `$1$2****`);\n    }\n    function maskPasscode(text) {\n        return text.replace(PASSCODE_PATTERN, String.raw `$1$2****`);\n    }\n    function maskClientSecret(text) {\n        return text.replace(OAUTH_CLIENT_SECRET_PATTERN, String.raw `$1$2****`);\n    }\n    /**\n     * Masks any secrets.\n     *\n     * @param {String} text may contain a secret.\n     *\n     * @returns {Object} the masked string.\n     */\n    this.maskSecrets = function (text) {\n        let result;\n        if (!text) {\n            result = {\n                masked: false,\n                maskedtxt: text,\n                errstr: null,\n            };\n            return result;\n        }\n        let masked = false;\n        let maskedtxt = '';\n        let errstr = null;\n        try {\n            if (mock) {\n                mock.execute();\n            }\n            maskedtxt = maskClientSecret(maskPasscode(maskConnectionToken(maskPassword(maskPrivateKeyData(maskPrivateKey(maskAwsToken(maskSasToken(maskAwsKeys(text)))))))));\n            if (CUSTOM_PATTERNS_LENGTH > 0) {\n                maskedtxt = maskCustomPattern(maskedtxt);\n            }\n            if (maskedtxt !== text) {\n                masked = true;\n            }\n        }\n        catch (err) {\n            masked = true;\n            maskedtxt = err.toString();\n            errstr = err.toString();\n        }\n        result = {\n            masked: masked,\n            maskedtxt: maskedtxt,\n            errstr: errstr,\n        };\n        return result;\n    };\n}\nmodule.exports = SecretDetector;\n//# sourceMappingURL=secret_detector.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/dist/lib/secret_detector.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/dist/lib/services/large_result_set.js":
/*!**************************************************************************!*\
  !*** ./node_modules/snowflake-sdk/dist/lib/services/large_result_set.js ***!
  \**************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst EventEmitter = (__webpack_require__(/*! events */ \"events\").EventEmitter);\nconst Util = __webpack_require__(/*! ../util */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/util.js\");\nconst Errors = __webpack_require__(/*! ../errors */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/errors.js\");\nconst Logger = __webpack_require__(/*! ../logger */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/logger.js\");\nconst ErrorCodes = Errors.codes;\n/**\n * Creates a new instance of an LargeResultSetService.\n *\n * @param {Object} connectionConfig\n * @param {Object} httpClient\n * @constructor\n */\nfunction LargeResultSetService(connectionConfig, httpClient) {\n    // validate input\n    Errors.assertInternal(Util.isObject(connectionConfig));\n    Errors.assertInternal(Util.isObject(httpClient));\n    /**\n     * Should HTTP client error be retried\n     * @param err Client error or null/undefined\n     * @return {boolean}\n     */\n    function isRetryableClientError(err) {\n        return (err &&\n            (err.code === 'ECONNRESET' ||\n                err.code === 'ETIMEDOUT' ||\n                // error code ECONNABORTED is thrown from axios on timeout\n                (err.name === 'AxiosError' && err.code === 'ECONNABORTED')));\n    }\n    function isRetryableError(response, err) {\n        // https://aws.amazon.com/articles/1904 (Handling Errors)\n        // Note: 403's are retried because of a bug in S3/Blob\n        return Util.isRetryableHttpError(response, true) || isRetryableClientError(err);\n    }\n    function isUnsuccessfulResponse(response) {\n        // even for 200 OK S3 can return xml error (large files are normally binary)\n        return (response &&\n            (response.statusCode !== 200 ||\n                response.getResponseHeader('Content-Type') === 'application/xml'));\n    }\n    /**\n     * Issues a request to get an object from S3/Blob.\n     *\n     * @param {Object} options\n     */\n    this.getObject = function getObject(options) {\n        let numRetries = 0, sleep = 1;\n        // get the maximum number of retries\n        let maxNumRetries = options.maxNumRetries;\n        if (!Util.exists(maxNumRetries)) {\n            maxNumRetries = connectionConfig.getRetryLargeResultSetMaxNumRetries();\n        }\n        Errors.assertInternal(Util.isNumber(maxNumRetries) && maxNumRetries >= 0);\n        // invoked when the request completes\n        const callback = function callback(err, response, body) {\n            // err happens on timeouts and response is passed when server responded\n            if (err || isUnsuccessfulResponse(response)) {\n                // if we're running in DEBUG loglevel, probably we want to see the full error too\n                const logErr = err\n                    ? JSON.stringify(err, Object.getOwnPropertyNames(err))\n                    : `status: ${JSON.stringify(response.status)} ${JSON.stringify(response.statusText)}` +\n                        ` headers: ${JSON.stringify(response.headers)}`;\n                Logger.getInstance().debug('Encountered an error when getting data from cloud storage: ' + logErr);\n                // if we haven't exceeded the maximum number of retries yet and the\n                // server came back with a retryable error code.\n                if (numRetries < maxNumRetries && isRetryableError(response, err)) {\n                    // increment the number of retries\n                    numRetries++;\n                    // use exponential backoff with decorrelated jitter to compute the\n                    // next sleep time:\n                    const cap = connectionConfig.getRetryLargeResultSetMaxSleepTime();\n                    sleep = Util.nextSleepTime(1, cap, sleep);\n                    // wait the appropriate amount of time before retrying the request\n                    const nextSendRequestWaitTimeMs = sleep * 1000;\n                    Logger.getInstance().trace('Request will be retried after %d milliseconds', Math.floor(nextSendRequestWaitTimeMs));\n                    setTimeout(sendRequest, nextSendRequestWaitTimeMs);\n                    return;\n                }\n                else {\n                    Logger.getInstance().trace(\"Request won't be retried\");\n                    if (isUnsuccessfulResponse(response)) {\n                        err = Errors.createLargeResultSetError(ErrorCodes.ERR_LARGE_RESULT_SET_RESPONSE_FAILURE, response);\n                    }\n                    else {\n                        err = Errors.createNetworkError(ErrorCodes.ERR_LARGE_RESULT_SET_NETWORK_COULD_NOT_CONNECT, err);\n                    }\n                }\n            }\n            if (response) {\n                Logger.getInstance().trace(`Response headers are: ${JSON.stringify(response.headers)}`);\n            }\n            // if we have an error, clear the body\n            if (err) {\n                body = null;\n            }\n            // if a callback was specified, invoke it\n            if (Util.isFunction(options.callback)) {\n                try {\n                    options.callback(err, body);\n                }\n                catch (e) {\n                    Logger.getInstance().error(`Callback failed with ${e}`);\n                }\n            }\n        };\n        const sendRequest = function sendRequest() {\n            // issue a request to get the object from S3/Blob\n            httpClient.request({\n                method: 'GET',\n                url: options.url,\n                headers: options.headers,\n                gzip: true, // gunzip the response\n                appendRequestId: false,\n                callback,\n            });\n        };\n        sendRequest();\n    };\n}\nUtil.inherits(LargeResultSetService, EventEmitter);\nmodule.exports = LargeResultSetService;\n//# sourceMappingURL=large_result_set.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/dist/lib/services/large_result_set.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/dist/lib/services/sf.js":
/*!************************************************************!*\
  !*** ./node_modules/snowflake-sdk/dist/lib/services/sf.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n/*\n  SnowflakeService state machine\n\n  Preconnected - enter()      - Preconnected\n               - connect()    - Connecting\n               - request()    - Connecting\n               - destroy()    - Preconnected\n\n  Connecting   - enter()      - async operation\n                                - Connected if operation succeeds\n                                - Disconnected if network error (we need another PreConnected state)\n                                - Disconnected if operation fails\n                 connect()    - error\n                 request()    - enqueue\n                 destroy()    - enqueue\n\n  Connected    - enter()      - Connected\n                 connect()    - error\n                 request()    - async operation\n                                - Connected if operation succeeds\n                                - Connected if network error\n                                - Renewing if GS says session token has expired\n                                - Disconnected if GS says session token is invalid\n                 destroy()    - async operation\n                              - Disconnected if operation succeeds\n                              - Connected if network error\n                              - Connected if operation fails\n\n  Renewing     - enter()      - async operation\n                                - Connected if operation succeeds\n                                - Connected if network error\n                                - Disconnected if operation fails\n               - connect()    - error\n               - request()    - enqueue\n               - destroy()    - enqueue\n\n  Disconnected - enter()      - Disconnected\n               - connect()    - Disconnected\n               - request()    - Disconnected\n               - destroy()    - Disconnected\n */\nconst { v4: uuidv4 } = __webpack_require__(/*! uuid */ \"(rsc)/./node_modules/snowflake-sdk/node_modules/uuid/dist/esm-node/index.js\");\nconst EventEmitter = (__webpack_require__(/*! events */ \"events\").EventEmitter);\nconst Util = __webpack_require__(/*! ../util */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/util.js\");\nconst Errors = __webpack_require__(/*! ../errors */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/errors.js\");\nconst ErrorCodes = Errors.codes;\nconst Url = __webpack_require__(/*! url */ \"url\");\nconst QueryString = __webpack_require__(/*! querystring */ \"querystring\");\nconst Parameters = __webpack_require__(/*! ../parameters */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/parameters.js\");\nconst GSErrors = __webpack_require__(/*! ../constants/gs_errors */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/constants/gs_errors.js\");\nconst QueryContextCache = __webpack_require__(/*! ../queryContextCache */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/queryContextCache.js\");\nconst Logger = __webpack_require__(/*! ../logger */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/logger.js\");\nconst GlobalConfig = __webpack_require__(/*! ../global_config */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/global_config.js\");\nconst AuthenticationTypes = __webpack_require__(/*! ../authentication/authentication_types */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/authentication/authentication_types.js\");\nconst AuthOkta = __webpack_require__(/*! ../authentication/auth_okta */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/authentication/auth_okta.js\");\nconst AuthKeypair = __webpack_require__(/*! ../authentication/auth_keypair */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/authentication/auth_keypair.js\");\nconst AuthIDToken = __webpack_require__(/*! ../authentication/auth_idtoken */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/authentication/auth_idtoken.js\");\nconst Authenticator = __webpack_require__(/*! ../authentication/authentication */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/authentication/authentication.js\");\nconst AuthOauthAuthorizationCode = __webpack_require__(/*! ../authentication/auth_oauth_authorization_code */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/authentication/auth_oauth_authorization_code.js\");\nconst sfParams = __webpack_require__(/*! ../constants/sf_params */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/constants/sf_params.js\");\nfunction isRetryableNetworkError(err) {\n    // anything other than REVOKED error can be retryable.\n    return (!Object.prototype.hasOwnProperty.call(err, 'cause') ||\n        err.cause === undefined ||\n        !Object.prototype.hasOwnProperty.call(err.cause, 'code') ||\n        (err.cause.code !== ErrorCodes.ERR_OCSP_REVOKED &&\n            err.cause.code !== 'DEPTH_ZERO_SELF_SIGNED_CERT' &&\n            err.cause.code !== 'CERT_HAS_EXPIRED' &&\n            err.cause.code !== 'UNABLE_TO_VERIFY_LEAF_SIGNATURE' &&\n            err.cause.code !== 'SELF_SIGNED_CERT_IN_CHAIN' &&\n            err.cause.code !== ErrorCodes.ERR_CRL_ERROR));\n}\nfunction isRetryableHttpError(err) {\n    return (Object.prototype.hasOwnProperty.call(err, 'response') &&\n        Util.isRetryableHttpError(err.response, false));\n}\n/**\n * Creates a new SnowflakeService instance.\n *\n * @param {Object} connectionConfig\n * @param {Object} httpClient\n * @param {Object} [config]\n * @constructor\n */\nfunction SnowflakeService(connectionConfig, httpClient, config) {\n    // validate input\n    Errors.assertInternal(Util.isObject(connectionConfig));\n    Errors.assertInternal(Util.isObject(httpClient));\n    Errors.assertInternal(!Util.exists(config) || Util.isObject(config));\n    // if a config object was specified, verify\n    // that it has all the information we need\n    let tokenInfoConfig;\n    if (Util.exists(config)) {\n        Errors.assertInternal(Util.isObject(config));\n        Errors.assertInternal(Util.isObject(config.tokenInfo));\n        tokenInfoConfig = config.tokenInfo;\n    }\n    else if (connectionConfig.sessionToken) {\n        tokenInfoConfig = {\n            sessionToken: connectionConfig.sessionToken,\n            masterToken: connectionConfig.masterToken || connectionConfig.sessionToken,\n            sessionTokenExpirationTime: connectionConfig.sessionTokenExpirationTime || Date.now() + 1000 * 60 * 60 * 24,\n            masterTokenExpirationTime: connectionConfig.masterTokenExpirationTime || Date.now() + 1000 * 60 * 60 * 24,\n        };\n    }\n    // create a new TokenInfo instance\n    const tokenInfo = new TokenInfo(tokenInfoConfig);\n    try {\n        Logger.getInstance().debug('Retrieving authenticator');\n        this.authenticator = Authenticator.getAuthenticator(connectionConfig, httpClient);\n    }\n    catch (error) {\n        const message = `Failed to initialize authenticator: ${error}`;\n        Logger.getInstance().error(message);\n        throw Errors.createClientError(ErrorCodes.ERR_CONN_CREATE_INVALID_AUTH_UNSUPPORTED, true, message);\n    }\n    // create state objects for all the different states we can be in\n    const stateOptions = {\n        snowflakeService: this,\n        httpClient: httpClient,\n        connectionConfig: connectionConfig,\n        tokenInfo: tokenInfo,\n    };\n    const statePristine = new StatePristine(stateOptions);\n    const stateConnecting = new StateConnecting(stateOptions);\n    const stateConnected = new StateConnected(stateOptions);\n    const stateRenewing = new StateRenewing(stateOptions);\n    const stateDisconnected = new StateDisconnected(stateOptions);\n    let currentState;\n    /**\n     * Transitions to a given state.\n     *\n     * @param {Object} state\n     * @param {Object} [transitionContext]\n     */\n    const transitionTo = function (state, transitionContext) {\n        // this check is necessary to make sure we don't re-enter a transient state\n        // like Renewing when we're already in it\n        if (currentState !== state) {\n            // if we have a current state, exit it; the null check is necessary\n            // because the currentState is undefined at bootstrap time when we\n            // transition to the first state\n            if (currentState) {\n                currentState.exit();\n            }\n            // update the current state\n            currentState = state;\n            // enter the new state\n            currentState.enter(transitionContext);\n        }\n    };\n    /**\n     * Set the session id for the current SnowflakeService\n     * @param sessionId\n     */\n    this.setSessionId = function (sessionId) {\n        this.sessionId = sessionId;\n    };\n    /**\n     * Get the session id.\n     * @returns {number}\n     */\n    this.getSessionId = function () {\n        return this.sessionId;\n    };\n    /**\n     * Transitions to the Pristine state.\n     *\n     * {Object} [transitionContext]\n     */\n    this.transitionToPristine = function (transitionContext) {\n        transitionTo(statePristine, transitionContext);\n    };\n    /**\n     * Transitions to the Connecting state.\n     *\n     * {Object} [transitionContext]\n     */\n    this.transitionToConnecting = function (transitionContext) {\n        transitionTo(stateConnecting, transitionContext);\n    };\n    /**\n     * Transitions to the Connected state.\n     *\n     * {Object} [transitionContext]\n     */\n    this.transitionToConnected = function (transitionContext) {\n        transitionTo(stateConnected, transitionContext);\n    };\n    /**\n     * Transitions to the Renewing state.\n     *\n     * {Object} [transitionContext]\n     */\n    this.transitionToRenewing = function (transitionContext) {\n        transitionTo(stateRenewing, transitionContext);\n    };\n    /**\n     * Transitions to the Disconnected state.\n     *\n     * {Object} [transitionContext]\n     */\n    this.transitionToDisconnected = function (transitionContext) {\n        transitionTo(stateDisconnected, transitionContext);\n        // clear the tokens because we're in a fatal state and we don't want the\n        // tokens to be available via getConfig() anymore\n        tokenInfo.clearTokens();\n    };\n    /**\n     * Returns a configuration object that can be passed to the SnowflakeService\n     * constructor to get an equivalent SnowflakeService object.\n     *\n     * @returns {Object}\n     */\n    this.getConfig = function () {\n        return {\n            tokenInfo: tokenInfo.getConfig(),\n        };\n    };\n    /**\n     * Establishes a connection to Snowflake.\n     *\n     * @param {Object} options\n     */\n    this.connect = function (options) {\n        new OperationConnect(options).validate().execute();\n    };\n    /**\n     * Issues a connect-continue request to Snowflake.\n     *\n     * @param {Object} [options]\n     */\n    this.continue = function (options) {\n        new OperationContinue(options).validate().execute();\n    };\n    /**\n     * Issues a generic request to Snowflake.\n     *\n     * @param {Object} options\n     */\n    this.request = function (options) {\n        new OperationRequest(options).validate().execute();\n    };\n    /**\n     * Issues a generic async request to Snowflake.\n     *\n     * @param {Object} options\n     */\n    this.requestAsync = async function (options) {\n        return await new OperationRequest(options).validate().executeAsync();\n    };\n    /**\n     * Terminates the current connection to Snowflake.\n     *\n     * @param {Object} options\n     */\n    this.destroy = function (options) {\n        this.clearCache();\n        new OperationDestroy(options).validate().execute();\n    };\n    /**\n     * Creates a new OperationAbstract.\n     *\n     * @param {Object} options\n     * @constructor\n     */\n    function OperationAbstract(options) {\n        this.options = options;\n    }\n    /**\n     * Validates the operation options.\n     *\n     * @returns {Object} the operation.\n     */\n    OperationAbstract.prototype.validate = function () {\n        return this;\n    };\n    /**\n     * Executes the operation.\n     */\n    OperationAbstract.prototype.execute = function () { };\n    /**\n     * Creates a new OperationConnect.\n     *\n     * @param {Object} options\n     * @constructor\n     */\n    function OperationConnect(options) {\n        OperationAbstract.apply(this, [options]);\n    }\n    Util.inherits(OperationConnect, OperationAbstract);\n    /**\n     * @inheritDoc\n     */\n    OperationConnect.prototype.validate = function () {\n        // verify that the options object contains a callback function\n        const options = this.options;\n        Errors.assertInternal(Util.isObject(options) && Util.isFunction(options.callback));\n        return this;\n    };\n    /**\n     * @inheritDoc\n     */\n    OperationConnect.prototype.execute = function () {\n        currentState.connect(this.options);\n    };\n    /**\n     * Creates a new OperationContinue.\n     *\n     * @param {Object} options\n     * @constructor\n     */\n    function OperationContinue(options) {\n        OperationAbstract.apply(this, [options]);\n    }\n    Util.inherits(OperationContinue, OperationAbstract);\n    /**\n     * @inheritDoc\n     */\n    OperationContinue.prototype.validate = function () {\n        // verify that the options contain a json object\n        const options = this.options;\n        Errors.assertInternal(Util.isObject(options) && Util.isObject(options.json));\n        return this;\n    };\n    /**\n     * @inheritDoc\n     */\n    OperationContinue.prototype.execute = function () {\n        currentState.continue(this.options);\n    };\n    /**\n     * Creates a new OperationRequest.\n     *\n     * @param {Object} options\n     * @constructor\n     */\n    function OperationRequest(options) {\n        OperationAbstract.apply(this, [options]);\n    }\n    Util.inherits(OperationRequest, OperationAbstract);\n    /**\n     * @inheritDoc\n     */\n    OperationRequest.prototype.validate = function () {\n        // verify that the options object contains all the necessary information\n        const options = this.options;\n        Errors.assertInternal(Util.isObject(options));\n        Errors.assertInternal(Util.isString(options.method));\n        Errors.assertInternal(!Util.exists(options.headers) || Util.isObject(options.headers));\n        Errors.assertInternal(Util.isString(options.url));\n        Errors.assertInternal(!Util.exists(options.json) || Util.isObject(options.json));\n        return this;\n    };\n    /**\n     * @inheritDoc\n     */\n    OperationRequest.prototype.execute = function () {\n        currentState.request(this.options);\n    };\n    /**\n     * @inheritDoc\n     */\n    OperationRequest.prototype.executeAsync = async function () {\n        return await currentState.requestAsync(this.options);\n    };\n    /**\n     * Creates a new OperationDestroy.\n     *\n     * @param {Object} options\n     * @constructor\n     */\n    function OperationDestroy(options) {\n        OperationAbstract.apply(this, [options]);\n    }\n    Util.inherits(OperationDestroy, OperationAbstract);\n    /**\n     * @inheritDoc\n     */\n    OperationDestroy.prototype.validate = function () {\n        // verify that the options object contains a callback function\n        const options = this.options;\n        Errors.assertInternal(Util.isObject(options) && Util.isFunction(options.callback));\n        return this;\n    };\n    /**\n     * @inheritDoc\n     */\n    OperationDestroy.prototype.execute = function () {\n        // delegate to current state\n        currentState.destroy(this.options);\n    };\n    /* All queued operations will be added to this array */\n    const operationQueue = [];\n    /**\n     * Appends a request operation to the queue.\n     *\n     * @param {Object} options\n     */\n    this.enqueueRequest = function (options) {\n        operationQueue.push(new OperationRequest(options));\n    };\n    /**\n     * Appends a destroy operation to the queue.\n     *\n     * @param {Object} options\n     */\n    this.enqueueDestroy = function (options) {\n        operationQueue.push(new OperationDestroy(options));\n    };\n    /**\n     * Executes all the operations in the queue.\n     */\n    this.drainOperationQueue = function () {\n        // execute all the operations in the queue\n        for (let index = 0, length = operationQueue.length; index < length; index++) {\n            operationQueue[index].execute();\n        }\n        // empty the queue\n        operationQueue.length = 0;\n    };\n    this.isConnected = function () {\n        return (currentState === stateConnected ||\n            currentState === stateConnecting ||\n            currentState === stateRenewing);\n    };\n    this.getServiceName = function () {\n        return Parameters.getValue(Parameters.names.SERVICE_NAME);\n    };\n    this.getClientSessionKeepAlive = function () {\n        return Parameters.getValue(Parameters.names.CLIENT_SESSION_KEEP_ALIVE);\n    };\n    this.getClientSessionKeepAliveHeartbeatFrequency = function () {\n        return Parameters.getValue(Parameters.names.CLIENT_SESSION_KEEP_ALIVE_HEARTBEAT_FREQUENCY);\n    };\n    this.getJsTreatIntegerAsBigInt = function () {\n        return Parameters.getValue(Parameters.names.JS_TREAT_INTEGER_AS_BIGINT);\n    };\n    this.getAuthenticator = function () {\n        return this.authenticator;\n    };\n    // if we don't have any tokens, start out as pristine\n    if (tokenInfo.isEmpty()) {\n        this.transitionToPristine();\n    }\n    else {\n        // we're already connected\n        this.transitionToConnected();\n    }\n    /**\n     * Issues a post request to Snowflake.\n     *\n     * @param {Object} options\n     */\n    this.postAsync = function (options) {\n        return new OperationRequest(options).validate().executeAsync();\n    };\n    this.getQueryContextDTO = function () {\n        if (!this.qcc) {\n            return;\n        }\n        return this.qcc.getQueryContextDTO();\n    };\n    this.deserializeQueryContext = function (data) {\n        if (!this.qcc) {\n            return;\n        }\n        this.qcc.deserializeQueryContext(data);\n    };\n    this.clearCache = function () {\n        if (!this.qcc) {\n            return;\n        }\n        this.qcc.clearCache();\n    };\n    this.initializeQueryContextCache = function (size) {\n        if (!connectionConfig.getDisableQueryContextCache()) {\n            this.qcc = new QueryContextCache(size, this.getSessionId());\n        }\n        else {\n            Logger.getInstance().debug(`QueryContextCache initialization skipped as it is disabled for connection with sessionId: ${this.sessionId}`);\n        }\n    };\n    // testing purpose\n    this.getQueryContextCacheSize = function () {\n        if (!this.qcc) {\n            return;\n        }\n        return this.qcc.getSize();\n    };\n}\nUtil.inherits(SnowflakeService, EventEmitter);\nmodule.exports = SnowflakeService;\n///////////////////////////////////////////////////////////////////////////\n////                StateAbstract                                      ////\n///////////////////////////////////////////////////////////////////////////\n/**\n * Creates a new StateAbstract instance.\n *\n * @param {Object} options\n * @constructor\n */\nfunction StateAbstract(options) {\n    /**\n     * Issues an http request to Snowflake.\n     *\n     * @param {Object} requestOptions\n     * @param {Object} httpClient\n     * @param {Object} auth\n     * @returns {Object} the http request object.\n     */\n    function sendHttpRequest(requestOptions, httpClient, auth) {\n        const params = requestOptions.params || {};\n        if (!requestOptions.excludeGuid) {\n            addGuidToParams(params);\n        }\n        const realRequestOptions = {\n            method: requestOptions.method,\n            headers: requestOptions.headers,\n            url: requestOptions.absoluteUrl,\n            gzip: requestOptions.gzip,\n            json: requestOptions.json,\n            params: params,\n            callback: async function (err, response, body) {\n                // if we got an error, wrap it into a network error\n                if (err) {\n                    // if we're running in DEBUG loglevel, probably we want to see the full error instead\n                    Logger.getInstance().debug('Encountered an error when sending the request. Details: ' +\n                        JSON.stringify(err, Object.getOwnPropertyNames(err)));\n                    err = Errors.createNetworkError(ErrorCodes.ERR_SF_NETWORK_COULD_NOT_CONNECT, err);\n                }\n                else if (!response) {\n                    // empty response\n                    err = Errors.createUnexpectedContentError(ErrorCodes.ERR_SF_RESPONSE_NOT_JSON, '(EMPTY)');\n                }\n                else if (Object.prototype.hasOwnProperty.call(response, 'statusCode') &&\n                    response.statusCode !== 200) {\n                    // if we didn't get a 200, the request failed\n                    if (response.statusCode === 401 && response.body) {\n                        let innerCode;\n                        try {\n                            innerCode = JSON.parse(response.body).code;\n                        }\n                        catch (e) {\n                            err = Errors.createRequestFailedError(ErrorCodes.ERR_SF_RESPONSE_FAILURE, response);\n                            Logger.getInstance().debug('HTTP Error: %s', response.statusCode);\n                        }\n                        if (innerCode === '390104') {\n                            err = Errors.createRequestFailedError(ErrorCodes.ERR_SF_RESPONSE_INVALID_TOKEN, response);\n                            Logger.getInstance().debug('HTTP Error: %s', response.statusCode);\n                        }\n                        else {\n                            err = Errors.createRequestFailedError(ErrorCodes.ERR_SF_RESPONSE_FAILURE, response);\n                            Logger.getInstance().debug('HTTP Error: %s', response.statusCode);\n                        }\n                    }\n                    else {\n                        err = Errors.createRequestFailedError(ErrorCodes.ERR_SF_RESPONSE_FAILURE, response);\n                        Logger.getInstance().debug('HTTP Error: %s', response.statusCode);\n                    }\n                }\n                else {\n                    // if the response body is a non-empty string and the response is\n                    // supposed to contain json, try to json-parse the body\n                    if (Util.isString(body) &&\n                        response.getResponseHeader('Content-Type') === 'application/json') {\n                        try {\n                            if (body.includes('smkId')) {\n                                body = Util.convertSmkIdToString(body);\n                            }\n                            body = JSON.parse(body);\n                        }\n                        catch (parseError) {\n                            // we expected to get json\n                            err = Errors.createUnexpectedContentError(ErrorCodes.ERR_SF_RESPONSE_NOT_JSON, response.body);\n                        }\n                    }\n                    // if we were able to successfully json-parse the body and the\n                    // success flag is false, the operation we tried to perform failed\n                    if (body && !body.success) {\n                        const data = body.data;\n                        if ((body.code === GSErrors.code.ID_TOKEN_INVALID && auth instanceof AuthIDToken) ||\n                            (body.code === GSErrors.code.OAUTH_TOKEN_EXPIRED &&\n                                auth instanceof AuthOauthAuthorizationCode)) {\n                            Logger.getInstance().debug('ID Token being used has expired. Reauthenticating');\n                            await auth.reauthenticate(requestOptions.json);\n                            return httpClient.request(realRequestOptions);\n                        }\n                        err = Errors.createOperationFailedError(body.code, data, body.message, data && data.sqlState ? data.sqlState : undefined);\n                    }\n                }\n                // if we have an error, clear the body\n                if (err) {\n                    body = undefined;\n                }\n                // if a callback was specified, invoke it\n                if (Util.isFunction(requestOptions.callback)) {\n                    await requestOptions.callback.apply(requestOptions.scope, [err, body, response]);\n                }\n            },\n        };\n        if (requestOptions.retry > 2) {\n            const includesParam = requestOptions.url.includes('?');\n            realRequestOptions.url += includesParam ? '&' : '?';\n            realRequestOptions.url +=\n                'clientStartTime=' +\n                    requestOptions.startTime +\n                    '&' +\n                    'retryCount=' +\n                    (requestOptions.retry - 1);\n        }\n        return httpClient.request(realRequestOptions);\n    }\n    this.snowflakeService = options.snowflakeService;\n    this.httpClient = options.httpClient;\n    this.connectionConfig = options.connectionConfig;\n    this.tokenInfo = options.tokenInfo;\n    const connectionConfig = options.connectionConfig;\n    const snowflakeService = options.snowflakeService;\n    const httpClient = options.httpClient;\n    ///////////////////////////////////////////////////////////////////////////\n    ////                Request                                            ////\n    ///////////////////////////////////////////////////////////////////////////\n    /**\n     * Creates a new Request to Snowflake.\n     *\n     * @param {Object} requestOptions\n     * @constructor\n     */\n    function Request(requestOptions) {\n        this.requestOptions = requestOptions;\n    }\n    /**\n     * Sends out the request.\n     *\n     * @returns {Object} the request that was issued.\n     */\n    Request.prototype.sendAsync = async function () {\n        // pre-process the request options\n        this.preprocessOptions(this.requestOptions);\n        // issue the http request\n        return new Promise((resolve, reject) => {\n            sendHttpRequest({\n                ...this.requestOptions,\n                callback: (err, _body, response) => {\n                    if (err) {\n                        reject(err);\n                    }\n                    else {\n                        resolve(response);\n                    }\n                },\n            }, httpClient, snowflakeService.getAuthenticator());\n        });\n    };\n    function addGuidToParams(params) {\n        // In case of repeated requests for the same request ID,\n        // the Global UID is added for better traceability.\n        const guid = uuidv4();\n        params[sfParams.paramsNames.SF_REQUEST_GUID] = guid;\n    }\n    /**\n     * Sends out the request.\n     *\n     * @returns {Object} the request that was issued.\n     */\n    Request.prototype.send = function () {\n        // pre-process the request options\n        this.preprocessOptions(this.requestOptions);\n        // issue the http request\n        sendHttpRequest(this.requestOptions, httpClient, snowflakeService.getAuthenticator());\n    };\n    /**\n     * Pre-processes the request options just before the request is sent.\n     *\n     * @param {Object} requestOptions\n     */\n    Request.prototype.preprocessOptions = function (requestOptions) {\n        // augment the headers with the default request headers\n        requestOptions.headers = Util.apply(this.getDefaultReqHeaders(), requestOptions.headers || {});\n        if (Util.isLoginRequest(requestOptions.url)) {\n            Util.apply(requestOptions.headers, {\n                CLIENT_APP_VERSION: requestOptions.json.data.CLIENT_APP_VERSION,\n                CLIENT_APP_ID: requestOptions.json.data.CLIENT_APP_ID,\n            });\n        }\n        // augment the options with the absolute url\n        requestOptions.absoluteUrl = this.buildFullUrl(requestOptions.url);\n        requestOptions.excludeGuid = !Util.exists(requestOptions.excludeGuid)\n            ? false\n            : requestOptions.excludeGuid;\n    };\n    /**\n     * Converts a relative url to an absolute url.\n     *\n     * @param {String} relativeUrl\n     *\n     * @returns {String}\n     */\n    Request.prototype.buildFullUrl = function (relativeUrl) {\n        return connectionConfig.accessUrl + relativeUrl;\n    };\n    /**\n     * Returns the default headers to send with every request.\n     *\n     * @returns {Object}\n     */\n    Request.prototype.getDefaultReqHeaders = function () {\n        return {\n            Accept: 'application/json',\n            'Content-Type': 'application/json',\n        };\n    };\n    ///////////////////////////////////////////////////////////////////////////\n    ////                SessionTokenRequest                                ////\n    ///////////////////////////////////////////////////////////////////////////\n    /**\n     * @constructor\n     */\n    function SessionTokenRequest() {\n        Request.apply(this, arguments);\n    }\n    Util.inherits(SessionTokenRequest, Request);\n    /**\n     * @inheritDoc\n     */\n    SessionTokenRequest.prototype.preprocessOptions = function (requestOptions) {\n        // call super\n        Request.prototype.preprocessOptions.apply(this, arguments);\n        // add the current session token to the request headers\n        requestOptions.headers = requestOptions.headers || {};\n        requestOptions.headers.Authorization =\n            'Snowflake Token=\"' + options.tokenInfo.getSessionToken() + '\"';\n        if (Util.string.isNotNullOrEmpty(Parameters.getValue(Parameters.names.SERVICE_NAME))) {\n            requestOptions.headers['X-Snowflake-Service'] = Parameters.getValue(Parameters.names.SERVICE_NAME);\n        }\n    };\n    ///////////////////////////////////////////////////////////////////////////\n    ////                MasterTokenRequest                                 ////\n    ///////////////////////////////////////////////////////////////////////////\n    /**\n     * @constructor\n     */\n    function MasterTokenRequest() {\n        Request.apply(this, arguments);\n    }\n    Util.inherits(MasterTokenRequest, Request);\n    /**\n     * @inheritDoc\n     */\n    MasterTokenRequest.prototype.preprocessOptions = function (requestOptions) {\n        // call super\n        Request.prototype.preprocessOptions.apply(this, arguments);\n        // add the current master token to the request headers\n        requestOptions.headers = requestOptions.headers || {};\n        requestOptions.headers.Authorization =\n            'Snowflake Token=\"' + options.tokenInfo.getMasterToken() + '\"';\n    };\n    ///////////////////////////////////////////////////////////////////////////\n    ////                UnauthenticatedRequest                             ////\n    ///////////////////////////////////////////////////////////////////////////\n    /**\n     * Creates a new UnauthenticatedRequest.\n     *\n     * @constructor\n     */\n    function UnauthenticatedRequest() {\n        Request.apply(this, arguments);\n    }\n    Util.inherits(UnauthenticatedRequest, Request);\n    /**\n     * Creates a new SessionTokenRequest.\n     *\n     * @param {Object} requestOptions\n     *\n     * @returns {Object}\n     */\n    this.createSessionTokenRequest = function (requestOptions) {\n        return new SessionTokenRequest(requestOptions);\n    };\n    /**\n     * Creates a new MasterTokenRequest.\n     *\n     * @param {Object} requestOptions\n     *\n     * @returns {Object}\n     */\n    this.createMasterTokenRequest = function (requestOptions) {\n        return new MasterTokenRequest(requestOptions);\n    };\n    /**\n     * Creates a new UnauthenticatedRequest.\n     *\n     * @param {Object} requestOptions\n     *\n     * @returns {Object}\n     */\n    this.createUnauthenticatedRequest = function (requestOptions) {\n        return new UnauthenticatedRequest(requestOptions);\n    };\n}\n/**\n * Enters this state.\n * @abstract\n */\nStateAbstract.prototype.enter = function () { };\n/**\n * Exits this state.\n * @abstract\n */\nStateAbstract.prototype.exit = function () { };\n/**\n * Establishes a connection to Snowflake.\n *\n * @abstract\n */\nStateAbstract.prototype.connect = function () { };\n/**\n * Issues a connect-continue request to Snowflake.\n *\n * @abstract\n */\nStateAbstract.prototype.continue = function () { };\n/**\n * Issues a generic request to Snowflake.\n *\n * @abstract\n */\nStateAbstract.prototype.request = function () { };\n/**\n * Terminates the current connection to Snowflake.\n *\n * @abstract\n */\nStateAbstract.prototype.destroy = function () { };\n///////////////////////////////////////////////////////////////////////////\n////                StatePristine                                      ////\n///////////////////////////////////////////////////////////////////////////\nfunction StatePristine() {\n    StateAbstract.apply(this, arguments);\n}\nUtil.inherits(StatePristine, StateAbstract);\n/**\n * @inheritDoc\n */\nStatePristine.prototype.connect = function (options) {\n    // transition to the Connecting state with the callback in the transition\n    // context\n    this.snowflakeService.transitionToConnecting({\n        options: options,\n    });\n};\n/**\n * @inheritDoc\n */\nStatePristine.prototype.request = function (options) {\n    const callback = options.callback;\n    process.nextTick(function () {\n        callback(Errors.createClientError(ErrorCodes.ERR_CONN_REQUEST_STATUS_PRISTINE));\n    });\n};\n/**\n * @inheritDoc\n */\nStatePristine.prototype.destroy = function (options) {\n    // we're still in the preconnected state so any\n    // attempts to destroy should result in an error\n    const callback = options.callback;\n    process.nextTick(function () {\n        callback(Errors.createClientError(ErrorCodes.ERR_CONN_DESTROY_STATUS_PRISTINE));\n    });\n};\n///////////////////////////////////////////////////////////////////////////\n////                StateConnecting                                    ////\n///////////////////////////////////////////////////////////////////////////\nfunction StateConnecting() {\n    StateAbstract.apply(this, arguments);\n}\nUtil.inherits(StateConnecting, StateAbstract);\n/**\n * @inheritDoc\n */\nStateConnecting.prototype.enter = function (context) {\n    // save the context\n    this.context = context;\n    // initiate the connection process\n    this.continue();\n};\n/**\n * @inheritDoc\n */\nStateConnecting.prototype.exit = function () {\n    // clear the context\n    this.context = null;\n};\n/**\n * @inheritDoc\n */\nStateConnecting.prototype.connect = function (options) {\n    // we're already connecting so any attempts\n    // to connect should result in an error\n    const callback = options.callback;\n    process.nextTick(function () {\n        callback(Errors.createClientError(ErrorCodes.ERR_CONN_CONNECT_STATUS_CONNECTING));\n    });\n};\n/**\n * @inheritDoc\n */\nStateConnecting.prototype.continue = function () {\n    const context = this.context;\n    const err = context.options.err;\n    let json = context.options.json;\n    // if no json was specified, treat this as the first connect\n    // and get the necessary information from connectionConfig\n    if (!json) {\n        json = {\n            data: {\n                ACCOUNT_NAME: this.connectionConfig.account,\n                LOGIN_NAME: this.connectionConfig.username,\n                PASSWORD: this.connectionConfig.password,\n            },\n        };\n    }\n    // extract the inflight context from the error and put it back in the json\n    if (err && err.data && err.data.inFlightCtx) {\n        json.inFlightCtx = err.data.inFlightCtx;\n    }\n    // initialize the json data if necessary\n    json.data = json.data || {};\n    // add the client-app-id, client-app-version, and client-app-name\n    const clientInfo = {\n        CLIENT_APP_ID: this.connectionConfig.getClientType(),\n        CLIENT_APP_VERSION: this.connectionConfig.getClientVersion(),\n    };\n    // if we have some information about the client environment, add it as well\n    const clientEnvironment = this.connectionConfig.getClientEnvironment();\n    if (Util.isObject(clientEnvironment)) {\n        clientInfo.CLIENT_ENVIRONMENT = {\n            CERT_REVOCATION_CHECK_MODE: this.connectionConfig.crlValidatorConfig.checkMode,\n            ...json.data.CLIENT_ENVIRONMENT,\n            ...clientEnvironment,\n        };\n    }\n    const clientApplication = this.connectionConfig.getClientApplication();\n    if (Util.isString(clientApplication)) {\n        clientEnvironment['APPLICATION'] = clientApplication;\n    }\n    const sessionParameters = {\n        SESSION_PARAMETERS: {},\n    };\n    if (Util.exists(this.connectionConfig.getClientSessionKeepAlive())) {\n        sessionParameters.SESSION_PARAMETERS.CLIENT_SESSION_KEEP_ALIVE =\n            this.connectionConfig.getClientSessionKeepAlive();\n    }\n    if (Util.exists(this.connectionConfig.getClientSessionKeepAliveHeartbeatFrequency())) {\n        sessionParameters.SESSION_PARAMETERS.CLIENT_SESSION_KEEP_ALIVE_HEARTBEAT_FREQUENCY =\n            this.connectionConfig.getClientSessionKeepAliveHeartbeatFrequency();\n    }\n    if (Util.exists(this.connectionConfig.getJsTreatIntegerAsBigInt())) {\n        sessionParameters.SESSION_PARAMETERS.JS_TREAT_INTEGER_AS_BIGINT =\n            this.connectionConfig.getJsTreatIntegerAsBigInt();\n    }\n    if (Util.exists(this.connectionConfig.getGcsUseDownscopedCredential())) {\n        sessionParameters.SESSION_PARAMETERS.GCS_USE_DOWNSCOPED_CREDENTIAL =\n            this.connectionConfig.getGcsUseDownscopedCredential();\n    }\n    if (Util.exists(this.connectionConfig.getClientRequestMFAToken())) {\n        sessionParameters.SESSION_PARAMETERS.CLIENT_REQUEST_MFA_TOKEN =\n            this.connectionConfig.getClientRequestMFAToken();\n    }\n    if (Util.exists(this.connectionConfig.getClientStoreTemporaryCredential())) {\n        sessionParameters.SESSION_PARAMETERS.CLIENT_STORE_TEMPORARY_CREDENTIAL =\n            this.connectionConfig.getClientStoreTemporaryCredential();\n    }\n    if (Util.exists(this.connectionConfig.queryTag)) {\n        sessionParameters.SESSION_PARAMETERS.QUERY_TAG = this.connectionConfig.queryTag;\n    }\n    Util.apply(json.data, clientInfo);\n    Util.apply(json.data, sessionParameters);\n    const connectionConfig = this.connectionConfig;\n    const maxLoginRetries = connectionConfig.getRetrySfMaxLoginRetries();\n    const maxRetryTimeout = connectionConfig.getRetryTimeout();\n    const startTime = connectionConfig.accessUrl.startsWith('https://')\n        ? Date.now()\n        : 'FIXEDTIMESTAMP';\n    let numRetries = 0;\n    let sleep = connectionConfig.getRetrySfStartingSleepTime();\n    let totalElapsedTime = 0;\n    Logger.getInstance().debug('Total retryTimeout is for the retries = ' + maxRetryTimeout === 0\n        ? 0\n        : maxRetryTimeout);\n    const parent = this;\n    const requestCallback = async function (err, body) {\n        // clear credential-related information\n        connectionConfig.clearCredentials();\n        // if the request succeeded\n        if (!err) {\n            Errors.assertInternal(Util.exists(body));\n            Errors.assertInternal(Util.exists(body.data));\n            parent.snowflakeService.setSessionId(body.data.sessionId);\n            Logger.getInstance().debug(`New session with id ${parent.snowflakeService.getSessionId()} initialized`);\n            // update the parameters\n            Parameters.update(body.data.parameters);\n            // update all token-related information\n            parent.tokenInfo.update(body.data);\n            if (connectionConfig.getClientRequestMFAToken() && body.data.mfaToken) {\n                const key = Util.buildCredentialCacheKey(connectionConfig.host, connectionConfig.username, AuthenticationTypes.USER_PWD_MFA_AUTHENTICATOR);\n                await GlobalConfig.getCredentialManager().write(key, body.data.mfaToken);\n            }\n            if (connectionConfig.getClientStoreTemporaryCredential() && body.data.idToken) {\n                const key = Util.buildCredentialCacheKey(connectionConfig.host, connectionConfig.username, AuthenticationTypes.ID_TOKEN_AUTHENTICATOR);\n                await GlobalConfig.getCredentialManager().write(key, body.data.idToken);\n            }\n            // we're now connected\n            parent.snowflakeService.transitionToConnected();\n            const qccSize = Parameters.getValue('QUERY_CONTEXT_CACHE_SIZE');\n            parent.snowflakeService.initializeQueryContextCache(qccSize);\n        }\n        else {\n            if (Errors.isNetworkError(err) || Errors.isRequestFailedError(err)) {\n                if (numRetries < maxLoginRetries &&\n                    (isRetryableNetworkError(err) || isRetryableHttpError(err)) &&\n                    (maxRetryTimeout === 0 || totalElapsedTime < maxRetryTimeout)) {\n                    numRetries++;\n                    const jitter = Util.getJitteredSleepTime(numRetries, sleep, totalElapsedTime, maxRetryTimeout);\n                    sleep = jitter.sleep;\n                    totalElapsedTime = jitter.totalElapsedTime;\n                    if (sleep <= 0) {\n                        Logger.getInstance().debug('Reached out to the max Login Timeout');\n                        parent.snowflakeService.transitionToDisconnected();\n                    }\n                    const auth = parent.snowflakeService.getAuthenticator();\n                    if (auth instanceof AuthOkta) {\n                        Logger.getInstance().debug('OKTA authentication requires token refresh.');\n                        const retryOption = {\n                            totalElapsedTime,\n                            numRetries,\n                        };\n                        await auth.reauthenticate(context.options.json, retryOption);\n                        numRetries = retryOption.numRetries;\n                        totalElapsedTime = retryOption.totalElapsedTime;\n                    }\n                    else if (auth instanceof AuthKeypair) {\n                        Logger.getInstance().debug('AuthKeyPair authentication requires token refresh.');\n                        await auth.reauthenticate(context.options.json);\n                    }\n                    setTimeout(sendRequest, sleep * 1000);\n                    return;\n                }\n                else {\n                    Logger.getInstance().debug('Failed to all retries to SF.');\n                    // we're now disconnected\n                    parent.snowflakeService.transitionToDisconnected();\n                }\n            }\n            else {\n                // we're now disconnected\n                parent.snowflakeService.transitionToDisconnected();\n            }\n        }\n        // invoke the transition-context callback that was passed to us by the\n        // Pristine state on connect()\n        if (Util.isFunction(context.options.callback)) {\n            context.options.callback(err);\n        }\n        // all queued operations are now free to go\n        parent.snowflakeService.drainOperationQueue();\n    };\n    // issue a login request\n    const sendRequest = function () {\n        const targetUrl = buildLoginUrl(connectionConfig);\n        Logger.getInstance().debug('Contacting SF: %s, (%s/%s)', targetUrl, numRetries, maxLoginRetries);\n        const request = parent.createUnauthenticatedRequest({\n            method: 'POST',\n            url: targetUrl,\n            json: json,\n            scope: this,\n            startTime: startTime,\n            retry: numRetries,\n            callback: requestCallback,\n        });\n        request.send();\n    };\n    sendRequest();\n};\n/**\n * Builds the url for a login request.\n *\n * @param connectionConfig\n *\n * @returns {*}\n */\nfunction buildLoginUrl(connectionConfig) {\n    const queryParams = [\n        { name: 'warehouse', value: connectionConfig.getWarehouse() },\n        { name: 'databaseName', value: connectionConfig.getDatabase() },\n        { name: 'schemaName', value: connectionConfig.getSchema() },\n        { name: 'roleName', value: connectionConfig.getRole() },\n    ];\n    const queryStringObject = {};\n    if (!connectionConfig.isQaMode()) {\n        // No requestId is attached to login-request in test mode.\n        queryStringObject.requestId = uuidv4();\n    }\n    for (let index = 0, length = queryParams.length; index < length; index++) {\n        const queryParam = queryParams[index];\n        if (Util.string.isNotNullOrEmpty(queryParam.value)) {\n            queryStringObject[queryParam.name] = queryParam.value;\n        }\n    }\n    return Url.format({\n        pathname: '/session/v1/login-request',\n        search: QueryString.stringify(queryStringObject),\n    });\n}\n/**\n * @inheritDoc\n */\nStateConnecting.prototype.request = function (options) {\n    // enqueue the request operation\n    this.snowflakeService.enqueueRequest(options);\n};\n/**\n * @inheritDoc\n */\nStateConnecting.prototype.destroy = function (options) {\n    // enqueue the destroy operation\n    this.snowflakeService.enqueueDestroy(options);\n};\n///////////////////////////////////////////////////////////////////////////\n////                StateConnected                                     ////\n///////////////////////////////////////////////////////////////////////////\nfunction StateConnected() {\n    StateAbstract.apply(this, arguments);\n}\nUtil.inherits(StateConnected, StateAbstract);\n/**\n * @inheritDoc\n */\nStateConnected.prototype.connect = function (options) {\n    // we're already connected so any attempts\n    // to connect should result in an error\n    const callback = options.callback;\n    process.nextTick(function () {\n        callback(Errors.createClientError(ErrorCodes.ERR_CONN_CONNECT_STATUS_CONNECTED));\n    });\n};\nStateConnected.prototype.requestAsync = async function (options) {\n    // create a session token request from the options and send out the request\n    return await this.createSessionTokenRequest(options).sendAsync();\n};\n/**\n * @inheritDoc\n */\nStateConnected.prototype.request = function (options) {\n    const scopeOrig = options.scope;\n    const callbackOrig = options.callback;\n    // define our own scope and callback\n    options.scope = this;\n    options.callback = async function (err, body) {\n        // if there was no error, invoke the callback if one was specified\n        if (!err) {\n            if (Util.isFunction(callbackOrig)) {\n                await callbackOrig.apply(scopeOrig, [err, body]);\n            }\n        }\n        else {\n            // restore the original scope and callback to the options object because\n            // we might need to repeat the request\n            options.scope = scopeOrig;\n            options.callback = callbackOrig;\n            // if the session token has expired\n            if (err.code === GSErrors.code.SESSION_TOKEN_EXPIRED) {\n                // enqueue the request operation\n                this.snowflakeService.enqueueRequest(options);\n                // if a session token renewal isn't already in progress, issue a\n                // request to renew the session token\n                this.snowflakeService.transitionToRenewing();\n            }\n            else if (err.code === GSErrors.code.SESSION_TOKEN_INVALID ||\n                err.code === GSErrors.code.GONE_SESSION) {\n                // if the session token is invalid or it doesn't exist\n                // enqueue the request operation\n                this.snowflakeService.enqueueRequest(options);\n                // we're disconnected\n                this.snowflakeService.transitionToDisconnected();\n                // all queued operations are now free to go\n                this.snowflakeService.drainOperationQueue();\n                // TODO: remember that a session renewal is no longer in progress\n                // TODO: make sure the last session renewal did not time out\n            }\n            else {\n                // it's a normal failure\n                // if a callback was specified, invoke it\n                if (Util.isFunction(callbackOrig)) {\n                    callbackOrig.apply(scopeOrig, [err, body]);\n                }\n            }\n        }\n    };\n    // create a session token request from the options and send out the request\n    this.createSessionTokenRequest(options).send();\n};\n/**\n * @inheritDoc\n */\nStateConnected.prototype.destroy = function (options) {\n    const requestID = uuidv4();\n    // send out a session token request to terminate the current connection\n    this.createSessionTokenRequest({\n        method: 'POST',\n        url: `/session?delete=true&requestId=${requestID}`,\n        scope: this,\n        callback: function (err) {\n            // if the destroy request succeeded or the session already expired, we're disconnected\n            if (!err ||\n                err.code === GSErrors.code.GONE_SESSION ||\n                err.code === GSErrors.code.SESSION_TOKEN_EXPIRED) {\n                err = undefined;\n                this.snowflakeService.transitionToDisconnected();\n            }\n            // invoke the original callback\n            options.callback(err);\n        },\n    }).send();\n};\n///////////////////////////////////////////////////////////////////////////\n////                StateRenewing                                      ////\n///////////////////////////////////////////////////////////////////////////\nfunction StateRenewing() {\n    StateAbstract.apply(this, arguments);\n}\nUtil.inherits(StateRenewing, StateAbstract);\n/**\n * @inheritDoc\n */\nStateRenewing.prototype.enter = function () {\n    // send out a master token request to renew the current session token\n    this.createMasterTokenRequest({\n        method: 'POST',\n        url: '/session/token-request',\n        headers: {\n            CLIENT_APP_ID: this.connectionConfig.getClientType(),\n            CLIENT_APP_VERSION: this.connectionConfig.getClientVersion(),\n        },\n        json: {\n            REQUEST_TYPE: 'RENEW',\n            oldSessionToken: this.tokenInfo.getSessionToken(),\n        },\n        scope: this,\n        callback: function (err, body) {\n            // if the request succeeded\n            if (!err) {\n                // update the token information\n                this.tokenInfo.update(body.data);\n                // we're now connected again\n                this.snowflakeService.transitionToConnected();\n            }\n            else {\n                // if the master token has expired, transition to the disconnected\n                // state\n                if (err.code === GSErrors.code.MASTER_TOKEN_EXPIRED) {\n                    this.snowflakeService.transitionToDisconnected();\n                }\n                else if (Errors.isNetworkError(err)) {\n                    // go back to the connected state\n                    this.snowflakeService.transitionToConnected();\n                }\n                else {\n                    // if the renewal failed for some other reason, we're\n                    // disconnected\n                    // TODO: what should our state be here? also disconnected?\n                    this.snowflakeService.transitionToDisconnected();\n                }\n            }\n            // all queued operations are now free to go\n            this.snowflakeService.drainOperationQueue();\n        },\n    }).send();\n};\n/**\n * @inheritDoc\n */\nStateRenewing.prototype.connect = function (options) {\n    // we're renewing the session token, which means we're connected,\n    // so any attempts to connect should result in an error\n    const callback = options.callback;\n    process.nextTick(function () {\n        callback(Errors.createClientError(ErrorCodes.ERR_CONN_CONNECT_STATUS_CONNECTED));\n    });\n};\n/**\n * @inheritDoc\n */\nStateRenewing.prototype.request = function (options) {\n    // enqueue the request operation\n    this.snowflakeService.enqueueRequest(options);\n};\n/**\n * @inheritDoc\n */\nStateRenewing.prototype.destroy = function (options) {\n    // enqueue the destroy operation\n    this.snowflakeService.enqueueDestroy(options);\n};\n///////////////////////////////////////////////////////////////////////////\n////                StateDisconnected                                  ////\n///////////////////////////////////////////////////////////////////////////\nfunction StateDisconnected() {\n    StateAbstract.apply(this, arguments);\n}\nUtil.inherits(StateDisconnected, StateAbstract);\n/**\n * @inheritDoc\n */\nStateDisconnected.prototype.connect = function (options) {\n    // we're disconnected -- and fatally so -- so any\n    // attempts to connect should result in an error\n    const callback = options.callback;\n    process.nextTick(function () {\n        callback(Errors.createClientError(ErrorCodes.ERR_CONN_CONNECT_STATUS_DISCONNECTED));\n    });\n};\n/**\n * @inheritDoc\n */\nStateDisconnected.prototype.request = function (options) {\n    // we're disconnected, so any attempts to\n    // send a request should result in an error\n    const callback = options.callback;\n    process.nextTick(function () {\n        callback(Errors.createClientError(ErrorCodes.ERR_CONN_REQUEST_STATUS_DISCONNECTED, true));\n    });\n};\n/**\n * @inheritDoc\n */\nStateDisconnected.prototype.destroy = function (options) {\n    // we're already disconnected so any attempts\n    // to destroy should result in an error\n    const callback = options.callback;\n    process.nextTick(function () {\n        callback(Errors.createClientError(ErrorCodes.ERR_CONN_DESTROY_STATUS_DISCONNECTED));\n    });\n};\n/**\n * Creates a TokenInfo object that encapsulates all token-related information,\n * e.g. the master token, the session token, the tokens' expiration times, etc.\n *\n * @param {Object} [config]\n *\n * @constructor\n */\nfunction TokenInfo(config) {\n    let masterToken;\n    let sessionToken;\n    let masterTokenExpirationTime;\n    let sessionTokenExpirationTime;\n    if (Util.isObject(config)) {\n        masterToken = config.masterToken;\n        sessionToken = config.sessionToken;\n        masterTokenExpirationTime = config.masterTokenExpirationTime;\n        sessionTokenExpirationTime = config.sessionTokenExpirationTime;\n    }\n    /**\n     * Returns true if no token-related information is available, false otherwise.\n     *\n     * @returns {Boolean}\n     */\n    this.isEmpty = function () {\n        return (!Util.exists(masterToken) ||\n            !Util.exists(masterTokenExpirationTime) ||\n            !Util.exists(sessionToken) ||\n            !Util.exists(sessionTokenExpirationTime));\n    };\n    /**\n     * Clears all token-related information.\n     */\n    this.clearTokens = function () {\n        masterToken = undefined;\n        masterTokenExpirationTime = undefined;\n        sessionToken = undefined;\n        sessionTokenExpirationTime = undefined;\n    };\n    /**\n     * Updates the tokens and their expiration times.\n     *\n     * @param {Object} data\n     */\n    this.update = function (data) {\n        masterToken = data.masterToken;\n        sessionToken = data.token || data.sessionToken;\n        const currentTime = new Date().getTime();\n        masterTokenExpirationTime =\n            currentTime + 1000 * (data.masterValidityInSeconds || data.validityInSecondsMT);\n        sessionTokenExpirationTime =\n            currentTime + 1000 * (data.validityInSeconds || data.validityInSecondsST);\n    };\n    /**\n     * Returns the master token.\n     *\n     * @returns {String}\n     */\n    this.getMasterToken = function () {\n        return masterToken;\n    };\n    /**\n     * Returns the expiration time of the master token.\n     *\n     * @returns {Number}\n     */\n    this.getMasterTokenExpirationTime = function () {\n        return masterTokenExpirationTime;\n    };\n    /**\n     * Returns the session token.\n     *\n     * @returns {String}\n     */\n    this.getSessionToken = function () {\n        return sessionToken;\n    };\n    /**\n     * Returns the expiration time of the session token.\n     *\n     * @returns {Number}\n     */\n    this.getSessionTokenExpirationTime = function () {\n        return sessionTokenExpirationTime;\n    };\n    /**\n     * Returns a configuration object that can be passed to the TokenInfo\n     * constructor to get an equivalent TokenInfo object.\n     *\n     * @returns {Object}\n     */\n    this.getConfig = function () {\n        return {\n            masterToken: masterToken,\n            masterTokenExpirationTime: masterTokenExpirationTime,\n            sessionToken: sessionToken,\n            sessionTokenExpirationTime: sessionTokenExpirationTime,\n        };\n    };\n}\n//# sourceMappingURL=sf.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/dist/lib/services/sf.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/dist/lib/snowflake.js":
/*!**********************************************************!*\
  !*** ./node_modules/snowflake-sdk/dist/lib/snowflake.js ***!
  \**********************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst core = __webpack_require__(/*! ./core */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/core.js\");\nconst Util = __importStar(__webpack_require__(/*! ./util */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/util.js\"));\nconst errors_1 = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/errors.js\");\nconst clientEnvironment = process.versions;\n// if we're not using the minimum supported version of node.js, raise an error\nconst minimumNodeVersion = '6.0.0';\nif (Util.string.compareVersions(clientEnvironment.node, minimumNodeVersion) < 0) {\n    throw (0, errors_1.createClientError)(errors_1.codes.ERR_UNSUPPORTED_NODE_JS_VERSION, true, minimumNodeVersion);\n}\nmodule.exports = core({\n    httpClientClass: (__webpack_require__(/*! ./http/node */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/http/node.js\").NodeHttpClient),\n    loggerClass: __webpack_require__(/*! ./logger/node */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/logger/node.js\"),\n    client: {\n        version: Util.driverVersion,\n        name: Util.driverName,\n        environment: clientEnvironment,\n    },\n});\n//# sourceMappingURL=snowflake.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9kaXN0L2xpYi9zbm93Zmxha2UuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsb0NBQW9DO0FBQ25EO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLDBDQUEwQyw0QkFBNEI7QUFDdEUsQ0FBQztBQUNEO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJEQUEyRCxjQUFjO0FBQ3pFO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsYUFBYSxtQkFBTyxDQUFDLG1FQUFRO0FBQzdCLDBCQUEwQixtQkFBTyxDQUFDLG1FQUFRO0FBQzFDLGlCQUFpQixtQkFBTyxDQUFDLHVFQUFVO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLG1IQUFxQztBQUMxRCxpQkFBaUIsbUJBQU8sQ0FBQyxpRkFBZTtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxDQUFDO0FBQ0QiLCJzb3VyY2VzIjpbIi9Vc2Vycy93YW5naGFvdGFpL0Rlc2t0b3AvZWx2ZW5sYWIvSFRWL25vZGVfbW9kdWxlcy9zbm93Zmxha2Utc2RrL2Rpc3QvbGliL3Nub3dmbGFrZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX3NldE1vZHVsZURlZmF1bHQpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XG59KTtcbnZhciBfX2ltcG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0U3RhcikgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgb3duS2V5cyA9IGZ1bmN0aW9uKG8pIHtcbiAgICAgICAgb3duS2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHx8IGZ1bmN0aW9uIChvKSB7XG4gICAgICAgICAgICB2YXIgYXIgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIGsgaW4gbykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvLCBrKSkgYXJbYXIubGVuZ3RoXSA9IGs7XG4gICAgICAgICAgICByZXR1cm4gYXI7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBvd25LZXlzKG8pO1xuICAgIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChtb2QpIHtcbiAgICAgICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgICAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgPSBvd25LZXlzKG1vZCksIGkgPSAwOyBpIDwgay5sZW5ndGg7IGkrKykgaWYgKGtbaV0gIT09IFwiZGVmYXVsdFwiKSBfX2NyZWF0ZUJpbmRpbmcocmVzdWx0LCBtb2QsIGtbaV0pO1xuICAgICAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJy4vY29yZScpO1xuY29uc3QgVXRpbCA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwiLi91dGlsXCIpKTtcbmNvbnN0IGVycm9yc18xID0gcmVxdWlyZShcIi4vZXJyb3JzXCIpO1xuY29uc3QgY2xpZW50RW52aXJvbm1lbnQgPSBwcm9jZXNzLnZlcnNpb25zO1xuLy8gaWYgd2UncmUgbm90IHVzaW5nIHRoZSBtaW5pbXVtIHN1cHBvcnRlZCB2ZXJzaW9uIG9mIG5vZGUuanMsIHJhaXNlIGFuIGVycm9yXG5jb25zdCBtaW5pbXVtTm9kZVZlcnNpb24gPSAnNi4wLjAnO1xuaWYgKFV0aWwuc3RyaW5nLmNvbXBhcmVWZXJzaW9ucyhjbGllbnRFbnZpcm9ubWVudC5ub2RlLCBtaW5pbXVtTm9kZVZlcnNpb24pIDwgMCkge1xuICAgIHRocm93ICgwLCBlcnJvcnNfMS5jcmVhdGVDbGllbnRFcnJvcikoZXJyb3JzXzEuY29kZXMuRVJSX1VOU1VQUE9SVEVEX05PREVfSlNfVkVSU0lPTiwgdHJ1ZSwgbWluaW11bU5vZGVWZXJzaW9uKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gY29yZSh7XG4gICAgaHR0cENsaWVudENsYXNzOiByZXF1aXJlKCcuL2h0dHAvbm9kZScpLk5vZGVIdHRwQ2xpZW50LFxuICAgIGxvZ2dlckNsYXNzOiByZXF1aXJlKCcuL2xvZ2dlci9ub2RlJyksXG4gICAgY2xpZW50OiB7XG4gICAgICAgIHZlcnNpb246IFV0aWwuZHJpdmVyVmVyc2lvbixcbiAgICAgICAgbmFtZTogVXRpbC5kcml2ZXJOYW1lLFxuICAgICAgICBlbnZpcm9ubWVudDogY2xpZW50RW52aXJvbm1lbnQsXG4gICAgfSxcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c25vd2ZsYWtlLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/dist/lib/snowflake.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/dist/lib/url_util.js":
/*!*********************************************************!*\
  !*** ./node_modules/snowflake-sdk/dist/lib/url_util.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nconst Logger = __webpack_require__(/*! ./logger */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/logger.js\");\n/**\n * Determines if a given URL is valid.\n *\n * @param url\n *\n * @returns {Boolean}\n */\nexports.isValidURL = function (url) {\n    const regex = '^http(s?)\\\\:\\\\/\\\\/[0-9a-zA-Z]([-.\\\\w]*[0-9a-zA-Z@:])*(:(0-9)*)*(\\\\/?)([a-zA-Z0-9\\\\-\\\\.\\\\?\\\\,\\\\&\\\\(\\\\)\\\\/\\\\\\\\\\\\+&%\\\\$#_=@]*)?$';\n    if (!url.match(regex)) {\n        Logger.getInstance().debug('The provided URL is not a valid URL. URL: %s', url);\n        return false;\n    }\n    return true;\n};\n/**\n * Encodes the given URL.\n *\n * @param {String} url\n *\n * @returns {String} the encoded URL\n */\nexports.urlEncode = function (url) {\n    /** The encodeURIComponent() method encodes special characters including: , / ? : @ & = + $ #\n       but escapes space as %20B. Replace with + for consistency across drivers. */\n    return encodeURIComponent(url).replace(/%20/g, '+');\n};\n//# sourceMappingURL=url_util.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9kaXN0L2xpYi91cmxfdXRpbC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLGVBQWUsbUJBQU8sQ0FBQyx1RUFBVTtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy93YW5naGFvdGFpL0Rlc2t0b3AvZWx2ZW5sYWIvSFRWL25vZGVfbW9kdWxlcy9zbm93Zmxha2Utc2RrL2Rpc3QvbGliL3VybF91dGlsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuY29uc3QgTG9nZ2VyID0gcmVxdWlyZSgnLi9sb2dnZXInKTtcbi8qKlxuICogRGV0ZXJtaW5lcyBpZiBhIGdpdmVuIFVSTCBpcyB2YWxpZC5cbiAqXG4gKiBAcGFyYW0gdXJsXG4gKlxuICogQHJldHVybnMge0Jvb2xlYW59XG4gKi9cbmV4cG9ydHMuaXNWYWxpZFVSTCA9IGZ1bmN0aW9uICh1cmwpIHtcbiAgICBjb25zdCByZWdleCA9ICdeaHR0cChzPylcXFxcOlxcXFwvXFxcXC9bMC05YS16QS1aXShbLS5cXFxcd10qWzAtOWEtekEtWkA6XSkqKDooMC05KSopKihcXFxcLz8pKFthLXpBLVowLTlcXFxcLVxcXFwuXFxcXD9cXFxcLFxcXFwmXFxcXChcXFxcKVxcXFwvXFxcXFxcXFxcXFxcKyYlXFxcXCQjXz1AXSopPyQnO1xuICAgIGlmICghdXJsLm1hdGNoKHJlZ2V4KSkge1xuICAgICAgICBMb2dnZXIuZ2V0SW5zdGFuY2UoKS5kZWJ1ZygnVGhlIHByb3ZpZGVkIFVSTCBpcyBub3QgYSB2YWxpZCBVUkwuIFVSTDogJXMnLCB1cmwpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufTtcbi8qKlxuICogRW5jb2RlcyB0aGUgZ2l2ZW4gVVJMLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSB1cmxcbiAqXG4gKiBAcmV0dXJucyB7U3RyaW5nfSB0aGUgZW5jb2RlZCBVUkxcbiAqL1xuZXhwb3J0cy51cmxFbmNvZGUgPSBmdW5jdGlvbiAodXJsKSB7XG4gICAgLyoqIFRoZSBlbmNvZGVVUklDb21wb25lbnQoKSBtZXRob2QgZW5jb2RlcyBzcGVjaWFsIGNoYXJhY3RlcnMgaW5jbHVkaW5nOiAsIC8gPyA6IEAgJiA9ICsgJCAjXG4gICAgICAgYnV0IGVzY2FwZXMgc3BhY2UgYXMgJTIwQi4gUmVwbGFjZSB3aXRoICsgZm9yIGNvbnNpc3RlbmN5IGFjcm9zcyBkcml2ZXJzLiAqL1xuICAgIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQodXJsKS5yZXBsYWNlKC8lMjAvZywgJysnKTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD11cmxfdXRpbC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/dist/lib/url_util.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/dist/lib/util.js":
/*!*****************************************************!*\
  !*** ./node_modules/snowflake-sdk/dist/lib/util.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || (function () {\n    var ownKeys = function(o) {\n        ownKeys = Object.getOwnPropertyNames || function (o) {\n            var ar = [];\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n            return ar;\n        };\n        return ownKeys(o);\n    };\n    return function (mod) {\n        if (mod && mod.__esModule) return mod;\n        var result = {};\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n        __setModuleDefault(result, mod);\n        return result;\n    };\n})();\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.url = exports.string = exports.number = exports.userAgent = exports.driverVersion = exports.driverName = void 0;\nexports.inherits = inherits;\nexports.format = format;\nexports.isFunction = isFunction;\nexports.isObject = isObject;\nexports.isDate = isDate;\nexports.isArray = isArray;\nexports.isString = isString;\nexports.isBoolean = isBoolean;\nexports.isNumber = isNumber;\nexports.isPrivateKey = isPrivateKey;\nexports.exists = exists;\nexports.apply = apply;\nexports.isBrowser = isBrowser;\nexports.isNode = isNode;\nexports.nextSleepTime = nextSleepTime;\nexports.getJitteredSleepTime = getJitteredSleepTime;\nexports.chooseRandom = chooseRandom;\nexports.getNextSleepTime = getNextSleepTime;\nexports.getJitter = getJitter;\nexports.isLoginRequest = isLoginRequest;\nexports.isRetryableHttpError = isRetryableHttpError;\nexports.validateClientSessionKeepAliveHeartbeatFrequency = validateClientSessionKeepAliveHeartbeatFrequency;\nexports.constructHostname = constructHostname;\nexports.isPrivateLink = isPrivateLink;\nexports.createOcspResponseCacheServerUrl = createOcspResponseCacheServerUrl;\nexports.isPutCommand = isPutCommand;\nexports.isGetCommand = isGetCommand;\nexports.convertSmkIdToString = convertSmkIdToString;\nexports.getCircularReplacer = getCircularReplacer;\nexports.isCorrectSubdomain = isCorrectSubdomain;\nexports.buildCredentialCacheKey = buildCredentialCacheKey;\nexports.checkValidCustomCredentialManager = checkValidCustomCredentialManager;\nexports.checkParametersDefined = checkParametersDefined;\nexports.isFileModeCorrect = isFileModeCorrect;\nexports.isFileNotWritableByGroupOrOthers = isFileNotWritableByGroupOrOthers;\nexports.shouldRetryOktaAuth = shouldRetryOktaAuth;\nexports.getDriverDirectory = getDriverDirectory;\nexports.validatePath = validatePath;\nexports.getEnvVar = getEnvVar;\nexports.validateEmptyString = validateEmptyString;\nexports.isNotEmptyAsString = isNotEmptyAsString;\nexports.isNotEmptyString = isNotEmptyString;\nexports.isEmptyObject = isEmptyObject;\nexports.isWindows = isWindows;\nexports.getFreePort = getFreePort;\nexports.isPortOpen = isPortOpen;\nexports.lstrip = lstrip;\nexports.escapeHTML = escapeHTML;\nexports.dynamicImportESMInTypescriptWithCommonJS = dynamicImportESMInTypescriptWithCommonJS;\nconst util_1 = __importDefault(__webpack_require__(/*! util */ \"util\"));\nconst url_1 = __importDefault(__webpack_require__(/*! url */ \"url\"));\nconst os_1 = __importDefault(__webpack_require__(/*! os */ \"os\"));\nconst Logger = __importStar(__webpack_require__(/*! ./logger */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/logger.js\"));\nconst fs_1 = __importDefault(__webpack_require__(/*! fs */ \"fs\"));\n// NOTE: keeping require as it's a circular dependency so * as Errors doesn't work\nconst Errors = __webpack_require__(/*! ./errors */ \"(rsc)/./node_modules/snowflake-sdk/dist/lib/errors.js\");\nconst net_1 = __importDefault(__webpack_require__(/*! net */ \"net\"));\nconst package_json_1 = __webpack_require__(/*! ../package.json */ \"(rsc)/./node_modules/snowflake-sdk/dist/package.json\");\nObject.defineProperty(exports, \"driverName\", ({ enumerable: true, get: function () { return package_json_1.name; } }));\nObject.defineProperty(exports, \"driverVersion\", ({ enumerable: true, get: function () { return package_json_1.version; } }));\nconst nodeJSVersion = process.version?.startsWith('v')\n    ? process.version.substring(1)\n    : process.version;\nexports.userAgent = `JavaScript/${package_json_1.version} (${process.platform}-${process.arch}) NodeJS/${nodeJSVersion}`;\n/**\n * Note: A simple wrapper around util.inherits() for now, but this might change\n * in the future.\n *\n * Inherits the prototype methods from one constructor into another. The\n * prototype of constructor will be set to a new object created from\n * superConstructor.\n *\n * @param constructor\n * @param superConstructor\n *\n * @returns {Object}\n */\nfunction inherits(constructor, superConstructor) {\n    return util_1.default.inherits.apply(util_1.default, [constructor, superConstructor]);\n}\n/**\n * Note: A simple wrapper around util.format() for now, but this will likely\n * change in the future.\n *\n * Returns a formatted string using the first argument as a printf-like format.\n *\n * The first argument is a string that contains zero or more placeholders.\n * Each placeholder is replaced with the converted value from its corresponding\n * argument. Supported placeholders are:\n *   %s - String.\n *   %d - Number (both integer and float).\n *   %j - JSON. Replaced with the string '[Circular]' if the argument contains\n *        circular references.\n *   %% - single percent sign ('%'). This does not consume an argument.\n *\n * If the placeholder does not have a corresponding argument, the placeholder is\n * not replaced.\n *\n * If there are more arguments than placeholders, the extra arguments are\n * coerced to strings (for objects and symbols, util.inspect() is used) and then\n * concatenated, delimited by a space.\n *\n * If the first argument is not a format string then util.format() returns a\n * string that is the concatenation of all its arguments separated by spaces.\n * Each argument is converted to a string with util.inspect().\n */\nfunction format(format, ...params) {\n    return util_1.default.format.apply(util_1.default, [format, ...params]);\n}\n/**\n * Determines if a given value is a function.\n */\nfunction isFunction(value) {\n    return !!value && typeof value === 'function';\n}\nconst toString = Object.prototype.toString;\n/**\n * Determines if a given value is an object.\n */\nfunction isObject(value) {\n    return toString.call(value) === '[object Object]';\n}\n/**\n * Determines if a given value is a Date.\n */\nfunction isDate(value) {\n    return toString.call(value) === '[object Date]';\n}\n/**\n * Determines if a given value is an array.\n */\nfunction isArray(value) {\n    return toString.call(value) === '[object Array]';\n}\n/**\n * Determines if a given value is a string.\n */\nfunction isString(value) {\n    return typeof value === 'string';\n}\n/**\n * Determines if a given value is a boolean.\n */\nfunction isBoolean(value) {\n    return typeof value === 'boolean';\n}\n/**\n * Determines if a given value is a number.\n */\nfunction isNumber(value) {\n    return typeof value === 'number' && isFinite(value);\n}\n/**\n * Determines if a given value is a private key string in pem format of type pkcs8.\n */\nfunction isPrivateKey(value) {\n    const trimmedValue = value.trim();\n    // The private key is expected to be decrypted when set in the connection string\n    // secret scanner complains about first check since it looks like private key, but it's only check\n    // pragma: allowlist nextline secret\n    return (trimmedValue.startsWith('-----BEGIN PRIVATE KEY-----') &&\n        trimmedValue.endsWith('\\n-----END PRIVATE KEY-----'));\n}\n/**\n * A collection of number-related utility functions.\n */\nexports.number = {\n    /**\n     * Determines if a given value is a positive number.\n     */\n    isPositive: function (value) {\n        return isNumber(value) && value > 0;\n    },\n    /**\n     * Determines if a given value is a non-negative number.\n     */\n    isNonNegative: function (value) {\n        return isNumber(value) && value >= 0;\n    },\n    /**\n     * Determines if a given value is an integer.\n     */\n    isInteger: function (value) {\n        return isNumber(value) && Math.floor(value) === value;\n    },\n    /**\n     * Determines if a given value is a positive integer.\n     */\n    isPositiveInteger: function (value) {\n        return this.isInteger(value) && value > 0;\n    },\n    /**\n     * Determines if a given value is a non-negative integer.\n     */\n    isNonNegativeInteger: function (value) {\n        return this.isInteger(value) && value >= 0;\n    },\n};\n/**\n * A collection of string-related utility functions.\n */\nexports.string = {\n    /**\n     * Determines if a given string is not null or empty.\n     */\n    isNotNullOrEmpty: function (value) {\n        return isString(value) && value;\n    },\n    /**\n     * Compares two version numbers of the form 'a.b.c' where a, b and c are\n     * numbers (e.g. '1.0.12'). If one or both inputs are invalid versions, the\n     * function will return NaN, otherwise, it will return -1 if the first\n     * version is smaller, 1 if the first version is bigger, and 0 if the two\n     * versions are equal.\n     */\n    compareVersions: function (version1, version2) {\n        // if one or both inputs are valid, return NaN\n        if (!isString(version1) || !isString(version2)) {\n            return NaN;\n        }\n        // split on dot\n        const version1Parts = version1.split('.');\n        const version2Parts = version2.split('.');\n        // add trailing zeros to make the parts arrays the same length\n        while (version1Parts.length < version2Parts.length) {\n            version1Parts.push('0');\n        }\n        while (version2Parts.length < version1Parts.length) {\n            version2Parts.push('0');\n        }\n        // compare elements in the two arrays one by one\n        let result = 0;\n        let version1Part, version2Part;\n        for (let index = 0, length = version1Parts.length; index < length; index++) {\n            // convert to number before doing any arithmetic\n            version1Part = Number(version1Parts[index]);\n            version2Part = Number(version2Parts[index]);\n            // if one or both values are not numerical, consider the input invalid\n            if (!isNumber(version1Part) || !isNumber(version2Part)) {\n                result = NaN;\n                break;\n            }\n            // if the two values are different, pick the\n            // correct result based on which value is smaller\n            if (version1Part !== version2Part) {\n                result = version1Part < version2Part ? -1 : 1;\n                break;\n            }\n        }\n        return result;\n    },\n};\n/**\n * Determines if a given value is not null or undefined.\n *\n * @deprecated Just use if (!value) instead\n */\nfunction exists(value) {\n    return value !== null && value !== undefined;\n}\n/**\n * A collection of url-related utility functions.\n */\nexports.url = {\n    /**\n     * Appends a query parameter to a url. If an invalid url is specified, an\n     * exception is thrown.\n     *\n     * @param url\n     * @param paramName the name of the query parameter.\n     * @param paramValue the value of the query parameter.\n     */\n    appendParam: function (url, paramName, paramValue) {\n        // if the specified url is valid\n        const urlAsObject = url_1.default.parse(url);\n        if (urlAsObject) {\n            // if the url already has query parameters, use '&' as the separator\n            // when appending the additional query parameter, otherwise use '?'\n            url += (urlAsObject.search ? '&' : '?') + paramName + '=' + paramValue;\n        }\n        return url;\n    },\n    appendRetryParam: function (option) {\n        let retryUrl = this.appendParam(option.url, 'retryCount', option.retryCount);\n        if (option.includeRetryReason) {\n            retryUrl = this.appendParam(retryUrl, 'retryReason', option.retryReason);\n        }\n        return retryUrl;\n    },\n};\n/**\n * Shallow-copies everything from a source object into a destination object.\n *\n * @param {Object} dst the object to copy properties to.\n * @param {Object} src the object to copy properties from.\n */\nfunction apply(dst, src) {\n    // if both dst and src are objects, copy everything from src to dst\n    if (isObject(dst) && isObject(src)) {\n        for (const key in src) {\n            if (Object.prototype.hasOwnProperty.call(src, key)) {\n                dst[key] = src[key];\n            }\n        }\n    }\n    return dst;\n}\n/**\n * Returns true if the code is currently being run in the browser, false\n * otherwise.\n */\nfunction isBrowser() {\n    // @ts-ignore TS2339: Property 'browser' does not exist on type 'Process'\n    return !!(process && false);\n}\n/**\n * Returns true if the code is currently being run in node, false otherwise.\n */\nfunction isNode() {\n    return !isBrowser();\n}\n/**\n * Returns the next sleep time calculated by exponential backoff with\n * decorrelated jitter.\n * sleep = min(cap, random_between(base, sleep * 3))\n * for more details, check out:\n * http://www.awsarchitectureblog.com/2015/03/backoff.html\n * @param base minimum seconds\n * @param cap maximum seconds\n * @param previousSleep previous sleep time\n */\nfunction nextSleepTime(base, cap, previousSleep) {\n    return Math.min(cap, Math.abs(previousSleep * 3 - base) * Math.random() + Math.min(base, previousSleep * 3));\n}\n/**\n * Return next sleep time calculated by the jitter rule.\n */\nfunction getJitteredSleepTime(numofRetries, currentSleepTime, totalElapsedTime, maxRetryTimeout) {\n    const nextsleep = getNextSleepTime(numofRetries, currentSleepTime);\n    const sleep = maxRetryTimeout !== 0 ? Math.min(maxRetryTimeout - totalElapsedTime, nextsleep) : nextsleep;\n    totalElapsedTime += sleep;\n    return { sleep, totalElapsedTime };\n}\n/**\n * Choose one of the number between two numbers.\n */\nfunction chooseRandom(firstNumber, secondNumber) {\n    return Math.random() * (firstNumber - secondNumber) + secondNumber;\n}\n/**\n * return the next sleep Time.\n */\nfunction getNextSleepTime(numofRetries, currentSleepTime) {\n    const nextSleep = 2 ** numofRetries;\n    return chooseRandom(currentSleepTime + getJitter(currentSleepTime), nextSleep + getJitter(currentSleepTime));\n}\n/**\n * return the jitter value.\n */\nfunction getJitter(currentSleepTime) {\n    const multiplicationFactor = chooseRandom(1, -1);\n    return 0.5 * currentSleepTime * multiplicationFactor;\n}\n/**\n * Check whether the request is the login-request or not.\n */\nfunction isLoginRequest(loginUrl) {\n    const endPoints = ['/v1/login-request', '/authenticator-request'];\n    return endPoints.some((endPoint) => loginUrl.includes(endPoint));\n}\n/**\n * Checks if the HTTP response code is retryable\n *\n * @param response HTTP response object\n * @param retry403 will retry HTTP 403?\n */\nfunction isRetryableHttpError(response, retry403) {\n    return (response &&\n        ((response.statusCode >= 500 && response.statusCode < 600) ||\n            (retry403 && response.statusCode === 403) ||\n            response.statusCode === 408 ||\n            response.statusCode === 429));\n}\nfunction validateClientSessionKeepAliveHeartbeatFrequency(input, masterValidity) {\n    let heartbeatFrequency = input;\n    const realMax = Math.floor(masterValidity / 4);\n    const realMin = Math.floor(realMax / 4);\n    if (input > realMax) {\n        heartbeatFrequency = realMax;\n    }\n    else if (input < realMin) {\n        heartbeatFrequency = realMin;\n    }\n    heartbeatFrequency = Math.floor(heartbeatFrequency);\n    return heartbeatFrequency;\n}\n/**\n * Constructs host name using region and account\n *\n * @param region where the account is located\n * @param account which account to connect to\n */\nfunction constructHostname(region, account) {\n    let host;\n    if (region === 'us-west-2') {\n        host = account + '.snowflakecomputing.com';\n    }\n    else if (region != null) {\n        if (account.indexOf('.') > 0) {\n            account = account.substring(0, account.indexOf('.'));\n        }\n        if (region.startsWith('cn-') || region.startsWith('CN-')) {\n            host = account + '.' + region + '.snowflakecomputing.cn';\n        }\n        else {\n            host = account + '.' + region + '.snowflakecomputing.com';\n        }\n    }\n    else {\n        host = account + '.snowflakecomputing.com';\n    }\n    return host;\n}\n/**\n * Returns true if host indicates private link\n */\nfunction isPrivateLink(host) {\n    Errors.checkArgumentExists(exists(host), Errors.codes.ERR_CONN_CREATE_MISSING_HOST);\n    return host.toLowerCase().includes('privatelink.snowflakecomputing.');\n}\nfunction createOcspResponseCacheServerUrl(host) {\n    return `http://ocsp.${host}/ocsp_response_cache.json`;\n}\n/**\n * Returns if command is a PUT command\n */\nfunction isPutCommand(sqlText) {\n    return sqlText.trim().substring(0, 3).toUpperCase() === 'PUT';\n}\n/**\n * Returns if command is a GET command\n */\nfunction isGetCommand(sqlText) {\n    return sqlText.trim().substring(0, 3).toUpperCase() === 'GET';\n}\n/**\n * Add double quotes to smkId's value to parse it as a string instead of integer\n * to preserve precision of numbers exceeding JavaScript's max safe integer\n * e.g (inputting 32621973126123526\toutputs 32621973126123530)\n *\n * @param body the data in JSON\n */\nfunction convertSmkIdToString(body) {\n    return body.replace(/\"smkId\"(\\s*):(\\s*)([0-9]+)/g, '\"smkId\"$1:$2\"$3\"');\n}\n/**\n * Under some circumstances the object passed to JSON.stringify in exception handling\n * can contain circular reference, on which JSON.stringify bails out\n * MDN way of handling such error\n */\nfunction getCircularReplacer() {\n    const ancestors = [];\n    return function (key, value) {\n        if (typeof value !== 'object' || value === null) {\n            return value;\n        }\n        // `this` is the object that value is contained in,\n        // i.e., its direct parent.\n        // @ts-ignore TS2683: 'this' implicitly has type 'any' because it does not have a type annotation.\n        while (ancestors.length > 0 && ancestors[ancestors.length - 1] !== this) {\n            ancestors.pop();\n        }\n        if (ancestors.includes(value)) {\n            return '[Circular]';\n        }\n        ancestors.push(value);\n        return value;\n    };\n}\n/**\n * Returns if the provided string is a valid subdomain.\n */\nfunction isCorrectSubdomain(value) {\n    const subdomainRegex = RegExp(/^\\w+([.-]\\w+)*$/i);\n    return subdomainRegex.test(value);\n}\nfunction buildCredentialCacheKey(host, username, credType) {\n    if (!host || !username || !credType) {\n        Logger.getInstance().debug('Cannot build the credential cache key because one of host, username, and credType is null');\n        return null;\n    }\n    return `{${host.toUpperCase()}}:{${username.toUpperCase()}}:{${credType.toUpperCase()}}`;\n}\nfunction checkValidCustomCredentialManager(customCredentialManager) {\n    if (typeof customCredentialManager !== 'object') {\n        return false;\n    }\n    const requireMethods = ['write', 'read', 'remove'];\n    for (const method of requireMethods) {\n        if (!Object.hasOwnProperty.call(customCredentialManager, method) ||\n            typeof customCredentialManager[method] !== 'function') {\n            return false;\n        }\n    }\n    return true;\n}\nfunction checkParametersDefined(...parameters) {\n    return parameters.every((element) => element !== undefined && element !== null);\n}\n/**\n * Checks if the provided file or directory permissions are correct.\n * @param filePath\n * @param expectedMode\n * @param fsPromises\n * @returns {Promise<boolean>} resolves always to true for Windows\n */\nasync function isFileModeCorrect(filePath, expectedMode, fsPromises) {\n    if (os_1.default.platform() === 'win32') {\n        return true;\n    }\n    return await fsPromises.stat(filePath).then((stats) => {\n        // we have to limit the number of LSB bits to 9 with the mask, as the stats.mode starts with the file type,\n        // e.g. the directory with permissions 755 will have stats.mask of 40755.\n        const mask = (1 << 9) - 1;\n        return (stats.mode & mask) === expectedMode;\n    });\n}\n/**\n * Checks if the provided file or directory is writable only by the user.\n * @returns {Promise<boolean>} resolves always to true for Windows\n */\nasync function isFileNotWritableByGroupOrOthers(configFilePath, fsPromises) {\n    if (os_1.default.platform() === 'win32') {\n        return true;\n    }\n    const stats = await fsPromises.stat(configFilePath);\n    return (stats.mode & (1 << 4)) === 0 && (stats.mode & (1 << 1)) === 0;\n}\nfunction shouldRetryOktaAuth({ maxRetryTimeout, maxRetryCount, numRetries, startTime, remainingTimeout, }) {\n    return ((maxRetryTimeout === 0 || Date.now() < startTime + remainingTimeout) &&\n        numRetries <= maxRetryCount);\n}\nfunction getDriverDirectory() {\n    return __dirname;\n}\nfunction validatePath(dir) {\n    try {\n        const stat = fs_1.default.statSync(dir);\n        return stat.isDirectory();\n    }\n    catch {\n        Logger.getInstance().error('The location is invalid. Please check this location is accessible or existing');\n        return false;\n    }\n}\nfunction getEnvVar(variable) {\n    return process.env[variable.toLowerCase()] || process.env[variable.toUpperCase()];\n}\nfunction validateEmptyString(value) {\n    return value !== '' ? value : undefined;\n}\nfunction isNotEmptyAsString(variable) {\n    if (typeof variable === 'string') {\n        return variable;\n    }\n    return exists(variable);\n}\nfunction isNotEmptyString(variable) {\n    return exists(variable) && variable !== '';\n}\n/**\n * Checks Whether the object is empty (can be null or undefined) or not.\n */\nfunction isEmptyObject(object) {\n    if (!exists(object)) {\n        return true;\n    }\n    if (typeof object !== 'object') {\n        return false;\n    }\n    return Object.keys(object).length === 0;\n}\nfunction isWindows() {\n    return os_1.default.platform() === 'win32';\n}\nasync function getFreePort() {\n    return new Promise((res) => {\n        const srv = net_1.default.createServer();\n        srv.listen(0, () => {\n            // @ts-ignore TS2339: Property 'port' does not exist on type 'string | AddressInfo'\n            const port = srv.address().port;\n            srv.close(() => res(port));\n        });\n    });\n}\nasync function isPortOpen(port) {\n    return new Promise((resolve, reject) => {\n        const s = net_1.default.createServer();\n        s.once('error', (err) => {\n            s.close();\n            if (err['code'] === 'EADDRINUSE') {\n                Logger.getInstance().trace(`Port: ${port} is not available. Verification failed`);\n                reject('Port not available.');\n            }\n            else {\n                Logger.getInstance().trace(`There is unexpected error during verification of port availability. Port: ${port}. Error: ${JSON.stringify(err)}`);\n            }\n        });\n        s.once('listening', () => {\n            s.close();\n            Logger.getInstance().trace(`Closing server run for verification whether the port is available. Port: ${port}`);\n            resolve('Listening');\n        });\n        s.listen(port);\n    });\n}\n/**\n * Left strip the specified character from a string.\n */\nfunction lstrip(str, remove) {\n    while (str.length > 0 && remove.indexOf(str.charAt(0)) !== -1) {\n        str = str.substr(1);\n    }\n    return str;\n}\n/**\n * This method transforms HTML special characters into their corresponding entity representations.\n */\nfunction escapeHTML(value) {\n    if (!exists(value)) {\n        return value;\n    }\n    return value\n        .replace(/&/g, '&amp;')\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;')\n        .replace(/\"/g, '&quot;')\n        .replace(/'/g, '&#39;');\n}\n/**\n * Typescript with \"module\": \"commonjs\" will transform every import() to a require() statement.\n *\n * This will break ESM dynamic imports resulting in a runtime error:\n * -require() of ES Module... from ... not supported.\n *\n * A hacky solution - https://github.com/microsoft/TypeScript/issues/43329\n *\n * This could be removed once we drop node 18 support as Node 20+ support esm in require()\n */\nasync function dynamicImportESMInTypescriptWithCommonJS(moduleName) {\n    return Function(`return import(\"${moduleName}\")`)();\n}\n//# sourceMappingURL=util.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/dist/lib/util.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/dist/package.json":
/*!******************************************************!*\
  !*** ./node_modules/snowflake-sdk/dist/package.json ***!
  \******************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"name":"snowflake-sdk","version":"2.3.0","description":"Node.js driver for Snowflake","dependencies":{"@aws-crypto/sha256-js":"^5.2.0","@aws-sdk/client-s3":"^3.726.0","@aws-sdk/credential-provider-node":"^3.823.0","@aws-sdk/ec2-metadata-service":"^3.826.0","@azure/identity":"^4.10.1","@azure/storage-blob":"12.26.x","@google-cloud/storage":"^7.7.0","@smithy/node-http-handler":"^4.0.1","@smithy/protocol-http":"^5.1.3","@smithy/signature-v4":"^5.2.1","@techteamer/ocsp":"1.0.1","asn1.js-rfc2560":"^5.0.0","asn1.js-rfc5280":"^3.0.0","axios":"^1.12.2","big-integer":"^1.6.43","bignumber.js":"^9.1.2","bn.js":"^5.2.1","browser-request":"^0.3.3","expand-tilde":"^2.0.2","fast-xml-parser":"^4.2.5","fastest-levenshtein":"^1.0.16","generic-pool":"^3.8.2","glob":"^10.0.0","google-auth-library":"^10.1.0","https-proxy-agent":"^7.0.2","jsonwebtoken":"^9.0.0","mime-types":"^2.1.29","moment":"^2.29.4","moment-timezone":"^0.5.15","oauth4webapi":"^3.0.1","open":"^7.3.1","simple-lru-cache":"^0.0.2","toml":"^3.0.0","uuid":"^8.3.2","winston":"^3.1.0"},"devDependencies":{"@aws-sdk/types":"^3.387.0","@types/mocha":"^10.0.10","@types/node":"^22.15.18","@types/sinon":"^17.0.4","async":"^3.2.3","eslint":"^8.41.0","husky":"^9.1.7","lint-staged":"^16.0.0","mocha":"^11.1.0","mock-require":"^3.0.3","nyc":"^15.1.0","prettier":"^3.5.3","rewiremock":"^3.14.6","sinon":"^20.0.0","test-console":"^2.0.0","ts-node":"^10.9.2","typescript":"^5.8.3","wiremock":"^3.10.0","wiremock-rest-client":"^1.11.0"},"peerDependencies":{"asn1.js":"^5.4.1"},"overrides":{"semver":"^7.5.2"},"repository":{"type":"git","url":"https://github.com/snowflakedb/snowflake-connector-nodejs"},"main":"./dist/index.js","typings":"./dist/index.d.ts","lint-staged":{"*":"npm run prettier:format","*.js":"npm run lint:check"},"scripts":{"prepack":"node ci/build_typescript.js","prepare":"husky","check-ts":"npm run prepack && tsc --noEmit ci/typescript-test.ts","lint:check":"eslint .","lint:fix":"eslint --fix","prettier:check":"prettier --check .","prettier:format":"prettier -w .","test":"mocha \'test/unit/**/*.{js,ts}\'","test:authentication":"mocha \'test/authentication/**/*.{js,ts}\'","test:auth-workload-identity-e2e":"mocha test/auth-workload-identity-e2e.ts","test:integration":"mocha \'test/integration/**/*.{js,ts}\'","test:single":"mocha","test:system":"mocha \'system_test/**/*.{js,ts}\'","test:unit":"mocha \'test/unit/**/*.{js,ts}\'","test:unit:coverage":"nyc npm run test:unit","test:ci":"mocha \'test/{unit,integration}/**/*.{js,ts}\'","test:ci:coverage":"nyc npm run test:ci","test:ci:withSystemTests":"mocha \'test/{unit,integration}/**/*.{js,ts}\' \'system_test/**/*.{js,ts}\'","test:ci:withSystemTests:coverage":"nyc npm run test:ci:withSystemTests","test:manual":"mocha test/integration/testManualConnection.js","serve-wiremock":"wiremock --enable-browser-proxying --proxy-pass-through  false --port 8081","wiremock":"npm run serve-wiremock"},"author":{"name":"Snowflake Computing, Inc.","email":"support@snowflake.com","url":"https://www.snowflake.com/"},"license":"Apache-2.0"}');

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/node_modules/bn.js/lib/bn.js":
/*!*****************************************************************!*\
  !*** ./node_modules/snowflake-sdk/node_modules/bn.js/lib/bn.js ***!
  \*****************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("/* module decorator */ module = __webpack_require__.nmd(module);\n(function (module, exports) {\n  'use strict';\n\n  // Utils\n  function assert (val, msg) {\n    if (!val) throw new Error(msg || 'Assertion failed');\n  }\n\n  // Could use `inherits` module, but don't want to move from single file\n  // architecture yet.\n  function inherits (ctor, superCtor) {\n    ctor.super_ = superCtor;\n    var TempCtor = function () {};\n    TempCtor.prototype = superCtor.prototype;\n    ctor.prototype = new TempCtor();\n    ctor.prototype.constructor = ctor;\n  }\n\n  // BN\n\n  function BN (number, base, endian) {\n    if (BN.isBN(number)) {\n      return number;\n    }\n\n    this.negative = 0;\n    this.words = null;\n    this.length = 0;\n\n    // Reduction context\n    this.red = null;\n\n    if (number !== null) {\n      if (base === 'le' || base === 'be') {\n        endian = base;\n        base = 10;\n      }\n\n      this._init(number || 0, base || 10, endian || 'be');\n    }\n  }\n  if (typeof module === 'object') {\n    module.exports = BN;\n  } else {\n    exports.BN = BN;\n  }\n\n  BN.BN = BN;\n  BN.wordSize = 26;\n\n  var Buffer;\n  try {\n    if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {\n      Buffer = window.Buffer;\n    } else {\n      Buffer = (__webpack_require__(/*! buffer */ \"buffer\").Buffer);\n    }\n  } catch (e) {\n  }\n\n  BN.isBN = function isBN (num) {\n    if (num instanceof BN) {\n      return true;\n    }\n\n    return num !== null && typeof num === 'object' &&\n      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);\n  };\n\n  BN.max = function max (left, right) {\n    if (left.cmp(right) > 0) return left;\n    return right;\n  };\n\n  BN.min = function min (left, right) {\n    if (left.cmp(right) < 0) return left;\n    return right;\n  };\n\n  BN.prototype._init = function init (number, base, endian) {\n    if (typeof number === 'number') {\n      return this._initNumber(number, base, endian);\n    }\n\n    if (typeof number === 'object') {\n      return this._initArray(number, base, endian);\n    }\n\n    if (base === 'hex') {\n      base = 16;\n    }\n    assert(base === (base | 0) && base >= 2 && base <= 36);\n\n    number = number.toString().replace(/\\s+/g, '');\n    var start = 0;\n    if (number[0] === '-') {\n      start++;\n      this.negative = 1;\n    }\n\n    if (start < number.length) {\n      if (base === 16) {\n        this._parseHex(number, start, endian);\n      } else {\n        this._parseBase(number, base, start);\n        if (endian === 'le') {\n          this._initArray(this.toArray(), base, endian);\n        }\n      }\n    }\n  };\n\n  BN.prototype._initNumber = function _initNumber (number, base, endian) {\n    if (number < 0) {\n      this.negative = 1;\n      number = -number;\n    }\n    if (number < 0x4000000) {\n      this.words = [number & 0x3ffffff];\n      this.length = 1;\n    } else if (number < 0x10000000000000) {\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff\n      ];\n      this.length = 2;\n    } else {\n      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff,\n        1\n      ];\n      this.length = 3;\n    }\n\n    if (endian !== 'le') return;\n\n    // Reverse the bytes\n    this._initArray(this.toArray(), base, endian);\n  };\n\n  BN.prototype._initArray = function _initArray (number, base, endian) {\n    // Perhaps a Uint8Array\n    assert(typeof number.length === 'number');\n    if (number.length <= 0) {\n      this.words = [0];\n      this.length = 1;\n      return this;\n    }\n\n    this.length = Math.ceil(number.length / 3);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    var j, w;\n    var off = 0;\n    if (endian === 'be') {\n      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {\n        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    } else if (endian === 'le') {\n      for (i = 0, j = 0; i < number.length; i += 3) {\n        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    }\n    return this._strip();\n  };\n\n  function parseHex4Bits (string, index) {\n    var c = string.charCodeAt(index);\n    // '0' - '9'\n    if (c >= 48 && c <= 57) {\n      return c - 48;\n    // 'A' - 'F'\n    } else if (c >= 65 && c <= 70) {\n      return c - 55;\n    // 'a' - 'f'\n    } else if (c >= 97 && c <= 102) {\n      return c - 87;\n    } else {\n      assert(false, 'Invalid character in ' + string);\n    }\n  }\n\n  function parseHexByte (string, lowerBound, index) {\n    var r = parseHex4Bits(string, index);\n    if (index - 1 >= lowerBound) {\n      r |= parseHex4Bits(string, index - 1) << 4;\n    }\n    return r;\n  }\n\n  BN.prototype._parseHex = function _parseHex (number, start, endian) {\n    // Create possibly bigger array to ensure that it fits the number\n    this.length = Math.ceil((number.length - start) / 6);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    // 24-bits chunks\n    var off = 0;\n    var j = 0;\n\n    var w;\n    if (endian === 'be') {\n      for (i = number.length - 1; i >= start; i -= 2) {\n        w = parseHexByte(number, start, i) << off;\n        this.words[j] |= w & 0x3ffffff;\n        if (off >= 18) {\n          off -= 18;\n          j += 1;\n          this.words[j] |= w >>> 26;\n        } else {\n          off += 8;\n        }\n      }\n    } else {\n      var parseLength = number.length - start;\n      for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {\n        w = parseHexByte(number, start, i) << off;\n        this.words[j] |= w & 0x3ffffff;\n        if (off >= 18) {\n          off -= 18;\n          j += 1;\n          this.words[j] |= w >>> 26;\n        } else {\n          off += 8;\n        }\n      }\n    }\n\n    this._strip();\n  };\n\n  function parseBase (str, start, end, mul) {\n    var r = 0;\n    var b = 0;\n    var len = Math.min(str.length, end);\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n\n      r *= mul;\n\n      // 'a'\n      if (c >= 49) {\n        b = c - 49 + 0xa;\n\n      // 'A'\n      } else if (c >= 17) {\n        b = c - 17 + 0xa;\n\n      // '0' - '9'\n      } else {\n        b = c;\n      }\n      assert(c >= 0 && b < mul, 'Invalid character');\n      r += b;\n    }\n    return r;\n  }\n\n  BN.prototype._parseBase = function _parseBase (number, base, start) {\n    // Initialize as zero\n    this.words = [0];\n    this.length = 1;\n\n    // Find length of limb in base\n    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {\n      limbLen++;\n    }\n    limbLen--;\n    limbPow = (limbPow / base) | 0;\n\n    var total = number.length - start;\n    var mod = total % limbLen;\n    var end = Math.min(total, total - mod) + start;\n\n    var word = 0;\n    for (var i = start; i < end; i += limbLen) {\n      word = parseBase(number, i, i + limbLen, base);\n\n      this.imuln(limbPow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n\n    if (mod !== 0) {\n      var pow = 1;\n      word = parseBase(number, i, number.length, base);\n\n      for (i = 0; i < mod; i++) {\n        pow *= base;\n      }\n\n      this.imuln(pow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n\n    this._strip();\n  };\n\n  BN.prototype.copy = function copy (dest) {\n    dest.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      dest.words[i] = this.words[i];\n    }\n    dest.length = this.length;\n    dest.negative = this.negative;\n    dest.red = this.red;\n  };\n\n  function move (dest, src) {\n    dest.words = src.words;\n    dest.length = src.length;\n    dest.negative = src.negative;\n    dest.red = src.red;\n  }\n\n  BN.prototype._move = function _move (dest) {\n    move(dest, this);\n  };\n\n  BN.prototype.clone = function clone () {\n    var r = new BN(null);\n    this.copy(r);\n    return r;\n  };\n\n  BN.prototype._expand = function _expand (size) {\n    while (this.length < size) {\n      this.words[this.length++] = 0;\n    }\n    return this;\n  };\n\n  // Remove leading `0` from `this`\n  BN.prototype._strip = function strip () {\n    while (this.length > 1 && this.words[this.length - 1] === 0) {\n      this.length--;\n    }\n    return this._normSign();\n  };\n\n  BN.prototype._normSign = function _normSign () {\n    // -0 = 0\n    if (this.length === 1 && this.words[0] === 0) {\n      this.negative = 0;\n    }\n    return this;\n  };\n\n  // Check Symbol.for because not everywhere where Symbol defined\n  // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility\n  if (typeof Symbol !== 'undefined' && typeof Symbol.for === 'function') {\n    try {\n      BN.prototype[Symbol.for('nodejs.util.inspect.custom')] = inspect;\n    } catch (e) {\n      BN.prototype.inspect = inspect;\n    }\n  } else {\n    BN.prototype.inspect = inspect;\n  }\n\n  function inspect () {\n    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';\n  }\n\n  /*\n\n  var zeros = [];\n  var groupSizes = [];\n  var groupBases = [];\n\n  var s = '';\n  var i = -1;\n  while (++i < BN.wordSize) {\n    zeros[i] = s;\n    s += '0';\n  }\n  groupSizes[0] = 0;\n  groupSizes[1] = 0;\n  groupBases[0] = 0;\n  groupBases[1] = 0;\n  var base = 2 - 1;\n  while (++base < 36 + 1) {\n    var groupSize = 0;\n    var groupBase = 1;\n    while (groupBase < (1 << BN.wordSize) / base) {\n      groupBase *= base;\n      groupSize += 1;\n    }\n    groupSizes[base] = groupSize;\n    groupBases[base] = groupBase;\n  }\n\n  */\n\n  var zeros = [\n    '',\n    '0',\n    '00',\n    '000',\n    '0000',\n    '00000',\n    '000000',\n    '0000000',\n    '00000000',\n    '000000000',\n    '0000000000',\n    '00000000000',\n    '000000000000',\n    '0000000000000',\n    '00000000000000',\n    '000000000000000',\n    '0000000000000000',\n    '00000000000000000',\n    '000000000000000000',\n    '0000000000000000000',\n    '00000000000000000000',\n    '000000000000000000000',\n    '0000000000000000000000',\n    '00000000000000000000000',\n    '000000000000000000000000',\n    '0000000000000000000000000'\n  ];\n\n  var groupSizes = [\n    0, 0,\n    25, 16, 12, 11, 10, 9, 8,\n    8, 7, 7, 7, 7, 6, 6,\n    6, 6, 6, 6, 6, 5, 5,\n    5, 5, 5, 5, 5, 5, 5,\n    5, 5, 5, 5, 5, 5, 5\n  ];\n\n  var groupBases = [\n    0, 0,\n    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,\n    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,\n    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,\n    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,\n    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176\n  ];\n\n  BN.prototype.toString = function toString (base, padding) {\n    base = base || 10;\n    padding = padding | 0 || 1;\n\n    var out;\n    if (base === 16 || base === 'hex') {\n      out = '';\n      var off = 0;\n      var carry = 0;\n      for (var i = 0; i < this.length; i++) {\n        var w = this.words[i];\n        var word = (((w << off) | carry) & 0xffffff).toString(16);\n        carry = (w >>> (24 - off)) & 0xffffff;\n        off += 2;\n        if (off >= 26) {\n          off -= 26;\n          i--;\n        }\n        if (carry !== 0 || i !== this.length - 1) {\n          out = zeros[6 - word.length] + word + out;\n        } else {\n          out = word + out;\n        }\n      }\n      if (carry !== 0) {\n        out = carry.toString(16) + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    if (base === (base | 0) && base >= 2 && base <= 36) {\n      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));\n      var groupSize = groupSizes[base];\n      // var groupBase = Math.pow(base, groupSize);\n      var groupBase = groupBases[base];\n      out = '';\n      var c = this.clone();\n      c.negative = 0;\n      while (!c.isZero()) {\n        var r = c.modrn(groupBase).toString(base);\n        c = c.idivn(groupBase);\n\n        if (!c.isZero()) {\n          out = zeros[groupSize - r.length] + r + out;\n        } else {\n          out = r + out;\n        }\n      }\n      if (this.isZero()) {\n        out = '0' + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    assert(false, 'Base should be between 2 and 36');\n  };\n\n  BN.prototype.toNumber = function toNumber () {\n    var ret = this.words[0];\n    if (this.length === 2) {\n      ret += this.words[1] * 0x4000000;\n    } else if (this.length === 3 && this.words[2] === 0x01) {\n      // NOTE: at this stage it is known that the top bit is set\n      ret += 0x10000000000000 + (this.words[1] * 0x4000000);\n    } else if (this.length > 2) {\n      assert(false, 'Number can only safely store up to 53 bits');\n    }\n    return (this.negative !== 0) ? -ret : ret;\n  };\n\n  BN.prototype.toJSON = function toJSON () {\n    return this.toString(16, 2);\n  };\n\n  if (Buffer) {\n    BN.prototype.toBuffer = function toBuffer (endian, length) {\n      return this.toArrayLike(Buffer, endian, length);\n    };\n  }\n\n  BN.prototype.toArray = function toArray (endian, length) {\n    return this.toArrayLike(Array, endian, length);\n  };\n\n  var allocate = function allocate (ArrayType, size) {\n    if (ArrayType.allocUnsafe) {\n      return ArrayType.allocUnsafe(size);\n    }\n    return new ArrayType(size);\n  };\n\n  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {\n    this._strip();\n\n    var byteLength = this.byteLength();\n    var reqLength = length || Math.max(1, byteLength);\n    assert(byteLength <= reqLength, 'byte array longer than desired length');\n    assert(reqLength > 0, 'Requested array length <= 0');\n\n    var res = allocate(ArrayType, reqLength);\n    var postfix = endian === 'le' ? 'LE' : 'BE';\n    this['_toArrayLike' + postfix](res, byteLength);\n    return res;\n  };\n\n  BN.prototype._toArrayLikeLE = function _toArrayLikeLE (res, byteLength) {\n    var position = 0;\n    var carry = 0;\n\n    for (var i = 0, shift = 0; i < this.length; i++) {\n      var word = (this.words[i] << shift) | carry;\n\n      res[position++] = word & 0xff;\n      if (position < res.length) {\n        res[position++] = (word >> 8) & 0xff;\n      }\n      if (position < res.length) {\n        res[position++] = (word >> 16) & 0xff;\n      }\n\n      if (shift === 6) {\n        if (position < res.length) {\n          res[position++] = (word >> 24) & 0xff;\n        }\n        carry = 0;\n        shift = 0;\n      } else {\n        carry = word >>> 24;\n        shift += 2;\n      }\n    }\n\n    if (position < res.length) {\n      res[position++] = carry;\n\n      while (position < res.length) {\n        res[position++] = 0;\n      }\n    }\n  };\n\n  BN.prototype._toArrayLikeBE = function _toArrayLikeBE (res, byteLength) {\n    var position = res.length - 1;\n    var carry = 0;\n\n    for (var i = 0, shift = 0; i < this.length; i++) {\n      var word = (this.words[i] << shift) | carry;\n\n      res[position--] = word & 0xff;\n      if (position >= 0) {\n        res[position--] = (word >> 8) & 0xff;\n      }\n      if (position >= 0) {\n        res[position--] = (word >> 16) & 0xff;\n      }\n\n      if (shift === 6) {\n        if (position >= 0) {\n          res[position--] = (word >> 24) & 0xff;\n        }\n        carry = 0;\n        shift = 0;\n      } else {\n        carry = word >>> 24;\n        shift += 2;\n      }\n    }\n\n    if (position >= 0) {\n      res[position--] = carry;\n\n      while (position >= 0) {\n        res[position--] = 0;\n      }\n    }\n  };\n\n  if (Math.clz32) {\n    BN.prototype._countBits = function _countBits (w) {\n      return 32 - Math.clz32(w);\n    };\n  } else {\n    BN.prototype._countBits = function _countBits (w) {\n      var t = w;\n      var r = 0;\n      if (t >= 0x1000) {\n        r += 13;\n        t >>>= 13;\n      }\n      if (t >= 0x40) {\n        r += 7;\n        t >>>= 7;\n      }\n      if (t >= 0x8) {\n        r += 4;\n        t >>>= 4;\n      }\n      if (t >= 0x02) {\n        r += 2;\n        t >>>= 2;\n      }\n      return r + t;\n    };\n  }\n\n  BN.prototype._zeroBits = function _zeroBits (w) {\n    // Short-cut\n    if (w === 0) return 26;\n\n    var t = w;\n    var r = 0;\n    if ((t & 0x1fff) === 0) {\n      r += 13;\n      t >>>= 13;\n    }\n    if ((t & 0x7f) === 0) {\n      r += 7;\n      t >>>= 7;\n    }\n    if ((t & 0xf) === 0) {\n      r += 4;\n      t >>>= 4;\n    }\n    if ((t & 0x3) === 0) {\n      r += 2;\n      t >>>= 2;\n    }\n    if ((t & 0x1) === 0) {\n      r++;\n    }\n    return r;\n  };\n\n  // Return number of used bits in a BN\n  BN.prototype.bitLength = function bitLength () {\n    var w = this.words[this.length - 1];\n    var hi = this._countBits(w);\n    return (this.length - 1) * 26 + hi;\n  };\n\n  function toBitArray (num) {\n    var w = new Array(num.bitLength());\n\n    for (var bit = 0; bit < w.length; bit++) {\n      var off = (bit / 26) | 0;\n      var wbit = bit % 26;\n\n      w[bit] = (num.words[off] >>> wbit) & 0x01;\n    }\n\n    return w;\n  }\n\n  // Number of trailing zero bits\n  BN.prototype.zeroBits = function zeroBits () {\n    if (this.isZero()) return 0;\n\n    var r = 0;\n    for (var i = 0; i < this.length; i++) {\n      var b = this._zeroBits(this.words[i]);\n      r += b;\n      if (b !== 26) break;\n    }\n    return r;\n  };\n\n  BN.prototype.byteLength = function byteLength () {\n    return Math.ceil(this.bitLength() / 8);\n  };\n\n  BN.prototype.toTwos = function toTwos (width) {\n    if (this.negative !== 0) {\n      return this.abs().inotn(width).iaddn(1);\n    }\n    return this.clone();\n  };\n\n  BN.prototype.fromTwos = function fromTwos (width) {\n    if (this.testn(width - 1)) {\n      return this.notn(width).iaddn(1).ineg();\n    }\n    return this.clone();\n  };\n\n  BN.prototype.isNeg = function isNeg () {\n    return this.negative !== 0;\n  };\n\n  // Return negative clone of `this`\n  BN.prototype.neg = function neg () {\n    return this.clone().ineg();\n  };\n\n  BN.prototype.ineg = function ineg () {\n    if (!this.isZero()) {\n      this.negative ^= 1;\n    }\n\n    return this;\n  };\n\n  // Or `num` with `this` in-place\n  BN.prototype.iuor = function iuor (num) {\n    while (this.length < num.length) {\n      this.words[this.length++] = 0;\n    }\n\n    for (var i = 0; i < num.length; i++) {\n      this.words[i] = this.words[i] | num.words[i];\n    }\n\n    return this._strip();\n  };\n\n  BN.prototype.ior = function ior (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuor(num);\n  };\n\n  // Or `num` with `this`\n  BN.prototype.or = function or (num) {\n    if (this.length > num.length) return this.clone().ior(num);\n    return num.clone().ior(this);\n  };\n\n  BN.prototype.uor = function uor (num) {\n    if (this.length > num.length) return this.clone().iuor(num);\n    return num.clone().iuor(this);\n  };\n\n  // And `num` with `this` in-place\n  BN.prototype.iuand = function iuand (num) {\n    // b = min-length(num, this)\n    var b;\n    if (this.length > num.length) {\n      b = num;\n    } else {\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = this.words[i] & num.words[i];\n    }\n\n    this.length = b.length;\n\n    return this._strip();\n  };\n\n  BN.prototype.iand = function iand (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuand(num);\n  };\n\n  // And `num` with `this`\n  BN.prototype.and = function and (num) {\n    if (this.length > num.length) return this.clone().iand(num);\n    return num.clone().iand(this);\n  };\n\n  BN.prototype.uand = function uand (num) {\n    if (this.length > num.length) return this.clone().iuand(num);\n    return num.clone().iuand(this);\n  };\n\n  // Xor `num` with `this` in-place\n  BN.prototype.iuxor = function iuxor (num) {\n    // a.length > b.length\n    var a;\n    var b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = a.words[i] ^ b.words[i];\n    }\n\n    if (this !== a) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = a.length;\n\n    return this._strip();\n  };\n\n  BN.prototype.ixor = function ixor (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuxor(num);\n  };\n\n  // Xor `num` with `this`\n  BN.prototype.xor = function xor (num) {\n    if (this.length > num.length) return this.clone().ixor(num);\n    return num.clone().ixor(this);\n  };\n\n  BN.prototype.uxor = function uxor (num) {\n    if (this.length > num.length) return this.clone().iuxor(num);\n    return num.clone().iuxor(this);\n  };\n\n  // Not ``this`` with ``width`` bitwidth\n  BN.prototype.inotn = function inotn (width) {\n    assert(typeof width === 'number' && width >= 0);\n\n    var bytesNeeded = Math.ceil(width / 26) | 0;\n    var bitsLeft = width % 26;\n\n    // Extend the buffer with leading zeroes\n    this._expand(bytesNeeded);\n\n    if (bitsLeft > 0) {\n      bytesNeeded--;\n    }\n\n    // Handle complete words\n    for (var i = 0; i < bytesNeeded; i++) {\n      this.words[i] = ~this.words[i] & 0x3ffffff;\n    }\n\n    // Handle the residue\n    if (bitsLeft > 0) {\n      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));\n    }\n\n    // And remove leading zeroes\n    return this._strip();\n  };\n\n  BN.prototype.notn = function notn (width) {\n    return this.clone().inotn(width);\n  };\n\n  // Set `bit` of `this`\n  BN.prototype.setn = function setn (bit, val) {\n    assert(typeof bit === 'number' && bit >= 0);\n\n    var off = (bit / 26) | 0;\n    var wbit = bit % 26;\n\n    this._expand(off + 1);\n\n    if (val) {\n      this.words[off] = this.words[off] | (1 << wbit);\n    } else {\n      this.words[off] = this.words[off] & ~(1 << wbit);\n    }\n\n    return this._strip();\n  };\n\n  // Add `num` to `this` in-place\n  BN.prototype.iadd = function iadd (num) {\n    var r;\n\n    // negative + positive\n    if (this.negative !== 0 && num.negative === 0) {\n      this.negative = 0;\n      r = this.isub(num);\n      this.negative ^= 1;\n      return this._normSign();\n\n    // positive + negative\n    } else if (this.negative === 0 && num.negative !== 0) {\n      num.negative = 0;\n      r = this.isub(num);\n      num.negative = 1;\n      return r._normSign();\n    }\n\n    // a.length > b.length\n    var a, b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n\n    this.length = a.length;\n    if (carry !== 0) {\n      this.words[this.length] = carry;\n      this.length++;\n    // Copy the rest of the words\n    } else if (a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    return this;\n  };\n\n  // Add `num` to `this`\n  BN.prototype.add = function add (num) {\n    var res;\n    if (num.negative !== 0 && this.negative === 0) {\n      num.negative = 0;\n      res = this.sub(num);\n      num.negative ^= 1;\n      return res;\n    } else if (num.negative === 0 && this.negative !== 0) {\n      this.negative = 0;\n      res = num.sub(this);\n      this.negative = 1;\n      return res;\n    }\n\n    if (this.length > num.length) return this.clone().iadd(num);\n\n    return num.clone().iadd(this);\n  };\n\n  // Subtract `num` from `this` in-place\n  BN.prototype.isub = function isub (num) {\n    // this - (-num) = this + num\n    if (num.negative !== 0) {\n      num.negative = 0;\n      var r = this.iadd(num);\n      num.negative = 1;\n      return r._normSign();\n\n    // -this - num = -(this + num)\n    } else if (this.negative !== 0) {\n      this.negative = 0;\n      this.iadd(num);\n      this.negative = 1;\n      return this._normSign();\n    }\n\n    // At this point both numbers are positive\n    var cmp = this.cmp(num);\n\n    // Optimization - zeroify\n    if (cmp === 0) {\n      this.negative = 0;\n      this.length = 1;\n      this.words[0] = 0;\n      return this;\n    }\n\n    // a > b\n    var a, b;\n    if (cmp > 0) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n\n    // Copy rest of the words\n    if (carry === 0 && i < a.length && a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = Math.max(this.length, i);\n\n    if (a !== this) {\n      this.negative = 1;\n    }\n\n    return this._strip();\n  };\n\n  // Subtract `num` from `this`\n  BN.prototype.sub = function sub (num) {\n    return this.clone().isub(num);\n  };\n\n  function smallMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    var len = (self.length + num.length) | 0;\n    out.length = len;\n    len = (len - 1) | 0;\n\n    // Peel one iteration (compiler can't do it, because of code complexity)\n    var a = self.words[0] | 0;\n    var b = num.words[0] | 0;\n    var r = a * b;\n\n    var lo = r & 0x3ffffff;\n    var carry = (r / 0x4000000) | 0;\n    out.words[0] = lo;\n\n    for (var k = 1; k < len; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = carry >>> 26;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = (k - j) | 0;\n        a = self.words[i] | 0;\n        b = num.words[j] | 0;\n        r = a * b + rword;\n        ncarry += (r / 0x4000000) | 0;\n        rword = r & 0x3ffffff;\n      }\n      out.words[k] = rword | 0;\n      carry = ncarry | 0;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry | 0;\n    } else {\n      out.length--;\n    }\n\n    return out._strip();\n  }\n\n  // TODO(indutny): it may be reasonable to omit it for users who don't need\n  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit\n  // multiplication (like elliptic secp256k1).\n  var comb10MulTo = function comb10MulTo (self, num, out) {\n    var a = self.words;\n    var b = num.words;\n    var o = out.words;\n    var c = 0;\n    var lo;\n    var mid;\n    var hi;\n    var a0 = a[0] | 0;\n    var al0 = a0 & 0x1fff;\n    var ah0 = a0 >>> 13;\n    var a1 = a[1] | 0;\n    var al1 = a1 & 0x1fff;\n    var ah1 = a1 >>> 13;\n    var a2 = a[2] | 0;\n    var al2 = a2 & 0x1fff;\n    var ah2 = a2 >>> 13;\n    var a3 = a[3] | 0;\n    var al3 = a3 & 0x1fff;\n    var ah3 = a3 >>> 13;\n    var a4 = a[4] | 0;\n    var al4 = a4 & 0x1fff;\n    var ah4 = a4 >>> 13;\n    var a5 = a[5] | 0;\n    var al5 = a5 & 0x1fff;\n    var ah5 = a5 >>> 13;\n    var a6 = a[6] | 0;\n    var al6 = a6 & 0x1fff;\n    var ah6 = a6 >>> 13;\n    var a7 = a[7] | 0;\n    var al7 = a7 & 0x1fff;\n    var ah7 = a7 >>> 13;\n    var a8 = a[8] | 0;\n    var al8 = a8 & 0x1fff;\n    var ah8 = a8 >>> 13;\n    var a9 = a[9] | 0;\n    var al9 = a9 & 0x1fff;\n    var ah9 = a9 >>> 13;\n    var b0 = b[0] | 0;\n    var bl0 = b0 & 0x1fff;\n    var bh0 = b0 >>> 13;\n    var b1 = b[1] | 0;\n    var bl1 = b1 & 0x1fff;\n    var bh1 = b1 >>> 13;\n    var b2 = b[2] | 0;\n    var bl2 = b2 & 0x1fff;\n    var bh2 = b2 >>> 13;\n    var b3 = b[3] | 0;\n    var bl3 = b3 & 0x1fff;\n    var bh3 = b3 >>> 13;\n    var b4 = b[4] | 0;\n    var bl4 = b4 & 0x1fff;\n    var bh4 = b4 >>> 13;\n    var b5 = b[5] | 0;\n    var bl5 = b5 & 0x1fff;\n    var bh5 = b5 >>> 13;\n    var b6 = b[6] | 0;\n    var bl6 = b6 & 0x1fff;\n    var bh6 = b6 >>> 13;\n    var b7 = b[7] | 0;\n    var bl7 = b7 & 0x1fff;\n    var bh7 = b7 >>> 13;\n    var b8 = b[8] | 0;\n    var bl8 = b8 & 0x1fff;\n    var bh8 = b8 >>> 13;\n    var b9 = b[9] | 0;\n    var bl9 = b9 & 0x1fff;\n    var bh9 = b9 >>> 13;\n\n    out.negative = self.negative ^ num.negative;\n    out.length = 19;\n    /* k = 0 */\n    lo = Math.imul(al0, bl0);\n    mid = Math.imul(al0, bh0);\n    mid = (mid + Math.imul(ah0, bl0)) | 0;\n    hi = Math.imul(ah0, bh0);\n    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;\n    w0 &= 0x3ffffff;\n    /* k = 1 */\n    lo = Math.imul(al1, bl0);\n    mid = Math.imul(al1, bh0);\n    mid = (mid + Math.imul(ah1, bl0)) | 0;\n    hi = Math.imul(ah1, bh0);\n    lo = (lo + Math.imul(al0, bl1)) | 0;\n    mid = (mid + Math.imul(al0, bh1)) | 0;\n    mid = (mid + Math.imul(ah0, bl1)) | 0;\n    hi = (hi + Math.imul(ah0, bh1)) | 0;\n    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;\n    w1 &= 0x3ffffff;\n    /* k = 2 */\n    lo = Math.imul(al2, bl0);\n    mid = Math.imul(al2, bh0);\n    mid = (mid + Math.imul(ah2, bl0)) | 0;\n    hi = Math.imul(ah2, bh0);\n    lo = (lo + Math.imul(al1, bl1)) | 0;\n    mid = (mid + Math.imul(al1, bh1)) | 0;\n    mid = (mid + Math.imul(ah1, bl1)) | 0;\n    hi = (hi + Math.imul(ah1, bh1)) | 0;\n    lo = (lo + Math.imul(al0, bl2)) | 0;\n    mid = (mid + Math.imul(al0, bh2)) | 0;\n    mid = (mid + Math.imul(ah0, bl2)) | 0;\n    hi = (hi + Math.imul(ah0, bh2)) | 0;\n    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;\n    w2 &= 0x3ffffff;\n    /* k = 3 */\n    lo = Math.imul(al3, bl0);\n    mid = Math.imul(al3, bh0);\n    mid = (mid + Math.imul(ah3, bl0)) | 0;\n    hi = Math.imul(ah3, bh0);\n    lo = (lo + Math.imul(al2, bl1)) | 0;\n    mid = (mid + Math.imul(al2, bh1)) | 0;\n    mid = (mid + Math.imul(ah2, bl1)) | 0;\n    hi = (hi + Math.imul(ah2, bh1)) | 0;\n    lo = (lo + Math.imul(al1, bl2)) | 0;\n    mid = (mid + Math.imul(al1, bh2)) | 0;\n    mid = (mid + Math.imul(ah1, bl2)) | 0;\n    hi = (hi + Math.imul(ah1, bh2)) | 0;\n    lo = (lo + Math.imul(al0, bl3)) | 0;\n    mid = (mid + Math.imul(al0, bh3)) | 0;\n    mid = (mid + Math.imul(ah0, bl3)) | 0;\n    hi = (hi + Math.imul(ah0, bh3)) | 0;\n    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;\n    w3 &= 0x3ffffff;\n    /* k = 4 */\n    lo = Math.imul(al4, bl0);\n    mid = Math.imul(al4, bh0);\n    mid = (mid + Math.imul(ah4, bl0)) | 0;\n    hi = Math.imul(ah4, bh0);\n    lo = (lo + Math.imul(al3, bl1)) | 0;\n    mid = (mid + Math.imul(al3, bh1)) | 0;\n    mid = (mid + Math.imul(ah3, bl1)) | 0;\n    hi = (hi + Math.imul(ah3, bh1)) | 0;\n    lo = (lo + Math.imul(al2, bl2)) | 0;\n    mid = (mid + Math.imul(al2, bh2)) | 0;\n    mid = (mid + Math.imul(ah2, bl2)) | 0;\n    hi = (hi + Math.imul(ah2, bh2)) | 0;\n    lo = (lo + Math.imul(al1, bl3)) | 0;\n    mid = (mid + Math.imul(al1, bh3)) | 0;\n    mid = (mid + Math.imul(ah1, bl3)) | 0;\n    hi = (hi + Math.imul(ah1, bh3)) | 0;\n    lo = (lo + Math.imul(al0, bl4)) | 0;\n    mid = (mid + Math.imul(al0, bh4)) | 0;\n    mid = (mid + Math.imul(ah0, bl4)) | 0;\n    hi = (hi + Math.imul(ah0, bh4)) | 0;\n    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;\n    w4 &= 0x3ffffff;\n    /* k = 5 */\n    lo = Math.imul(al5, bl0);\n    mid = Math.imul(al5, bh0);\n    mid = (mid + Math.imul(ah5, bl0)) | 0;\n    hi = Math.imul(ah5, bh0);\n    lo = (lo + Math.imul(al4, bl1)) | 0;\n    mid = (mid + Math.imul(al4, bh1)) | 0;\n    mid = (mid + Math.imul(ah4, bl1)) | 0;\n    hi = (hi + Math.imul(ah4, bh1)) | 0;\n    lo = (lo + Math.imul(al3, bl2)) | 0;\n    mid = (mid + Math.imul(al3, bh2)) | 0;\n    mid = (mid + Math.imul(ah3, bl2)) | 0;\n    hi = (hi + Math.imul(ah3, bh2)) | 0;\n    lo = (lo + Math.imul(al2, bl3)) | 0;\n    mid = (mid + Math.imul(al2, bh3)) | 0;\n    mid = (mid + Math.imul(ah2, bl3)) | 0;\n    hi = (hi + Math.imul(ah2, bh3)) | 0;\n    lo = (lo + Math.imul(al1, bl4)) | 0;\n    mid = (mid + Math.imul(al1, bh4)) | 0;\n    mid = (mid + Math.imul(ah1, bl4)) | 0;\n    hi = (hi + Math.imul(ah1, bh4)) | 0;\n    lo = (lo + Math.imul(al0, bl5)) | 0;\n    mid = (mid + Math.imul(al0, bh5)) | 0;\n    mid = (mid + Math.imul(ah0, bl5)) | 0;\n    hi = (hi + Math.imul(ah0, bh5)) | 0;\n    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;\n    w5 &= 0x3ffffff;\n    /* k = 6 */\n    lo = Math.imul(al6, bl0);\n    mid = Math.imul(al6, bh0);\n    mid = (mid + Math.imul(ah6, bl0)) | 0;\n    hi = Math.imul(ah6, bh0);\n    lo = (lo + Math.imul(al5, bl1)) | 0;\n    mid = (mid + Math.imul(al5, bh1)) | 0;\n    mid = (mid + Math.imul(ah5, bl1)) | 0;\n    hi = (hi + Math.imul(ah5, bh1)) | 0;\n    lo = (lo + Math.imul(al4, bl2)) | 0;\n    mid = (mid + Math.imul(al4, bh2)) | 0;\n    mid = (mid + Math.imul(ah4, bl2)) | 0;\n    hi = (hi + Math.imul(ah4, bh2)) | 0;\n    lo = (lo + Math.imul(al3, bl3)) | 0;\n    mid = (mid + Math.imul(al3, bh3)) | 0;\n    mid = (mid + Math.imul(ah3, bl3)) | 0;\n    hi = (hi + Math.imul(ah3, bh3)) | 0;\n    lo = (lo + Math.imul(al2, bl4)) | 0;\n    mid = (mid + Math.imul(al2, bh4)) | 0;\n    mid = (mid + Math.imul(ah2, bl4)) | 0;\n    hi = (hi + Math.imul(ah2, bh4)) | 0;\n    lo = (lo + Math.imul(al1, bl5)) | 0;\n    mid = (mid + Math.imul(al1, bh5)) | 0;\n    mid = (mid + Math.imul(ah1, bl5)) | 0;\n    hi = (hi + Math.imul(ah1, bh5)) | 0;\n    lo = (lo + Math.imul(al0, bl6)) | 0;\n    mid = (mid + Math.imul(al0, bh6)) | 0;\n    mid = (mid + Math.imul(ah0, bl6)) | 0;\n    hi = (hi + Math.imul(ah0, bh6)) | 0;\n    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;\n    w6 &= 0x3ffffff;\n    /* k = 7 */\n    lo = Math.imul(al7, bl0);\n    mid = Math.imul(al7, bh0);\n    mid = (mid + Math.imul(ah7, bl0)) | 0;\n    hi = Math.imul(ah7, bh0);\n    lo = (lo + Math.imul(al6, bl1)) | 0;\n    mid = (mid + Math.imul(al6, bh1)) | 0;\n    mid = (mid + Math.imul(ah6, bl1)) | 0;\n    hi = (hi + Math.imul(ah6, bh1)) | 0;\n    lo = (lo + Math.imul(al5, bl2)) | 0;\n    mid = (mid + Math.imul(al5, bh2)) | 0;\n    mid = (mid + Math.imul(ah5, bl2)) | 0;\n    hi = (hi + Math.imul(ah5, bh2)) | 0;\n    lo = (lo + Math.imul(al4, bl3)) | 0;\n    mid = (mid + Math.imul(al4, bh3)) | 0;\n    mid = (mid + Math.imul(ah4, bl3)) | 0;\n    hi = (hi + Math.imul(ah4, bh3)) | 0;\n    lo = (lo + Math.imul(al3, bl4)) | 0;\n    mid = (mid + Math.imul(al3, bh4)) | 0;\n    mid = (mid + Math.imul(ah3, bl4)) | 0;\n    hi = (hi + Math.imul(ah3, bh4)) | 0;\n    lo = (lo + Math.imul(al2, bl5)) | 0;\n    mid = (mid + Math.imul(al2, bh5)) | 0;\n    mid = (mid + Math.imul(ah2, bl5)) | 0;\n    hi = (hi + Math.imul(ah2, bh5)) | 0;\n    lo = (lo + Math.imul(al1, bl6)) | 0;\n    mid = (mid + Math.imul(al1, bh6)) | 0;\n    mid = (mid + Math.imul(ah1, bl6)) | 0;\n    hi = (hi + Math.imul(ah1, bh6)) | 0;\n    lo = (lo + Math.imul(al0, bl7)) | 0;\n    mid = (mid + Math.imul(al0, bh7)) | 0;\n    mid = (mid + Math.imul(ah0, bl7)) | 0;\n    hi = (hi + Math.imul(ah0, bh7)) | 0;\n    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;\n    w7 &= 0x3ffffff;\n    /* k = 8 */\n    lo = Math.imul(al8, bl0);\n    mid = Math.imul(al8, bh0);\n    mid = (mid + Math.imul(ah8, bl0)) | 0;\n    hi = Math.imul(ah8, bh0);\n    lo = (lo + Math.imul(al7, bl1)) | 0;\n    mid = (mid + Math.imul(al7, bh1)) | 0;\n    mid = (mid + Math.imul(ah7, bl1)) | 0;\n    hi = (hi + Math.imul(ah7, bh1)) | 0;\n    lo = (lo + Math.imul(al6, bl2)) | 0;\n    mid = (mid + Math.imul(al6, bh2)) | 0;\n    mid = (mid + Math.imul(ah6, bl2)) | 0;\n    hi = (hi + Math.imul(ah6, bh2)) | 0;\n    lo = (lo + Math.imul(al5, bl3)) | 0;\n    mid = (mid + Math.imul(al5, bh3)) | 0;\n    mid = (mid + Math.imul(ah5, bl3)) | 0;\n    hi = (hi + Math.imul(ah5, bh3)) | 0;\n    lo = (lo + Math.imul(al4, bl4)) | 0;\n    mid = (mid + Math.imul(al4, bh4)) | 0;\n    mid = (mid + Math.imul(ah4, bl4)) | 0;\n    hi = (hi + Math.imul(ah4, bh4)) | 0;\n    lo = (lo + Math.imul(al3, bl5)) | 0;\n    mid = (mid + Math.imul(al3, bh5)) | 0;\n    mid = (mid + Math.imul(ah3, bl5)) | 0;\n    hi = (hi + Math.imul(ah3, bh5)) | 0;\n    lo = (lo + Math.imul(al2, bl6)) | 0;\n    mid = (mid + Math.imul(al2, bh6)) | 0;\n    mid = (mid + Math.imul(ah2, bl6)) | 0;\n    hi = (hi + Math.imul(ah2, bh6)) | 0;\n    lo = (lo + Math.imul(al1, bl7)) | 0;\n    mid = (mid + Math.imul(al1, bh7)) | 0;\n    mid = (mid + Math.imul(ah1, bl7)) | 0;\n    hi = (hi + Math.imul(ah1, bh7)) | 0;\n    lo = (lo + Math.imul(al0, bl8)) | 0;\n    mid = (mid + Math.imul(al0, bh8)) | 0;\n    mid = (mid + Math.imul(ah0, bl8)) | 0;\n    hi = (hi + Math.imul(ah0, bh8)) | 0;\n    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;\n    w8 &= 0x3ffffff;\n    /* k = 9 */\n    lo = Math.imul(al9, bl0);\n    mid = Math.imul(al9, bh0);\n    mid = (mid + Math.imul(ah9, bl0)) | 0;\n    hi = Math.imul(ah9, bh0);\n    lo = (lo + Math.imul(al8, bl1)) | 0;\n    mid = (mid + Math.imul(al8, bh1)) | 0;\n    mid = (mid + Math.imul(ah8, bl1)) | 0;\n    hi = (hi + Math.imul(ah8, bh1)) | 0;\n    lo = (lo + Math.imul(al7, bl2)) | 0;\n    mid = (mid + Math.imul(al7, bh2)) | 0;\n    mid = (mid + Math.imul(ah7, bl2)) | 0;\n    hi = (hi + Math.imul(ah7, bh2)) | 0;\n    lo = (lo + Math.imul(al6, bl3)) | 0;\n    mid = (mid + Math.imul(al6, bh3)) | 0;\n    mid = (mid + Math.imul(ah6, bl3)) | 0;\n    hi = (hi + Math.imul(ah6, bh3)) | 0;\n    lo = (lo + Math.imul(al5, bl4)) | 0;\n    mid = (mid + Math.imul(al5, bh4)) | 0;\n    mid = (mid + Math.imul(ah5, bl4)) | 0;\n    hi = (hi + Math.imul(ah5, bh4)) | 0;\n    lo = (lo + Math.imul(al4, bl5)) | 0;\n    mid = (mid + Math.imul(al4, bh5)) | 0;\n    mid = (mid + Math.imul(ah4, bl5)) | 0;\n    hi = (hi + Math.imul(ah4, bh5)) | 0;\n    lo = (lo + Math.imul(al3, bl6)) | 0;\n    mid = (mid + Math.imul(al3, bh6)) | 0;\n    mid = (mid + Math.imul(ah3, bl6)) | 0;\n    hi = (hi + Math.imul(ah3, bh6)) | 0;\n    lo = (lo + Math.imul(al2, bl7)) | 0;\n    mid = (mid + Math.imul(al2, bh7)) | 0;\n    mid = (mid + Math.imul(ah2, bl7)) | 0;\n    hi = (hi + Math.imul(ah2, bh7)) | 0;\n    lo = (lo + Math.imul(al1, bl8)) | 0;\n    mid = (mid + Math.imul(al1, bh8)) | 0;\n    mid = (mid + Math.imul(ah1, bl8)) | 0;\n    hi = (hi + Math.imul(ah1, bh8)) | 0;\n    lo = (lo + Math.imul(al0, bl9)) | 0;\n    mid = (mid + Math.imul(al0, bh9)) | 0;\n    mid = (mid + Math.imul(ah0, bl9)) | 0;\n    hi = (hi + Math.imul(ah0, bh9)) | 0;\n    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;\n    w9 &= 0x3ffffff;\n    /* k = 10 */\n    lo = Math.imul(al9, bl1);\n    mid = Math.imul(al9, bh1);\n    mid = (mid + Math.imul(ah9, bl1)) | 0;\n    hi = Math.imul(ah9, bh1);\n    lo = (lo + Math.imul(al8, bl2)) | 0;\n    mid = (mid + Math.imul(al8, bh2)) | 0;\n    mid = (mid + Math.imul(ah8, bl2)) | 0;\n    hi = (hi + Math.imul(ah8, bh2)) | 0;\n    lo = (lo + Math.imul(al7, bl3)) | 0;\n    mid = (mid + Math.imul(al7, bh3)) | 0;\n    mid = (mid + Math.imul(ah7, bl3)) | 0;\n    hi = (hi + Math.imul(ah7, bh3)) | 0;\n    lo = (lo + Math.imul(al6, bl4)) | 0;\n    mid = (mid + Math.imul(al6, bh4)) | 0;\n    mid = (mid + Math.imul(ah6, bl4)) | 0;\n    hi = (hi + Math.imul(ah6, bh4)) | 0;\n    lo = (lo + Math.imul(al5, bl5)) | 0;\n    mid = (mid + Math.imul(al5, bh5)) | 0;\n    mid = (mid + Math.imul(ah5, bl5)) | 0;\n    hi = (hi + Math.imul(ah5, bh5)) | 0;\n    lo = (lo + Math.imul(al4, bl6)) | 0;\n    mid = (mid + Math.imul(al4, bh6)) | 0;\n    mid = (mid + Math.imul(ah4, bl6)) | 0;\n    hi = (hi + Math.imul(ah4, bh6)) | 0;\n    lo = (lo + Math.imul(al3, bl7)) | 0;\n    mid = (mid + Math.imul(al3, bh7)) | 0;\n    mid = (mid + Math.imul(ah3, bl7)) | 0;\n    hi = (hi + Math.imul(ah3, bh7)) | 0;\n    lo = (lo + Math.imul(al2, bl8)) | 0;\n    mid = (mid + Math.imul(al2, bh8)) | 0;\n    mid = (mid + Math.imul(ah2, bl8)) | 0;\n    hi = (hi + Math.imul(ah2, bh8)) | 0;\n    lo = (lo + Math.imul(al1, bl9)) | 0;\n    mid = (mid + Math.imul(al1, bh9)) | 0;\n    mid = (mid + Math.imul(ah1, bl9)) | 0;\n    hi = (hi + Math.imul(ah1, bh9)) | 0;\n    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;\n    w10 &= 0x3ffffff;\n    /* k = 11 */\n    lo = Math.imul(al9, bl2);\n    mid = Math.imul(al9, bh2);\n    mid = (mid + Math.imul(ah9, bl2)) | 0;\n    hi = Math.imul(ah9, bh2);\n    lo = (lo + Math.imul(al8, bl3)) | 0;\n    mid = (mid + Math.imul(al8, bh3)) | 0;\n    mid = (mid + Math.imul(ah8, bl3)) | 0;\n    hi = (hi + Math.imul(ah8, bh3)) | 0;\n    lo = (lo + Math.imul(al7, bl4)) | 0;\n    mid = (mid + Math.imul(al7, bh4)) | 0;\n    mid = (mid + Math.imul(ah7, bl4)) | 0;\n    hi = (hi + Math.imul(ah7, bh4)) | 0;\n    lo = (lo + Math.imul(al6, bl5)) | 0;\n    mid = (mid + Math.imul(al6, bh5)) | 0;\n    mid = (mid + Math.imul(ah6, bl5)) | 0;\n    hi = (hi + Math.imul(ah6, bh5)) | 0;\n    lo = (lo + Math.imul(al5, bl6)) | 0;\n    mid = (mid + Math.imul(al5, bh6)) | 0;\n    mid = (mid + Math.imul(ah5, bl6)) | 0;\n    hi = (hi + Math.imul(ah5, bh6)) | 0;\n    lo = (lo + Math.imul(al4, bl7)) | 0;\n    mid = (mid + Math.imul(al4, bh7)) | 0;\n    mid = (mid + Math.imul(ah4, bl7)) | 0;\n    hi = (hi + Math.imul(ah4, bh7)) | 0;\n    lo = (lo + Math.imul(al3, bl8)) | 0;\n    mid = (mid + Math.imul(al3, bh8)) | 0;\n    mid = (mid + Math.imul(ah3, bl8)) | 0;\n    hi = (hi + Math.imul(ah3, bh8)) | 0;\n    lo = (lo + Math.imul(al2, bl9)) | 0;\n    mid = (mid + Math.imul(al2, bh9)) | 0;\n    mid = (mid + Math.imul(ah2, bl9)) | 0;\n    hi = (hi + Math.imul(ah2, bh9)) | 0;\n    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;\n    w11 &= 0x3ffffff;\n    /* k = 12 */\n    lo = Math.imul(al9, bl3);\n    mid = Math.imul(al9, bh3);\n    mid = (mid + Math.imul(ah9, bl3)) | 0;\n    hi = Math.imul(ah9, bh3);\n    lo = (lo + Math.imul(al8, bl4)) | 0;\n    mid = (mid + Math.imul(al8, bh4)) | 0;\n    mid = (mid + Math.imul(ah8, bl4)) | 0;\n    hi = (hi + Math.imul(ah8, bh4)) | 0;\n    lo = (lo + Math.imul(al7, bl5)) | 0;\n    mid = (mid + Math.imul(al7, bh5)) | 0;\n    mid = (mid + Math.imul(ah7, bl5)) | 0;\n    hi = (hi + Math.imul(ah7, bh5)) | 0;\n    lo = (lo + Math.imul(al6, bl6)) | 0;\n    mid = (mid + Math.imul(al6, bh6)) | 0;\n    mid = (mid + Math.imul(ah6, bl6)) | 0;\n    hi = (hi + Math.imul(ah6, bh6)) | 0;\n    lo = (lo + Math.imul(al5, bl7)) | 0;\n    mid = (mid + Math.imul(al5, bh7)) | 0;\n    mid = (mid + Math.imul(ah5, bl7)) | 0;\n    hi = (hi + Math.imul(ah5, bh7)) | 0;\n    lo = (lo + Math.imul(al4, bl8)) | 0;\n    mid = (mid + Math.imul(al4, bh8)) | 0;\n    mid = (mid + Math.imul(ah4, bl8)) | 0;\n    hi = (hi + Math.imul(ah4, bh8)) | 0;\n    lo = (lo + Math.imul(al3, bl9)) | 0;\n    mid = (mid + Math.imul(al3, bh9)) | 0;\n    mid = (mid + Math.imul(ah3, bl9)) | 0;\n    hi = (hi + Math.imul(ah3, bh9)) | 0;\n    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;\n    w12 &= 0x3ffffff;\n    /* k = 13 */\n    lo = Math.imul(al9, bl4);\n    mid = Math.imul(al9, bh4);\n    mid = (mid + Math.imul(ah9, bl4)) | 0;\n    hi = Math.imul(ah9, bh4);\n    lo = (lo + Math.imul(al8, bl5)) | 0;\n    mid = (mid + Math.imul(al8, bh5)) | 0;\n    mid = (mid + Math.imul(ah8, bl5)) | 0;\n    hi = (hi + Math.imul(ah8, bh5)) | 0;\n    lo = (lo + Math.imul(al7, bl6)) | 0;\n    mid = (mid + Math.imul(al7, bh6)) | 0;\n    mid = (mid + Math.imul(ah7, bl6)) | 0;\n    hi = (hi + Math.imul(ah7, bh6)) | 0;\n    lo = (lo + Math.imul(al6, bl7)) | 0;\n    mid = (mid + Math.imul(al6, bh7)) | 0;\n    mid = (mid + Math.imul(ah6, bl7)) | 0;\n    hi = (hi + Math.imul(ah6, bh7)) | 0;\n    lo = (lo + Math.imul(al5, bl8)) | 0;\n    mid = (mid + Math.imul(al5, bh8)) | 0;\n    mid = (mid + Math.imul(ah5, bl8)) | 0;\n    hi = (hi + Math.imul(ah5, bh8)) | 0;\n    lo = (lo + Math.imul(al4, bl9)) | 0;\n    mid = (mid + Math.imul(al4, bh9)) | 0;\n    mid = (mid + Math.imul(ah4, bl9)) | 0;\n    hi = (hi + Math.imul(ah4, bh9)) | 0;\n    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;\n    w13 &= 0x3ffffff;\n    /* k = 14 */\n    lo = Math.imul(al9, bl5);\n    mid = Math.imul(al9, bh5);\n    mid = (mid + Math.imul(ah9, bl5)) | 0;\n    hi = Math.imul(ah9, bh5);\n    lo = (lo + Math.imul(al8, bl6)) | 0;\n    mid = (mid + Math.imul(al8, bh6)) | 0;\n    mid = (mid + Math.imul(ah8, bl6)) | 0;\n    hi = (hi + Math.imul(ah8, bh6)) | 0;\n    lo = (lo + Math.imul(al7, bl7)) | 0;\n    mid = (mid + Math.imul(al7, bh7)) | 0;\n    mid = (mid + Math.imul(ah7, bl7)) | 0;\n    hi = (hi + Math.imul(ah7, bh7)) | 0;\n    lo = (lo + Math.imul(al6, bl8)) | 0;\n    mid = (mid + Math.imul(al6, bh8)) | 0;\n    mid = (mid + Math.imul(ah6, bl8)) | 0;\n    hi = (hi + Math.imul(ah6, bh8)) | 0;\n    lo = (lo + Math.imul(al5, bl9)) | 0;\n    mid = (mid + Math.imul(al5, bh9)) | 0;\n    mid = (mid + Math.imul(ah5, bl9)) | 0;\n    hi = (hi + Math.imul(ah5, bh9)) | 0;\n    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;\n    w14 &= 0x3ffffff;\n    /* k = 15 */\n    lo = Math.imul(al9, bl6);\n    mid = Math.imul(al9, bh6);\n    mid = (mid + Math.imul(ah9, bl6)) | 0;\n    hi = Math.imul(ah9, bh6);\n    lo = (lo + Math.imul(al8, bl7)) | 0;\n    mid = (mid + Math.imul(al8, bh7)) | 0;\n    mid = (mid + Math.imul(ah8, bl7)) | 0;\n    hi = (hi + Math.imul(ah8, bh7)) | 0;\n    lo = (lo + Math.imul(al7, bl8)) | 0;\n    mid = (mid + Math.imul(al7, bh8)) | 0;\n    mid = (mid + Math.imul(ah7, bl8)) | 0;\n    hi = (hi + Math.imul(ah7, bh8)) | 0;\n    lo = (lo + Math.imul(al6, bl9)) | 0;\n    mid = (mid + Math.imul(al6, bh9)) | 0;\n    mid = (mid + Math.imul(ah6, bl9)) | 0;\n    hi = (hi + Math.imul(ah6, bh9)) | 0;\n    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;\n    w15 &= 0x3ffffff;\n    /* k = 16 */\n    lo = Math.imul(al9, bl7);\n    mid = Math.imul(al9, bh7);\n    mid = (mid + Math.imul(ah9, bl7)) | 0;\n    hi = Math.imul(ah9, bh7);\n    lo = (lo + Math.imul(al8, bl8)) | 0;\n    mid = (mid + Math.imul(al8, bh8)) | 0;\n    mid = (mid + Math.imul(ah8, bl8)) | 0;\n    hi = (hi + Math.imul(ah8, bh8)) | 0;\n    lo = (lo + Math.imul(al7, bl9)) | 0;\n    mid = (mid + Math.imul(al7, bh9)) | 0;\n    mid = (mid + Math.imul(ah7, bl9)) | 0;\n    hi = (hi + Math.imul(ah7, bh9)) | 0;\n    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;\n    w16 &= 0x3ffffff;\n    /* k = 17 */\n    lo = Math.imul(al9, bl8);\n    mid = Math.imul(al9, bh8);\n    mid = (mid + Math.imul(ah9, bl8)) | 0;\n    hi = Math.imul(ah9, bh8);\n    lo = (lo + Math.imul(al8, bl9)) | 0;\n    mid = (mid + Math.imul(al8, bh9)) | 0;\n    mid = (mid + Math.imul(ah8, bl9)) | 0;\n    hi = (hi + Math.imul(ah8, bh9)) | 0;\n    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;\n    w17 &= 0x3ffffff;\n    /* k = 18 */\n    lo = Math.imul(al9, bl9);\n    mid = Math.imul(al9, bh9);\n    mid = (mid + Math.imul(ah9, bl9)) | 0;\n    hi = Math.imul(ah9, bh9);\n    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;\n    w18 &= 0x3ffffff;\n    o[0] = w0;\n    o[1] = w1;\n    o[2] = w2;\n    o[3] = w3;\n    o[4] = w4;\n    o[5] = w5;\n    o[6] = w6;\n    o[7] = w7;\n    o[8] = w8;\n    o[9] = w9;\n    o[10] = w10;\n    o[11] = w11;\n    o[12] = w12;\n    o[13] = w13;\n    o[14] = w14;\n    o[15] = w15;\n    o[16] = w16;\n    o[17] = w17;\n    o[18] = w18;\n    if (c !== 0) {\n      o[19] = c;\n      out.length++;\n    }\n    return out;\n  };\n\n  // Polyfill comb\n  if (!Math.imul) {\n    comb10MulTo = smallMulTo;\n  }\n\n  function bigMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    out.length = self.length + num.length;\n\n    var carry = 0;\n    var hncarry = 0;\n    for (var k = 0; k < out.length - 1; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = hncarry;\n      hncarry = 0;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = k - j;\n        var a = self.words[i] | 0;\n        var b = num.words[j] | 0;\n        var r = a * b;\n\n        var lo = r & 0x3ffffff;\n        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;\n        lo = (lo + rword) | 0;\n        rword = lo & 0x3ffffff;\n        ncarry = (ncarry + (lo >>> 26)) | 0;\n\n        hncarry += ncarry >>> 26;\n        ncarry &= 0x3ffffff;\n      }\n      out.words[k] = rword;\n      carry = ncarry;\n      ncarry = hncarry;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry;\n    } else {\n      out.length--;\n    }\n\n    return out._strip();\n  }\n\n  function jumboMulTo (self, num, out) {\n    // Temporary disable, see https://github.com/indutny/bn.js/issues/211\n    // var fftm = new FFTM();\n    // return fftm.mulp(self, num, out);\n    return bigMulTo(self, num, out);\n  }\n\n  BN.prototype.mulTo = function mulTo (num, out) {\n    var res;\n    var len = this.length + num.length;\n    if (this.length === 10 && num.length === 10) {\n      res = comb10MulTo(this, num, out);\n    } else if (len < 63) {\n      res = smallMulTo(this, num, out);\n    } else if (len < 1024) {\n      res = bigMulTo(this, num, out);\n    } else {\n      res = jumboMulTo(this, num, out);\n    }\n\n    return res;\n  };\n\n  // Cooley-Tukey algorithm for FFT\n  // slightly revisited to rely on looping instead of recursion\n\n  function FFTM (x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  FFTM.prototype.makeRBT = function makeRBT (N) {\n    var t = new Array(N);\n    var l = BN.prototype._countBits(N) - 1;\n    for (var i = 0; i < N; i++) {\n      t[i] = this.revBin(i, l, N);\n    }\n\n    return t;\n  };\n\n  // Returns binary-reversed representation of `x`\n  FFTM.prototype.revBin = function revBin (x, l, N) {\n    if (x === 0 || x === N - 1) return x;\n\n    var rb = 0;\n    for (var i = 0; i < l; i++) {\n      rb |= (x & 1) << (l - i - 1);\n      x >>= 1;\n    }\n\n    return rb;\n  };\n\n  // Performs \"tweedling\" phase, therefore 'emulating'\n  // behaviour of the recursive algorithm\n  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {\n    for (var i = 0; i < N; i++) {\n      rtws[i] = rws[rbt[i]];\n      itws[i] = iws[rbt[i]];\n    }\n  };\n\n  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {\n    this.permute(rbt, rws, iws, rtws, itws, N);\n\n    for (var s = 1; s < N; s <<= 1) {\n      var l = s << 1;\n\n      var rtwdf = Math.cos(2 * Math.PI / l);\n      var itwdf = Math.sin(2 * Math.PI / l);\n\n      for (var p = 0; p < N; p += l) {\n        var rtwdf_ = rtwdf;\n        var itwdf_ = itwdf;\n\n        for (var j = 0; j < s; j++) {\n          var re = rtws[p + j];\n          var ie = itws[p + j];\n\n          var ro = rtws[p + j + s];\n          var io = itws[p + j + s];\n\n          var rx = rtwdf_ * ro - itwdf_ * io;\n\n          io = rtwdf_ * io + itwdf_ * ro;\n          ro = rx;\n\n          rtws[p + j] = re + ro;\n          itws[p + j] = ie + io;\n\n          rtws[p + j + s] = re - ro;\n          itws[p + j + s] = ie - io;\n\n          /* jshint maxdepth : false */\n          if (j !== l) {\n            rx = rtwdf * rtwdf_ - itwdf * itwdf_;\n\n            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;\n            rtwdf_ = rx;\n          }\n        }\n      }\n    }\n  };\n\n  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {\n    var N = Math.max(m, n) | 1;\n    var odd = N & 1;\n    var i = 0;\n    for (N = N / 2 | 0; N; N = N >>> 1) {\n      i++;\n    }\n\n    return 1 << i + 1 + odd;\n  };\n\n  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {\n    if (N <= 1) return;\n\n    for (var i = 0; i < N / 2; i++) {\n      var t = rws[i];\n\n      rws[i] = rws[N - i - 1];\n      rws[N - i - 1] = t;\n\n      t = iws[i];\n\n      iws[i] = -iws[N - i - 1];\n      iws[N - i - 1] = -t;\n    }\n  };\n\n  FFTM.prototype.normalize13b = function normalize13b (ws, N) {\n    var carry = 0;\n    for (var i = 0; i < N / 2; i++) {\n      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +\n        Math.round(ws[2 * i] / N) +\n        carry;\n\n      ws[i] = w & 0x3ffffff;\n\n      if (w < 0x4000000) {\n        carry = 0;\n      } else {\n        carry = w / 0x4000000 | 0;\n      }\n    }\n\n    return ws;\n  };\n\n  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {\n    var carry = 0;\n    for (var i = 0; i < len; i++) {\n      carry = carry + (ws[i] | 0);\n\n      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;\n      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;\n    }\n\n    // Pad with zeroes\n    for (i = 2 * len; i < N; ++i) {\n      rws[i] = 0;\n    }\n\n    assert(carry === 0);\n    assert((carry & ~0x1fff) === 0);\n  };\n\n  FFTM.prototype.stub = function stub (N) {\n    var ph = new Array(N);\n    for (var i = 0; i < N; i++) {\n      ph[i] = 0;\n    }\n\n    return ph;\n  };\n\n  FFTM.prototype.mulp = function mulp (x, y, out) {\n    var N = 2 * this.guessLen13b(x.length, y.length);\n\n    var rbt = this.makeRBT(N);\n\n    var _ = this.stub(N);\n\n    var rws = new Array(N);\n    var rwst = new Array(N);\n    var iwst = new Array(N);\n\n    var nrws = new Array(N);\n    var nrwst = new Array(N);\n    var niwst = new Array(N);\n\n    var rmws = out.words;\n    rmws.length = N;\n\n    this.convert13b(x.words, x.length, rws, N);\n    this.convert13b(y.words, y.length, nrws, N);\n\n    this.transform(rws, _, rwst, iwst, N, rbt);\n    this.transform(nrws, _, nrwst, niwst, N, rbt);\n\n    for (var i = 0; i < N; i++) {\n      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];\n      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];\n      rwst[i] = rx;\n    }\n\n    this.conjugate(rwst, iwst, N);\n    this.transform(rwst, iwst, rmws, _, N, rbt);\n    this.conjugate(rmws, _, N);\n    this.normalize13b(rmws, N);\n\n    out.negative = x.negative ^ y.negative;\n    out.length = x.length + y.length;\n    return out._strip();\n  };\n\n  // Multiply `this` by `num`\n  BN.prototype.mul = function mul (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return this.mulTo(num, out);\n  };\n\n  // Multiply employing FFT\n  BN.prototype.mulf = function mulf (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return jumboMulTo(this, num, out);\n  };\n\n  // In-place Multiplication\n  BN.prototype.imul = function imul (num) {\n    return this.clone().mulTo(num, this);\n  };\n\n  BN.prototype.imuln = function imuln (num) {\n    var isNegNum = num < 0;\n    if (isNegNum) num = -num;\n\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n\n    // Carry\n    var carry = 0;\n    for (var i = 0; i < this.length; i++) {\n      var w = (this.words[i] | 0) * num;\n      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);\n      carry >>= 26;\n      carry += (w / 0x4000000) | 0;\n      // NOTE: lo is 27bit maximum\n      carry += lo >>> 26;\n      this.words[i] = lo & 0x3ffffff;\n    }\n\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n    this.length = num === 0 ? 1 : this.length;\n\n    return isNegNum ? this.ineg() : this;\n  };\n\n  BN.prototype.muln = function muln (num) {\n    return this.clone().imuln(num);\n  };\n\n  // `this` * `this`\n  BN.prototype.sqr = function sqr () {\n    return this.mul(this);\n  };\n\n  // `this` * `this` in-place\n  BN.prototype.isqr = function isqr () {\n    return this.imul(this.clone());\n  };\n\n  // Math.pow(`this`, `num`)\n  BN.prototype.pow = function pow (num) {\n    var w = toBitArray(num);\n    if (w.length === 0) return new BN(1);\n\n    // Skip leading zeroes\n    var res = this;\n    for (var i = 0; i < w.length; i++, res = res.sqr()) {\n      if (w[i] !== 0) break;\n    }\n\n    if (++i < w.length) {\n      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {\n        if (w[i] === 0) continue;\n\n        res = res.mul(q);\n      }\n    }\n\n    return res;\n  };\n\n  // Shift-left in-place\n  BN.prototype.iushln = function iushln (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);\n    var i;\n\n    if (r !== 0) {\n      var carry = 0;\n\n      for (i = 0; i < this.length; i++) {\n        var newCarry = this.words[i] & carryMask;\n        var c = ((this.words[i] | 0) - newCarry) << r;\n        this.words[i] = c | carry;\n        carry = newCarry >>> (26 - r);\n      }\n\n      if (carry) {\n        this.words[i] = carry;\n        this.length++;\n      }\n    }\n\n    if (s !== 0) {\n      for (i = this.length - 1; i >= 0; i--) {\n        this.words[i + s] = this.words[i];\n      }\n\n      for (i = 0; i < s; i++) {\n        this.words[i] = 0;\n      }\n\n      this.length += s;\n    }\n\n    return this._strip();\n  };\n\n  BN.prototype.ishln = function ishln (bits) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushln(bits);\n  };\n\n  // Shift-right in-place\n  // NOTE: `hint` is a lowest bit before trailing zeroes\n  // NOTE: if `extended` is present - it will be filled with destroyed bits\n  BN.prototype.iushrn = function iushrn (bits, hint, extended) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var h;\n    if (hint) {\n      h = (hint - (hint % 26)) / 26;\n    } else {\n      h = 0;\n    }\n\n    var r = bits % 26;\n    var s = Math.min((bits - r) / 26, this.length);\n    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n    var maskedWords = extended;\n\n    h -= s;\n    h = Math.max(0, h);\n\n    // Extended mode, copy masked part\n    if (maskedWords) {\n      for (var i = 0; i < s; i++) {\n        maskedWords.words[i] = this.words[i];\n      }\n      maskedWords.length = s;\n    }\n\n    if (s === 0) {\n      // No-op, we should not move anything at all\n    } else if (this.length > s) {\n      this.length -= s;\n      for (i = 0; i < this.length; i++) {\n        this.words[i] = this.words[i + s];\n      }\n    } else {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    var carry = 0;\n    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {\n      var word = this.words[i] | 0;\n      this.words[i] = (carry << (26 - r)) | (word >>> r);\n      carry = word & mask;\n    }\n\n    // Push carried bits as a mask\n    if (maskedWords && carry !== 0) {\n      maskedWords.words[maskedWords.length++] = carry;\n    }\n\n    if (this.length === 0) {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    return this._strip();\n  };\n\n  BN.prototype.ishrn = function ishrn (bits, hint, extended) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushrn(bits, hint, extended);\n  };\n\n  // Shift-left\n  BN.prototype.shln = function shln (bits) {\n    return this.clone().ishln(bits);\n  };\n\n  BN.prototype.ushln = function ushln (bits) {\n    return this.clone().iushln(bits);\n  };\n\n  // Shift-right\n  BN.prototype.shrn = function shrn (bits) {\n    return this.clone().ishrn(bits);\n  };\n\n  BN.prototype.ushrn = function ushrn (bits) {\n    return this.clone().iushrn(bits);\n  };\n\n  // Test if n bit is set\n  BN.prototype.testn = function testn (bit) {\n    assert(typeof bit === 'number' && bit >= 0);\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) return false;\n\n    // Check bit and return\n    var w = this.words[s];\n\n    return !!(w & q);\n  };\n\n  // Return only lowers bits of number (in-place)\n  BN.prototype.imaskn = function imaskn (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n\n    assert(this.negative === 0, 'imaskn works only with positive numbers');\n\n    if (this.length <= s) {\n      return this;\n    }\n\n    if (r !== 0) {\n      s++;\n    }\n    this.length = Math.min(s, this.length);\n\n    if (r !== 0) {\n      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n      this.words[this.length - 1] &= mask;\n    }\n\n    return this._strip();\n  };\n\n  // Return only lowers bits of number\n  BN.prototype.maskn = function maskn (bits) {\n    return this.clone().imaskn(bits);\n  };\n\n  // Add plain number `num` to `this`\n  BN.prototype.iaddn = function iaddn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.isubn(-num);\n\n    // Possible sign change\n    if (this.negative !== 0) {\n      if (this.length === 1 && (this.words[0] | 0) <= num) {\n        this.words[0] = num - (this.words[0] | 0);\n        this.negative = 0;\n        return this;\n      }\n\n      this.negative = 0;\n      this.isubn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    // Add without checks\n    return this._iaddn(num);\n  };\n\n  BN.prototype._iaddn = function _iaddn (num) {\n    this.words[0] += num;\n\n    // Carry\n    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {\n      this.words[i] -= 0x4000000;\n      if (i === this.length - 1) {\n        this.words[i + 1] = 1;\n      } else {\n        this.words[i + 1]++;\n      }\n    }\n    this.length = Math.max(this.length, i + 1);\n\n    return this;\n  };\n\n  // Subtract plain number `num` from `this`\n  BN.prototype.isubn = function isubn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.iaddn(-num);\n\n    if (this.negative !== 0) {\n      this.negative = 0;\n      this.iaddn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    this.words[0] -= num;\n\n    if (this.length === 1 && this.words[0] < 0) {\n      this.words[0] = -this.words[0];\n      this.negative = 1;\n    } else {\n      // Carry\n      for (var i = 0; i < this.length && this.words[i] < 0; i++) {\n        this.words[i] += 0x4000000;\n        this.words[i + 1] -= 1;\n      }\n    }\n\n    return this._strip();\n  };\n\n  BN.prototype.addn = function addn (num) {\n    return this.clone().iaddn(num);\n  };\n\n  BN.prototype.subn = function subn (num) {\n    return this.clone().isubn(num);\n  };\n\n  BN.prototype.iabs = function iabs () {\n    this.negative = 0;\n\n    return this;\n  };\n\n  BN.prototype.abs = function abs () {\n    return this.clone().iabs();\n  };\n\n  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {\n    var len = num.length + shift;\n    var i;\n\n    this._expand(len);\n\n    var w;\n    var carry = 0;\n    for (i = 0; i < num.length; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      var right = (num.words[i] | 0) * mul;\n      w -= right & 0x3ffffff;\n      carry = (w >> 26) - ((right / 0x4000000) | 0);\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n    for (; i < this.length - shift; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      carry = w >> 26;\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n\n    if (carry === 0) return this._strip();\n\n    // Subtraction overflow\n    assert(carry === -1);\n    carry = 0;\n    for (i = 0; i < this.length; i++) {\n      w = -(this.words[i] | 0) + carry;\n      carry = w >> 26;\n      this.words[i] = w & 0x3ffffff;\n    }\n    this.negative = 1;\n\n    return this._strip();\n  };\n\n  BN.prototype._wordDiv = function _wordDiv (num, mode) {\n    var shift = this.length - num.length;\n\n    var a = this.clone();\n    var b = num;\n\n    // Normalize\n    var bhi = b.words[b.length - 1] | 0;\n    var bhiBits = this._countBits(bhi);\n    shift = 26 - bhiBits;\n    if (shift !== 0) {\n      b = b.ushln(shift);\n      a.iushln(shift);\n      bhi = b.words[b.length - 1] | 0;\n    }\n\n    // Initialize quotient\n    var m = a.length - b.length;\n    var q;\n\n    if (mode !== 'mod') {\n      q = new BN(null);\n      q.length = m + 1;\n      q.words = new Array(q.length);\n      for (var i = 0; i < q.length; i++) {\n        q.words[i] = 0;\n      }\n    }\n\n    var diff = a.clone()._ishlnsubmul(b, 1, m);\n    if (diff.negative === 0) {\n      a = diff;\n      if (q) {\n        q.words[m] = 1;\n      }\n    }\n\n    for (var j = m - 1; j >= 0; j--) {\n      var qj = (a.words[b.length + j] | 0) * 0x4000000 +\n        (a.words[b.length + j - 1] | 0);\n\n      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max\n      // (0x7ffffff)\n      qj = Math.min((qj / bhi) | 0, 0x3ffffff);\n\n      a._ishlnsubmul(b, qj, j);\n      while (a.negative !== 0) {\n        qj--;\n        a.negative = 0;\n        a._ishlnsubmul(b, 1, j);\n        if (!a.isZero()) {\n          a.negative ^= 1;\n        }\n      }\n      if (q) {\n        q.words[j] = qj;\n      }\n    }\n    if (q) {\n      q._strip();\n    }\n    a._strip();\n\n    // Denormalize\n    if (mode !== 'div' && shift !== 0) {\n      a.iushrn(shift);\n    }\n\n    return {\n      div: q || null,\n      mod: a\n    };\n  };\n\n  // NOTE: 1) `mode` can be set to `mod` to request mod only,\n  //       to `div` to request div only, or be absent to\n  //       request both div & mod\n  //       2) `positive` is true if unsigned mod is requested\n  BN.prototype.divmod = function divmod (num, mode, positive) {\n    assert(!num.isZero());\n\n    if (this.isZero()) {\n      return {\n        div: new BN(0),\n        mod: new BN(0)\n      };\n    }\n\n    var div, mod, res;\n    if (this.negative !== 0 && num.negative === 0) {\n      res = this.neg().divmod(num, mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.iadd(num);\n        }\n      }\n\n      return {\n        div: div,\n        mod: mod\n      };\n    }\n\n    if (this.negative === 0 && num.negative !== 0) {\n      res = this.divmod(num.neg(), mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      return {\n        div: div,\n        mod: res.mod\n      };\n    }\n\n    if ((this.negative & num.negative) !== 0) {\n      res = this.neg().divmod(num.neg(), mode);\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.isub(num);\n        }\n      }\n\n      return {\n        div: res.div,\n        mod: mod\n      };\n    }\n\n    // Both numbers are positive at this point\n\n    // Strip both numbers to approximate shift value\n    if (num.length > this.length || this.cmp(num) < 0) {\n      return {\n        div: new BN(0),\n        mod: this\n      };\n    }\n\n    // Very short reduction\n    if (num.length === 1) {\n      if (mode === 'div') {\n        return {\n          div: this.divn(num.words[0]),\n          mod: null\n        };\n      }\n\n      if (mode === 'mod') {\n        return {\n          div: null,\n          mod: new BN(this.modrn(num.words[0]))\n        };\n      }\n\n      return {\n        div: this.divn(num.words[0]),\n        mod: new BN(this.modrn(num.words[0]))\n      };\n    }\n\n    return this._wordDiv(num, mode);\n  };\n\n  // Find `this` / `num`\n  BN.prototype.div = function div (num) {\n    return this.divmod(num, 'div', false).div;\n  };\n\n  // Find `this` % `num`\n  BN.prototype.mod = function mod (num) {\n    return this.divmod(num, 'mod', false).mod;\n  };\n\n  BN.prototype.umod = function umod (num) {\n    return this.divmod(num, 'mod', true).mod;\n  };\n\n  // Find Round(`this` / `num`)\n  BN.prototype.divRound = function divRound (num) {\n    var dm = this.divmod(num);\n\n    // Fast case - exact division\n    if (dm.mod.isZero()) return dm.div;\n\n    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;\n\n    var half = num.ushrn(1);\n    var r2 = num.andln(1);\n    var cmp = mod.cmp(half);\n\n    // Round down\n    if (cmp < 0 || (r2 === 1 && cmp === 0)) return dm.div;\n\n    // Round up\n    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);\n  };\n\n  BN.prototype.modrn = function modrn (num) {\n    var isNegNum = num < 0;\n    if (isNegNum) num = -num;\n\n    assert(num <= 0x3ffffff);\n    var p = (1 << 26) % num;\n\n    var acc = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      acc = (p * acc + (this.words[i] | 0)) % num;\n    }\n\n    return isNegNum ? -acc : acc;\n  };\n\n  // WARNING: DEPRECATED\n  BN.prototype.modn = function modn (num) {\n    return this.modrn(num);\n  };\n\n  // In-place division by number\n  BN.prototype.idivn = function idivn (num) {\n    var isNegNum = num < 0;\n    if (isNegNum) num = -num;\n\n    assert(num <= 0x3ffffff);\n\n    var carry = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var w = (this.words[i] | 0) + carry * 0x4000000;\n      this.words[i] = (w / num) | 0;\n      carry = w % num;\n    }\n\n    this._strip();\n    return isNegNum ? this.ineg() : this;\n  };\n\n  BN.prototype.divn = function divn (num) {\n    return this.clone().idivn(num);\n  };\n\n  BN.prototype.egcd = function egcd (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var x = this;\n    var y = p.clone();\n\n    if (x.negative !== 0) {\n      x = x.umod(p);\n    } else {\n      x = x.clone();\n    }\n\n    // A * x + B * y = x\n    var A = new BN(1);\n    var B = new BN(0);\n\n    // C * x + D * y = y\n    var C = new BN(0);\n    var D = new BN(1);\n\n    var g = 0;\n\n    while (x.isEven() && y.isEven()) {\n      x.iushrn(1);\n      y.iushrn(1);\n      ++g;\n    }\n\n    var yp = y.clone();\n    var xp = x.clone();\n\n    while (!x.isZero()) {\n      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        x.iushrn(i);\n        while (i-- > 0) {\n          if (A.isOdd() || B.isOdd()) {\n            A.iadd(yp);\n            B.isub(xp);\n          }\n\n          A.iushrn(1);\n          B.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        y.iushrn(j);\n        while (j-- > 0) {\n          if (C.isOdd() || D.isOdd()) {\n            C.iadd(yp);\n            D.isub(xp);\n          }\n\n          C.iushrn(1);\n          D.iushrn(1);\n        }\n      }\n\n      if (x.cmp(y) >= 0) {\n        x.isub(y);\n        A.isub(C);\n        B.isub(D);\n      } else {\n        y.isub(x);\n        C.isub(A);\n        D.isub(B);\n      }\n    }\n\n    return {\n      a: C,\n      b: D,\n      gcd: y.iushln(g)\n    };\n  };\n\n  // This is reduced incarnation of the binary EEA\n  // above, designated to invert members of the\n  // _prime_ fields F(p) at a maximal speed\n  BN.prototype._invmp = function _invmp (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var a = this;\n    var b = p.clone();\n\n    if (a.negative !== 0) {\n      a = a.umod(p);\n    } else {\n      a = a.clone();\n    }\n\n    var x1 = new BN(1);\n    var x2 = new BN(0);\n\n    var delta = b.clone();\n\n    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {\n      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        a.iushrn(i);\n        while (i-- > 0) {\n          if (x1.isOdd()) {\n            x1.iadd(delta);\n          }\n\n          x1.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        b.iushrn(j);\n        while (j-- > 0) {\n          if (x2.isOdd()) {\n            x2.iadd(delta);\n          }\n\n          x2.iushrn(1);\n        }\n      }\n\n      if (a.cmp(b) >= 0) {\n        a.isub(b);\n        x1.isub(x2);\n      } else {\n        b.isub(a);\n        x2.isub(x1);\n      }\n    }\n\n    var res;\n    if (a.cmpn(1) === 0) {\n      res = x1;\n    } else {\n      res = x2;\n    }\n\n    if (res.cmpn(0) < 0) {\n      res.iadd(p);\n    }\n\n    return res;\n  };\n\n  BN.prototype.gcd = function gcd (num) {\n    if (this.isZero()) return num.abs();\n    if (num.isZero()) return this.abs();\n\n    var a = this.clone();\n    var b = num.clone();\n    a.negative = 0;\n    b.negative = 0;\n\n    // Remove common factor of two\n    for (var shift = 0; a.isEven() && b.isEven(); shift++) {\n      a.iushrn(1);\n      b.iushrn(1);\n    }\n\n    do {\n      while (a.isEven()) {\n        a.iushrn(1);\n      }\n      while (b.isEven()) {\n        b.iushrn(1);\n      }\n\n      var r = a.cmp(b);\n      if (r < 0) {\n        // Swap `a` and `b` to make `a` always bigger than `b`\n        var t = a;\n        a = b;\n        b = t;\n      } else if (r === 0 || b.cmpn(1) === 0) {\n        break;\n      }\n\n      a.isub(b);\n    } while (true);\n\n    return b.iushln(shift);\n  };\n\n  // Invert number in the field F(num)\n  BN.prototype.invm = function invm (num) {\n    return this.egcd(num).a.umod(num);\n  };\n\n  BN.prototype.isEven = function isEven () {\n    return (this.words[0] & 1) === 0;\n  };\n\n  BN.prototype.isOdd = function isOdd () {\n    return (this.words[0] & 1) === 1;\n  };\n\n  // And first word and num\n  BN.prototype.andln = function andln (num) {\n    return this.words[0] & num;\n  };\n\n  // Increment at the bit position in-line\n  BN.prototype.bincn = function bincn (bit) {\n    assert(typeof bit === 'number');\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) {\n      this._expand(s + 1);\n      this.words[s] |= q;\n      return this;\n    }\n\n    // Add bit and propagate, if needed\n    var carry = q;\n    for (var i = s; carry !== 0 && i < this.length; i++) {\n      var w = this.words[i] | 0;\n      w += carry;\n      carry = w >>> 26;\n      w &= 0x3ffffff;\n      this.words[i] = w;\n    }\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n    return this;\n  };\n\n  BN.prototype.isZero = function isZero () {\n    return this.length === 1 && this.words[0] === 0;\n  };\n\n  BN.prototype.cmpn = function cmpn (num) {\n    var negative = num < 0;\n\n    if (this.negative !== 0 && !negative) return -1;\n    if (this.negative === 0 && negative) return 1;\n\n    this._strip();\n\n    var res;\n    if (this.length > 1) {\n      res = 1;\n    } else {\n      if (negative) {\n        num = -num;\n      }\n\n      assert(num <= 0x3ffffff, 'Number is too big');\n\n      var w = this.words[0] | 0;\n      res = w === num ? 0 : w < num ? -1 : 1;\n    }\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Compare two numbers and return:\n  // 1 - if `this` > `num`\n  // 0 - if `this` == `num`\n  // -1 - if `this` < `num`\n  BN.prototype.cmp = function cmp (num) {\n    if (this.negative !== 0 && num.negative === 0) return -1;\n    if (this.negative === 0 && num.negative !== 0) return 1;\n\n    var res = this.ucmp(num);\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Unsigned comparison\n  BN.prototype.ucmp = function ucmp (num) {\n    // At this point both numbers have the same sign\n    if (this.length > num.length) return 1;\n    if (this.length < num.length) return -1;\n\n    var res = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var a = this.words[i] | 0;\n      var b = num.words[i] | 0;\n\n      if (a === b) continue;\n      if (a < b) {\n        res = -1;\n      } else if (a > b) {\n        res = 1;\n      }\n      break;\n    }\n    return res;\n  };\n\n  BN.prototype.gtn = function gtn (num) {\n    return this.cmpn(num) === 1;\n  };\n\n  BN.prototype.gt = function gt (num) {\n    return this.cmp(num) === 1;\n  };\n\n  BN.prototype.gten = function gten (num) {\n    return this.cmpn(num) >= 0;\n  };\n\n  BN.prototype.gte = function gte (num) {\n    return this.cmp(num) >= 0;\n  };\n\n  BN.prototype.ltn = function ltn (num) {\n    return this.cmpn(num) === -1;\n  };\n\n  BN.prototype.lt = function lt (num) {\n    return this.cmp(num) === -1;\n  };\n\n  BN.prototype.lten = function lten (num) {\n    return this.cmpn(num) <= 0;\n  };\n\n  BN.prototype.lte = function lte (num) {\n    return this.cmp(num) <= 0;\n  };\n\n  BN.prototype.eqn = function eqn (num) {\n    return this.cmpn(num) === 0;\n  };\n\n  BN.prototype.eq = function eq (num) {\n    return this.cmp(num) === 0;\n  };\n\n  //\n  // A reduce context, could be using montgomery or something better, depending\n  // on the `m` itself.\n  //\n  BN.red = function red (num) {\n    return new Red(num);\n  };\n\n  BN.prototype.toRed = function toRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    assert(this.negative === 0, 'red works only with positives');\n    return ctx.convertTo(this)._forceRed(ctx);\n  };\n\n  BN.prototype.fromRed = function fromRed () {\n    assert(this.red, 'fromRed works only with numbers in reduction context');\n    return this.red.convertFrom(this);\n  };\n\n  BN.prototype._forceRed = function _forceRed (ctx) {\n    this.red = ctx;\n    return this;\n  };\n\n  BN.prototype.forceRed = function forceRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    return this._forceRed(ctx);\n  };\n\n  BN.prototype.redAdd = function redAdd (num) {\n    assert(this.red, 'redAdd works only with red numbers');\n    return this.red.add(this, num);\n  };\n\n  BN.prototype.redIAdd = function redIAdd (num) {\n    assert(this.red, 'redIAdd works only with red numbers');\n    return this.red.iadd(this, num);\n  };\n\n  BN.prototype.redSub = function redSub (num) {\n    assert(this.red, 'redSub works only with red numbers');\n    return this.red.sub(this, num);\n  };\n\n  BN.prototype.redISub = function redISub (num) {\n    assert(this.red, 'redISub works only with red numbers');\n    return this.red.isub(this, num);\n  };\n\n  BN.prototype.redShl = function redShl (num) {\n    assert(this.red, 'redShl works only with red numbers');\n    return this.red.shl(this, num);\n  };\n\n  BN.prototype.redMul = function redMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.mul(this, num);\n  };\n\n  BN.prototype.redIMul = function redIMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.imul(this, num);\n  };\n\n  BN.prototype.redSqr = function redSqr () {\n    assert(this.red, 'redSqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqr(this);\n  };\n\n  BN.prototype.redISqr = function redISqr () {\n    assert(this.red, 'redISqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.isqr(this);\n  };\n\n  // Square root over p\n  BN.prototype.redSqrt = function redSqrt () {\n    assert(this.red, 'redSqrt works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqrt(this);\n  };\n\n  BN.prototype.redInvm = function redInvm () {\n    assert(this.red, 'redInvm works only with red numbers');\n    this.red._verify1(this);\n    return this.red.invm(this);\n  };\n\n  // Return negative clone of `this` % `red modulo`\n  BN.prototype.redNeg = function redNeg () {\n    assert(this.red, 'redNeg works only with red numbers');\n    this.red._verify1(this);\n    return this.red.neg(this);\n  };\n\n  BN.prototype.redPow = function redPow (num) {\n    assert(this.red && !num.red, 'redPow(normalNum)');\n    this.red._verify1(this);\n    return this.red.pow(this, num);\n  };\n\n  // Prime numbers with efficient reduction\n  var primes = {\n    k256: null,\n    p224: null,\n    p192: null,\n    p25519: null\n  };\n\n  // Pseudo-Mersenne prime\n  function MPrime (name, p) {\n    // P = 2 ^ N - K\n    this.name = name;\n    this.p = new BN(p, 16);\n    this.n = this.p.bitLength();\n    this.k = new BN(1).iushln(this.n).isub(this.p);\n\n    this.tmp = this._tmp();\n  }\n\n  MPrime.prototype._tmp = function _tmp () {\n    var tmp = new BN(null);\n    tmp.words = new Array(Math.ceil(this.n / 13));\n    return tmp;\n  };\n\n  MPrime.prototype.ireduce = function ireduce (num) {\n    // Assumes that `num` is less than `P^2`\n    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)\n    var r = num;\n    var rlen;\n\n    do {\n      this.split(r, this.tmp);\n      r = this.imulK(r);\n      r = r.iadd(this.tmp);\n      rlen = r.bitLength();\n    } while (rlen > this.n);\n\n    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);\n    if (cmp === 0) {\n      r.words[0] = 0;\n      r.length = 1;\n    } else if (cmp > 0) {\n      r.isub(this.p);\n    } else {\n      if (r.strip !== undefined) {\n        // r is a BN v4 instance\n        r.strip();\n      } else {\n        // r is a BN v5 instance\n        r._strip();\n      }\n    }\n\n    return r;\n  };\n\n  MPrime.prototype.split = function split (input, out) {\n    input.iushrn(this.n, 0, out);\n  };\n\n  MPrime.prototype.imulK = function imulK (num) {\n    return num.imul(this.k);\n  };\n\n  function K256 () {\n    MPrime.call(\n      this,\n      'k256',\n      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');\n  }\n  inherits(K256, MPrime);\n\n  K256.prototype.split = function split (input, output) {\n    // 256 = 9 * 26 + 22\n    var mask = 0x3fffff;\n\n    var outLen = Math.min(input.length, 9);\n    for (var i = 0; i < outLen; i++) {\n      output.words[i] = input.words[i];\n    }\n    output.length = outLen;\n\n    if (input.length <= 9) {\n      input.words[0] = 0;\n      input.length = 1;\n      return;\n    }\n\n    // Shift by 9 limbs\n    var prev = input.words[9];\n    output.words[output.length++] = prev & mask;\n\n    for (i = 10; i < input.length; i++) {\n      var next = input.words[i] | 0;\n      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);\n      prev = next;\n    }\n    prev >>>= 22;\n    input.words[i - 10] = prev;\n    if (prev === 0 && input.length > 10) {\n      input.length -= 10;\n    } else {\n      input.length -= 9;\n    }\n  };\n\n  K256.prototype.imulK = function imulK (num) {\n    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]\n    num.words[num.length] = 0;\n    num.words[num.length + 1] = 0;\n    num.length += 2;\n\n    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390\n    var lo = 0;\n    for (var i = 0; i < num.length; i++) {\n      var w = num.words[i] | 0;\n      lo += w * 0x3d1;\n      num.words[i] = lo & 0x3ffffff;\n      lo = w * 0x40 + ((lo / 0x4000000) | 0);\n    }\n\n    // Fast length reduction\n    if (num.words[num.length - 1] === 0) {\n      num.length--;\n      if (num.words[num.length - 1] === 0) {\n        num.length--;\n      }\n    }\n    return num;\n  };\n\n  function P224 () {\n    MPrime.call(\n      this,\n      'p224',\n      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');\n  }\n  inherits(P224, MPrime);\n\n  function P192 () {\n    MPrime.call(\n      this,\n      'p192',\n      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');\n  }\n  inherits(P192, MPrime);\n\n  function P25519 () {\n    // 2 ^ 255 - 19\n    MPrime.call(\n      this,\n      '25519',\n      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');\n  }\n  inherits(P25519, MPrime);\n\n  P25519.prototype.imulK = function imulK (num) {\n    // K = 0x13\n    var carry = 0;\n    for (var i = 0; i < num.length; i++) {\n      var hi = (num.words[i] | 0) * 0x13 + carry;\n      var lo = hi & 0x3ffffff;\n      hi >>>= 26;\n\n      num.words[i] = lo;\n      carry = hi;\n    }\n    if (carry !== 0) {\n      num.words[num.length++] = carry;\n    }\n    return num;\n  };\n\n  // Exported mostly for testing purposes, use plain name instead\n  BN._prime = function prime (name) {\n    // Cached version of prime\n    if (primes[name]) return primes[name];\n\n    var prime;\n    if (name === 'k256') {\n      prime = new K256();\n    } else if (name === 'p224') {\n      prime = new P224();\n    } else if (name === 'p192') {\n      prime = new P192();\n    } else if (name === 'p25519') {\n      prime = new P25519();\n    } else {\n      throw new Error('Unknown prime ' + name);\n    }\n    primes[name] = prime;\n\n    return prime;\n  };\n\n  //\n  // Base reduction engine\n  //\n  function Red (m) {\n    if (typeof m === 'string') {\n      var prime = BN._prime(m);\n      this.m = prime.p;\n      this.prime = prime;\n    } else {\n      assert(m.gtn(1), 'modulus must be greater than 1');\n      this.m = m;\n      this.prime = null;\n    }\n  }\n\n  Red.prototype._verify1 = function _verify1 (a) {\n    assert(a.negative === 0, 'red works only with positives');\n    assert(a.red, 'red works only with red numbers');\n  };\n\n  Red.prototype._verify2 = function _verify2 (a, b) {\n    assert((a.negative | b.negative) === 0, 'red works only with positives');\n    assert(a.red && a.red === b.red,\n      'red works only with red numbers');\n  };\n\n  Red.prototype.imod = function imod (a) {\n    if (this.prime) return this.prime.ireduce(a)._forceRed(this);\n\n    move(a, a.umod(this.m)._forceRed(this));\n    return a;\n  };\n\n  Red.prototype.neg = function neg (a) {\n    if (a.isZero()) {\n      return a.clone();\n    }\n\n    return this.m.sub(a)._forceRed(this);\n  };\n\n  Red.prototype.add = function add (a, b) {\n    this._verify2(a, b);\n\n    var res = a.add(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.iadd = function iadd (a, b) {\n    this._verify2(a, b);\n\n    var res = a.iadd(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.sub = function sub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.sub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.isub = function isub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.isub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.shl = function shl (a, num) {\n    this._verify1(a);\n    return this.imod(a.ushln(num));\n  };\n\n  Red.prototype.imul = function imul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.imul(b));\n  };\n\n  Red.prototype.mul = function mul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.mul(b));\n  };\n\n  Red.prototype.isqr = function isqr (a) {\n    return this.imul(a, a.clone());\n  };\n\n  Red.prototype.sqr = function sqr (a) {\n    return this.mul(a, a);\n  };\n\n  Red.prototype.sqrt = function sqrt (a) {\n    if (a.isZero()) return a.clone();\n\n    var mod3 = this.m.andln(3);\n    assert(mod3 % 2 === 1);\n\n    // Fast case\n    if (mod3 === 3) {\n      var pow = this.m.add(new BN(1)).iushrn(2);\n      return this.pow(a, pow);\n    }\n\n    // Tonelli-Shanks algorithm (Totally unoptimized and slow)\n    //\n    // Find Q and S, that Q * 2 ^ S = (P - 1)\n    var q = this.m.subn(1);\n    var s = 0;\n    while (!q.isZero() && q.andln(1) === 0) {\n      s++;\n      q.iushrn(1);\n    }\n    assert(!q.isZero());\n\n    var one = new BN(1).toRed(this);\n    var nOne = one.redNeg();\n\n    // Find quadratic non-residue\n    // NOTE: Max is such because of generalized Riemann hypothesis.\n    var lpow = this.m.subn(1).iushrn(1);\n    var z = this.m.bitLength();\n    z = new BN(2 * z * z).toRed(this);\n\n    while (this.pow(z, lpow).cmp(nOne) !== 0) {\n      z.redIAdd(nOne);\n    }\n\n    var c = this.pow(z, q);\n    var r = this.pow(a, q.addn(1).iushrn(1));\n    var t = this.pow(a, q);\n    var m = s;\n    while (t.cmp(one) !== 0) {\n      var tmp = t;\n      for (var i = 0; tmp.cmp(one) !== 0; i++) {\n        tmp = tmp.redSqr();\n      }\n      assert(i < m);\n      var b = this.pow(c, new BN(1).iushln(m - i - 1));\n\n      r = r.redMul(b);\n      c = b.redSqr();\n      t = t.redMul(c);\n      m = i;\n    }\n\n    return r;\n  };\n\n  Red.prototype.invm = function invm (a) {\n    var inv = a._invmp(this.m);\n    if (inv.negative !== 0) {\n      inv.negative = 0;\n      return this.imod(inv).redNeg();\n    } else {\n      return this.imod(inv);\n    }\n  };\n\n  Red.prototype.pow = function pow (a, num) {\n    if (num.isZero()) return new BN(1).toRed(this);\n    if (num.cmpn(1) === 0) return a.clone();\n\n    var windowSize = 4;\n    var wnd = new Array(1 << windowSize);\n    wnd[0] = new BN(1).toRed(this);\n    wnd[1] = a;\n    for (var i = 2; i < wnd.length; i++) {\n      wnd[i] = this.mul(wnd[i - 1], a);\n    }\n\n    var res = wnd[0];\n    var current = 0;\n    var currentLen = 0;\n    var start = num.bitLength() % 26;\n    if (start === 0) {\n      start = 26;\n    }\n\n    for (i = num.length - 1; i >= 0; i--) {\n      var word = num.words[i];\n      for (var j = start - 1; j >= 0; j--) {\n        var bit = (word >> j) & 1;\n        if (res !== wnd[0]) {\n          res = this.sqr(res);\n        }\n\n        if (bit === 0 && current === 0) {\n          currentLen = 0;\n          continue;\n        }\n\n        current <<= 1;\n        current |= bit;\n        currentLen++;\n        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;\n\n        res = this.mul(res, wnd[current]);\n        currentLen = 0;\n        current = 0;\n      }\n      start = 26;\n    }\n\n    return res;\n  };\n\n  Red.prototype.convertTo = function convertTo (num) {\n    var r = num.umod(this.m);\n\n    return r === num ? r.clone() : r;\n  };\n\n  Red.prototype.convertFrom = function convertFrom (num) {\n    var res = num.clone();\n    res.red = null;\n    return res;\n  };\n\n  //\n  // Montgomery method engine\n  //\n\n  BN.mont = function mont (num) {\n    return new Mont(num);\n  };\n\n  function Mont (m) {\n    Red.call(this, m);\n\n    this.shift = this.m.bitLength();\n    if (this.shift % 26 !== 0) {\n      this.shift += 26 - (this.shift % 26);\n    }\n\n    this.r = new BN(1).iushln(this.shift);\n    this.r2 = this.imod(this.r.sqr());\n    this.rinv = this.r._invmp(this.m);\n\n    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);\n    this.minv = this.minv.umod(this.r);\n    this.minv = this.r.sub(this.minv);\n  }\n  inherits(Mont, Red);\n\n  Mont.prototype.convertTo = function convertTo (num) {\n    return this.imod(num.ushln(this.shift));\n  };\n\n  Mont.prototype.convertFrom = function convertFrom (num) {\n    var r = this.imod(num.mul(this.rinv));\n    r.red = null;\n    return r;\n  };\n\n  Mont.prototype.imul = function imul (a, b) {\n    if (a.isZero() || b.isZero()) {\n      a.words[0] = 0;\n      a.length = 1;\n      return a;\n    }\n\n    var t = a.imul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.mul = function mul (a, b) {\n    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);\n\n    var t = a.mul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.invm = function invm (a) {\n    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R\n    var res = this.imod(a._invmp(this.m).mul(this.r2));\n    return res._forceRed(this);\n  };\n})( false || module, this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/node_modules/bn.js/lib/bn.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/node_modules/uuid/dist/esm-node/index.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/snowflake-sdk/node_modules/uuid/dist/esm-node/index.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NIL: () => (/* reexport safe */ _nil_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"]),\n/* harmony export */   parse: () => (/* reexport safe */ _parse_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"]),\n/* harmony export */   stringify: () => (/* reexport safe */ _stringify_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"]),\n/* harmony export */   v1: () => (/* reexport safe */ _v1_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]),\n/* harmony export */   v3: () => (/* reexport safe */ _v3_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]),\n/* harmony export */   v4: () => (/* reexport safe */ _v4_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"]),\n/* harmony export */   v5: () => (/* reexport safe */ _v5_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"]),\n/* harmony export */   validate: () => (/* reexport safe */ _validate_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"]),\n/* harmony export */   version: () => (/* reexport safe */ _version_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"])\n/* harmony export */ });\n/* harmony import */ var _v1_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./v1.js */ \"(rsc)/./node_modules/snowflake-sdk/node_modules/uuid/dist/esm-node/v1.js\");\n/* harmony import */ var _v3_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./v3.js */ \"(rsc)/./node_modules/snowflake-sdk/node_modules/uuid/dist/esm-node/v3.js\");\n/* harmony import */ var _v4_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./v4.js */ \"(rsc)/./node_modules/snowflake-sdk/node_modules/uuid/dist/esm-node/v4.js\");\n/* harmony import */ var _v5_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./v5.js */ \"(rsc)/./node_modules/snowflake-sdk/node_modules/uuid/dist/esm-node/v5.js\");\n/* harmony import */ var _nil_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./nil.js */ \"(rsc)/./node_modules/snowflake-sdk/node_modules/uuid/dist/esm-node/nil.js\");\n/* harmony import */ var _version_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./version.js */ \"(rsc)/./node_modules/snowflake-sdk/node_modules/uuid/dist/esm-node/version.js\");\n/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./validate.js */ \"(rsc)/./node_modules/snowflake-sdk/node_modules/uuid/dist/esm-node/validate.js\");\n/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./stringify.js */ \"(rsc)/./node_modules/snowflake-sdk/node_modules/uuid/dist/esm-node/stringify.js\");\n/* harmony import */ var _parse_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./parse.js */ \"(rsc)/./node_modules/snowflake-sdk/node_modules/uuid/dist/esm-node/parse.js\");\n\n\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUF3QztBQUNBO0FBQ0E7QUFDQTtBQUNFO0FBQ1E7QUFDRTtBQUNFIiwic291cmNlcyI6WyIvVXNlcnMvd2FuZ2hhb3RhaS9EZXNrdG9wL2VsdmVubGFiL0hUVi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB7IGRlZmF1bHQgYXMgdjEgfSBmcm9tICcuL3YxLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgdjMgfSBmcm9tICcuL3YzLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgdjQgfSBmcm9tICcuL3Y0LmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgdjUgfSBmcm9tICcuL3Y1LmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgTklMIH0gZnJvbSAnLi9uaWwuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyB2ZXJzaW9uIH0gZnJvbSAnLi92ZXJzaW9uLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgdmFsaWRhdGUgfSBmcm9tICcuL3ZhbGlkYXRlLmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgc3RyaW5naWZ5IH0gZnJvbSAnLi9zdHJpbmdpZnkuanMnO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBwYXJzZSB9IGZyb20gJy4vcGFyc2UuanMnOyJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/node_modules/uuid/dist/esm-node/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/node_modules/uuid/dist/esm-node/md5.js":
/*!***************************************************************************!*\
  !*** ./node_modules/snowflake-sdk/node_modules/uuid/dist/esm-node/md5.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_0__);\n\n\nfunction md5(bytes) {\n  if (Array.isArray(bytes)) {\n    bytes = Buffer.from(bytes);\n  } else if (typeof bytes === 'string') {\n    bytes = Buffer.from(bytes, 'utf8');\n  }\n\n  return crypto__WEBPACK_IMPORTED_MODULE_0___default().createHash('md5').update(bytes).digest();\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (md5);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL21kNS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBNEI7O0FBRTVCO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBLFNBQVMsd0RBQWlCO0FBQzFCOztBQUVBLGlFQUFlLEdBQUciLCJzb3VyY2VzIjpbIi9Vc2Vycy93YW5naGFvdGFpL0Rlc2t0b3AvZWx2ZW5sYWIvSFRWL25vZGVfbW9kdWxlcy9zbm93Zmxha2Utc2RrL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvbWQ1LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjcnlwdG8gZnJvbSAnY3J5cHRvJztcblxuZnVuY3Rpb24gbWQ1KGJ5dGVzKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGJ5dGVzKSkge1xuICAgIGJ5dGVzID0gQnVmZmVyLmZyb20oYnl0ZXMpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBieXRlcyA9PT0gJ3N0cmluZycpIHtcbiAgICBieXRlcyA9IEJ1ZmZlci5mcm9tKGJ5dGVzLCAndXRmOCcpO1xuICB9XG5cbiAgcmV0dXJuIGNyeXB0by5jcmVhdGVIYXNoKCdtZDUnKS51cGRhdGUoYnl0ZXMpLmRpZ2VzdCgpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBtZDU7Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/node_modules/uuid/dist/esm-node/md5.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/node_modules/uuid/dist/esm-node/nil.js":
/*!***************************************************************************!*\
  !*** ./node_modules/snowflake-sdk/node_modules/uuid/dist/esm-node/nil.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ('00000000-0000-0000-0000-000000000000');//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL25pbC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsaUVBQWUsc0NBQXNDIiwic291cmNlcyI6WyIvVXNlcnMvd2FuZ2hhb3RhaS9EZXNrdG9wL2VsdmVubGFiL0hUVi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL25pbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCAnMDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwJzsiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/node_modules/uuid/dist/esm-node/nil.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/node_modules/uuid/dist/esm-node/parse.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/snowflake-sdk/node_modules/uuid/dist/esm-node/parse.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./validate.js */ \"(rsc)/./node_modules/snowflake-sdk/node_modules/uuid/dist/esm-node/validate.js\");\n\n\nfunction parse(uuid) {\n  if (!(0,_validate_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(uuid)) {\n    throw TypeError('Invalid UUID');\n  }\n\n  let v;\n  const arr = new Uint8Array(16); // Parse ########-....-....-....-............\n\n  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;\n  arr[1] = v >>> 16 & 0xff;\n  arr[2] = v >>> 8 & 0xff;\n  arr[3] = v & 0xff; // Parse ........-####-....-....-............\n\n  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;\n  arr[5] = v & 0xff; // Parse ........-....-####-....-............\n\n  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;\n  arr[7] = v & 0xff; // Parse ........-....-....-####-............\n\n  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;\n  arr[9] = v & 0xff; // Parse ........-....-....-....-############\n  // (Use \"/\" to avoid 32-bit truncation when bit-shifting high-order bytes)\n\n  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;\n  arr[11] = v / 0x100000000 & 0xff;\n  arr[12] = v >>> 24 & 0xff;\n  arr[13] = v >>> 16 & 0xff;\n  arr[14] = v >>> 8 & 0xff;\n  arr[15] = v & 0xff;\n  return arr;\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (parse);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL3BhcnNlLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXFDOztBQUVyQztBQUNBLE9BQU8sd0RBQVE7QUFDZjtBQUNBOztBQUVBO0FBQ0Esa0NBQWtDOztBQUVsQztBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7O0FBRXJCO0FBQ0EscUJBQXFCOztBQUVyQjtBQUNBLHFCQUFxQjs7QUFFckI7QUFDQSxxQkFBcUI7QUFDckI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxpRUFBZSxLQUFLIiwic291cmNlcyI6WyIvVXNlcnMvd2FuZ2hhb3RhaS9EZXNrdG9wL2VsdmVubGFiL0hUVi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL3BhcnNlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB2YWxpZGF0ZSBmcm9tICcuL3ZhbGlkYXRlLmpzJztcblxuZnVuY3Rpb24gcGFyc2UodXVpZCkge1xuICBpZiAoIXZhbGlkYXRlKHV1aWQpKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKCdJbnZhbGlkIFVVSUQnKTtcbiAgfVxuXG4gIGxldCB2O1xuICBjb25zdCBhcnIgPSBuZXcgVWludDhBcnJheSgxNik7IC8vIFBhcnNlICMjIyMjIyMjLS4uLi4tLi4uLi0uLi4uLS4uLi4uLi4uLi4uLlxuXG4gIGFyclswXSA9ICh2ID0gcGFyc2VJbnQodXVpZC5zbGljZSgwLCA4KSwgMTYpKSA+Pj4gMjQ7XG4gIGFyclsxXSA9IHYgPj4+IDE2ICYgMHhmZjtcbiAgYXJyWzJdID0gdiA+Pj4gOCAmIDB4ZmY7XG4gIGFyclszXSA9IHYgJiAweGZmOyAvLyBQYXJzZSAuLi4uLi4uLi0jIyMjLS4uLi4tLi4uLi0uLi4uLi4uLi4uLi5cblxuICBhcnJbNF0gPSAodiA9IHBhcnNlSW50KHV1aWQuc2xpY2UoOSwgMTMpLCAxNikpID4+PiA4O1xuICBhcnJbNV0gPSB2ICYgMHhmZjsgLy8gUGFyc2UgLi4uLi4uLi4tLi4uLi0jIyMjLS4uLi4tLi4uLi4uLi4uLi4uXG5cbiAgYXJyWzZdID0gKHYgPSBwYXJzZUludCh1dWlkLnNsaWNlKDE0LCAxOCksIDE2KSkgPj4+IDg7XG4gIGFycls3XSA9IHYgJiAweGZmOyAvLyBQYXJzZSAuLi4uLi4uLi0uLi4uLS4uLi4tIyMjIy0uLi4uLi4uLi4uLi5cblxuICBhcnJbOF0gPSAodiA9IHBhcnNlSW50KHV1aWQuc2xpY2UoMTksIDIzKSwgMTYpKSA+Pj4gODtcbiAgYXJyWzldID0gdiAmIDB4ZmY7IC8vIFBhcnNlIC4uLi4uLi4uLS4uLi4tLi4uLi0uLi4uLSMjIyMjIyMjIyMjI1xuICAvLyAoVXNlIFwiL1wiIHRvIGF2b2lkIDMyLWJpdCB0cnVuY2F0aW9uIHdoZW4gYml0LXNoaWZ0aW5nIGhpZ2gtb3JkZXIgYnl0ZXMpXG5cbiAgYXJyWzEwXSA9ICh2ID0gcGFyc2VJbnQodXVpZC5zbGljZSgyNCwgMzYpLCAxNikpIC8gMHgxMDAwMDAwMDAwMCAmIDB4ZmY7XG4gIGFyclsxMV0gPSB2IC8gMHgxMDAwMDAwMDAgJiAweGZmO1xuICBhcnJbMTJdID0gdiA+Pj4gMjQgJiAweGZmO1xuICBhcnJbMTNdID0gdiA+Pj4gMTYgJiAweGZmO1xuICBhcnJbMTRdID0gdiA+Pj4gOCAmIDB4ZmY7XG4gIGFyclsxNV0gPSB2ICYgMHhmZjtcbiAgcmV0dXJuIGFycjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgcGFyc2U7Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/node_modules/uuid/dist/esm-node/parse.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/node_modules/uuid/dist/esm-node/regex.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/snowflake-sdk/node_modules/uuid/dist/esm-node/regex.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL3JlZ2V4LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxpRUFBZSxjQUFjLEVBQUUsVUFBVSxFQUFFLGVBQWUsRUFBRSxnQkFBZ0IsRUFBRSxVQUFVLEdBQUcseUNBQXlDIiwic291cmNlcyI6WyIvVXNlcnMvd2FuZ2hhb3RhaS9EZXNrdG9wL2VsdmVubGFiL0hUVi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL3JlZ2V4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IC9eKD86WzAtOWEtZl17OH0tWzAtOWEtZl17NH0tWzEtNV1bMC05YS1mXXszfS1bODlhYl1bMC05YS1mXXszfS1bMC05YS1mXXsxMn18MDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwKSQvaTsiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/node_modules/uuid/dist/esm-node/regex.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/node_modules/uuid/dist/esm-node/rng.js":
/*!***************************************************************************!*\
  !*** ./node_modules/snowflake-sdk/node_modules/uuid/dist/esm-node/rng.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ rng)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_0__);\n\nconst rnds8Pool = new Uint8Array(256); // # of random values to pre-allocate\n\nlet poolPtr = rnds8Pool.length;\nfunction rng() {\n  if (poolPtr > rnds8Pool.length - 16) {\n    crypto__WEBPACK_IMPORTED_MODULE_0___default().randomFillSync(rnds8Pool);\n    poolPtr = 0;\n  }\n\n  return rnds8Pool.slice(poolPtr, poolPtr += 16);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL3JuZy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBNEI7QUFDNUIsdUNBQXVDOztBQUV2QztBQUNlO0FBQ2Y7QUFDQSxJQUFJLDREQUFxQjtBQUN6QjtBQUNBOztBQUVBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy93YW5naGFvdGFpL0Rlc2t0b3AvZWx2ZW5sYWIvSFRWL25vZGVfbW9kdWxlcy9zbm93Zmxha2Utc2RrL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvcm5nLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjcnlwdG8gZnJvbSAnY3J5cHRvJztcbmNvbnN0IHJuZHM4UG9vbCA9IG5ldyBVaW50OEFycmF5KDI1Nik7IC8vICMgb2YgcmFuZG9tIHZhbHVlcyB0byBwcmUtYWxsb2NhdGVcblxubGV0IHBvb2xQdHIgPSBybmRzOFBvb2wubGVuZ3RoO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcm5nKCkge1xuICBpZiAocG9vbFB0ciA+IHJuZHM4UG9vbC5sZW5ndGggLSAxNikge1xuICAgIGNyeXB0by5yYW5kb21GaWxsU3luYyhybmRzOFBvb2wpO1xuICAgIHBvb2xQdHIgPSAwO1xuICB9XG5cbiAgcmV0dXJuIHJuZHM4UG9vbC5zbGljZShwb29sUHRyLCBwb29sUHRyICs9IDE2KTtcbn0iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/node_modules/uuid/dist/esm-node/rng.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/node_modules/uuid/dist/esm-node/sha1.js":
/*!****************************************************************************!*\
  !*** ./node_modules/snowflake-sdk/node_modules/uuid/dist/esm-node/sha1.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_0__);\n\n\nfunction sha1(bytes) {\n  if (Array.isArray(bytes)) {\n    bytes = Buffer.from(bytes);\n  } else if (typeof bytes === 'string') {\n    bytes = Buffer.from(bytes, 'utf8');\n  }\n\n  return crypto__WEBPACK_IMPORTED_MODULE_0___default().createHash('sha1').update(bytes).digest();\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (sha1);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL3NoYTEuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQTRCOztBQUU1QjtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQSxTQUFTLHdEQUFpQjtBQUMxQjs7QUFFQSxpRUFBZSxJQUFJIiwic291cmNlcyI6WyIvVXNlcnMvd2FuZ2hhb3RhaS9EZXNrdG9wL2VsdmVubGFiL0hUVi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL3NoYTEuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNyeXB0byBmcm9tICdjcnlwdG8nO1xuXG5mdW5jdGlvbiBzaGExKGJ5dGVzKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGJ5dGVzKSkge1xuICAgIGJ5dGVzID0gQnVmZmVyLmZyb20oYnl0ZXMpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBieXRlcyA9PT0gJ3N0cmluZycpIHtcbiAgICBieXRlcyA9IEJ1ZmZlci5mcm9tKGJ5dGVzLCAndXRmOCcpO1xuICB9XG5cbiAgcmV0dXJuIGNyeXB0by5jcmVhdGVIYXNoKCdzaGExJykudXBkYXRlKGJ5dGVzKS5kaWdlc3QoKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgc2hhMTsiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/node_modules/uuid/dist/esm-node/sha1.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/node_modules/uuid/dist/esm-node/stringify.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/snowflake-sdk/node_modules/uuid/dist/esm-node/stringify.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./validate.js */ \"(rsc)/./node_modules/snowflake-sdk/node_modules/uuid/dist/esm-node/validate.js\");\n\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  const uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!(0,_validate_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (stringify);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL3N0cmluZ2lmeS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFxQztBQUNyQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxnQkFBZ0IsU0FBUztBQUN6QjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLDRnQkFBNGdCO0FBQzVnQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPLHdEQUFRO0FBQ2Y7QUFDQTs7QUFFQTtBQUNBOztBQUVBLGlFQUFlLFNBQVMiLCJzb3VyY2VzIjpbIi9Vc2Vycy93YW5naGFvdGFpL0Rlc2t0b3AvZWx2ZW5sYWIvSFRWL25vZGVfbW9kdWxlcy9zbm93Zmxha2Utc2RrL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvc3RyaW5naWZ5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB2YWxpZGF0ZSBmcm9tICcuL3ZhbGlkYXRlLmpzJztcbi8qKlxuICogQ29udmVydCBhcnJheSBvZiAxNiBieXRlIHZhbHVlcyB0byBVVUlEIHN0cmluZyBmb3JtYXQgb2YgdGhlIGZvcm06XG4gKiBYWFhYWFhYWC1YWFhYLVhYWFgtWFhYWC1YWFhYWFhYWFhYWFhcbiAqL1xuXG5jb25zdCBieXRlVG9IZXggPSBbXTtcblxuZm9yIChsZXQgaSA9IDA7IGkgPCAyNTY7ICsraSkge1xuICBieXRlVG9IZXgucHVzaCgoaSArIDB4MTAwKS50b1N0cmluZygxNikuc3Vic3RyKDEpKTtcbn1cblxuZnVuY3Rpb24gc3RyaW5naWZ5KGFyciwgb2Zmc2V0ID0gMCkge1xuICAvLyBOb3RlOiBCZSBjYXJlZnVsIGVkaXRpbmcgdGhpcyBjb2RlISAgSXQncyBiZWVuIHR1bmVkIGZvciBwZXJmb3JtYW5jZVxuICAvLyBhbmQgd29ya3MgaW4gd2F5cyB5b3UgbWF5IG5vdCBleHBlY3QuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vdXVpZGpzL3V1aWQvcHVsbC80MzRcbiAgY29uc3QgdXVpZCA9IChieXRlVG9IZXhbYXJyW29mZnNldCArIDBdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMV1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAyXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDNdXSArICctJyArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgNF1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA1XV0gKyAnLScgKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDZdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgN11dICsgJy0nICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA4XV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDldXSArICctJyArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTBdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTFdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTJdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTNdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTRdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTVdXSkudG9Mb3dlckNhc2UoKTsgLy8gQ29uc2lzdGVuY3kgY2hlY2sgZm9yIHZhbGlkIFVVSUQuICBJZiB0aGlzIHRocm93cywgaXQncyBsaWtlbHkgZHVlIHRvIG9uZVxuICAvLyBvZiB0aGUgZm9sbG93aW5nOlxuICAvLyAtIE9uZSBvciBtb3JlIGlucHV0IGFycmF5IHZhbHVlcyBkb24ndCBtYXAgdG8gYSBoZXggb2N0ZXQgKGxlYWRpbmcgdG9cbiAgLy8gXCJ1bmRlZmluZWRcIiBpbiB0aGUgdXVpZClcbiAgLy8gLSBJbnZhbGlkIGlucHV0IHZhbHVlcyBmb3IgdGhlIFJGQyBgdmVyc2lvbmAgb3IgYHZhcmlhbnRgIGZpZWxkc1xuXG4gIGlmICghdmFsaWRhdGUodXVpZCkpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ1N0cmluZ2lmaWVkIFVVSUQgaXMgaW52YWxpZCcpO1xuICB9XG5cbiAgcmV0dXJuIHV1aWQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHN0cmluZ2lmeTsiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/node_modules/uuid/dist/esm-node/stringify.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/node_modules/uuid/dist/esm-node/v1.js":
/*!**************************************************************************!*\
  !*** ./node_modules/snowflake-sdk/node_modules/uuid/dist/esm-node/v1.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _rng_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rng.js */ \"(rsc)/./node_modules/snowflake-sdk/node_modules/uuid/dist/esm-node/rng.js\");\n/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stringify.js */ \"(rsc)/./node_modules/snowflake-sdk/node_modules/uuid/dist/esm-node/stringify.js\");\n\n // **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\n\nlet _nodeId;\n\nlet _clockseq; // Previous uuid creation time\n\n\nlet _lastMSecs = 0;\nlet _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details\n\nfunction v1(options, buf, offset) {\n  let i = buf && offset || 0;\n  const b = buf || new Array(16);\n  options = options || {};\n  let node = options.node || _nodeId;\n  let clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not\n  // specified.  We do this lazily to minimize issues related to insufficient\n  // system entropy.  See #189\n\n  if (node == null || clockseq == null) {\n    const seedBytes = options.random || (options.rng || _rng_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])();\n\n    if (node == null) {\n      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];\n    }\n\n    if (clockseq == null) {\n      // Per 4.2.2, randomize (14 bit) clockseq\n      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\n    }\n  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n\n\n  let msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n\n  let nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)\n\n  const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression\n\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n\n\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  } // Per 4.2.1.2 Throw error if too many uuids are requested\n\n\n  if (nsecs >= 10000) {\n    throw new Error(\"uuid.v1(): Can't create more than 10M uuids/sec\");\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n\n  msecs += 12219292800000; // `time_low`\n\n  const tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff; // `time_mid`\n\n  const tmh = msecs / 0x100000000 * 10000 & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff; // `time_high_and_version`\n\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n\n  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n\n  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`\n\n  b[i++] = clockseq & 0xff; // `node`\n\n  for (let n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf || (0,_stringify_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(b);\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (v1);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL3YxLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUEyQjtBQUNZLENBQUM7QUFDeEM7QUFDQTtBQUNBOztBQUVBOztBQUVBLGVBQWU7OztBQUdmO0FBQ0Esb0JBQW9COztBQUVwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0ZBQWdGO0FBQ2hGO0FBQ0E7O0FBRUE7QUFDQSx3REFBd0QsK0NBQUc7O0FBRTNEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7O0FBR0Esd0VBQXdFO0FBQ3hFOztBQUVBLDRFQUE0RTs7QUFFNUUsZ0VBQWdFOztBQUVoRTtBQUNBO0FBQ0EsSUFBSTtBQUNKOzs7QUFHQTtBQUNBO0FBQ0EsSUFBSTs7O0FBR0o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx3QkFBd0I7O0FBRXhCLDJCQUEyQjs7QUFFM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7O0FBRXRCO0FBQ0E7QUFDQSx1QkFBdUI7O0FBRXZCLG9DQUFvQzs7QUFFcEMsOEJBQThCOztBQUU5QixrQ0FBa0M7O0FBRWxDLDRCQUE0Qjs7QUFFNUIsa0JBQWtCLE9BQU87QUFDekI7QUFDQTs7QUFFQSxnQkFBZ0IseURBQVM7QUFDekI7O0FBRUEsaUVBQWUsRUFBRSIsInNvdXJjZXMiOlsiL1VzZXJzL3dhbmdoYW90YWkvRGVza3RvcC9lbHZlbmxhYi9IVFYvbm9kZV9tb2R1bGVzL3Nub3dmbGFrZS1zZGsvbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tbm9kZS92MS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcm5nIGZyb20gJy4vcm5nLmpzJztcbmltcG9ydCBzdHJpbmdpZnkgZnJvbSAnLi9zdHJpbmdpZnkuanMnOyAvLyAqKmB2MSgpYCAtIEdlbmVyYXRlIHRpbWUtYmFzZWQgVVVJRCoqXG4vL1xuLy8gSW5zcGlyZWQgYnkgaHR0cHM6Ly9naXRodWIuY29tL0xpb3NLL1VVSUQuanNcbi8vIGFuZCBodHRwOi8vZG9jcy5weXRob24ub3JnL2xpYnJhcnkvdXVpZC5odG1sXG5cbmxldCBfbm9kZUlkO1xuXG5sZXQgX2Nsb2Nrc2VxOyAvLyBQcmV2aW91cyB1dWlkIGNyZWF0aW9uIHRpbWVcblxuXG5sZXQgX2xhc3RNU2VjcyA9IDA7XG5sZXQgX2xhc3ROU2VjcyA9IDA7IC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vdXVpZGpzL3V1aWQgZm9yIEFQSSBkZXRhaWxzXG5cbmZ1bmN0aW9uIHYxKG9wdGlvbnMsIGJ1Ziwgb2Zmc2V0KSB7XG4gIGxldCBpID0gYnVmICYmIG9mZnNldCB8fCAwO1xuICBjb25zdCBiID0gYnVmIHx8IG5ldyBBcnJheSgxNik7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBsZXQgbm9kZSA9IG9wdGlvbnMubm9kZSB8fCBfbm9kZUlkO1xuICBsZXQgY2xvY2tzZXEgPSBvcHRpb25zLmNsb2Nrc2VxICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmNsb2Nrc2VxIDogX2Nsb2Nrc2VxOyAvLyBub2RlIGFuZCBjbG9ja3NlcSBuZWVkIHRvIGJlIGluaXRpYWxpemVkIHRvIHJhbmRvbSB2YWx1ZXMgaWYgdGhleSdyZSBub3RcbiAgLy8gc3BlY2lmaWVkLiAgV2UgZG8gdGhpcyBsYXppbHkgdG8gbWluaW1pemUgaXNzdWVzIHJlbGF0ZWQgdG8gaW5zdWZmaWNpZW50XG4gIC8vIHN5c3RlbSBlbnRyb3B5LiAgU2VlICMxODlcblxuICBpZiAobm9kZSA9PSBudWxsIHx8IGNsb2Nrc2VxID09IG51bGwpIHtcbiAgICBjb25zdCBzZWVkQnl0ZXMgPSBvcHRpb25zLnJhbmRvbSB8fCAob3B0aW9ucy5ybmcgfHwgcm5nKSgpO1xuXG4gICAgaWYgKG5vZGUgPT0gbnVsbCkge1xuICAgICAgLy8gUGVyIDQuNSwgY3JlYXRlIGFuZCA0OC1iaXQgbm9kZSBpZCwgKDQ3IHJhbmRvbSBiaXRzICsgbXVsdGljYXN0IGJpdCA9IDEpXG4gICAgICBub2RlID0gX25vZGVJZCA9IFtzZWVkQnl0ZXNbMF0gfCAweDAxLCBzZWVkQnl0ZXNbMV0sIHNlZWRCeXRlc1syXSwgc2VlZEJ5dGVzWzNdLCBzZWVkQnl0ZXNbNF0sIHNlZWRCeXRlc1s1XV07XG4gICAgfVxuXG4gICAgaWYgKGNsb2Nrc2VxID09IG51bGwpIHtcbiAgICAgIC8vIFBlciA0LjIuMiwgcmFuZG9taXplICgxNCBiaXQpIGNsb2Nrc2VxXG4gICAgICBjbG9ja3NlcSA9IF9jbG9ja3NlcSA9IChzZWVkQnl0ZXNbNl0gPDwgOCB8IHNlZWRCeXRlc1s3XSkgJiAweDNmZmY7XG4gICAgfVxuICB9IC8vIFVVSUQgdGltZXN0YW1wcyBhcmUgMTAwIG5hbm8tc2Vjb25kIHVuaXRzIHNpbmNlIHRoZSBHcmVnb3JpYW4gZXBvY2gsXG4gIC8vICgxNTgyLTEwLTE1IDAwOjAwKS4gIEpTTnVtYmVycyBhcmVuJ3QgcHJlY2lzZSBlbm91Z2ggZm9yIHRoaXMsIHNvXG4gIC8vIHRpbWUgaXMgaGFuZGxlZCBpbnRlcm5hbGx5IGFzICdtc2VjcycgKGludGVnZXIgbWlsbGlzZWNvbmRzKSBhbmQgJ25zZWNzJ1xuICAvLyAoMTAwLW5hbm9zZWNvbmRzIG9mZnNldCBmcm9tIG1zZWNzKSBzaW5jZSB1bml4IGVwb2NoLCAxOTcwLTAxLTAxIDAwOjAwLlxuXG5cbiAgbGV0IG1zZWNzID0gb3B0aW9ucy5tc2VjcyAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5tc2VjcyA6IERhdGUubm93KCk7IC8vIFBlciA0LjIuMS4yLCB1c2UgY291bnQgb2YgdXVpZCdzIGdlbmVyYXRlZCBkdXJpbmcgdGhlIGN1cnJlbnQgY2xvY2tcbiAgLy8gY3ljbGUgdG8gc2ltdWxhdGUgaGlnaGVyIHJlc29sdXRpb24gY2xvY2tcblxuICBsZXQgbnNlY3MgPSBvcHRpb25zLm5zZWNzICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLm5zZWNzIDogX2xhc3ROU2VjcyArIDE7IC8vIFRpbWUgc2luY2UgbGFzdCB1dWlkIGNyZWF0aW9uIChpbiBtc2VjcylcblxuICBjb25zdCBkdCA9IG1zZWNzIC0gX2xhc3RNU2VjcyArIChuc2VjcyAtIF9sYXN0TlNlY3MpIC8gMTAwMDA7IC8vIFBlciA0LjIuMS4yLCBCdW1wIGNsb2Nrc2VxIG9uIGNsb2NrIHJlZ3Jlc3Npb25cblxuICBpZiAoZHQgPCAwICYmIG9wdGlvbnMuY2xvY2tzZXEgPT09IHVuZGVmaW5lZCkge1xuICAgIGNsb2Nrc2VxID0gY2xvY2tzZXEgKyAxICYgMHgzZmZmO1xuICB9IC8vIFJlc2V0IG5zZWNzIGlmIGNsb2NrIHJlZ3Jlc3NlcyAobmV3IGNsb2Nrc2VxKSBvciB3ZSd2ZSBtb3ZlZCBvbnRvIGEgbmV3XG4gIC8vIHRpbWUgaW50ZXJ2YWxcblxuXG4gIGlmICgoZHQgPCAwIHx8IG1zZWNzID4gX2xhc3RNU2VjcykgJiYgb3B0aW9ucy5uc2VjcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgbnNlY3MgPSAwO1xuICB9IC8vIFBlciA0LjIuMS4yIFRocm93IGVycm9yIGlmIHRvbyBtYW55IHV1aWRzIGFyZSByZXF1ZXN0ZWRcblxuXG4gIGlmIChuc2VjcyA+PSAxMDAwMCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcInV1aWQudjEoKTogQ2FuJ3QgY3JlYXRlIG1vcmUgdGhhbiAxME0gdXVpZHMvc2VjXCIpO1xuICB9XG5cbiAgX2xhc3RNU2VjcyA9IG1zZWNzO1xuICBfbGFzdE5TZWNzID0gbnNlY3M7XG4gIF9jbG9ja3NlcSA9IGNsb2Nrc2VxOyAvLyBQZXIgNC4xLjQgLSBDb252ZXJ0IGZyb20gdW5peCBlcG9jaCB0byBHcmVnb3JpYW4gZXBvY2hcblxuICBtc2VjcyArPSAxMjIxOTI5MjgwMDAwMDsgLy8gYHRpbWVfbG93YFxuXG4gIGNvbnN0IHRsID0gKChtc2VjcyAmIDB4ZmZmZmZmZikgKiAxMDAwMCArIG5zZWNzKSAlIDB4MTAwMDAwMDAwO1xuICBiW2krK10gPSB0bCA+Pj4gMjQgJiAweGZmO1xuICBiW2krK10gPSB0bCA+Pj4gMTYgJiAweGZmO1xuICBiW2krK10gPSB0bCA+Pj4gOCAmIDB4ZmY7XG4gIGJbaSsrXSA9IHRsICYgMHhmZjsgLy8gYHRpbWVfbWlkYFxuXG4gIGNvbnN0IHRtaCA9IG1zZWNzIC8gMHgxMDAwMDAwMDAgKiAxMDAwMCAmIDB4ZmZmZmZmZjtcbiAgYltpKytdID0gdG1oID4+PiA4ICYgMHhmZjtcbiAgYltpKytdID0gdG1oICYgMHhmZjsgLy8gYHRpbWVfaGlnaF9hbmRfdmVyc2lvbmBcblxuICBiW2krK10gPSB0bWggPj4+IDI0ICYgMHhmIHwgMHgxMDsgLy8gaW5jbHVkZSB2ZXJzaW9uXG5cbiAgYltpKytdID0gdG1oID4+PiAxNiAmIDB4ZmY7IC8vIGBjbG9ja19zZXFfaGlfYW5kX3Jlc2VydmVkYCAoUGVyIDQuMi4yIC0gaW5jbHVkZSB2YXJpYW50KVxuXG4gIGJbaSsrXSA9IGNsb2Nrc2VxID4+PiA4IHwgMHg4MDsgLy8gYGNsb2NrX3NlcV9sb3dgXG5cbiAgYltpKytdID0gY2xvY2tzZXEgJiAweGZmOyAvLyBgbm9kZWBcblxuICBmb3IgKGxldCBuID0gMDsgbiA8IDY7ICsrbikge1xuICAgIGJbaSArIG5dID0gbm9kZVtuXTtcbiAgfVxuXG4gIHJldHVybiBidWYgfHwgc3RyaW5naWZ5KGIpO1xufVxuXG5leHBvcnQgZGVmYXVsdCB2MTsiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/node_modules/uuid/dist/esm-node/v1.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/node_modules/uuid/dist/esm-node/v3.js":
/*!**************************************************************************!*\
  !*** ./node_modules/snowflake-sdk/node_modules/uuid/dist/esm-node/v3.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _v35_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./v35.js */ \"(rsc)/./node_modules/snowflake-sdk/node_modules/uuid/dist/esm-node/v35.js\");\n/* harmony import */ var _md5_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./md5.js */ \"(rsc)/./node_modules/snowflake-sdk/node_modules/uuid/dist/esm-node/md5.js\");\n\n\nconst v3 = (0,_v35_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])('v3', 0x30, _md5_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]);\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (v3);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL3YzLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUEyQjtBQUNBO0FBQzNCLFdBQVcsbURBQUcsYUFBYSwrQ0FBRztBQUM5QixpRUFBZSxFQUFFIiwic291cmNlcyI6WyIvVXNlcnMvd2FuZ2hhb3RhaS9EZXNrdG9wL2VsdmVubGFiL0hUVi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL3YzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB2MzUgZnJvbSAnLi92MzUuanMnO1xuaW1wb3J0IG1kNSBmcm9tICcuL21kNS5qcyc7XG5jb25zdCB2MyA9IHYzNSgndjMnLCAweDMwLCBtZDUpO1xuZXhwb3J0IGRlZmF1bHQgdjM7Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/node_modules/uuid/dist/esm-node/v3.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/node_modules/uuid/dist/esm-node/v35.js":
/*!***************************************************************************!*\
  !*** ./node_modules/snowflake-sdk/node_modules/uuid/dist/esm-node/v35.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DNS: () => (/* binding */ DNS),\n/* harmony export */   URL: () => (/* binding */ URL),\n/* harmony export */   \"default\": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stringify.js */ \"(rsc)/./node_modules/snowflake-sdk/node_modules/uuid/dist/esm-node/stringify.js\");\n/* harmony import */ var _parse_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./parse.js */ \"(rsc)/./node_modules/snowflake-sdk/node_modules/uuid/dist/esm-node/parse.js\");\n\n\n\nfunction stringToBytes(str) {\n  str = unescape(encodeURIComponent(str)); // UTF8 escape\n\n  const bytes = [];\n\n  for (let i = 0; i < str.length; ++i) {\n    bytes.push(str.charCodeAt(i));\n  }\n\n  return bytes;\n}\n\nconst DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';\nconst URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(name, version, hashfunc) {\n  function generateUUID(value, namespace, buf, offset) {\n    if (typeof value === 'string') {\n      value = stringToBytes(value);\n    }\n\n    if (typeof namespace === 'string') {\n      namespace = (0,_parse_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(namespace);\n    }\n\n    if (namespace.length !== 16) {\n      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');\n    } // Compute hash of namespace and value, Per 4.3\n    // Future: Use spread syntax when supported on all platforms, e.g. `bytes =\n    // hashfunc([...namespace, ... value])`\n\n\n    let bytes = new Uint8Array(16 + value.length);\n    bytes.set(namespace);\n    bytes.set(value, namespace.length);\n    bytes = hashfunc(bytes);\n    bytes[6] = bytes[6] & 0x0f | version;\n    bytes[8] = bytes[8] & 0x3f | 0x80;\n\n    if (buf) {\n      offset = offset || 0;\n\n      for (let i = 0; i < 16; ++i) {\n        buf[offset + i] = bytes[i];\n      }\n\n      return buf;\n    }\n\n    return (0,_stringify_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(bytes);\n  } // Function#name is not settable on some platforms (#270)\n\n\n  try {\n    generateUUID.name = name; // eslint-disable-next-line no-empty\n  } catch (err) {} // For CommonJS default export support\n\n\n  generateUUID.DNS = DNS;\n  generateUUID.URL = URL;\n  return generateUUID;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL3YzNS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUF1QztBQUNSOztBQUUvQjtBQUNBLDJDQUEyQzs7QUFFM0M7O0FBRUEsa0JBQWtCLGdCQUFnQjtBQUNsQztBQUNBOztBQUVBO0FBQ0E7O0FBRU87QUFDQTtBQUNQLDZCQUFlLG9DQUFVO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0Esa0JBQWtCLHFEQUFLO0FBQ3ZCOztBQUVBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsc0JBQXNCLFFBQVE7QUFDOUI7QUFDQTs7QUFFQTtBQUNBOztBQUVBLFdBQVcseURBQVM7QUFDcEIsSUFBSTs7O0FBR0o7QUFDQSw4QkFBOEI7QUFDOUIsSUFBSSxlQUFlOzs7QUFHbkI7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy93YW5naGFvdGFpL0Rlc2t0b3AvZWx2ZW5sYWIvSFRWL25vZGVfbW9kdWxlcy9zbm93Zmxha2Utc2RrL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvdjM1LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBzdHJpbmdpZnkgZnJvbSAnLi9zdHJpbmdpZnkuanMnO1xuaW1wb3J0IHBhcnNlIGZyb20gJy4vcGFyc2UuanMnO1xuXG5mdW5jdGlvbiBzdHJpbmdUb0J5dGVzKHN0cikge1xuICBzdHIgPSB1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoc3RyKSk7IC8vIFVURjggZXNjYXBlXG5cbiAgY29uc3QgYnl0ZXMgPSBbXTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgIGJ5dGVzLnB1c2goc3RyLmNoYXJDb2RlQXQoaSkpO1xuICB9XG5cbiAgcmV0dXJuIGJ5dGVzO1xufVxuXG5leHBvcnQgY29uc3QgRE5TID0gJzZiYTdiODEwLTlkYWQtMTFkMS04MGI0LTAwYzA0ZmQ0MzBjOCc7XG5leHBvcnQgY29uc3QgVVJMID0gJzZiYTdiODExLTlkYWQtMTFkMS04MGI0LTAwYzA0ZmQ0MzBjOCc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAobmFtZSwgdmVyc2lvbiwgaGFzaGZ1bmMpIHtcbiAgZnVuY3Rpb24gZ2VuZXJhdGVVVUlEKHZhbHVlLCBuYW1lc3BhY2UsIGJ1Ziwgb2Zmc2V0KSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHZhbHVlID0gc3RyaW5nVG9CeXRlcyh2YWx1ZSk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBuYW1lc3BhY2UgPT09ICdzdHJpbmcnKSB7XG4gICAgICBuYW1lc3BhY2UgPSBwYXJzZShuYW1lc3BhY2UpO1xuICAgIH1cblxuICAgIGlmIChuYW1lc3BhY2UubGVuZ3RoICE9PSAxNikge1xuICAgICAgdGhyb3cgVHlwZUVycm9yKCdOYW1lc3BhY2UgbXVzdCBiZSBhcnJheS1saWtlICgxNiBpdGVyYWJsZSBpbnRlZ2VyIHZhbHVlcywgMC0yNTUpJyk7XG4gICAgfSAvLyBDb21wdXRlIGhhc2ggb2YgbmFtZXNwYWNlIGFuZCB2YWx1ZSwgUGVyIDQuM1xuICAgIC8vIEZ1dHVyZTogVXNlIHNwcmVhZCBzeW50YXggd2hlbiBzdXBwb3J0ZWQgb24gYWxsIHBsYXRmb3JtcywgZS5nLiBgYnl0ZXMgPVxuICAgIC8vIGhhc2hmdW5jKFsuLi5uYW1lc3BhY2UsIC4uLiB2YWx1ZV0pYFxuXG5cbiAgICBsZXQgYnl0ZXMgPSBuZXcgVWludDhBcnJheSgxNiArIHZhbHVlLmxlbmd0aCk7XG4gICAgYnl0ZXMuc2V0KG5hbWVzcGFjZSk7XG4gICAgYnl0ZXMuc2V0KHZhbHVlLCBuYW1lc3BhY2UubGVuZ3RoKTtcbiAgICBieXRlcyA9IGhhc2hmdW5jKGJ5dGVzKTtcbiAgICBieXRlc1s2XSA9IGJ5dGVzWzZdICYgMHgwZiB8IHZlcnNpb247XG4gICAgYnl0ZXNbOF0gPSBieXRlc1s4XSAmIDB4M2YgfCAweDgwO1xuXG4gICAgaWYgKGJ1Zikge1xuICAgICAgb2Zmc2V0ID0gb2Zmc2V0IHx8IDA7XG5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTY7ICsraSkge1xuICAgICAgICBidWZbb2Zmc2V0ICsgaV0gPSBieXRlc1tpXTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGJ1ZjtcbiAgICB9XG5cbiAgICByZXR1cm4gc3RyaW5naWZ5KGJ5dGVzKTtcbiAgfSAvLyBGdW5jdGlvbiNuYW1lIGlzIG5vdCBzZXR0YWJsZSBvbiBzb21lIHBsYXRmb3JtcyAoIzI3MClcblxuXG4gIHRyeSB7XG4gICAgZ2VuZXJhdGVVVUlELm5hbWUgPSBuYW1lOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZW1wdHlcbiAgfSBjYXRjaCAoZXJyKSB7fSAvLyBGb3IgQ29tbW9uSlMgZGVmYXVsdCBleHBvcnQgc3VwcG9ydFxuXG5cbiAgZ2VuZXJhdGVVVUlELkROUyA9IEROUztcbiAgZ2VuZXJhdGVVVUlELlVSTCA9IFVSTDtcbiAgcmV0dXJuIGdlbmVyYXRlVVVJRDtcbn0iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/node_modules/uuid/dist/esm-node/v35.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/node_modules/uuid/dist/esm-node/v4.js":
/*!**************************************************************************!*\
  !*** ./node_modules/snowflake-sdk/node_modules/uuid/dist/esm-node/v4.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _rng_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rng.js */ \"(rsc)/./node_modules/snowflake-sdk/node_modules/uuid/dist/esm-node/rng.js\");\n/* harmony import */ var _stringify_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stringify.js */ \"(rsc)/./node_modules/snowflake-sdk/node_modules/uuid/dist/esm-node/stringify.js\");\n\n\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  const rnds = options.random || (options.rng || _rng_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return (0,_stringify_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(rnds);\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (v4);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL3Y0LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUEyQjtBQUNZOztBQUV2QztBQUNBO0FBQ0EsaURBQWlELCtDQUFHLEtBQUs7O0FBRXpEO0FBQ0EsbUNBQW1DOztBQUVuQztBQUNBOztBQUVBLG9CQUFvQixRQUFRO0FBQzVCO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxTQUFTLHlEQUFTO0FBQ2xCOztBQUVBLGlFQUFlLEVBQUUiLCJzb3VyY2VzIjpbIi9Vc2Vycy93YW5naGFvdGFpL0Rlc2t0b3AvZWx2ZW5sYWIvSFRWL25vZGVfbW9kdWxlcy9zbm93Zmxha2Utc2RrL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLW5vZGUvdjQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHJuZyBmcm9tICcuL3JuZy5qcyc7XG5pbXBvcnQgc3RyaW5naWZ5IGZyb20gJy4vc3RyaW5naWZ5LmpzJztcblxuZnVuY3Rpb24gdjQob3B0aW9ucywgYnVmLCBvZmZzZXQpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGNvbnN0IHJuZHMgPSBvcHRpb25zLnJhbmRvbSB8fCAob3B0aW9ucy5ybmcgfHwgcm5nKSgpOyAvLyBQZXIgNC40LCBzZXQgYml0cyBmb3IgdmVyc2lvbiBhbmQgYGNsb2NrX3NlcV9oaV9hbmRfcmVzZXJ2ZWRgXG5cbiAgcm5kc1s2XSA9IHJuZHNbNl0gJiAweDBmIHwgMHg0MDtcbiAgcm5kc1s4XSA9IHJuZHNbOF0gJiAweDNmIHwgMHg4MDsgLy8gQ29weSBieXRlcyB0byBidWZmZXIsIGlmIHByb3ZpZGVkXG5cbiAgaWYgKGJ1Zikge1xuICAgIG9mZnNldCA9IG9mZnNldCB8fCAwO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxNjsgKytpKSB7XG4gICAgICBidWZbb2Zmc2V0ICsgaV0gPSBybmRzW2ldO1xuICAgIH1cblxuICAgIHJldHVybiBidWY7XG4gIH1cblxuICByZXR1cm4gc3RyaW5naWZ5KHJuZHMpO1xufVxuXG5leHBvcnQgZGVmYXVsdCB2NDsiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/node_modules/uuid/dist/esm-node/v4.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/node_modules/uuid/dist/esm-node/v5.js":
/*!**************************************************************************!*\
  !*** ./node_modules/snowflake-sdk/node_modules/uuid/dist/esm-node/v5.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _v35_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./v35.js */ \"(rsc)/./node_modules/snowflake-sdk/node_modules/uuid/dist/esm-node/v35.js\");\n/* harmony import */ var _sha1_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sha1.js */ \"(rsc)/./node_modules/snowflake-sdk/node_modules/uuid/dist/esm-node/sha1.js\");\n\n\nconst v5 = (0,_v35_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])('v5', 0x50, _sha1_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]);\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (v5);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL3Y1LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUEyQjtBQUNFO0FBQzdCLFdBQVcsbURBQUcsYUFBYSxnREFBSTtBQUMvQixpRUFBZSxFQUFFIiwic291cmNlcyI6WyIvVXNlcnMvd2FuZ2hhb3RhaS9EZXNrdG9wL2VsdmVubGFiL0hUVi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL3Y1LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB2MzUgZnJvbSAnLi92MzUuanMnO1xuaW1wb3J0IHNoYTEgZnJvbSAnLi9zaGExLmpzJztcbmNvbnN0IHY1ID0gdjM1KCd2NScsIDB4NTAsIHNoYTEpO1xuZXhwb3J0IGRlZmF1bHQgdjU7Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/node_modules/uuid/dist/esm-node/v5.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/node_modules/uuid/dist/esm-node/validate.js":
/*!********************************************************************************!*\
  !*** ./node_modules/snowflake-sdk/node_modules/uuid/dist/esm-node/validate.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _regex_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./regex.js */ \"(rsc)/./node_modules/snowflake-sdk/node_modules/uuid/dist/esm-node/regex.js\");\n\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && _regex_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].test(uuid);\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (validate);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL3ZhbGlkYXRlLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQStCOztBQUUvQjtBQUNBLHFDQUFxQyxpREFBSztBQUMxQzs7QUFFQSxpRUFBZSxRQUFRIiwic291cmNlcyI6WyIvVXNlcnMvd2FuZ2hhb3RhaS9EZXNrdG9wL2VsdmVubGFiL0hUVi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL3ZhbGlkYXRlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSRUdFWCBmcm9tICcuL3JlZ2V4LmpzJztcblxuZnVuY3Rpb24gdmFsaWRhdGUodXVpZCkge1xuICByZXR1cm4gdHlwZW9mIHV1aWQgPT09ICdzdHJpbmcnICYmIFJFR0VYLnRlc3QodXVpZCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHZhbGlkYXRlOyJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/node_modules/uuid/dist/esm-node/validate.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/snowflake-sdk/node_modules/uuid/dist/esm-node/version.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/snowflake-sdk/node_modules/uuid/dist/esm-node/version.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./validate.js */ \"(rsc)/./node_modules/snowflake-sdk/node_modules/uuid/dist/esm-node/validate.js\");\n\n\nfunction version(uuid) {\n  if (!(0,_validate_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(uuid)) {\n    throw TypeError('Invalid UUID');\n  }\n\n  return parseInt(uuid.substr(14, 1), 16);\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (version);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL3ZlcnNpb24uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBcUM7O0FBRXJDO0FBQ0EsT0FBTyx3REFBUTtBQUNmO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxpRUFBZSxPQUFPIiwic291cmNlcyI6WyIvVXNlcnMvd2FuZ2hhb3RhaS9EZXNrdG9wL2VsdmVubGFiL0hUVi9ub2RlX21vZHVsZXMvc25vd2ZsYWtlLXNkay9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1ub2RlL3ZlcnNpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHZhbGlkYXRlIGZyb20gJy4vdmFsaWRhdGUuanMnO1xuXG5mdW5jdGlvbiB2ZXJzaW9uKHV1aWQpIHtcbiAgaWYgKCF2YWxpZGF0ZSh1dWlkKSkge1xuICAgIHRocm93IFR5cGVFcnJvcignSW52YWxpZCBVVUlEJyk7XG4gIH1cblxuICByZXR1cm4gcGFyc2VJbnQodXVpZC5zdWJzdHIoMTQsIDEpLCAxNik7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHZlcnNpb247Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/snowflake-sdk/node_modules/uuid/dist/esm-node/version.js\n");

/***/ })

};
;