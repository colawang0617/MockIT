/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@techteamer";
exports.ids = ["vendor-chunks/@techteamer"];
exports.modules = {

/***/ "(rsc)/./node_modules/@techteamer/ocsp/lib/ocsp.js":
/*!***************************************************!*\
  !*** ./node_modules/@techteamer/ocsp/lib/ocsp.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("exports.Cache = __webpack_require__(/*! ./ocsp/cache */ \"(rsc)/./node_modules/@techteamer/ocsp/lib/ocsp/cache.js\")\nexports.Agent = __webpack_require__(/*! ./ocsp/agent */ \"(rsc)/./node_modules/@techteamer/ocsp/lib/ocsp/agent.js\")\nexports.Server = __webpack_require__(/*! ./ocsp/server */ \"(rsc)/./node_modules/@techteamer/ocsp/lib/ocsp/server.js\")\n\nexports.getOCSPURI = __webpack_require__(/*! ./ocsp/api */ \"(rsc)/./node_modules/@techteamer/ocsp/lib/ocsp/api.js\").getOCSPURI\n\nexports.request = __webpack_require__(/*! ./ocsp/request */ \"(rsc)/./node_modules/@techteamer/ocsp/lib/ocsp/request.js\")\nexports.check = __webpack_require__(/*! ./ocsp/check */ \"(rsc)/./node_modules/@techteamer/ocsp/lib/ocsp/check.js\")\nexports.verify = __webpack_require__(/*! ./ocsp/verify */ \"(rsc)/./node_modules/@techteamer/ocsp/lib/ocsp/verify.js\")\nexports.utils = __webpack_require__(/*! ./ocsp/utils */ \"(rsc)/./node_modules/@techteamer/ocsp/lib/ocsp/utils.js\")\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHRlY2h0ZWFtZXIvb2NzcC9saWIvb2NzcC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxrSEFBdUM7QUFDdkMsa0hBQXVDO0FBQ3ZDLHFIQUF5Qzs7QUFFekMsOEhBQXFEOztBQUVyRCx3SEFBMkM7QUFDM0Msa0hBQXVDO0FBQ3ZDLHFIQUF5QztBQUN6QyxrSEFBdUMiLCJzb3VyY2VzIjpbIi9Vc2Vycy93YW5naGFvdGFpL0Rlc2t0b3AvZWx2ZW5sYWIvSFRWL25vZGVfbW9kdWxlcy9AdGVjaHRlYW1lci9vY3NwL2xpYi9vY3NwLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydHMuQ2FjaGUgPSByZXF1aXJlKCcuL29jc3AvY2FjaGUnKVxuZXhwb3J0cy5BZ2VudCA9IHJlcXVpcmUoJy4vb2NzcC9hZ2VudCcpXG5leHBvcnRzLlNlcnZlciA9IHJlcXVpcmUoJy4vb2NzcC9zZXJ2ZXInKVxuXG5leHBvcnRzLmdldE9DU1BVUkkgPSByZXF1aXJlKCcuL29jc3AvYXBpJykuZ2V0T0NTUFVSSVxuXG5leHBvcnRzLnJlcXVlc3QgPSByZXF1aXJlKCcuL29jc3AvcmVxdWVzdCcpXG5leHBvcnRzLmNoZWNrID0gcmVxdWlyZSgnLi9vY3NwL2NoZWNrJylcbmV4cG9ydHMudmVyaWZ5ID0gcmVxdWlyZSgnLi9vY3NwL3ZlcmlmeScpXG5leHBvcnRzLnV0aWxzID0gcmVxdWlyZSgnLi9vY3NwL3V0aWxzJylcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@techteamer/ocsp/lib/ocsp.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@techteamer/ocsp/lib/ocsp/agent.js":
/*!*********************************************************!*\
  !*** ./node_modules/@techteamer/ocsp/lib/ocsp/agent.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const ocsp = __webpack_require__(/*! ../ocsp */ \"(rsc)/./node_modules/@techteamer/ocsp/lib/ocsp.js\")\n\nconst http = __webpack_require__(/*! http */ \"http\")\nconst https = __webpack_require__(/*! https */ \"https\")\nconst httpsAgent = https.Agent\nconst rfc5280 = __webpack_require__(/*! asn1.js-rfc5280 */ \"(rsc)/./node_modules/asn1.js-rfc5280/index.js\")\nconst SimpleCache = __webpack_require__(/*! simple-lru-cache */ \"(rsc)/./node_modules/simple-lru-cache/index.js\")\n\nclass Agent extends httpsAgent {\n  constructor (options) {\n    options = Object.assign({ CACacheSize: 1024 }, options)\n    super(options)\n\n    this.caCache = new SimpleCache({ maxSize: options.CACacheSize })\n  }\n\n  createConnection (options, connectListener) {\n    options.requestOCSP = true\n    const socket = super.createConnection(options, connectListener)\n\n    let stapling = null\n    socket.on('OCSPResponse', function (data) { stapling = data })\n\n    socket.on('secure', () => {\n      return this.handleOCSPResponse(socket, stapling, function (err) {\n        if (err) {\n          return socket.destroy(err)\n        }\n\n        // Time to allow all writes!\n        socket.uncork()\n      })\n    })\n\n    // Do not let any writes come through until we will verify OCSP\n    socket.cork()\n\n    return socket\n  }\n\n  handleOCSPResponse (socket, stapling, cb) {\n    if (!socket.authorized) {\n      return cb(new Error(socket.authorizationError))\n    }\n\n    let cert\n    let issuer\n\n    try {\n      cert = (socket.ssl || socket).getPeerCertificate(true)\n      issuer = cert && cert.issuerCertificate\n      cert = cert && cert.raw\n      cert = rfc5280.Certificate.decode(cert, 'der')\n\n      if (issuer) {\n        issuer = issuer.raw\n        issuer = rfc5280.Certificate.decode(issuer, 'der')\n      }\n    } catch (e) {\n      return cb(e)\n    }\n\n    function onIssuer (err, x509) {\n      if (err) {\n        return cb(err)\n      }\n\n      issuer = x509\n\n      if (stapling) {\n        const req = ocsp.request.generate(cert, issuer)\n        ocsp.verify({\n          request: req,\n          response: stapling\n        }, cb)\n      } else {\n        return ocsp.check({ cert, issuer }, cb)\n      }\n    }\n\n    if (issuer) {\n      return onIssuer(null, issuer)\n    } else {\n      return this.fetchIssuer(cert, stapling, onIssuer)\n    }\n  }\n\n  fetchIssuer (cert, stapling, cb) {\n    const issuers = ocsp.utils['id-ad-caIssuers'].join('.')\n\n    // TODO(indutny): use info from stapling response\n    ocsp.utils.getAuthorityInfo(cert, issuers, (err, uri) => {\n      if (err) { return cb(err) }\n\n      const ca = this.caCache.get(uri)\n      if (ca) { return cb(null, ca) }\n\n      let once = false\n      function done (err, data) {\n        if (once) { return }\n\n        once = true\n        cb(err, data)\n      }\n\n      function onResponse (res) {\n        if (res.statusCode < 200 || res.statusCode >= 400) {\n          return done(new Error('Failed to fetch CA: ' + res.statusCode))\n        }\n\n        const chunks = []\n        res.on('readable', function () {\n          const chunk = res.read()\n          if (!chunk) { return }\n          chunks.push(chunk)\n        })\n\n        res.on('end', function () {\n          let cert = Buffer.concat(chunks)\n\n          try {\n            cert = rfc5280.Certificate.decode(cert, 'der')\n          } catch (e) {\n            return done(e)\n          }\n\n          this.caCache.set(uri, cert)\n          done(null, cert)\n        })\n      }\n\n      try {\n        http.get(uri)\n          .on('error', done)\n          .on('response', onResponse.bind(this))\n      } catch (e) {\n        return done(e)\n      }\n    })\n  }\n}\n\nmodule.exports = Agent\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHRlY2h0ZWFtZXIvb2NzcC9saWIvb2NzcC9hZ2VudC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxhQUFhLG1CQUFPLENBQUMsa0VBQVM7O0FBRTlCLGFBQWEsbUJBQU8sQ0FBQyxrQkFBTTtBQUMzQixjQUFjLG1CQUFPLENBQUMsb0JBQU87QUFDN0I7QUFDQSxnQkFBZ0IsbUJBQU8sQ0FBQyxzRUFBaUI7QUFDekMsb0JBQW9CLG1CQUFPLENBQUMsd0VBQWtCOztBQUU5QztBQUNBO0FBQ0EsOEJBQThCLG1CQUFtQjtBQUNqRDs7QUFFQSxxQ0FBcUMsOEJBQThCO0FBQ25FOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGdEQUFnRCxpQkFBaUI7O0FBRWpFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLOztBQUVMO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULFFBQVE7QUFDUiw0QkFBNEIsY0FBYztBQUMxQztBQUNBOztBQUVBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGlCQUFpQjs7QUFFakI7QUFDQSxnQkFBZ0I7O0FBRWhCO0FBQ0E7QUFDQSxvQkFBb0I7O0FBRXBCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQSxTQUFTOztBQUVUO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBOztBQUVBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBIiwic291cmNlcyI6WyIvVXNlcnMvd2FuZ2hhb3RhaS9EZXNrdG9wL2VsdmVubGFiL0hUVi9ub2RlX21vZHVsZXMvQHRlY2h0ZWFtZXIvb2NzcC9saWIvb2NzcC9hZ2VudC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBvY3NwID0gcmVxdWlyZSgnLi4vb2NzcCcpXG5cbmNvbnN0IGh0dHAgPSByZXF1aXJlKCdodHRwJylcbmNvbnN0IGh0dHBzID0gcmVxdWlyZSgnaHR0cHMnKVxuY29uc3QgaHR0cHNBZ2VudCA9IGh0dHBzLkFnZW50XG5jb25zdCByZmM1MjgwID0gcmVxdWlyZSgnYXNuMS5qcy1yZmM1MjgwJylcbmNvbnN0IFNpbXBsZUNhY2hlID0gcmVxdWlyZSgnc2ltcGxlLWxydS1jYWNoZScpXG5cbmNsYXNzIEFnZW50IGV4dGVuZHMgaHR0cHNBZ2VudCB7XG4gIGNvbnN0cnVjdG9yIChvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oeyBDQUNhY2hlU2l6ZTogMTAyNCB9LCBvcHRpb25zKVxuICAgIHN1cGVyKG9wdGlvbnMpXG5cbiAgICB0aGlzLmNhQ2FjaGUgPSBuZXcgU2ltcGxlQ2FjaGUoeyBtYXhTaXplOiBvcHRpb25zLkNBQ2FjaGVTaXplIH0pXG4gIH1cblxuICBjcmVhdGVDb25uZWN0aW9uIChvcHRpb25zLCBjb25uZWN0TGlzdGVuZXIpIHtcbiAgICBvcHRpb25zLnJlcXVlc3RPQ1NQID0gdHJ1ZVxuICAgIGNvbnN0IHNvY2tldCA9IHN1cGVyLmNyZWF0ZUNvbm5lY3Rpb24ob3B0aW9ucywgY29ubmVjdExpc3RlbmVyKVxuXG4gICAgbGV0IHN0YXBsaW5nID0gbnVsbFxuICAgIHNvY2tldC5vbignT0NTUFJlc3BvbnNlJywgZnVuY3Rpb24gKGRhdGEpIHsgc3RhcGxpbmcgPSBkYXRhIH0pXG5cbiAgICBzb2NrZXQub24oJ3NlY3VyZScsICgpID0+IHtcbiAgICAgIHJldHVybiB0aGlzLmhhbmRsZU9DU1BSZXNwb25zZShzb2NrZXQsIHN0YXBsaW5nLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICByZXR1cm4gc29ja2V0LmRlc3Ryb3koZXJyKVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gVGltZSB0byBhbGxvdyBhbGwgd3JpdGVzIVxuICAgICAgICBzb2NrZXQudW5jb3JrKClcbiAgICAgIH0pXG4gICAgfSlcblxuICAgIC8vIERvIG5vdCBsZXQgYW55IHdyaXRlcyBjb21lIHRocm91Z2ggdW50aWwgd2Ugd2lsbCB2ZXJpZnkgT0NTUFxuICAgIHNvY2tldC5jb3JrKClcblxuICAgIHJldHVybiBzb2NrZXRcbiAgfVxuXG4gIGhhbmRsZU9DU1BSZXNwb25zZSAoc29ja2V0LCBzdGFwbGluZywgY2IpIHtcbiAgICBpZiAoIXNvY2tldC5hdXRob3JpemVkKSB7XG4gICAgICByZXR1cm4gY2IobmV3IEVycm9yKHNvY2tldC5hdXRob3JpemF0aW9uRXJyb3IpKVxuICAgIH1cblxuICAgIGxldCBjZXJ0XG4gICAgbGV0IGlzc3VlclxuXG4gICAgdHJ5IHtcbiAgICAgIGNlcnQgPSAoc29ja2V0LnNzbCB8fCBzb2NrZXQpLmdldFBlZXJDZXJ0aWZpY2F0ZSh0cnVlKVxuICAgICAgaXNzdWVyID0gY2VydCAmJiBjZXJ0Lmlzc3VlckNlcnRpZmljYXRlXG4gICAgICBjZXJ0ID0gY2VydCAmJiBjZXJ0LnJhd1xuICAgICAgY2VydCA9IHJmYzUyODAuQ2VydGlmaWNhdGUuZGVjb2RlKGNlcnQsICdkZXInKVxuXG4gICAgICBpZiAoaXNzdWVyKSB7XG4gICAgICAgIGlzc3VlciA9IGlzc3Vlci5yYXdcbiAgICAgICAgaXNzdWVyID0gcmZjNTI4MC5DZXJ0aWZpY2F0ZS5kZWNvZGUoaXNzdWVyLCAnZGVyJylcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gY2IoZSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvbklzc3VlciAoZXJyLCB4NTA5KSB7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIHJldHVybiBjYihlcnIpXG4gICAgICB9XG5cbiAgICAgIGlzc3VlciA9IHg1MDlcblxuICAgICAgaWYgKHN0YXBsaW5nKSB7XG4gICAgICAgIGNvbnN0IHJlcSA9IG9jc3AucmVxdWVzdC5nZW5lcmF0ZShjZXJ0LCBpc3N1ZXIpXG4gICAgICAgIG9jc3AudmVyaWZ5KHtcbiAgICAgICAgICByZXF1ZXN0OiByZXEsXG4gICAgICAgICAgcmVzcG9uc2U6IHN0YXBsaW5nXG4gICAgICAgIH0sIGNiKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG9jc3AuY2hlY2soeyBjZXJ0LCBpc3N1ZXIgfSwgY2IpXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGlzc3Vlcikge1xuICAgICAgcmV0dXJuIG9uSXNzdWVyKG51bGwsIGlzc3VlcilcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuZmV0Y2hJc3N1ZXIoY2VydCwgc3RhcGxpbmcsIG9uSXNzdWVyKVxuICAgIH1cbiAgfVxuXG4gIGZldGNoSXNzdWVyIChjZXJ0LCBzdGFwbGluZywgY2IpIHtcbiAgICBjb25zdCBpc3N1ZXJzID0gb2NzcC51dGlsc1snaWQtYWQtY2FJc3N1ZXJzJ10uam9pbignLicpXG5cbiAgICAvLyBUT0RPKGluZHV0bnkpOiB1c2UgaW5mbyBmcm9tIHN0YXBsaW5nIHJlc3BvbnNlXG4gICAgb2NzcC51dGlscy5nZXRBdXRob3JpdHlJbmZvKGNlcnQsIGlzc3VlcnMsIChlcnIsIHVyaSkgPT4ge1xuICAgICAgaWYgKGVycikgeyByZXR1cm4gY2IoZXJyKSB9XG5cbiAgICAgIGNvbnN0IGNhID0gdGhpcy5jYUNhY2hlLmdldCh1cmkpXG4gICAgICBpZiAoY2EpIHsgcmV0dXJuIGNiKG51bGwsIGNhKSB9XG5cbiAgICAgIGxldCBvbmNlID0gZmFsc2VcbiAgICAgIGZ1bmN0aW9uIGRvbmUgKGVyciwgZGF0YSkge1xuICAgICAgICBpZiAob25jZSkgeyByZXR1cm4gfVxuXG4gICAgICAgIG9uY2UgPSB0cnVlXG4gICAgICAgIGNiKGVyciwgZGF0YSlcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gb25SZXNwb25zZSAocmVzKSB7XG4gICAgICAgIGlmIChyZXMuc3RhdHVzQ29kZSA8IDIwMCB8fCByZXMuc3RhdHVzQ29kZSA+PSA0MDApIHtcbiAgICAgICAgICByZXR1cm4gZG9uZShuZXcgRXJyb3IoJ0ZhaWxlZCB0byBmZXRjaCBDQTogJyArIHJlcy5zdGF0dXNDb2RlKSlcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGNodW5rcyA9IFtdXG4gICAgICAgIHJlcy5vbigncmVhZGFibGUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgY29uc3QgY2h1bmsgPSByZXMucmVhZCgpXG4gICAgICAgICAgaWYgKCFjaHVuaykgeyByZXR1cm4gfVxuICAgICAgICAgIGNodW5rcy5wdXNoKGNodW5rKVxuICAgICAgICB9KVxuXG4gICAgICAgIHJlcy5vbignZW5kJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGxldCBjZXJ0ID0gQnVmZmVyLmNvbmNhdChjaHVua3MpXG5cbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgY2VydCA9IHJmYzUyODAuQ2VydGlmaWNhdGUuZGVjb2RlKGNlcnQsICdkZXInKVxuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHJldHVybiBkb25lKGUpXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy5jYUNhY2hlLnNldCh1cmksIGNlcnQpXG4gICAgICAgICAgZG9uZShudWxsLCBjZXJ0KVxuICAgICAgICB9KVxuICAgICAgfVxuXG4gICAgICB0cnkge1xuICAgICAgICBodHRwLmdldCh1cmkpXG4gICAgICAgICAgLm9uKCdlcnJvcicsIGRvbmUpXG4gICAgICAgICAgLm9uKCdyZXNwb25zZScsIG9uUmVzcG9uc2UuYmluZCh0aGlzKSlcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIGRvbmUoZSlcbiAgICAgIH1cbiAgICB9KVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQWdlbnRcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@techteamer/ocsp/lib/ocsp/agent.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@techteamer/ocsp/lib/ocsp/api.js":
/*!*******************************************************!*\
  !*** ./node_modules/@techteamer/ocsp/lib/ocsp/api.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("const ocsp = __webpack_require__(/*! ../ocsp */ \"(rsc)/./node_modules/@techteamer/ocsp/lib/ocsp.js\")\nconst rfc2560 = __webpack_require__(/*! asn1.js-rfc2560 */ \"(rsc)/./node_modules/asn1.js-rfc2560/index.js\")\nconst rfc5280 = __webpack_require__(/*! asn1.js-rfc5280 */ \"(rsc)/./node_modules/asn1.js-rfc5280/index.js\")\n\nexports.getOCSPURI = function getOCSPURI (rawCert, cb) {\n  const ocspMethod = rfc2560['id-pkix-ocsp'].join('.')\n\n  let cert = ocsp.utils.toDER(rawCert, 'CERTIFICATE')\n  cert = rfc5280.Certificate.decode(cert, 'der')\n\n  ocsp.utils.getAuthorityInfo(cert, ocspMethod, cb)\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHRlY2h0ZWFtZXIvb2NzcC9saWIvb2NzcC9hcGkuanMiLCJtYXBwaW5ncyI6IkFBQUEsYUFBYSxtQkFBTyxDQUFDLGtFQUFTO0FBQzlCLGdCQUFnQixtQkFBTyxDQUFDLHNFQUFpQjtBQUN6QyxnQkFBZ0IsbUJBQU8sQ0FBQyxzRUFBaUI7O0FBRXpDLGtCQUFrQjtBQUNsQjs7QUFFQTtBQUNBOztBQUVBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy93YW5naGFvdGFpL0Rlc2t0b3AvZWx2ZW5sYWIvSFRWL25vZGVfbW9kdWxlcy9AdGVjaHRlYW1lci9vY3NwL2xpYi9vY3NwL2FwaS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBvY3NwID0gcmVxdWlyZSgnLi4vb2NzcCcpXG5jb25zdCByZmMyNTYwID0gcmVxdWlyZSgnYXNuMS5qcy1yZmMyNTYwJylcbmNvbnN0IHJmYzUyODAgPSByZXF1aXJlKCdhc24xLmpzLXJmYzUyODAnKVxuXG5leHBvcnRzLmdldE9DU1BVUkkgPSBmdW5jdGlvbiBnZXRPQ1NQVVJJIChyYXdDZXJ0LCBjYikge1xuICBjb25zdCBvY3NwTWV0aG9kID0gcmZjMjU2MFsnaWQtcGtpeC1vY3NwJ10uam9pbignLicpXG5cbiAgbGV0IGNlcnQgPSBvY3NwLnV0aWxzLnRvREVSKHJhd0NlcnQsICdDRVJUSUZJQ0FURScpXG4gIGNlcnQgPSByZmM1MjgwLkNlcnRpZmljYXRlLmRlY29kZShjZXJ0LCAnZGVyJylcblxuICBvY3NwLnV0aWxzLmdldEF1dGhvcml0eUluZm8oY2VydCwgb2NzcE1ldGhvZCwgY2IpXG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@techteamer/ocsp/lib/ocsp/api.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@techteamer/ocsp/lib/ocsp/cache.js":
/*!*********************************************************!*\
  !*** ./node_modules/@techteamer/ocsp/lib/ocsp/cache.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const ocsp = __webpack_require__(/*! ../ocsp */ \"(rsc)/./node_modules/@techteamer/ocsp/lib/ocsp.js\")\n\nclass Cache {\n  constructor (options) {\n    this.options = options || {}\n    this.cache = {}\n\n    // Override methods\n    if (this.options.probe) {\n      this.probe = this.options.probe\n    }\n    if (this.options.store) {\n      this.store = this.options.store\n    }\n    if (this.options.filter) {\n      this.filter = this.options.filter\n    }\n  }\n\n  filter (url, callback) {\n    callback(null)\n  }\n\n  probe (id, callback) {\n    if (Object.prototype.hasOwnProperty.call(this.cache, id)) {\n      callback(null, this.cache[id])\n    } else {\n      callback(null, false)\n    }\n  }\n\n  store (id, response, maxTime, callback) {\n    if (Object.prototype.hasOwnProperty.call(this.cache, id)) {\n      clearTimeout(this.cache[id].timer)\n    }\n\n    this.cache[id] = {\n      response,\n      timer: setTimeout(() => { delete this.cache[id] }, maxTime)\n    }\n\n    callback(null, null)\n  }\n\n  request (id, data, callback) {\n    function done (err, response) {\n      if (callback) {\n        callback(err, response)\n      }\n      callback = null\n    }\n\n    const onResponse = (err, ocsp) => {\n      if (err) {\n        return done(err)\n      }\n\n      // Respond early\n      done(null, ocsp)\n\n      // Try parsing and caching response\n      this.getMaxStoreTime(ocsp, (err, maxTime) => {\n        if (err) {\n          return\n        }\n\n        this.store(id, ocsp, maxTime, () => {\n          // No-op\n        })\n      })\n    }\n\n    // Check that url isn't blacklisted\n    this.filter(data.url, function (err) {\n      if (err) {\n        return done(err, null)\n      }\n\n      ocsp.utils.getResponse(data.url, data.ocsp, onResponse)\n    })\n  }\n\n  getMaxStoreTime (response, callback) {\n    let basic\n    try {\n      basic = ocsp.utils.parseResponse(response).value\n    } catch (e) {\n      return callback(e)\n    }\n\n    // Not enough responses\n    if (basic.tbsResponseData.responses.length === 0) { return callback(new Error('No OCSP responses')) }\n\n    const responses = basic.tbsResponseData.responses\n\n    // Every response should be positive\n    const good = responses.every(function (response) {\n      return response.certStatus.type === 'good'\n    })\n\n    // No good - no cache\n    if (!good) {\n      return callback(new Error('Some OCSP responses are not good'))\n    }\n\n    // Find minimum nextUpdate time\n    let nextUpdate = 0\n    for (let i = 0; i < responses.length; i++) {\n      const response = responses[i]\n      const responseNext = response.nextUpdate\n      if (!responseNext) {\n        continue\n      }\n      if (nextUpdate === 0 || nextUpdate > responseNext) {\n        nextUpdate = responseNext\n      }\n    }\n\n    return callback(null, Math.min(Math.max(0, nextUpdate - new Date()), 0x7FFFFFFF))\n  }\n\n  clear () {\n    const cacheIds = Object.keys(this.cache)\n    cacheIds.forEach((cacheId) => {\n      clearTimeout(this.cache[cacheId].timer)\n      delete this.cache[cacheId]\n    })\n  }\n}\n\nmodule.exports = Cache\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHRlY2h0ZWFtZXIvb2NzcC9saWIvb2NzcC9jYWNoZS5qcyIsIm1hcHBpbmdzIjoiQUFBQSxhQUFhLG1CQUFPLENBQUMsa0VBQVM7O0FBRTlCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGdDQUFnQyx1QkFBdUI7QUFDdkQ7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFNBQVM7QUFDVCxPQUFPO0FBQ1A7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBOztBQUVBO0FBQ0Esd0RBQXdEOztBQUV4RDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxvQkFBb0Isc0JBQXNCO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsiL1VzZXJzL3dhbmdoYW90YWkvRGVza3RvcC9lbHZlbmxhYi9IVFYvbm9kZV9tb2R1bGVzL0B0ZWNodGVhbWVyL29jc3AvbGliL29jc3AvY2FjaGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3Qgb2NzcCA9IHJlcXVpcmUoJy4uL29jc3AnKVxuXG5jbGFzcyBDYWNoZSB7XG4gIGNvbnN0cnVjdG9yIChvcHRpb25zKSB7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuICAgIHRoaXMuY2FjaGUgPSB7fVxuXG4gICAgLy8gT3ZlcnJpZGUgbWV0aG9kc1xuICAgIGlmICh0aGlzLm9wdGlvbnMucHJvYmUpIHtcbiAgICAgIHRoaXMucHJvYmUgPSB0aGlzLm9wdGlvbnMucHJvYmVcbiAgICB9XG4gICAgaWYgKHRoaXMub3B0aW9ucy5zdG9yZSkge1xuICAgICAgdGhpcy5zdG9yZSA9IHRoaXMub3B0aW9ucy5zdG9yZVxuICAgIH1cbiAgICBpZiAodGhpcy5vcHRpb25zLmZpbHRlcikge1xuICAgICAgdGhpcy5maWx0ZXIgPSB0aGlzLm9wdGlvbnMuZmlsdGVyXG4gICAgfVxuICB9XG5cbiAgZmlsdGVyICh1cmwsIGNhbGxiYWNrKSB7XG4gICAgY2FsbGJhY2sobnVsbClcbiAgfVxuXG4gIHByb2JlIChpZCwgY2FsbGJhY2spIHtcbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRoaXMuY2FjaGUsIGlkKSkge1xuICAgICAgY2FsbGJhY2sobnVsbCwgdGhpcy5jYWNoZVtpZF0pXG4gICAgfSBlbHNlIHtcbiAgICAgIGNhbGxiYWNrKG51bGwsIGZhbHNlKVxuICAgIH1cbiAgfVxuXG4gIHN0b3JlIChpZCwgcmVzcG9uc2UsIG1heFRpbWUsIGNhbGxiYWNrKSB7XG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLmNhY2hlLCBpZCkpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLmNhY2hlW2lkXS50aW1lcilcbiAgICB9XG5cbiAgICB0aGlzLmNhY2hlW2lkXSA9IHtcbiAgICAgIHJlc3BvbnNlLFxuICAgICAgdGltZXI6IHNldFRpbWVvdXQoKCkgPT4geyBkZWxldGUgdGhpcy5jYWNoZVtpZF0gfSwgbWF4VGltZSlcbiAgICB9XG5cbiAgICBjYWxsYmFjayhudWxsLCBudWxsKVxuICB9XG5cbiAgcmVxdWVzdCAoaWQsIGRhdGEsIGNhbGxiYWNrKSB7XG4gICAgZnVuY3Rpb24gZG9uZSAoZXJyLCByZXNwb25zZSkge1xuICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgIGNhbGxiYWNrKGVyciwgcmVzcG9uc2UpXG4gICAgICB9XG4gICAgICBjYWxsYmFjayA9IG51bGxcbiAgICB9XG5cbiAgICBjb25zdCBvblJlc3BvbnNlID0gKGVyciwgb2NzcCkgPT4ge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICByZXR1cm4gZG9uZShlcnIpXG4gICAgICB9XG5cbiAgICAgIC8vIFJlc3BvbmQgZWFybHlcbiAgICAgIGRvbmUobnVsbCwgb2NzcClcblxuICAgICAgLy8gVHJ5IHBhcnNpbmcgYW5kIGNhY2hpbmcgcmVzcG9uc2VcbiAgICAgIHRoaXMuZ2V0TWF4U3RvcmVUaW1lKG9jc3AsIChlcnIsIG1heFRpbWUpID0+IHtcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zdG9yZShpZCwgb2NzcCwgbWF4VGltZSwgKCkgPT4ge1xuICAgICAgICAgIC8vIE5vLW9wXG4gICAgICAgIH0pXG4gICAgICB9KVxuICAgIH1cblxuICAgIC8vIENoZWNrIHRoYXQgdXJsIGlzbid0IGJsYWNrbGlzdGVkXG4gICAgdGhpcy5maWx0ZXIoZGF0YS51cmwsIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgcmV0dXJuIGRvbmUoZXJyLCBudWxsKVxuICAgICAgfVxuXG4gICAgICBvY3NwLnV0aWxzLmdldFJlc3BvbnNlKGRhdGEudXJsLCBkYXRhLm9jc3AsIG9uUmVzcG9uc2UpXG4gICAgfSlcbiAgfVxuXG4gIGdldE1heFN0b3JlVGltZSAocmVzcG9uc2UsIGNhbGxiYWNrKSB7XG4gICAgbGV0IGJhc2ljXG4gICAgdHJ5IHtcbiAgICAgIGJhc2ljID0gb2NzcC51dGlscy5wYXJzZVJlc3BvbnNlKHJlc3BvbnNlKS52YWx1ZVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBjYWxsYmFjayhlKVxuICAgIH1cblxuICAgIC8vIE5vdCBlbm91Z2ggcmVzcG9uc2VzXG4gICAgaWYgKGJhc2ljLnRic1Jlc3BvbnNlRGF0YS5yZXNwb25zZXMubGVuZ3RoID09PSAwKSB7IHJldHVybiBjYWxsYmFjayhuZXcgRXJyb3IoJ05vIE9DU1AgcmVzcG9uc2VzJykpIH1cblxuICAgIGNvbnN0IHJlc3BvbnNlcyA9IGJhc2ljLnRic1Jlc3BvbnNlRGF0YS5yZXNwb25zZXNcblxuICAgIC8vIEV2ZXJ5IHJlc3BvbnNlIHNob3VsZCBiZSBwb3NpdGl2ZVxuICAgIGNvbnN0IGdvb2QgPSByZXNwb25zZXMuZXZlcnkoZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICByZXR1cm4gcmVzcG9uc2UuY2VydFN0YXR1cy50eXBlID09PSAnZ29vZCdcbiAgICB9KVxuXG4gICAgLy8gTm8gZ29vZCAtIG5vIGNhY2hlXG4gICAgaWYgKCFnb29kKSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2sobmV3IEVycm9yKCdTb21lIE9DU1AgcmVzcG9uc2VzIGFyZSBub3QgZ29vZCcpKVxuICAgIH1cblxuICAgIC8vIEZpbmQgbWluaW11bSBuZXh0VXBkYXRlIHRpbWVcbiAgICBsZXQgbmV4dFVwZGF0ZSA9IDBcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJlc3BvbnNlcy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSByZXNwb25zZXNbaV1cbiAgICAgIGNvbnN0IHJlc3BvbnNlTmV4dCA9IHJlc3BvbnNlLm5leHRVcGRhdGVcbiAgICAgIGlmICghcmVzcG9uc2VOZXh0KSB7XG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG4gICAgICBpZiAobmV4dFVwZGF0ZSA9PT0gMCB8fCBuZXh0VXBkYXRlID4gcmVzcG9uc2VOZXh0KSB7XG4gICAgICAgIG5leHRVcGRhdGUgPSByZXNwb25zZU5leHRcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gY2FsbGJhY2sobnVsbCwgTWF0aC5taW4oTWF0aC5tYXgoMCwgbmV4dFVwZGF0ZSAtIG5ldyBEYXRlKCkpLCAweDdGRkZGRkZGKSlcbiAgfVxuXG4gIGNsZWFyICgpIHtcbiAgICBjb25zdCBjYWNoZUlkcyA9IE9iamVjdC5rZXlzKHRoaXMuY2FjaGUpXG4gICAgY2FjaGVJZHMuZm9yRWFjaCgoY2FjaGVJZCkgPT4ge1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuY2FjaGVbY2FjaGVJZF0udGltZXIpXG4gICAgICBkZWxldGUgdGhpcy5jYWNoZVtjYWNoZUlkXVxuICAgIH0pXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBDYWNoZVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@techteamer/ocsp/lib/ocsp/cache.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@techteamer/ocsp/lib/ocsp/check.js":
/*!*********************************************************!*\
  !*** ./node_modules/@techteamer/ocsp/lib/ocsp/check.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const ocsp = __webpack_require__(/*! ../ocsp */ \"(rsc)/./node_modules/@techteamer/ocsp/lib/ocsp.js\")\n\nconst rfc2560 = __webpack_require__(/*! asn1.js-rfc2560 */ \"(rsc)/./node_modules/asn1.js-rfc2560/index.js\")\n\nmodule.exports = function check (options, cb) {\n  let sync = true\n  let req\n\n  function done (err, data) {\n    if (sync) {\n      sync = false\n      process.nextTick(function () {\n        cb(err, data)\n      })\n      return\n    }\n\n    cb(err, data)\n  }\n\n  try {\n    req = ocsp.request.generate(options.cert, options.issuer)\n  } catch (e) {\n    return done(e)\n  }\n\n  const ocspMethod = rfc2560['id-pkix-ocsp'].join('.')\n  ocsp.utils.getAuthorityInfo(req.cert, ocspMethod, function (err, uri) {\n    if (err) { return done(err) }\n\n    ocsp.utils.getResponse(uri, req.data, function (err, raw) {\n      if (err) {\n        return done(err)\n      }\n\n      try {\n        ocsp.verify({ request: req, response: raw }, done)\n      } catch (e) {\n        return done(e)\n      }\n    })\n  })\n\n  sync = false\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHRlY2h0ZWFtZXIvb2NzcC9saWIvb2NzcC9jaGVjay5qcyIsIm1hcHBpbmdzIjoiQUFBQSxhQUFhLG1CQUFPLENBQUMsa0VBQVM7O0FBRTlCLGdCQUFnQixtQkFBTyxDQUFDLHNFQUFpQjs7QUFFekM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZUFBZTs7QUFFZjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHNCQUFzQiw2QkFBNkI7QUFDbkQsUUFBUTtBQUNSO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRzs7QUFFSDtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvd2FuZ2hhb3RhaS9EZXNrdG9wL2VsdmVubGFiL0hUVi9ub2RlX21vZHVsZXMvQHRlY2h0ZWFtZXIvb2NzcC9saWIvb2NzcC9jaGVjay5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBvY3NwID0gcmVxdWlyZSgnLi4vb2NzcCcpXG5cbmNvbnN0IHJmYzI1NjAgPSByZXF1aXJlKCdhc24xLmpzLXJmYzI1NjAnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNoZWNrIChvcHRpb25zLCBjYikge1xuICBsZXQgc3luYyA9IHRydWVcbiAgbGV0IHJlcVxuXG4gIGZ1bmN0aW9uIGRvbmUgKGVyciwgZGF0YSkge1xuICAgIGlmIChzeW5jKSB7XG4gICAgICBzeW5jID0gZmFsc2VcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICBjYihlcnIsIGRhdGEpXG4gICAgICB9KVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY2IoZXJyLCBkYXRhKVxuICB9XG5cbiAgdHJ5IHtcbiAgICByZXEgPSBvY3NwLnJlcXVlc3QuZ2VuZXJhdGUob3B0aW9ucy5jZXJ0LCBvcHRpb25zLmlzc3VlcilcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBkb25lKGUpXG4gIH1cblxuICBjb25zdCBvY3NwTWV0aG9kID0gcmZjMjU2MFsnaWQtcGtpeC1vY3NwJ10uam9pbignLicpXG4gIG9jc3AudXRpbHMuZ2V0QXV0aG9yaXR5SW5mbyhyZXEuY2VydCwgb2NzcE1ldGhvZCwgZnVuY3Rpb24gKGVyciwgdXJpKSB7XG4gICAgaWYgKGVycikgeyByZXR1cm4gZG9uZShlcnIpIH1cblxuICAgIG9jc3AudXRpbHMuZ2V0UmVzcG9uc2UodXJpLCByZXEuZGF0YSwgZnVuY3Rpb24gKGVyciwgcmF3KSB7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIHJldHVybiBkb25lKGVycilcbiAgICAgIH1cblxuICAgICAgdHJ5IHtcbiAgICAgICAgb2NzcC52ZXJpZnkoeyByZXF1ZXN0OiByZXEsIHJlc3BvbnNlOiByYXcgfSwgZG9uZSlcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIGRvbmUoZSlcbiAgICAgIH1cbiAgICB9KVxuICB9KVxuXG4gIHN5bmMgPSBmYWxzZVxufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@techteamer/ocsp/lib/ocsp/check.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@techteamer/ocsp/lib/ocsp/request.js":
/*!***********************************************************!*\
  !*** ./node_modules/@techteamer/ocsp/lib/ocsp/request.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("const ocsp = __webpack_require__(/*! ../ocsp */ \"(rsc)/./node_modules/@techteamer/ocsp/lib/ocsp.js\")\nconst crypto = __webpack_require__(/*! crypto */ \"crypto\")\nconst rfc2560 = __webpack_require__(/*! asn1.js-rfc2560 */ \"(rsc)/./node_modules/asn1.js-rfc2560/index.js\")\nconst rfc5280 = __webpack_require__(/*! asn1.js-rfc5280 */ \"(rsc)/./node_modules/asn1.js-rfc5280/index.js\")\n\nfunction sha1 (data) {\n  return crypto.createHash('sha1').update(data).digest()\n}\n\nexports.generate = function generate (rawCert, rawIssuer) {\n  let cert\n  if (rawCert.tbsCertificate) {\n    cert = rawCert\n  } else {\n    cert = rfc5280.Certificate.decode(\n      ocsp.utils.toDER(rawCert, 'CERTIFICATE'),\n      'der')\n  }\n  let issuer\n  if (rawIssuer.tbsCertificate) {\n    issuer = rawIssuer\n  } else {\n    issuer = rfc5280.Certificate.decode(\n      ocsp.utils.toDER(rawIssuer, 'CERTIFICATE'),\n      'der')\n  }\n\n  const tbsCert = cert.tbsCertificate\n  const tbsIssuer = issuer.tbsCertificate\n\n  const certID = {\n    hashAlgorithm: {\n      // algorithm: [ 2, 16, 840, 1, 101, 3, 4, 2, 1 ]  // sha256\n      algorithm: [1, 3, 14, 3, 2, 26] // sha1\n    },\n    issuerNameHash: sha1(rfc5280.Name.encode(tbsCert.issuer, 'der')),\n    issuerKeyHash: sha1(\n      tbsIssuer.subjectPublicKeyInfo.subjectPublicKey.data),\n    serialNumber: tbsCert.serialNumber\n  }\n\n  const tbs = {\n    version: 'v1',\n    requestList: [{\n      reqCert: certID\n    }],\n    requestExtensions: [{\n      extnID: rfc2560['id-pkix-ocsp-nonce'],\n      critical: false,\n      extnValue: rfc2560.Nonce.encode(crypto.randomBytes(16), 'der')\n    }]\n  }\n\n  const req = {\n    tbsRequest: tbs\n  }\n\n  return {\n    id: sha1(rfc2560.CertID.encode(certID, 'der')),\n    certID,\n    data: rfc2560.OCSPRequest.encode(req, 'der'),\n\n    // Just to avoid re-parsing DER\n    cert,\n    issuer\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHRlY2h0ZWFtZXIvb2NzcC9saWIvb2NzcC9yZXF1ZXN0LmpzIiwibWFwcGluZ3MiOiJBQUFBLGFBQWEsbUJBQU8sQ0FBQyxrRUFBUztBQUM5QixlQUFlLG1CQUFPLENBQUMsc0JBQVE7QUFDL0IsZ0JBQWdCLG1CQUFPLENBQUMsc0VBQWlCO0FBQ3pDLGdCQUFnQixtQkFBTyxDQUFDLHNFQUFpQjs7QUFFekM7QUFDQTtBQUNBOztBQUVBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvd2FuZ2hhb3RhaS9EZXNrdG9wL2VsdmVubGFiL0hUVi9ub2RlX21vZHVsZXMvQHRlY2h0ZWFtZXIvb2NzcC9saWIvb2NzcC9yZXF1ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IG9jc3AgPSByZXF1aXJlKCcuLi9vY3NwJylcbmNvbnN0IGNyeXB0byA9IHJlcXVpcmUoJ2NyeXB0bycpXG5jb25zdCByZmMyNTYwID0gcmVxdWlyZSgnYXNuMS5qcy1yZmMyNTYwJylcbmNvbnN0IHJmYzUyODAgPSByZXF1aXJlKCdhc24xLmpzLXJmYzUyODAnKVxuXG5mdW5jdGlvbiBzaGExIChkYXRhKSB7XG4gIHJldHVybiBjcnlwdG8uY3JlYXRlSGFzaCgnc2hhMScpLnVwZGF0ZShkYXRhKS5kaWdlc3QoKVxufVxuXG5leHBvcnRzLmdlbmVyYXRlID0gZnVuY3Rpb24gZ2VuZXJhdGUgKHJhd0NlcnQsIHJhd0lzc3Vlcikge1xuICBsZXQgY2VydFxuICBpZiAocmF3Q2VydC50YnNDZXJ0aWZpY2F0ZSkge1xuICAgIGNlcnQgPSByYXdDZXJ0XG4gIH0gZWxzZSB7XG4gICAgY2VydCA9IHJmYzUyODAuQ2VydGlmaWNhdGUuZGVjb2RlKFxuICAgICAgb2NzcC51dGlscy50b0RFUihyYXdDZXJ0LCAnQ0VSVElGSUNBVEUnKSxcbiAgICAgICdkZXInKVxuICB9XG4gIGxldCBpc3N1ZXJcbiAgaWYgKHJhd0lzc3Vlci50YnNDZXJ0aWZpY2F0ZSkge1xuICAgIGlzc3VlciA9IHJhd0lzc3VlclxuICB9IGVsc2Uge1xuICAgIGlzc3VlciA9IHJmYzUyODAuQ2VydGlmaWNhdGUuZGVjb2RlKFxuICAgICAgb2NzcC51dGlscy50b0RFUihyYXdJc3N1ZXIsICdDRVJUSUZJQ0FURScpLFxuICAgICAgJ2RlcicpXG4gIH1cblxuICBjb25zdCB0YnNDZXJ0ID0gY2VydC50YnNDZXJ0aWZpY2F0ZVxuICBjb25zdCB0YnNJc3N1ZXIgPSBpc3N1ZXIudGJzQ2VydGlmaWNhdGVcblxuICBjb25zdCBjZXJ0SUQgPSB7XG4gICAgaGFzaEFsZ29yaXRobToge1xuICAgICAgLy8gYWxnb3JpdGhtOiBbIDIsIDE2LCA4NDAsIDEsIDEwMSwgMywgNCwgMiwgMSBdICAvLyBzaGEyNTZcbiAgICAgIGFsZ29yaXRobTogWzEsIDMsIDE0LCAzLCAyLCAyNl0gLy8gc2hhMVxuICAgIH0sXG4gICAgaXNzdWVyTmFtZUhhc2g6IHNoYTEocmZjNTI4MC5OYW1lLmVuY29kZSh0YnNDZXJ0Lmlzc3VlciwgJ2RlcicpKSxcbiAgICBpc3N1ZXJLZXlIYXNoOiBzaGExKFxuICAgICAgdGJzSXNzdWVyLnN1YmplY3RQdWJsaWNLZXlJbmZvLnN1YmplY3RQdWJsaWNLZXkuZGF0YSksXG4gICAgc2VyaWFsTnVtYmVyOiB0YnNDZXJ0LnNlcmlhbE51bWJlclxuICB9XG5cbiAgY29uc3QgdGJzID0ge1xuICAgIHZlcnNpb246ICd2MScsXG4gICAgcmVxdWVzdExpc3Q6IFt7XG4gICAgICByZXFDZXJ0OiBjZXJ0SURcbiAgICB9XSxcbiAgICByZXF1ZXN0RXh0ZW5zaW9uczogW3tcbiAgICAgIGV4dG5JRDogcmZjMjU2MFsnaWQtcGtpeC1vY3NwLW5vbmNlJ10sXG4gICAgICBjcml0aWNhbDogZmFsc2UsXG4gICAgICBleHRuVmFsdWU6IHJmYzI1NjAuTm9uY2UuZW5jb2RlKGNyeXB0by5yYW5kb21CeXRlcygxNiksICdkZXInKVxuICAgIH1dXG4gIH1cblxuICBjb25zdCByZXEgPSB7XG4gICAgdGJzUmVxdWVzdDogdGJzXG4gIH1cblxuICByZXR1cm4ge1xuICAgIGlkOiBzaGExKHJmYzI1NjAuQ2VydElELmVuY29kZShjZXJ0SUQsICdkZXInKSksXG4gICAgY2VydElELFxuICAgIGRhdGE6IHJmYzI1NjAuT0NTUFJlcXVlc3QuZW5jb2RlKHJlcSwgJ2RlcicpLFxuXG4gICAgLy8gSnVzdCB0byBhdm9pZCByZS1wYXJzaW5nIERFUlxuICAgIGNlcnQsXG4gICAgaXNzdWVyXG4gIH1cbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@techteamer/ocsp/lib/ocsp/request.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@techteamer/ocsp/lib/ocsp/server.js":
/*!**********************************************************!*\
  !*** ./node_modules/@techteamer/ocsp/lib/ocsp/server.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const ocsp = __webpack_require__(/*! ../ocsp */ \"(rsc)/./node_modules/@techteamer/ocsp/lib/ocsp.js\")\n\nconst http = __webpack_require__(/*! http */ \"http\")\nconst httpServer = http.Server\nconst crypto = __webpack_require__(/*! crypto */ \"crypto\")\n\nconst async = __webpack_require__(/*! async */ \"(rsc)/./node_modules/async/dist/async.mjs\")\nconst rfc2560 = __webpack_require__(/*! asn1.js-rfc2560 */ \"(rsc)/./node_modules/asn1.js-rfc2560/index.js\")\nconst rfc5280 = __webpack_require__(/*! asn1.js-rfc5280 */ \"(rsc)/./node_modules/asn1.js-rfc5280/index.js\")\n\nfunction handler (req, res) {\n  if (req.method !== 'POST') {\n    return res.writeHead(400)\n  }\n\n  if (req.headers['content-type'] !== 'application/ocsp-request') {\n    return res.writeHead(400)\n  }\n\n  const chunks = []\n  req.on('readable', function () {\n    const chunk = req.read()\n    if (chunk) { chunks.push(chunk) }\n  })\n\n  function errRes (status) {\n    return rfc2560.OCSPResponse.encode({\n      responseStatus: status\n    }, 'der')\n  }\n\n  function done (out) {\n    res.writeHead(200, {\n      'Content-Type': 'application/ocsp-response',\n      'Content-Length': out.length\n    })\n    res.end(out)\n  }\n\n  req.on('end', () => {\n    const body = Buffer.concat(chunks)\n    let ocspReq\n    try {\n      ocspReq = rfc2560.OCSPRequest.decode(body, 'der')\n    } catch (e) {\n      return done(errRes('malformed_request'))\n    }\n\n    this.getResponses(ocspReq, (err, responses) => {\n      // Assume not found\n      if (err) {\n        res.writeHead(404)\n        res.end()\n        return\n      }\n\n      return done(responses)\n    })\n  })\n}\n\nclass Server extends httpServer {\n  constructor (options) {\n    super(handler)\n\n    this.options = Object.assign({ nextUpdate: 24 * 3600 * 1e3 }, options)\n\n    this.key = this.options.key\n    this.certroot = rfc5280.Certificate.decode(\n      ocsp.utils.toDER(options.cert, 'CERTIFICATE'),\n      'der')\n    this.cert = this.certroot.tbsCertificate\n\n    const issuerName = rfc5280.Name.encode(this.cert.subject, 'der')\n    const issuerKey = this.cert.subjectPublicKeyInfo.subjectPublicKey.data\n\n    this.certID = {}\n    Object.keys(ocsp.utils.digestRev).forEach(function (digest) {\n      this.certID[digest] = {\n        issuerNameHash: crypto.createHash(digest).update(issuerName).digest(),\n        issuerKeyHash: crypto.createHash(digest).update(issuerKey).digest()\n      }\n    }, this)\n\n    this.certs = {}\n  }\n\n  static create (options) {\n    return new Server(options)\n  }\n\n  addCert (serial, status, info) {\n    this.certs[serial.toString(16)] = {\n      type: status,\n      value: info\n    }\n  }\n\n  getResponses (req, cb) {\n    const reqList = req.tbsRequest.requestList\n\n    // TODO(indutny): support signed requests\n    async.map(reqList, (req, cb) => {\n      this.getResponse(req, cb)\n    }, (err, responses) => {\n      if (err) { return cb(err) }\n\n      // TODO(indutny): send extensions\n      const basic = {\n        tbsResponseData: {\n          version: 'v1',\n          responderID: {\n            type: 'byKey',\n            value: this.certID.sha1.issuerKeyHash\n          },\n          producedAt: new Date(),\n          responses\n        },\n\n        signatureAlgorithm: {\n          algorithm: ocsp.utils.signRev.sha512WithRSAEncryption\n        },\n        signature: null,\n\n        certs: [\n          this.certroot\n        ]\n      }\n\n      const sign = crypto.createSign('sha512WithRSAEncryption')\n      sign.update(rfc2560.ResponseData.encode(basic.tbsResponseData, 'der'))\n      basic.signature = {\n        unused: 0,\n        data: sign.sign(this.key)\n      }\n\n      const res = {\n        responseStatus: 'successful',\n        responseBytes: {\n          responseType: 'id-pkix-ocsp-basic',\n          response: rfc2560.BasicOCSPResponse.encode(basic, 'der')\n        }\n      }\n\n      cb(null, rfc2560.OCSPResponse.encode(res, 'der'))\n    })\n  }\n\n  getResponse (req, cb) {\n    const certID = req.reqCert\n\n    const digestId = certID.hashAlgorithm.algorithm.join('.')\n    const digest = ocsp.utils.digest[digestId]\n    if (!digest) { return cb(new Error('Unknown digest: ' + digestId)) }\n\n    const expectedID = this.certID[digest]\n    if (!expectedID) { return cb(new Error('No pre-generated CertID for digest: ' + digest)) }\n\n    if (expectedID.issuerNameHash.toString('hex') !==\n      certID.issuerNameHash.toString('hex')) {\n      return cb(new Error('Issuer name mismatch'))\n    }\n\n    if (expectedID.issuerKeyHash.toString('hex') !==\n      certID.issuerKeyHash.toString('hex')) {\n      return cb(new Error('Issuer key mismatch'))\n    }\n\n    const serial = certID.serialNumber.toString(16)\n    const cert = this.certs[serial]\n\n    const response = {\n      certId: certID,\n      certStatus: null,\n      thisUpdate: new Date(),\n      nextUpdate: new Date(+new Date() + this.options.nextUpdate)\n    }\n    if (cert) {\n      response.certStatus = cert\n    } else {\n      response.certStatus = {\n        type: 'unknown',\n        value: null\n      }\n    }\n\n    cb(null, response)\n  }\n}\n\nmodule.exports = Server\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@techteamer/ocsp/lib/ocsp/server.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@techteamer/ocsp/lib/ocsp/utils.js":
/*!*********************************************************!*\
  !*** ./node_modules/@techteamer/ocsp/lib/ocsp/utils.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("const http = __webpack_require__(/*! http */ \"http\")\nconst asn1 = __webpack_require__(/*! asn1.js */ \"(rsc)/./node_modules/asn1.js/lib/asn1.js\")\n\nconst rfc2560 = __webpack_require__(/*! asn1.js-rfc2560 */ \"(rsc)/./node_modules/asn1.js-rfc2560/index.js\")\nconst Buffer = (__webpack_require__(/*! buffer */ \"buffer\").Buffer)\n\nexports[\"id-ad-caIssuers\"] = [1, 3, 6, 1, 5, 5, 7, 48, 2]\nexports[\"id-kp-OCSPSigning\"] = [1, 3, 6, 1, 5, 5, 7, 3, 9]\n\nexports.getResponse = function getResponse (uri, req, cb) {\n  const options = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/ocsp-request',\n      'Content-Length': req.length\n    }\n  }\n\n  function done (err, response) {\n    if (cb) { cb(err, response) }\n    cb = null\n  }\n\n  function onResponse (response) {\n    if (response.statusCode < 200 || response.statusCode >= 400) {\n      return done(new Error('Failed to obtain OCSP response: ' + response.statusCode))\n    }\n\n    const chunks = []\n    response.on('readable', function () {\n      const chunk = response.read()\n      if (!chunk) { return }\n      chunks.push(chunk)\n    })\n\n    response.on('end', function () {\n      const ocsp = Buffer.concat(chunks)\n\n      done(null, ocsp)\n    })\n  }\n\n  http.request(uri, options, onResponse)\n    .on('error', done)\n    .end(req)\n}\n\nexports.parseResponse = function parseResponse (raw) {\n  const body = { start: 0, end: raw.length }\n  const response = rfc2560.OCSPResponse.decode(raw, 'der', {\n    track: function (key, start, end, type) {\n      if (type !== 'content' || key !== 'responseBytes/response') {\n        return\n      }\n\n      body.start = start\n      body.end = end\n    }\n  })\n\n  const status = response.responseStatus\n  if (status !== 'successful') {\n    throw new Error('Bad OCSP response status: ' + status)\n  }\n\n  // Unknown response type\n  const responseType = response.responseBytes.responseType\n  if (responseType !== 'id-pkix-ocsp-basic') {\n    throw new Error('Unknown OCSP response type: ' + responseType)\n  }\n\n  const bytes = response.responseBytes.response\n\n  const tbs = { start: body.start, end: body.end }\n  const certsTbs = []\n  const basic = rfc2560.BasicOCSPResponse.decode(bytes, 'der', {\n    track: function (key, start, end, type) {\n      if (type !== 'tagged') {\n        return\n      }\n\n      if (key === 'tbsResponseData') {\n        tbs.start = body.start + start\n        tbs.end = body.start + end\n      } else if (key === 'certs/tbsCertificate') {\n        certsTbs.push({ start: body.start + start, end: body.start + end })\n      }\n    }\n  })\n\n  const OCSPSigning = exports['id-kp-OCSPSigning'].join('.')\n  const certs = (basic.certs || []).filter(function (cert) {\n    return cert.tbsCertificate.extensions.some(function (ext) {\n      if (ext.extnID !== 'extendedKeyUsage') { return false }\n\n      return ext.extnValue.some(function (value) {\n        return value.join('.') === OCSPSigning\n      })\n    })\n  })\n\n  return {\n    start: tbs.start,\n    end: tbs.end,\n    value: basic,\n    certs,\n    certsTbs\n  }\n}\n\nexports.digest = {\n  '1.3.14.3.2.26': 'sha1',\n  '2.16.840.1.101.3.4.2.1': 'sha256'\n}\n\nexports.digestRev = {\n  sha1: '1.3.14.3.2.26',\n  sha256: '2.16.840.1.101.3.4.2.1'\n}\n\nexports.sign = {\n  '1.2.840.113549.1.1.5': 'sha1WithRSAEncryption',\n  '1.2.840.113549.1.1.4': 'md5WithRSAEncryption',\n  '1.2.840.113549.1.1.2': 'md2WithRSAEncryption', // SignatureALG HashMD2 PubKeyALG_RSA\n  '1.2.840.113549.1.1.11': 'sha256WithRSAEncryption',\n  '1.2.840.113549.1.1.12': 'sha384WithRSAEncryption',\n  '1.2.840.113549.1.1.13': 'sha512WithRSAEncryption',\n  '1.2.840.113549.1.1.14': 'sha224WithRSAEncryption',\n  '1.2.840.10040.4.3': 'dsaWithSHA1', // 'SignatureALG HashSHA1 PubKeyALG_DSA'\n  '1.2.840.10045.4.1': 'ecdsa-with-SHA1', // 'SignatureALG HashSHA1 PubKeyALG_EC'\n  '1.2.840.10045.4.3.1': 'SHA224', // 'SignatureALG HashSHA224 PubKeyALG_EC'\n  '1.2.840.10045.4.3.2': 'SHA256', // 'SignatureALG HashSHA256 PubKeyALG_EC'\n  '1.2.840.10045.4.3.3': 'SHA384', // 'SignatureALG HashSHA384 PubKeyALG_EC'\n  '1.2.840.10045.4.3.4': 'SHA512', // 'SignatureALG HashSHA512 PubKeyALG_EC'\n  '2.16.840.1.101.3.4.2.1': 'SHA256', // 'SignatureALG HashSHA256 PubKeyALG_RSAPSS'\n  '2.16.840.1.101.3.4.2.2': 'SHA384', // 'SignatureALG HashSHA384 PubKeyALG_RSAPSS'\n  '2.16.840.1.101.3.4.2.3': 'SHA512', // 'SignatureALG HashSHA512 PubKeyALG_RSAPSS'\n  '2.16.840.1.101.3.4.2.4': 'SHA224', // 'SignatureALG HashSHA224 PubKeyALG_RSAPSS'\n  '2.16.840.1.101.3.4.3.1': 'SHA224', // 'SignatureALG HashSHA224 PubKeyALG_DSA'\n  '2.16.840.1.101.3.4.3.2': 'SHA256' // 'SignatureALG HashSHA256 PubKeyALG_DSA'\n}\n\nexports.signRev = {\n  sha1WithRSAEncryption: [1, 2, 840, 113549, 1, 1, 5],\n  sha256WithRSAEncryption: [1, 2, 840, 113549, 1, 1, 11],\n  sha384WithRSAEncryption: [1, 2, 840, 113549, 1, 1, 12],\n  sha512WithRSAEncryption: [1, 2, 840, 113549, 1, 1, 13]\n}\n\nexports.toPEM = function toPEM (buf, label) {\n  const p = buf.toString('base64')\n  const out = ['-----BEGIN ' + label + '-----']\n  for (let i = 0; i < p.length; i += 64) { out.push(p.slice(i, i + 64)) }\n  out.push('-----END ' + label + '-----')\n  return out.join('\\n')\n}\n\nexports.toDER = function toDER (raw, what) {\n  let der = raw.toString().match(new RegExp('-----BEGIN ' + what + '-----([^-]*)-----END ' + what + '-----'))\n\n  if (der) {\n    der = Buffer.from(der[1].replace(/[\\r\\n]/g, ''), 'base64')\n  } else if (typeof raw === 'string') {\n    der = Buffer.from(raw)\n  } else {\n    der = raw\n  }\n\n  return der\n}\n\nexports.getAuthorityInfo = function getAuthorityInfo (cert, key, done) {\n  let exts = cert.tbsCertificate.extensions\n  if (!exts) { exts = [] }\n\n  const infoAccess = exts.filter(function (ext) {\n    return ext.extnID === 'authorityInformationAccess'\n  })\n\n  if (infoAccess.length === 0) { return done(new Error('AuthorityInfoAccess not found in extensions')) }\n\n  let res = null\n  const found = infoAccess.some(function (info) {\n    const ext = info.extnValue\n\n    return ext.some(function (ad) {\n      if (ad.accessMethod.join('.') !== key) { return false }\n\n      const loc = ad.accessLocation\n      if (loc.type !== 'uniformResourceIdentifier') { return false }\n\n      res = loc.value + ''\n\n      return true\n    })\n  })\n\n  if (!found) { return done(new Error(key + ' not found in AuthorityInfoAccess')) }\n\n  return done(null, res)\n}\n\nconst RSAPrivateKey = asn1.define('RSAPrivateKey', function () {\n  this.seq().obj(\n    this.key('version').int(),\n    this.key('modulus').int(),\n    this.key('publicExponent').int(),\n    this.key('privateExponent').int(),\n    this.key('prime1').int(),\n    this.key('prime2').int(),\n    this.key('exponent1').int(),\n    this.key('exponent2').int(),\n    this.key('coefficient').int()\n  )\n})\nexports.RSAPrivateKey = RSAPrivateKey\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@techteamer/ocsp/lib/ocsp/utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@techteamer/ocsp/lib/ocsp/verify.js":
/*!**********************************************************!*\
  !*** ./node_modules/@techteamer/ocsp/lib/ocsp/verify.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const ocsp = __webpack_require__(/*! ../ocsp */ \"(rsc)/./node_modules/@techteamer/ocsp/lib/ocsp.js\")\nconst rfc5280 = __webpack_require__(/*! asn1.js-rfc5280 */ \"(rsc)/./node_modules/asn1.js-rfc5280/index.js\")\nconst crypto = __webpack_require__(/*! crypto */ \"crypto\")\n\n// TODO(indutny): verify issuer, etc...\nfunction findResponder (issuer, certs, raws) {\n  let issuerKey = issuer.tbsCertificate.subjectPublicKeyInfo\n  issuerKey = ocsp.utils.toPEM(\n    rfc5280.SubjectPublicKeyInfo.encode(issuerKey, 'der'), 'PUBLIC KEY')\n\n  if (certs.length) {\n    const cert = certs[0]\n    const signAlg = ocsp.utils.sign[cert.signatureAlgorithm.algorithm.join('.')]\n    if (!signAlg) {\n      throw new Error('Unknown signature algorithm ' + cert.signatureAlgorithm.algorithm)\n    }\n\n    const verify = crypto.createVerify(signAlg)\n\n    verify.update(raws[0])\n    if (!verify.verify(issuerKey, cert.signature.data)) {\n      throw new Error('Invalid signature')\n    }\n\n    let certKey = cert.tbsCertificate.subjectPublicKeyInfo\n    certKey = ocsp.utils.toPEM(rfc5280.SubjectPublicKeyInfo.encode(certKey, 'der'), 'PUBLIC KEY')\n\n    return certKey\n  }\n\n  return issuerKey\n}\n\nmodule.exports = function verify (options, cb) {\n  function done (err, res) {\n    process.nextTick(() => { cb(err, res) })\n  }\n\n  try {\n    const req = options.request\n\n    const issuer = req.issuer || rfc5280.Certificate.decode(ocsp.utils.toDER(options.issuer, 'CERTIFICATE'), 'der')\n    let res = ocsp.utils.parseResponse(options.response)\n\n    const rawTBS = options.response.slice(res.start, res.end)\n    const certs = res.certs\n    const raws = res.certsTbs.map((tbs) => { return options.response.slice(tbs.start, tbs.end) })\n    res = res.value\n\n    // Verify signature using CAs Public Key\n    const signAlg = ocsp.utils.sign[res.signatureAlgorithm.algorithm.join('.')]\n    if (!signAlg) {\n      done(new Error('Unknown signature algorithm ' + res.signatureAlgorithm.algorithm), res)\n      return\n    }\n\n    const responderKey = findResponder(issuer, certs, raws)\n\n    const verify = crypto.createVerify(signAlg)\n    const tbs = res.tbsResponseData\n    const signature = res.signature.data\n\n    verify.update(rawTBS)\n    if (!verify.verify(responderKey, signature)) { return done(new Error('Invalid signature'), res) }\n\n    if (tbs.responses.length < 1) { return done(new Error('Expected at least one response')) }\n\n    res = tbs.responses[0]\n\n    // Verify CertID\n    // XXX(indutny): verify parameters\n    if (res.certId.hashAlgorithm.algorithm.join('.') !== req.certID.hashAlgorithm.algorithm.join('.')) {\n      return done(new Error('Hash algorithm mismatch'), res)\n    }\n\n    if (res.certId.issuerNameHash.toString('hex') !== req.certID.issuerNameHash.toString('hex')) {\n      return done(new Error('Issuer name hash mismatch'), res)\n    }\n\n    if (res.certId.issuerKeyHash.toString('hex') !== req.certID.issuerKeyHash.toString('hex')) {\n      return done(new Error('Issuer key hash mismatch'), res)\n    }\n\n    if (res.certId.serialNumber.cmp(req.certID.serialNumber) !== 0) {\n      return done(new Error('Serial number mismatch'), res)\n    }\n\n    if (res.certStatus.type !== 'good') {\n      return done(new Error('OCSP Status: ' + res.certStatus.type), res)\n    }\n\n    const now = +new Date()\n    const nudge = options.nudge || 60000\n    if (res.thisUpdate - nudge > now || res.nextUpdate + nudge < now) {\n      return done(new Error('OCSP Response expired'), res)\n    }\n\n    return done(null, res)\n  } catch (e) {\n    return done(e)\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQHRlY2h0ZWFtZXIvb2NzcC9saWIvb2NzcC92ZXJpZnkuanMiLCJtYXBwaW5ncyI6IkFBQUEsYUFBYSxtQkFBTyxDQUFDLGtFQUFTO0FBQzlCLGdCQUFnQixtQkFBTyxDQUFDLHNFQUFpQjtBQUN6QyxlQUFlLG1CQUFPLENBQUMsc0JBQVE7O0FBRS9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSw2QkFBNkIsY0FBYztBQUMzQzs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDZDQUE2QyxtREFBbUQ7QUFDaEc7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLG1EQUFtRDs7QUFFbkQsb0NBQW9DOztBQUVwQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL3dhbmdoYW90YWkvRGVza3RvcC9lbHZlbmxhYi9IVFYvbm9kZV9tb2R1bGVzL0B0ZWNodGVhbWVyL29jc3AvbGliL29jc3AvdmVyaWZ5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IG9jc3AgPSByZXF1aXJlKCcuLi9vY3NwJylcbmNvbnN0IHJmYzUyODAgPSByZXF1aXJlKCdhc24xLmpzLXJmYzUyODAnKVxuY29uc3QgY3J5cHRvID0gcmVxdWlyZSgnY3J5cHRvJylcblxuLy8gVE9ETyhpbmR1dG55KTogdmVyaWZ5IGlzc3VlciwgZXRjLi4uXG5mdW5jdGlvbiBmaW5kUmVzcG9uZGVyIChpc3N1ZXIsIGNlcnRzLCByYXdzKSB7XG4gIGxldCBpc3N1ZXJLZXkgPSBpc3N1ZXIudGJzQ2VydGlmaWNhdGUuc3ViamVjdFB1YmxpY0tleUluZm9cbiAgaXNzdWVyS2V5ID0gb2NzcC51dGlscy50b1BFTShcbiAgICByZmM1MjgwLlN1YmplY3RQdWJsaWNLZXlJbmZvLmVuY29kZShpc3N1ZXJLZXksICdkZXInKSwgJ1BVQkxJQyBLRVknKVxuXG4gIGlmIChjZXJ0cy5sZW5ndGgpIHtcbiAgICBjb25zdCBjZXJ0ID0gY2VydHNbMF1cbiAgICBjb25zdCBzaWduQWxnID0gb2NzcC51dGlscy5zaWduW2NlcnQuc2lnbmF0dXJlQWxnb3JpdGhtLmFsZ29yaXRobS5qb2luKCcuJyldXG4gICAgaWYgKCFzaWduQWxnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gc2lnbmF0dXJlIGFsZ29yaXRobSAnICsgY2VydC5zaWduYXR1cmVBbGdvcml0aG0uYWxnb3JpdGhtKVxuICAgIH1cblxuICAgIGNvbnN0IHZlcmlmeSA9IGNyeXB0by5jcmVhdGVWZXJpZnkoc2lnbkFsZylcblxuICAgIHZlcmlmeS51cGRhdGUocmF3c1swXSlcbiAgICBpZiAoIXZlcmlmeS52ZXJpZnkoaXNzdWVyS2V5LCBjZXJ0LnNpZ25hdHVyZS5kYXRhKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHNpZ25hdHVyZScpXG4gICAgfVxuXG4gICAgbGV0IGNlcnRLZXkgPSBjZXJ0LnRic0NlcnRpZmljYXRlLnN1YmplY3RQdWJsaWNLZXlJbmZvXG4gICAgY2VydEtleSA9IG9jc3AudXRpbHMudG9QRU0ocmZjNTI4MC5TdWJqZWN0UHVibGljS2V5SW5mby5lbmNvZGUoY2VydEtleSwgJ2RlcicpLCAnUFVCTElDIEtFWScpXG5cbiAgICByZXR1cm4gY2VydEtleVxuICB9XG5cbiAgcmV0dXJuIGlzc3VlcktleVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHZlcmlmeSAob3B0aW9ucywgY2IpIHtcbiAgZnVuY3Rpb24gZG9uZSAoZXJyLCByZXMpIHtcbiAgICBwcm9jZXNzLm5leHRUaWNrKCgpID0+IHsgY2IoZXJyLCByZXMpIH0pXG4gIH1cblxuICB0cnkge1xuICAgIGNvbnN0IHJlcSA9IG9wdGlvbnMucmVxdWVzdFxuXG4gICAgY29uc3QgaXNzdWVyID0gcmVxLmlzc3VlciB8fCByZmM1MjgwLkNlcnRpZmljYXRlLmRlY29kZShvY3NwLnV0aWxzLnRvREVSKG9wdGlvbnMuaXNzdWVyLCAnQ0VSVElGSUNBVEUnKSwgJ2RlcicpXG4gICAgbGV0IHJlcyA9IG9jc3AudXRpbHMucGFyc2VSZXNwb25zZShvcHRpb25zLnJlc3BvbnNlKVxuXG4gICAgY29uc3QgcmF3VEJTID0gb3B0aW9ucy5yZXNwb25zZS5zbGljZShyZXMuc3RhcnQsIHJlcy5lbmQpXG4gICAgY29uc3QgY2VydHMgPSByZXMuY2VydHNcbiAgICBjb25zdCByYXdzID0gcmVzLmNlcnRzVGJzLm1hcCgodGJzKSA9PiB7IHJldHVybiBvcHRpb25zLnJlc3BvbnNlLnNsaWNlKHRicy5zdGFydCwgdGJzLmVuZCkgfSlcbiAgICByZXMgPSByZXMudmFsdWVcblxuICAgIC8vIFZlcmlmeSBzaWduYXR1cmUgdXNpbmcgQ0FzIFB1YmxpYyBLZXlcbiAgICBjb25zdCBzaWduQWxnID0gb2NzcC51dGlscy5zaWduW3Jlcy5zaWduYXR1cmVBbGdvcml0aG0uYWxnb3JpdGhtLmpvaW4oJy4nKV1cbiAgICBpZiAoIXNpZ25BbGcpIHtcbiAgICAgIGRvbmUobmV3IEVycm9yKCdVbmtub3duIHNpZ25hdHVyZSBhbGdvcml0aG0gJyArIHJlcy5zaWduYXR1cmVBbGdvcml0aG0uYWxnb3JpdGhtKSwgcmVzKVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY29uc3QgcmVzcG9uZGVyS2V5ID0gZmluZFJlc3BvbmRlcihpc3N1ZXIsIGNlcnRzLCByYXdzKVxuXG4gICAgY29uc3QgdmVyaWZ5ID0gY3J5cHRvLmNyZWF0ZVZlcmlmeShzaWduQWxnKVxuICAgIGNvbnN0IHRicyA9IHJlcy50YnNSZXNwb25zZURhdGFcbiAgICBjb25zdCBzaWduYXR1cmUgPSByZXMuc2lnbmF0dXJlLmRhdGFcblxuICAgIHZlcmlmeS51cGRhdGUocmF3VEJTKVxuICAgIGlmICghdmVyaWZ5LnZlcmlmeShyZXNwb25kZXJLZXksIHNpZ25hdHVyZSkpIHsgcmV0dXJuIGRvbmUobmV3IEVycm9yKCdJbnZhbGlkIHNpZ25hdHVyZScpLCByZXMpIH1cblxuICAgIGlmICh0YnMucmVzcG9uc2VzLmxlbmd0aCA8IDEpIHsgcmV0dXJuIGRvbmUobmV3IEVycm9yKCdFeHBlY3RlZCBhdCBsZWFzdCBvbmUgcmVzcG9uc2UnKSkgfVxuXG4gICAgcmVzID0gdGJzLnJlc3BvbnNlc1swXVxuXG4gICAgLy8gVmVyaWZ5IENlcnRJRFxuICAgIC8vIFhYWChpbmR1dG55KTogdmVyaWZ5IHBhcmFtZXRlcnNcbiAgICBpZiAocmVzLmNlcnRJZC5oYXNoQWxnb3JpdGhtLmFsZ29yaXRobS5qb2luKCcuJykgIT09IHJlcS5jZXJ0SUQuaGFzaEFsZ29yaXRobS5hbGdvcml0aG0uam9pbignLicpKSB7XG4gICAgICByZXR1cm4gZG9uZShuZXcgRXJyb3IoJ0hhc2ggYWxnb3JpdGhtIG1pc21hdGNoJyksIHJlcylcbiAgICB9XG5cbiAgICBpZiAocmVzLmNlcnRJZC5pc3N1ZXJOYW1lSGFzaC50b1N0cmluZygnaGV4JykgIT09IHJlcS5jZXJ0SUQuaXNzdWVyTmFtZUhhc2gudG9TdHJpbmcoJ2hleCcpKSB7XG4gICAgICByZXR1cm4gZG9uZShuZXcgRXJyb3IoJ0lzc3VlciBuYW1lIGhhc2ggbWlzbWF0Y2gnKSwgcmVzKVxuICAgIH1cblxuICAgIGlmIChyZXMuY2VydElkLmlzc3VlcktleUhhc2gudG9TdHJpbmcoJ2hleCcpICE9PSByZXEuY2VydElELmlzc3VlcktleUhhc2gudG9TdHJpbmcoJ2hleCcpKSB7XG4gICAgICByZXR1cm4gZG9uZShuZXcgRXJyb3IoJ0lzc3VlciBrZXkgaGFzaCBtaXNtYXRjaCcpLCByZXMpXG4gICAgfVxuXG4gICAgaWYgKHJlcy5jZXJ0SWQuc2VyaWFsTnVtYmVyLmNtcChyZXEuY2VydElELnNlcmlhbE51bWJlcikgIT09IDApIHtcbiAgICAgIHJldHVybiBkb25lKG5ldyBFcnJvcignU2VyaWFsIG51bWJlciBtaXNtYXRjaCcpLCByZXMpXG4gICAgfVxuXG4gICAgaWYgKHJlcy5jZXJ0U3RhdHVzLnR5cGUgIT09ICdnb29kJykge1xuICAgICAgcmV0dXJuIGRvbmUobmV3IEVycm9yKCdPQ1NQIFN0YXR1czogJyArIHJlcy5jZXJ0U3RhdHVzLnR5cGUpLCByZXMpXG4gICAgfVxuXG4gICAgY29uc3Qgbm93ID0gK25ldyBEYXRlKClcbiAgICBjb25zdCBudWRnZSA9IG9wdGlvbnMubnVkZ2UgfHwgNjAwMDBcbiAgICBpZiAocmVzLnRoaXNVcGRhdGUgLSBudWRnZSA+IG5vdyB8fCByZXMubmV4dFVwZGF0ZSArIG51ZGdlIDwgbm93KSB7XG4gICAgICByZXR1cm4gZG9uZShuZXcgRXJyb3IoJ09DU1AgUmVzcG9uc2UgZXhwaXJlZCcpLCByZXMpXG4gICAgfVxuXG4gICAgcmV0dXJuIGRvbmUobnVsbCwgcmVzKVxuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGRvbmUoZSlcbiAgfVxufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@techteamer/ocsp/lib/ocsp/verify.js\n");

/***/ })

};
;